<html>
<head>
<link rel="Stylesheet" type="text/css" href="../../DocStyle.css" />
<title>Vczh Library++ 容器</title>
</head>
<body>
<h1>namespace vl::collections;</h1>
<h2><a name="IEnumerator">IEnumerator&lt;T&gt;</a></h2>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">IEnumerator&lt;T&gt;* Clone()const</td></tr>
<tr><td>[返回值]</td><td>复制一个具有同样状态的迭代器</td></tr>

<tr><td colspan="2" class="method_sign">const T& Current()const</td></tr>
<tr><td>[返回值]</td><td>迭代器的当前对象</td></tr>

<tr><td colspan="2" class="method_sign">int Index()const</td></tr>
<tr><td>[返回值]</td><td>迭代器的当前位置</td></tr>

<tr><td colspan="2" class="method_sign">bool Next()</td></tr>
<tr><td>[返回值]</td><td>把迭代器移动到下一个对象</td></tr>

<tr><td colspan="2" class="method_sign">bool Available()const</td></tr>
<tr><td>[返回值]</td><td>判断当前迭代器是否指向了一个有效位置</td></tr>

<tr><td colspan="2" class="method_sign">void Reset()</td></tr>
<tr><td>[返回值]</td><td>重置到初始状态</td></tr>
</tbody>
</table>
<h2><a name="IEnumerable">IEnumerable&lt;T&gt;</a></h2>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">IEnumerator&lt;T&gt;* CreateEnumerator()const</td></tr>
<tr><td>[返回值]</td><td>创建一个可以迭代自己的迭代器</td></tr>
</tbody>
</table>
<h2><a name="IReadonlyList">IReadonlyList&lt;T, K&gt; : public IEnumerable&lt;T&gt;</a></h2>
<p>Default K == typename KeyType&lt;T&gt;::Type</p>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">bool Contains(const K& item)const</td></tr>
<tr><td>[返回值]</td><td>判断列表是否包含某个对象</td></tr>
<tr><td>item</td><td>查找的对象</td></tr>

<tr><td colspan="2" class="method_sign">int Count()const</td></tr>
<tr><td>[返回值]</td><td>返回列表对象数量</td></tr>

<tr><td colspan="2" class="method_sign">const T& Get(int index)const</td></tr>
<tr><td>[返回值]</td><td>获得列表中某个位置的对象</td></tr>
<tr><td>index</td><td>查找的位置</td></tr>

<tr><td colspan="2" class="method_sign">const T& operator[](int index)const</td></tr>
<tr><td>[返回值]</td><td>获得列表中某个位置的对象</td></tr>
<tr><td>index</td><td>查找的位置</td></tr>

<tr><td colspan="2" class="method_sign">int IndexOf(const K& item)const</td></tr>
<tr><td>[返回值]</td><td>获得对象在列表中的位置，不存在则返回-1</td></tr>
<tr><td>item</td><td>查找的对象</td></tr>
</tbody>
</table>
<h2><a name="IArray">IArray&lt;T, K&gt; : public IReadonlyList&lt;T, K&gt;</a></h2>
<p>Default K == typename KeyType&lt;T&gt;::Type</p>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">void Set(int index, const K& item)</td></tr>
<tr><td>index</td><td>替换对象的位置</td></tr>
<tr><td>item</td><td>替换的对象</td></tr>

<tr><td colspan="2" class="method_sign">T& operator[](int index)</td></tr>
<tr><td>[返回值]</td><td>获得列表总某个位置的对象</td></tr>
<tr><td>index</td><td>查找的位置</td></tr>

<tr><td colspan="2" class="method_sign">void Resize(int size)</td></tr>
<tr><td>item</td><td>重置数组的大小</td></tr>
</tbody>
</table>
<h2><a name="ICollection">ICollection&lt;T, K&gt; : public IReadonlyList&lt;T, K&gt;</a></h2>
<p>Default K == typename KeyType&lt;T&gt;::Type</p>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">int Add(const T& item)</td></tr>
<tr><td>item</td><td>添加进集合的新对象</td></tr>

<tr><td colspan="2" class="method_sign">bool Remove(const K& item)</td></tr>
<tr><td>[返回值]</td><td>删除一个对象，返回true代表删除了一个存在的对象</td></tr>
<tr><td>item</td><td>删除的对象</td></tr>

<tr><td colspan="2" class="method_sign">bool RemoveAt(int index)</td></tr>
<tr><td>[返回值]</td><td>删除某个位置的对象，返回true代表删除了一个存在的对象</td></tr>
<tr><td>index</td><td>删除的对象的位置</td></tr>

<tr><td colspan="2" class="method_sign">bool RemoveRange(int index, int count)</td></tr>
<tr><td>[返回值]</td><td>删除某个位置返回的对象，返回true代表删除了指定范围的对象</td></tr>
<tr><td>index</td><td>指定范围的开始位置</td></tr>
<tr><td>count</td><td>指定范围的对象数量</td></tr>

<tr><td colspan="2" class="method_sign">bool Clear()</td></tr>
<tr><td>[返回值]</td><td>True for objects are cleared successfully, otherwise false.</td></tr>
</tbody>
</table>
<h2><a name="IList">IList&lt;T, K&gt; : public ICollection&lt;T, K&gt;</a></h2>
<p>Default K == typename KeyType&lt;T&gt;::Type</p>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">int Insert(int index, const T& item)</td></tr>
<tr><td>[返回值]</td><td>返回真正插入的位置</td></tr>
<tr><td>index</td><td>插入的位置</td></tr>
<tr><td>item</td><td>插入的对象</td></tr>

<tr><td colspan="2" class="method_sign">void Set(int index, const K& item)</td></tr>
<tr><td>index</td><td>替换对象的位置</td></tr>
<tr><td>item</td><td>替换的对象</td></tr>

<tr><td colspan="2" class="method_sign">T& operator[](int index)</td></tr>
<tr><td>[返回值]</td><td>获得列表某个位置的对象</td></tr>
<tr><td>index</td><td>查找的位置</td></tr>
</tbody>
</table>
<h2><a name="IReadonlyDictionary">IReadonlyDictionary&lt;KT, VT, KK, VK&gt; : public IEnumerable&lt;Pair&lt;T, K&gt;&gt;</a></h2>
<p>Default KK == typename KeyType&lt;KT&gt;::Type</p>
<p>Default VK == typename KeyType&lt;VT&gt;::Type</p>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">const IReadonlyList&lt;KT, KK&gt;& Keys()const</td></tr>
<tr><td>[返回值]</td><td>映射表中的所有键</td></tr>

<tr><td colspan="2" class="method_sign">const IReadonlyList&lt;VT, VK&gt;& Values()const</td></tr>
<tr><td>[返回值]</td><td>映射表中的所有值</td></tr>

<tr><td colspan="2" class="method_sign">int Count()const</td></tr>
<tr><td>[返回值]</td><td>映射表中所有键值对的数量</td></tr>

<tr><td colspan="2" class="method_sign">const VT& Get(const KK& key)const</td></tr>
<tr><td>[返回值]</td><td>返回某个键对应的值</td></tr>
<tr><td>key</td><td>查找的键</td></tr>

<tr><td colspan="2" class="method_sign">const VT& operator[](const KK& key)const</td></tr>
<tr><td>[返回值]</td><td>Value associated with the key.</td></tr>
<tr><td>key</td><td>The key to get the value.</td></tr>
</tbody>
</table>
<h2><a name="IDictionary">IDictionary&lt;KT, VT, KK, VK&gt; : public IReadonlyDictionary&lt;KT, VT, KK, VK&gt;</a></h2>
<p>Default KK == typename KeyType&lt;KT&gt;::Type</p>
<p>Default VK == typename KeyType&lt;VT&gt;::Type</p>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">描述</td><td>参数</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">bool Set(const KK& key, const VT& value)</td></tr>
<tr><td>[返回值]</td><td>将一个值关联到一个键上</td></tr>
<tr><td>key</td><td>被关联的键</td></tr>
<tr><td>value</td><td>关联的值</td></tr>

<tr><td colspan="2" class="method_sign">bool Add(const KT& key, const VT& value)</td></tr>
<tr><td>[返回值]</td><td>将一个值关联到一个新键上</td></tr>
<tr><td>key</td><td>被关联的键</td></tr>
<tr><td>value</td><td>关联的值</td></tr>

<tr><td colspan="2" class="method_sign">bool Remove(const KK& key)</td></tr>
<tr><td>[返回值]</td><td>删除某个键对应的键值对</td></tr>
<tr><td>key</td><td>被删除的键</td></tr>

<tr><td colspan="2" class="method_sign">bool Clear()</td></tr>
<tr><td>[返回值]</td><td>返回true代表清除所有键值对成功</td></tr>
</tbody>
</table>
<h2><a name="IReadonlyGroup">IReadonlyGroup&lt;KT, VT, KK, VK&gt; : public IEnumerable&lt;Pair&lt;T, K&gt;&gt;</a></h2>
<p>Default KK == typename KeyType&lt;KT&gt;::Type</p>
<p>Default VK == typename KeyType&lt;VT&gt;::Type</p>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">const IReadonlyList&lt;KT, KK&gt;& Keys()const</td></tr>
<tr><td>[返回值]</td><td>多映射表的所有键</td></tr>

<tr><td colspan="2" class="method_sign">int Count()const</td></tr>
<tr><td>[返回值]</td><td>多映射表中键的数量</td></tr>

<tr><td colspan="2" class="method_sign">const IReadonlyList&lt;VT, VK&gt;& Get(const KK& key)const</td></tr>
<tr><td>[返回值]</td><td>返回键对应的所有值</td></tr>
<tr><td>key</td><td>查找的键</td></tr>

<tr><td colspan="2" class="method_sign">const IReadonlyList&lt;VT, VK&gt;& GetByIndex(int index)const</td></tr>
<tr><td>[返回值]</td><td>返回某个位置关联的键对应的所有值</td></tr>
<tr><td>index</td><td>查找的键的位置</td></tr>

<tr><td colspan="2" class="method_sign">const IReadonlyList&lt;VT, VK&gt;& operator[](const KK& key)const</td></tr>
<tr><td>[返回值]</td><td>返回键对应的所有值</td></tr>
<tr><td>key</td><td>查找的键的位置.</td></tr>

<tr><td colspan="2" class="method_sign">bool Contains(const KK& key)const</td></tr>
<tr><td>[返回值]</td><td>返回true代表至少有一个值被关联到这个键上</td></tr>
<tr><td>key</td><td>查找的键</td></tr>

<tr><td colspan="2" class="method_sign">bool Contains(const KK& key, const VK& value)const</td></tr>
<tr><td>[返回值]</td><td>返回true代表某个值被关联到这个键上</td></tr>
<tr><td>key</td><td>查找的键</td></tr>
<tr><td>value</td><td>查找的值</td></tr>
</tbody>
</table>
<h2><a name="IGroup">IGroup&lt;KT, VT, KK, VK&gt; : public IReadonlyGroup&lt;KT, VT, KK, VK&gt;</a></h2>
<p>Default KK == typename KeyType&lt;KT&gt;::Type</p>
<p>Default VK == typename KeyType&lt;VT&gt;::Type</p>
<table>
<thead><tr><td colspan="2" style="text-align:center; font-weight:bold">成员函数</td></tr>
<tr><td style="width:100">参数</td><td>描述</td></tr></thead>
<tbody>
<tr><td colspan="2" class="method_sign">bool Add(const KT& key, const VT& value)</td></tr>
<tr><td>[返回值]</td><td>将一个值关联到一个键上</td></tr>
<tr><td>key</td><td>被关联的键</td></tr>
<tr><td>value</td><td>关联的值</td></tr>

<tr><td colspan="2" class="method_sign">bool Remove(const KK& key)</td></tr>
<tr><td>[返回值]</td><td>返回true代表成功删除了一个键对应的所有值</td></tr>
<tr><td>key</td><td>删除的键</td></tr>

<tr><td colspan="2" class="method_sign">bool Remove(const KK& key, const VK& value)</td></tr>
<tr><td>[返回值]</td><td>返回true代表成功删除了跟键关联的某个值</td></tr>
<tr><td>key</td><td>删除的键</td></tr>
<tr><td>value</td><td>删除的值</td></tr>

<tr><td colspan="2" class="method_sign">bool Clear()</td></tr>
<tr><td>[返回值]</td><td>返回true代表成功清除了所有键值对</td></tr>
</tbody>
</table>
</body>
</html>