cbuffer MatrixBuffer : register(b0)
{
    matrix worldMatrix;
    matrix viewMatrix;
    matrix projectionMatrix;
	float4 lightPosition;
	float4 lightColor;
	float lightMinimumDistanceSquare;
	float4 environmentColor;
};

struct VIn
{
	float4 position : POSITION;
	float4 color : COLOR;
};

struct PIn
{
    float4 position : SV_POSITION;
	float4 worldPosition : POSITION;
    float4 color : COLOR;
};

PIn VShader(VIn input)
{
    PIn output;
    input.position.w = 1.0f;

    output.position = mul(input.position, worldMatrix);
	output.worldPosition = output.position;
    output.position = mul(output.position, viewMatrix);
    output.position = mul(output.position, projectionMatrix);
    
    output.color = input.color;
    
    return output;
}

float4 PShader(PIn input) : SV_TARGET
{
	float4 materialColor=input.color;
	float4 color=materialColor;
	return color;
}