cbuffer MatrixBuffer : register(b0)
{
    matrix worldMatrix;
    matrix viewMatrix;
    matrix projectionMatrix;
};

struct VIn
{
	float4 position : POSITION;
	float3 normal : NORMAL;
	float4 color : COLOR;
	uint id : TEXCOORD;
};

struct PIn
{
    float4 position : SV_POSITION;
	float3 viewNormal : NORMAL;
    float4 color : COLOR;
};

Texture2D<uint> selectorTexture : register(t0);

PIn VShader(VIn input)
{
    PIn output;
    input.position.w = 1.0f;

    output.position = mul(input.position, worldMatrix);
    output.position = mul(output.position, viewMatrix);
    output.position = mul(output.position, projectionMatrix);
    
	output.viewNormal = mul(input.normal, (float3x3)worldMatrix);
	output.viewNormal = mul(output.viewNormal, (float3x3)viewMatrix);
	output.viewNormal = normalize(output.viewNormal);

    output.color = input.color;
    
    return output;
}

float4 PShader(PIn input) : SV_TARGET
{
	float4 materialColor = input.color;
	float3 lightDirection = normalize(float3(1, 1, -1));
	float brightness = 0.5 + max(0, dot(input.viewNormal, lightDirection))*0.5;

	float4 color = materialColor * brightness;

	color.a=1.0;
	return color;
}

float4 PShaderSelected(PIn input) : SV_TARGET
{
	float4 materialColor = input.color;
	float3 lightDirection = normalize(float3(1, 1, -1));
	float brightness = 0.5 + max(0, dot(input.viewNormal, lightDirection))*0.5;

	float4 color = materialColor * brightness;

	uint selectedModel = selectorTexture.Load(int3(input.position.x, input.position.y, 0));
	if(selectedModel==1)
	{
		uint counter=0;
		for(int i=-2;i<=2;i++)
		{
			for(int j=-2;j<=2;j++)
			{
				uint selected = selectorTexture.Load(int3(input.position.x+i, input.position.y+j, 0));
				counter += selected;
			}
		}

		float selectedBlend = 0.7*counter/25.0;
		float4 selectedColor = float4(1.0, 0.5, 0.0, 1.0);
		color = color * selectedBlend + selectedColor * (1-selectedBlend);
	}

	color.a=1.0;
	return color;
}