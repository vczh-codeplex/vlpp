unit Main;

concept T : Eq
{
    Equals = function bool(T, T);
    NotEquals = function bool(T, T);
}

instance int : Eq
{
    Equals = IntEquals;
    NotEquals = IntNotEquals;
}

function bool IntEquals(int a, int b)
{
    result = a == b;
}

function bool IntNotEquals(int a, int b)
{
    result = a != b;
}

generic<U>
structure Vector
{
    U X;
    U Y;
}

generic<V> where V : Eq
instance Vector : Eq
{
    Equals = VectorEquals<V>;
    NotEquals=VectorNotEquals<V>;
}

generic<W> where W : Eq
function bool VectorEquals(Vector<W> a, Vector<W> b)
{
    variable bool x_equals = Eq<W>::Equals(a.X, b.X);
    variable bool y_equals = Eq<W>::Equals(a.Y, b.Y);
    result = x_equals && y_equals;
}

generic<W> where W : Eq
function bool VectorNotEquals(Vector<W> a, Vector<W> b)
{
    result = !VectorEquals<W>(a, b);
}

function int main1()
{
    variable Vector<int> v1;
    variable Vector<int> v2;
    v1.X = 0;
    v1.Y = 1;
    v2.X = 2;
    v2.Y = 3;
    if(Eq<Vector<int>>::Equals(v1, v2))
    {
        result = 1;
    }
    else
    {
        result = 0;
    }
}

function int main2()
{
    variable Vector<int> v1;
    variable Vector<int> v2;
    variable function bool(Vector<int>, Vector<int>) f = Eq<Vector<int>>::NotEquals;
    v1.X = 0;
    v1.Y = 1;
    v2.X = 2;
    v2.Y = 3;
    if(f(v1, v2))
    {
        result = 1;
    }
    else
    {
        result = 0;
    }
}

function int main()
{
    result = main1() + main2();
}