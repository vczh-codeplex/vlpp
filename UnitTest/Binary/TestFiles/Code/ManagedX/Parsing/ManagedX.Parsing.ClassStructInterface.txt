namespace System
{
    namespace Attributes
    {
        class X{}
        public class X{}
        abstract class X{}
        public abstract class X{}

        [Serializable]
        public class X{}

        generic<in out T>
        public class X{}

        [Serializable]
        generic<in out T>
        public class X{}
    }

    namespace Types
    {
        public class X{}
        public struct X : A{}
        public interface X : A, B{}
    }

    namespace Members
    {
        class FieldMembers
        {
            [Serializable]
            public int a;

            public static const int b = 0;
            public static readonly int c = 0;
            int d;
        }

        class PropertyMembers
        {
            [Serializable]
            public int a{get;set;}

            public static sealed int IB::b{get; private set;}

            public static abstract int c{}
            public static virtual int c{get throw new NotImplementedException();}
            public static override int c{set throw new NotImplementedException();}

            private int x;
            public int X
            {
                get
                {
                    result=this.x;
                }
                set
                {
                    this.x=value;
                }
            }
        }

        class OperatorMembers
        {
            [Serializable]
            generic<in out T>
            public static sealed implicit as T() throw new ImpossibleException();
            
            [Serializable]
            generic<in out T>
            public static sealed explicit as T() throw new ImpossibleException();

            public as string()
            {
                return this.ToString();
            }
        }

		class MethodMembers
		{
			[Serializable]
			generic<in out T>
			public static sealed external string IToString::ToString(string format="");

			public void Make()
			{
			}

			public void Make(int a, int b)
			{
			}

			public void Make(int a, int b=0)
			{
			}
		}

		class ConstructorMembers
		{
			[Serializable]
			public implicit constructor(string s)
				:base(a, ref b, out c)
			{
				throw new ImpossibleException();
			}

			public explicit constructor(string s)
			{
				throw new ImpossibleException();
			}

			public constructor(string s)
			{
				throw new ImpossibleException();
			}
		}

        class DeclarationMembers
        {
            class X{}
            public class X{}
            abstract class X{}
            public abstract class X{}

            [Serializable]
            public class X{}

            generic<in out T>
            public class X{}

            [Serializable]
            generic<in out T>
            public class X{}

            public class X{}
            public struct X : A{}
            public interface X : A, B{}

            [Serializable]
            [Serializable()]
            [Serializable(1, 2, 3)]
            [Serializable(a:1, b:2, c:3)]
            [Serializable(1, 2, 3, a:1, b:2, c:3)]
	        public enum Season
	        {
		        Spring,
		        Summer,
		        Autumn,
		        Winter
	        }

	        protected internal enum switch FileAttributes
	        {
		        None = 0,
		        Readonly,
		        System,
		        Hidden
	        }

	        public using SINT8 = sbyte;
	        protected using UINT8 = byte;
	        private using SINT16 = short;
	        internal using UINT16 = word;
	        protected internal using SINT32 = int;
	        using UINT32 = uint;
	        using SINT64 = long;
	        using UINT64 = ulong;
	        using CHAR = char;
	        using STRING = string;
	        using FLOAT = float;
	        using DOUBLE = double;
	        using BOOL = bool;
	        using OBJECT = object;
	        using VOID = void;
	        using INTPTR = intptr;
	        using UINTPTR = uintptr;

            using StringList = List<string>;
            using StringMap = Dictionary<int, string>;
            using IntArray = int[];
            using VarMatrix = var[,];
            using DynamicCube = dynamic[,,];
            using E1 = event();
            using E2 = event(Control);
            using E3 = event(object, EventArgs);
            using F1 = function int();
            using F2 = function int(string);
            using F3 = function int(float, double);

            generic<in out T>
            using ListWrapper = List<T>;

            generic<
                in out A,
                in B : new() ,
                out C : IEnumerable<int> ,
                in out D : IEnumerable<int>, new()
                >
            using What = NoIdea<List<A>, Dictionary<B, C>, D>;
        }
    }
}