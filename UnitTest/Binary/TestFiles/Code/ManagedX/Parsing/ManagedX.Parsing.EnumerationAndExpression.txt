using System;

namespace enumerations
{
    [Serializable]
    [Serializable()]
    [Serializable(1, 2, 3)]
    [Serializable(a:1, b:2, c:3)]
    [Serializable(1, 2, 3, a:1, b:2, c:3)]
	public enum Season
	{
		Spring,
		Summer,
		Autumn,
		Winter
	}

	protected internal enum switch FileAttributes
	{
		None = 0,
		Readonly,
		System,
		Hidden
	}

	enum Constants
	{
		Null = null,
		Integer = 0,
		Float = 3.14,
		True = true,
		False = false,
		Char = 'v',
		String = "vczh is genius!",
        Id1 = criticalSection,
        Id2 = @lock,
        Member1 = global::System.String.Empty,
        Member2 = string.Empty,
        Inst1 = global::System.Collections.List<int>,
        Inst2 = global::System.Enumerable.Aggregate<string, int>.GetType.Cast<object>,
        Invoke1 = a(),
        Invoke2 = a(1),
        Invoke3 = a(ref i, out 2, a:3, b:4),
        NewObject1 = new Box(),
        NewObject2 = new Box(1, 2, 3, 4),
        NewObject3 = new Box(1, 2, 3, 4)
        {
            Name = "vczh",
            Description = "genius"
        },
        This = this,
        Base = base,
        Value = value,
        Result = result,

        exp1 = +-!~++--a++--,
        exp2 = a*b/c%d++--,
        exp3 = a+b-c*d/e%f,
        exp4 = a<<b>>c+d-e,
        exp5 = a<b<=c>d>=e<<h>>i as f is g,
        exp6 = a==b!=c<d<=e>f>=g as h is i,
        exp7 = a&b==c!=d,
        exp8 = a^b&c,
        exp9 = a|b^c,
        exp10 = a&&b|c,
        exp11 = a||b&&c,
        exp12 = a??b||c,
        exp13 = a??b?c??d:e??f,
        exp14 = a+=b-=c*=d/=e%=f&&=g&=h||=i|=j^=k<<=l>>=m=n,

        Typeof = typeof(string),
        NewArray1 = new string[10],
        NewArray2 = new string[RowCount, ColCount],
        Index1 = stringArray[5],
        Index2 = stringArray[row, col],

        Lambda1 = x=>x+1,
        Lambda2 = ()=>0,
        Lambda3 = (x)=>x+1,
        Lambda4 = (x,y)=>x+y,
        Lambda5 = function int(int x, int y){result = x+y; exit;},

        Statements = ()=>
        {
            Invoke();
            {
                break;
                continue;
                exit;
            }
            const int a;
            int b;
            const int c=10;
            int d=10;

            if (true) exit;
            if (true)
            {
                print("A");
            }
            else
            {
                print("B");
            }

            while(true)
            {
                exit;
            }when(false);
            do
            {
                exit;
            }while(false);
            while(true) exit;

            for(;;);
            for(int i=0;i<100;i++) result++;
            for(int i=0,int j=0;i+j<200;i++,j++) result+=i+j;

            try throw new Exception();
            try
            {
                throw new Exception();
            }
            catch(InvalidOperationException ex)
            {
                throw;
            }
            catch(Exception)
            {
                throw;
            }
            finally
            {
                throw new Exception();
            }
        },

        Last = fuck
	}
}