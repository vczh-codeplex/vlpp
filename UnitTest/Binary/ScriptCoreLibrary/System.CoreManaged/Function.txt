namespace System
{
	public abstract class Delegate
	{
		public abstract object Invoke(params object[] arguments);
	}
 
	public abstract class DelegateTarget
	{
		public intptr FunctionObject{get; protected set;}
		public abstract object Invoke(object thisObject, params object[] arguments);
 
		public override bool Equals(object o)
		{
			try
			{
				return this.FunctionObject==(o as DelegateTarget).FunctionObject;
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
	}
 
	public class MethodDelegate : Delegate
	{
		public object ThisObject{get; protected set;}
		public DelegateTarget Target{get; protected set;}
 
		public constructor(object thisObject, DelegateTarget target)
		{
			this.ThisObject=thisObject;
			this.Target=target;
		}
 
		public override bool Equals(object o)
		{
			try
			{
				MethodDelegate t=o as MethodDelegate;
				return this.Target==t.Target && this.ThisObject==t.ThisObject;
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		public override object Invoke(params object[] arguments)
		{
			return this.Target.Invoke(this.ThisObject, arguments);
		}
	}
 
	public class BroadcastDelegate : Delegate
	{
		private class DelegateLink
		{
			public Delegate invokee;
			public int counter;
			DelegateLink previous;
			DelegateLink next;
		}
 
		private DelegateLink first;
		private DelegateLink last;
 
		private DelegateLink FindDelegate(Delegate delegate)
		{
			if(this.first==null) return null;
			else
			{
				DelegateLink current=this.first;
				while(current!=null)
				{
					bool found=current.invokee.Equals(delegate);
					if(found)
					{
						return current;
					}
				}
				return null;
			}
		}
 
		protected void Add(Delegate delegate)
		{
			DelegateLink link=FindDelegate(delegate);
			if(link!=null)
			{
				link=new DelegateLink();
				link.invokee=delegate;
				if(this.first==null)
				{
					this.first=link;
					this.last=link;
				}
				else
				{
					this.last.next=link;
					link.previous=this.last;
					this.last=link;
				}
			}
			link.counter++;
		}
 
		protected void Remove(Delegate delegate)
		{
			DelegateLink link=FindDelegate(delegate);
			if(link!=null)
			{
				if((--link.counter)==0)
				{
					if(link==this.first)
					{
						this.first=link.next;
					}
					else
					{
						link.previous.next=link.next;
					}
					if(link==this.last)
					{
						this.last=link.previous;
					}
					else
					{
						link.next.previous=link.previous;
					}
				}
			}
		}
 
		public override object Invoke(params object[] arguments)
		{
			return new NotImplementedException();
		}
	}
 
	generic<inout R>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()()
		{
			return Invoke() as R;
		}
	}
 
 	generic<inout R, inout T0>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0)
		{
			return Invoke(p0) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1)
		{
			return Invoke(p0, p1) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1, inout T2>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1, T2 p2)
		{
			return Invoke(p0, p1, p2) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1, inout T2, inout T3>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1, T2 p2, T3 p3)
		{
			return Invoke(p0, p1, p2, p3) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1, inout T2, inout T3, inout T4>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4)
		{
			return Invoke(p0, p1, p2, p3, p4) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1, inout T2, inout T3, inout T4, inout T5>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)
		{
			return Invoke(p0, p1, p2, p3, p4, p5) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)
		{
			return Invoke(p0, p1, p2, p3, p4, p5, p6) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)
		{
			return Invoke(p0, p1, p2, p3, p4, p5, p6, p7) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7, inout T8>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)
		{
			return Invoke(p0, p1, p2, p3, p4, p5, p6, p7, p8) as R;
		}
	}
 
 	generic<inout R, inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7, inout T8, inout T9>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual R operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)
		{
			return Invoke(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) as R;
		}
	}
 
 
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()()
		{
			Invoke();
		}
	}
 
 
	generic<inout T0>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0)
		{
			Invoke(p0);
		}
	}
 
 	generic<inout T0, inout T1>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1)
		{
			Invoke(p0, p1);
		}
	}
 
 	generic<inout T0, inout T1, inout T2>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1, T2 p2)
		{
			Invoke(p0, p1, p2);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3)
		{
			Invoke(p0, p1, p2, p3);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4)
		{
			Invoke(p0, p1, p2, p3, p4);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)
		{
			Invoke(p0, p1, p2, p3, p4, p5);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)
		{
			Invoke(p0, p1, p2, p3, p4, p5, p6);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)
		{
			Invoke(p0, p1, p2, p3, p4, p5, p6, p7);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7, inout T8>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)
		{
			Invoke(p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7, inout T8, inout T9>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
 
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)
		{
			Invoke(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}
	}
 
 
	public class Event : BroadcastDelegate
	{
		public virtual void operator()()
		{
			Invoke();
		}
 
		public void Add(Procedure procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure procedure)
		{
			base.Remove(procedure);
		}
	}
 
 
	generic<inout T0>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0)
		{
			Invoke(p0);
		}
 
		public void Add(Procedure<T0> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1)
		{
			Invoke(p0, p1);
		}
 
		public void Add(Procedure<T0, T1> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1, inout T2>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1, T2 p2)
		{
			Invoke(p0, p1, p2);
		}
 
		public void Add(Procedure<T0, T1, T2> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1, T2> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3)
		{
			Invoke(p0, p1, p2, p3);
		}
 
		public void Add(Procedure<T0, T1, T2, T3> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1, T2, T3> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4)
		{
			Invoke(p0, p1, p2, p3, p4);
		}
 
		public void Add(Procedure<T0, T1, T2, T3, T4> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1, T2, T3, T4> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)
		{
			Invoke(p0, p1, p2, p3, p4, p5);
		}
 
		public void Add(Procedure<T0, T1, T2, T3, T4, T5> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1, T2, T3, T4, T5> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6)
		{
			Invoke(p0, p1, p2, p3, p4, p5, p6);
		}
 
		public void Add(Procedure<T0, T1, T2, T3, T4, T5, T6> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1, T2, T3, T4, T5, T6> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7)
		{
			Invoke(p0, p1, p2, p3, p4, p5, p6, p7);
		}
 
		public void Add(Procedure<T0, T1, T2, T3, T4, T5, T6, T7> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1, T2, T3, T4, T5, T6, T7> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7, inout T8>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8)
		{
			Invoke(p0, p1, p2, p3, p4, p5, p6, p7, p8);
		}
 
		public void Add(Procedure<T0, T1, T2, T3, T4, T5, T6, T7, T8> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1, T2, T3, T4, T5, T6, T7, T8> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 	generic<inout T0, inout T1, inout T2, inout T3, inout T4, inout T5, inout T6, inout T7, inout T8, inout T9>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()(T0 p0, T1 p1, T2 p2, T3 p3, T4 p4, T5 p5, T6 p6, T7 p7, T8 p8, T9 p9)
		{
			Invoke(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		}
 
		public void Add(Procedure<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> procedure)
		{
			base.Add(procedure);
		}
 
		public void Remove(Procedure<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> procedure)
		{
			base.Remove(procedure);
		}
	}
 
 
}