$$define $COMPARABLE_MEMBERS($name) $$begin
		[AutoGenerated]
		public static bool operator <($name a, $name b);
		[AutoGenerated]
		public static bool operator <=($name a, $name b);
		[AutoGenerated]
		public static bool operator >($name a, $name b);
		[AutoGenerated]
		public static bool operator >=($name a, $name b);
		[AutoGenerated]
		public static bool operator ==($name a, $name b);
		[AutoGenerated]
		public static bool operator !=($name a, $name b);
$$end

$$define $NUMBER_MEMBERS($name,$upgrated) $$begin
$COMPARABLE_MEMBERS($name)
$( )
		[AutoGenerated]
		public static $upgrated operator +($name a, $name b);
		[AutoGenerated]
		public static $name operator +=(ref $name a, $name b);
		[AutoGenerated]
		public static $upgrated operator -($name a, $name b);
		[AutoGenerated]
		public static $name operator -=(ref $name a, $name b);
		[AutoGenerated]
		public static $upgrated operator *($name a, $name b);
		[AutoGenerated]
		public static $name operator *=(ref $name a, $name b);
		[AutoGenerated]
		public static $upgrated operator /($name a, $name b);
		[AutoGenerated]
		public static $name operator /=(ref $name a, $name b);
$$end

$$define $INTEGER_MEMBERS($name,$upgrated) $$begin
$NUMBER_MEMBERS($name,$upgrated)
		[AutoGenerated]
		public static $upgrated operator %($name a, $name b);
		[AutoGenerated]
		public static $name operator %=(ref $name a, $name b);
		[AutoGenerated]
		public static $name operator prefix ++(ref $name a);
		[AutoGenerated]
		public static $name operator prefix --(ref $name a);
		[AutoGenerated]
		public static $name operator postfix ++(ref $name a);
		[AutoGenerated]
		public static $name operator postfix --(ref $name a);
		[AutoGenerated]
		public static $name operator prefix +(ref $name a);
		[AutoGenerated]
		public static $name operator prefix -(ref $name a);
$( )
		[AutoGenerated]
		public static $upgrated operator <<($name a, $name b);
		[AutoGenerated]
		public static $name operator <<=(ref $name a, $name b);
		[AutoGenerated]
		public static $upgrated operator >>($name a, $name b);
		[AutoGenerated]
		public static $name operator >>=(ref $name a, $name b);
		[AutoGenerated]
		public static $name operator |($name a, $name b);
		[AutoGenerated]
		public static $name operator |=(ref $name a, $name b);
		[AutoGenerated]
		public static $name operator &($name a, $name b);
		[AutoGenerated]
		public static $name operator &=(ref $name a, $name b);
		[AutoGenerated]
		public static $name operator ^($name a, $name b);
		[AutoGenerated]
		public static $name operator ^=(ref $name a, $name b);
		[AutoGenerated]
		public static $name operator prefix ~(ref $name a);
$$end

$$define $CONVERTER_MEMBERS($types) $$begin
  $$define $CONVERTER_MEMBER($index) $$begin
		[AutoGenerated]
		public implicit as $get($types,$index)();
  $$end
$loop($length($types),0,$CONVERTER_MEMBER)
$$end

$$define $CONSTRUCTOR_MEMBERS($name) $$begin
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor($name value);
$( )
		public override external string ToString();
		public static external $name Parse(string value);
$( )
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as $name);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
$( )
$$end

$$define $INTEGER_TYPE($name,$upgrated,$types) $$begin
	public struct $name
	{
$CONSTRUCTOR_MEMBERS($name)
$INTEGER_MEMBERS($name,$upgrated)
$CONVERTER_MEMBERS($types)
	}
$( )
$$end

$$define $FLOAT_TYPE($name,$upgrated,$types) $$begin
	public struct $name
	{
$CONSTRUCTOR_MEMBERS($name)
$NUMBER_MEMBERS($name,$upgrated)
$CONVERTER_MEMBERS($types)
	}
$( )
$$end

namespace System
{
$INTEGER_TYPE(SInt8,SInt32,$array(SInt16,SInt32,SInt64))
$INTEGER_TYPE(SInt16,SInt32,$array(SInt32,SInt64))
$INTEGER_TYPE(SInt32,SInt32,$array(SInt64))
$INTEGER_TYPE(SInt64,SInt64,$array())
$INTEGER_TYPE(UInt8,UInt32,$array(UInt16,UInt32,UInt64))
$INTEGER_TYPE(UInt16,UInt32,$array(UInt32,UInt64))
$INTEGER_TYPE(UInt32,UInt32,$array(UInt64))
$INTEGER_TYPE(UInt64,UInt64,$array())
$FLOAT_TYPE(Single,Single,$array(Double))
$FLOAT_TYPE(Double,Double,$array())
	public struct Char
	{
$CONSTRUCTOR_MEMBERS(Char)
$COMPARABLE_MEMBERS(Char)
	}
$( )
	public struct Bool
	{
$CONSTRUCTOR_MEMBERS(Bool)
		[AutoGenerated]
		public static bool operator ==(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator !=(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ||(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ||=(ref Bool a, Bool b);
		[AutoGenerated]
		public static bool operator &&(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator &&=(ref Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ^(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ^=(ref Bool a, Bool b);
		[AutoGenerated]
		public static bool operator prefix !(ref Bool a);
	}
}