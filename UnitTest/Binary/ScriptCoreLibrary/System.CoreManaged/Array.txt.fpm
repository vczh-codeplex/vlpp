$$include:Common.fpm

$$define $DIMENTION_FIELD_NAME($element) dimSize$element
$$define $DIMENTION_PARAMETER_NAME($element) _$element
$$define $DIMENTION_PARAMETER_DEFINITION($element) int $DIMENTION_PARAMETER_NAME($element)
$$define $DIMENTION_PARAMETER_NAME_IN_ARRAY($element) indices[$element]

$$define $DIMENTION_FIELD($element) $$begin
		private int $DIMENTION_FIELD_NAME($element);
$( )
$$end

$$define $DIMENTION_FIELD_SETTER($element) $$begin
			$DIMENTION_FIELD_NAME($element) = $DIMENTION_PARAMETER_NAME($element);
$( )
$$end

$$define $DIMENTION_SIZE_CASE($element) $$begin
				case $element:
					return $DIMENTION_FIELD_NAME($element);
$( )
$$end

$$define $DIMENTION_CHECK($element) $$begin
			if($DIMENTION_PARAMETER_NAME($element)<0 || $DIMENTION_PARAMETER_NAME($element)>=$DIMENTION_FIELD_NAME($element))
				throw new ArgumentOutOfRangeException($(")$DIMENTION_PARAMETER_NAME($element)$("));
$( )
$$end

$$define $DIMENTION_SUMMERS($elements) $$begin
  $$define $DIMENTION_SUMMER($index) $$begin
			sum*=$DIMENTION_FIELD_NAME($sub($sub($elements,1),$index));
			index+=sum*$DIMENTION_PARAMETER_NAME($sub($sub($elements,2),$index));
$( )
  $$end
$loop($sub($elements,1),0,$DIMENTION_SUMMER)
$$end

$$define $ARRAY_IMPLEMENTATION($elements) $$begin
$( )
	generic<inout T>
	public sealed class Array$elements : Array<T>
	{
$( )
		public constructor($loopsep($elements,0,$DIMENTION_PARAMETER_DEFINITION,$(,) ), Array<T> src=null, bool copy=true)
		{
$loop($elements,0,$DIMENTION_FIELD_SETTER)
			Initialize(this.Length, src, copy);
		}
$( )
$loop($elements,0,$DIMENTION_FIELD)
		public override int GetDimCount()
		{
			return $elements;
		}
$( )
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
$loop($elements,0,$DIMENTION_SIZE_CASE)
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
$( )
		public override int Length
		{
			get
			{
				return $loopsep($elements,0,$DIMENTION_FIELD_NAME,$(*));
			}
		}
$( )
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=$elements)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex($loopsep($elements,0,$DIMENTION_PARAMETER_NAME_IN_ARRAY,$(,)));
		}
$( )
		public int GetStartIndex($loopsep($elements,0,$DIMENTION_PARAMETER_DEFINITION,$(,) ))
		{
$loop($elements,0,$DIMENTION_CHECK)
			int index=$DIMENTION_PARAMETER_NAME($sub($elements,1));
			int sum=1;
			$DIMENTION_SUMMERS($elements)
			return index;
		}
$( )
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
$( )
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
$( )
		public T operator get[]($loopsep($elements,0,$DIMENTION_PARAMETER_DEFINITION,$(,) ))
		{
			return Get(GetStartIndexFromIndices($loopsep($elements,0,$DIMENTION_PARAMETER_NAME,$(,) )));
		}
$( )
		public T operator set[](T value, $loopsep($elements,0,$DIMENTION_PARAMETER_DEFINITION,$(,) ))
		{
			return Set(value, GetStartIndexFromIndices($loopsep($elements,0,$DIMENTION_PARAMETER_NAME,$(,) )));
		}
$( )
	}
$$end

namespace System
{
	generic<inout T>
	public abstract class Array : IEnumerable<T>
	{
		protected intptr gchandle=0;
		protected external void Initialize(int size, Array<T> src, bool copy);
		public external T Get(int position);
		public external void Set(T value, int position);
$( )
		public external void CopyTo(intptr pointer, int fromStart, int length);
		public external void CopyTo(Array<T> array, int fromStart, int length, int toStart);
$( )
		public abstract int GetDimCount();
		public abstract int GetDimSize(int dim);
		public abstract int Length{get;}
		public abstract int GetStartIndexFromIndices(params int[] indices);
		public abstract T GetElement(params int[] indices);
		public abstract void SetElement(T value, params int[] indices);
$( )
		private class Enumerator : IEnumerator<T>
		{
			private Array<T> array;
			private int index;
$( )
			public constructor(Array<T> array)
			{
				this.array=array;
				this.index=-1;
			}
$( )
			public bool MoveNext()
			{
				if(index==array.Length-1)
				{
					return false;
				}
				else
				{
					index++;
					return true;
				}
			}
$( )
			public T Current
			{
				get
				{
					return array.Get(index);
				}
			}
$( )
			object IEnumerator::Current
			{
				get
				{
					return array.Get(index);
				}
			}
		}
$( )
		IEnumerator<T> IEnumerable<T>::GetEnumerator()
		{
			return new Enumerator(this);
		}
$( )
		IEnumerator IEnumerable::GetEnumerator()
		{
			return new Enumerator(this);
		}
$( )
	}
$( )
	generic<inout T>
	public class ReadonlyArray
	{
		private T[] items;
$( )
		public constructor(T[] items)
		{
			this.items=items;
		}
$( )
		public int Length
		{
			get
			{
				return this.items.Length;
			}
		}
$( )
		public T operator get[](int index)
		{
			return this.items[index];
		}
	}
$loop($MAX_ELEMENT_COUNT(),1,$ARRAY_IMPLEMENTATION)
}