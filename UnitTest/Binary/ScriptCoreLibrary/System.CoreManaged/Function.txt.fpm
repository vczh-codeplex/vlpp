$$include:Common.fpm

$$define $TYPE($element) T$element
$$define $TYPE_IN_GENERIC($element) in $TYPE($element)
$$define $TYPE_IN_GENERIC_WITH_COMMA($element) , $TYPE_IN_GENERIC($element)
$$define $PARAMETER($element) p$element
$$define $TYPE_AND_PARAMETER($element) $TYPE($element) $PARAMETER($element)

$$define $FUNCTION($elements) $$begin
	generic<out R$loop($elements,0,$TYPE_IN_GENERIC_WITH_COMMA)>
	public class Function : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
$( )
		public virtual R operator()($loopsep($elements,0,$TYPE_AND_PARAMETER,$(,) ))
		{
			return Invoke($loopsep($elements,0,$PARAMETER,$(,) )) as R;
		}
	}
$( )
$( )
$$end

$$define $PROCEDURE_0() $$begin
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
$( )
		public virtual void operator()()
		{
			Invoke();
		}
	}
$( )
$( )
$$end

$$define $PROCEDURE($elements) $$begin
	generic<$loopsep($elements,0,$TYPE_IN_GENERIC,$(,) )>
	public class Procedure : MethodDelegate
	{
		public constructor(object thisObject, DelegateTarget target)
			:base(thisObject, target)
		{
		}
$( )
		public virtual void operator()($loopsep($elements,0,$TYPE_AND_PARAMETER,$(,) ))
		{
			Invoke($loopsep($elements,0,$PARAMETER,$(,) ));
		}
	}
$( )
$( )
$$end

$$define $EVENT_0() $$begin
	public class Event : BroadcastDelegate
	{
		public virtual void operator()()
		{
			Invoke();
		}
$( )
		public void Add(Procedure procedure)
		{
			base.Add(procedure);
		}
$( )
		public void Remove(Procedure procedure)
		{
			base.Remove(procedure);
		}
	}
$( )
$( )
$$end

$$define $EVENT($elements) $$begin
	generic<$loopsep($elements,0,$TYPE_IN_GENERIC,$(,) )>
	public class Event : BroadcastDelegate
	{
		public virtual void operator()($loopsep($elements,0,$TYPE_AND_PARAMETER,$(,) ))
		{
			Invoke($loopsep($elements,0,$PARAMETER,$(,) ));
		}
$( )
		public void Add(Procedure<$loopsep($elements,0,$TYPE,$(,) )> procedure)
		{
			base.Add(procedure);
		}
$( )
		public void Remove(Procedure<$loopsep($elements,0,$TYPE,$(,) )> procedure)
		{
			base.Remove(procedure);
		}
	}
$( )
$( )
$$end

namespace System
{
	public abstract class Delegate
	{
		public abstract object Invoke(params object[] arguments);
	}
$( )
	public abstract class DelegateTarget
	{
		public IntPtr FunctionObject{get; protected set;}
		public abstract object Invoke(object thisObject, params object[] arguments);
$( )
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as DelegateTarget);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
$( )
		public static bool operator ==(DelegateTarget a, DelegateTarget b)
		{
			return a.FunctionObject==b.FunctionObject;
		}
$( )
		public static bool operator !=(DelegateTarget a, DelegateTarget b)
		{
			return a.FunctionObject!=b.FunctionObject;
		}
	}
$( )
	public class MethodDelegate : Delegate
	{
		public object ThisObject{get; protected set;}
		public DelegateTarget Target{get; protected set;}
$( )
		public constructor(object thisObject, DelegateTarget target)
		{
			this.ThisObject=thisObject;
			this.Target=target;
		}
$( )
		public override bool Equals(MethodDelegate o)
		{
			try
			{
				return this==(o as DelegateTarget);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
$( )
		public override object Invoke(params object[] arguments)
		{
			return this.Target.Invoke(this.ThisObject, arguments);
		}
$( )
		public static bool operator ==(MethodDelegate a, MethodDelegate b)
		{
			return a.FunctionObject==b.FunctionObject && a.ThisObject==b.ThisObject;
		}
$( )
		public static bool operator !=(MethodDelegate a, MethodDelegate b)
		{
			return a.FunctionObject!=b.FunctionObject || a.ThisObject!=b.ThisObject;
		}
	}
$( )
	public class BroadcastDelegate : Delegate
	{
		private class DelegateLink
		{
			public Delegate invokee;
			public int counter;
			DelegateLink previous;
			DelegateLink next;
		}
$( )
		private DelegateLink first;
		private DelegateLink last;
$( )
		private DelegateLink FindDelegate(Delegate delegate)
		{
			if(this.first==null) return null;
			else
			{
				DelegateLink current=this.first;
				while(current!=null)
				{
					if(current.invokee.Equals(delegate))
					{
						return current;
					}
				}
				return null;
			}
		}
$( )
		protected void Add(Delegate delegate)
		{
			DelegateLink link=FindDelegate(delegate);
			if(link!=null)
			{
				link=new DelegateLink();
				link.invokee=delegate;
				if(this.first==null)
				{
					this.first=link;
					this.last=link;
				}
				else
				{
					this.last.next=link;
					link.previous=this.last;
					this.last=link;
				}
			}
			link.counter++;
		}
$( )
		protected void Remove(Delegate delegate)
		{
			DelegateLink link=FindDelegate(delegate);
			if(link!=null)
			{
				if((--link.counter)==0)
				{
					if(link==this.first)
					{
						this.first=link.next;
					}
					else
					{
						link.previous.next=link.next;
					}
					if(link==this.last)
					{
						this.last=link.previous;
					}
					else
					{
						link.next.previous=link.previous;
					}
				}
			}
		}
$( )
		public override object Invoke(params object[] arguments)
		{
			return new NotImplementedException();
		}
	}
$( )
$loop($add($MAX_ELEMENT_COUNT(),1),0,$FUNCTION)
$PROCEDURE_0()
$loop($MAX_ELEMENT_COUNT(),1,$PROCEDURE)
$EVENT_0()
$loop($MAX_ELEMENT_COUNT(),1,$EVENT)
}