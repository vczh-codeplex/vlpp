namespace System
{
	generic<inout T>
	public abstract class Array
	{
		protected intptr gchandle=0;
		protected external void Initialize(int size, Array<T> src, bool copy);
		public external T Get(int position);
		public external void Set(T value, int position);
 
		public external void CopyTo(intptr pointer, int fromStart, int length);
		public external void CopyTo(Array<T> array, int fromStart, int length, int toStart);
 
		public abstract int GetDimCount();
		public abstract int GetDimSize(int dim);
		public abstract int Length{get;}
		public abstract int GetStartIndexFromIndices(params int[] indices);
		public abstract T GetElement(params int[] indices);
		public abstract void SetElement(T value, params int[] indices);
	}
 
	generic<inout T>
	public sealed class Array1 : Array
	{
 
		public constructor(int _0, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 
		public override int GetDimCount()
		{
			return 1;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=1)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0]];
		}
 
		public int GetStartIndex(int _0)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 
			int index=_0;
			int sum=1;
			  

			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0)
		{
			return Get(_0);
		}
 
		public T operator set[](T value, int _0)
		{
			return Set(value, _0);
		}
 
	} 
	generic<inout T>
	public sealed class Array2 : Array
	{
 
		public constructor(int _0, int _1, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 
		public override int GetDimCount()
		{
			return 2;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=2)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1]];
		}
 
		public int GetStartIndex(int _0, int _1)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 
			int index=_1;
			int sum=1;
			  
			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1)
		{
			return Get(_0, _1);
		}
 
		public T operator set[](T value, int _0, int _1)
		{
			return Set(value, _0, _1);
		}
 
	} 
	generic<inout T>
	public sealed class Array3 : Array
	{
 
		public constructor(int _0, int _1, int _2, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 			dimSize2 = _2;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 		private int dimSize2;
 
		public override int GetDimCount()
		{
			return 3;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 				case 2:
					return dimSize2;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1*dimSize2;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=3)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1],indices[2]];
		}
 
		public int GetStartIndex(int _0, int _1, int _2)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 			if(_2<0 || _2>=dimSize2)
				throw new ArgumentOutOfRangeException("_2");
 
			int index=_2;
			int sum=1;
			  
			sum*=dimSize2;
			index+=sum*_1;
 
  			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1, int _2)
		{
			return Get(_0, _1, _2);
		}
 
		public T operator set[](T value, int _0, int _1, int _2)
		{
			return Set(value, _0, _1, _2);
		}
 
	} 
	generic<inout T>
	public sealed class Array4 : Array
	{
 
		public constructor(int _0, int _1, int _2, int _3, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 			dimSize2 = _2;
 			dimSize3 = _3;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 		private int dimSize2;
 		private int dimSize3;
 
		public override int GetDimCount()
		{
			return 4;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 				case 2:
					return dimSize2;
 				case 3:
					return dimSize3;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1*dimSize2*dimSize3;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=4)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1],indices[2],indices[3]];
		}
 
		public int GetStartIndex(int _0, int _1, int _2, int _3)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 			if(_2<0 || _2>=dimSize2)
				throw new ArgumentOutOfRangeException("_2");
 			if(_3<0 || _3>=dimSize3)
				throw new ArgumentOutOfRangeException("_3");
 
			int index=_3;
			int sum=1;
			  
			sum*=dimSize3;
			index+=sum*_2;
 
  			sum*=dimSize2;
			index+=sum*_1;
 
  			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1, int _2, int _3)
		{
			return Get(_0, _1, _2, _3);
		}
 
		public T operator set[](T value, int _0, int _1, int _2, int _3)
		{
			return Set(value, _0, _1, _2, _3);
		}
 
	} 
	generic<inout T>
	public sealed class Array5 : Array
	{
 
		public constructor(int _0, int _1, int _2, int _3, int _4, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 			dimSize2 = _2;
 			dimSize3 = _3;
 			dimSize4 = _4;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 		private int dimSize2;
 		private int dimSize3;
 		private int dimSize4;
 
		public override int GetDimCount()
		{
			return 5;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 				case 2:
					return dimSize2;
 				case 3:
					return dimSize3;
 				case 4:
					return dimSize4;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1*dimSize2*dimSize3*dimSize4;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=5)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1],indices[2],indices[3],indices[4]];
		}
 
		public int GetStartIndex(int _0, int _1, int _2, int _3, int _4)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 			if(_2<0 || _2>=dimSize2)
				throw new ArgumentOutOfRangeException("_2");
 			if(_3<0 || _3>=dimSize3)
				throw new ArgumentOutOfRangeException("_3");
 			if(_4<0 || _4>=dimSize4)
				throw new ArgumentOutOfRangeException("_4");
 
			int index=_4;
			int sum=1;
			  
			sum*=dimSize4;
			index+=sum*_3;
 
  			sum*=dimSize3;
			index+=sum*_2;
 
  			sum*=dimSize2;
			index+=sum*_1;
 
  			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1, int _2, int _3, int _4)
		{
			return Get(_0, _1, _2, _3, _4);
		}
 
		public T operator set[](T value, int _0, int _1, int _2, int _3, int _4)
		{
			return Set(value, _0, _1, _2, _3, _4);
		}
 
	} 
	generic<inout T>
	public sealed class Array6 : Array
	{
 
		public constructor(int _0, int _1, int _2, int _3, int _4, int _5, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 			dimSize2 = _2;
 			dimSize3 = _3;
 			dimSize4 = _4;
 			dimSize5 = _5;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 		private int dimSize2;
 		private int dimSize3;
 		private int dimSize4;
 		private int dimSize5;
 
		public override int GetDimCount()
		{
			return 6;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 				case 2:
					return dimSize2;
 				case 3:
					return dimSize3;
 				case 4:
					return dimSize4;
 				case 5:
					return dimSize5;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1*dimSize2*dimSize3*dimSize4*dimSize5;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=6)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1],indices[2],indices[3],indices[4],indices[5]];
		}
 
		public int GetStartIndex(int _0, int _1, int _2, int _3, int _4, int _5)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 			if(_2<0 || _2>=dimSize2)
				throw new ArgumentOutOfRangeException("_2");
 			if(_3<0 || _3>=dimSize3)
				throw new ArgumentOutOfRangeException("_3");
 			if(_4<0 || _4>=dimSize4)
				throw new ArgumentOutOfRangeException("_4");
 			if(_5<0 || _5>=dimSize5)
				throw new ArgumentOutOfRangeException("_5");
 
			int index=_5;
			int sum=1;
			  
			sum*=dimSize5;
			index+=sum*_4;
 
  			sum*=dimSize4;
			index+=sum*_3;
 
  			sum*=dimSize3;
			index+=sum*_2;
 
  			sum*=dimSize2;
			index+=sum*_1;
 
  			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1, int _2, int _3, int _4, int _5)
		{
			return Get(_0, _1, _2, _3, _4, _5);
		}
 
		public T operator set[](T value, int _0, int _1, int _2, int _3, int _4, int _5)
		{
			return Set(value, _0, _1, _2, _3, _4, _5);
		}
 
	} 
	generic<inout T>
	public sealed class Array7 : Array
	{
 
		public constructor(int _0, int _1, int _2, int _3, int _4, int _5, int _6, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 			dimSize2 = _2;
 			dimSize3 = _3;
 			dimSize4 = _4;
 			dimSize5 = _5;
 			dimSize6 = _6;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 		private int dimSize2;
 		private int dimSize3;
 		private int dimSize4;
 		private int dimSize5;
 		private int dimSize6;
 
		public override int GetDimCount()
		{
			return 7;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 				case 2:
					return dimSize2;
 				case 3:
					return dimSize3;
 				case 4:
					return dimSize4;
 				case 5:
					return dimSize5;
 				case 6:
					return dimSize6;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1*dimSize2*dimSize3*dimSize4*dimSize5*dimSize6;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=7)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1],indices[2],indices[3],indices[4],indices[5],indices[6]];
		}
 
		public int GetStartIndex(int _0, int _1, int _2, int _3, int _4, int _5, int _6)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 			if(_2<0 || _2>=dimSize2)
				throw new ArgumentOutOfRangeException("_2");
 			if(_3<0 || _3>=dimSize3)
				throw new ArgumentOutOfRangeException("_3");
 			if(_4<0 || _4>=dimSize4)
				throw new ArgumentOutOfRangeException("_4");
 			if(_5<0 || _5>=dimSize5)
				throw new ArgumentOutOfRangeException("_5");
 			if(_6<0 || _6>=dimSize6)
				throw new ArgumentOutOfRangeException("_6");
 
			int index=_6;
			int sum=1;
			  
			sum*=dimSize6;
			index+=sum*_5;
 
  			sum*=dimSize5;
			index+=sum*_4;
 
  			sum*=dimSize4;
			index+=sum*_3;
 
  			sum*=dimSize3;
			index+=sum*_2;
 
  			sum*=dimSize2;
			index+=sum*_1;
 
  			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1, int _2, int _3, int _4, int _5, int _6)
		{
			return Get(_0, _1, _2, _3, _4, _5, _6);
		}
 
		public T operator set[](T value, int _0, int _1, int _2, int _3, int _4, int _5, int _6)
		{
			return Set(value, _0, _1, _2, _3, _4, _5, _6);
		}
 
	} 
	generic<inout T>
	public sealed class Array8 : Array
	{
 
		public constructor(int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 			dimSize2 = _2;
 			dimSize3 = _3;
 			dimSize4 = _4;
 			dimSize5 = _5;
 			dimSize6 = _6;
 			dimSize7 = _7;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 		private int dimSize2;
 		private int dimSize3;
 		private int dimSize4;
 		private int dimSize5;
 		private int dimSize6;
 		private int dimSize7;
 
		public override int GetDimCount()
		{
			return 8;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 				case 2:
					return dimSize2;
 				case 3:
					return dimSize3;
 				case 4:
					return dimSize4;
 				case 5:
					return dimSize5;
 				case 6:
					return dimSize6;
 				case 7:
					return dimSize7;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1*dimSize2*dimSize3*dimSize4*dimSize5*dimSize6*dimSize7;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=8)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1],indices[2],indices[3],indices[4],indices[5],indices[6],indices[7]];
		}
 
		public int GetStartIndex(int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 			if(_2<0 || _2>=dimSize2)
				throw new ArgumentOutOfRangeException("_2");
 			if(_3<0 || _3>=dimSize3)
				throw new ArgumentOutOfRangeException("_3");
 			if(_4<0 || _4>=dimSize4)
				throw new ArgumentOutOfRangeException("_4");
 			if(_5<0 || _5>=dimSize5)
				throw new ArgumentOutOfRangeException("_5");
 			if(_6<0 || _6>=dimSize6)
				throw new ArgumentOutOfRangeException("_6");
 			if(_7<0 || _7>=dimSize7)
				throw new ArgumentOutOfRangeException("_7");
 
			int index=_7;
			int sum=1;
			  
			sum*=dimSize7;
			index+=sum*_6;
 
  			sum*=dimSize6;
			index+=sum*_5;
 
  			sum*=dimSize5;
			index+=sum*_4;
 
  			sum*=dimSize4;
			index+=sum*_3;
 
  			sum*=dimSize3;
			index+=sum*_2;
 
  			sum*=dimSize2;
			index+=sum*_1;
 
  			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7)
		{
			return Get(_0, _1, _2, _3, _4, _5, _6, _7);
		}
 
		public T operator set[](T value, int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7)
		{
			return Set(value, _0, _1, _2, _3, _4, _5, _6, _7);
		}
 
	} 
	generic<inout T>
	public sealed class Array9 : Array
	{
 
		public constructor(int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, int _8, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 			dimSize2 = _2;
 			dimSize3 = _3;
 			dimSize4 = _4;
 			dimSize5 = _5;
 			dimSize6 = _6;
 			dimSize7 = _7;
 			dimSize8 = _8;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 		private int dimSize2;
 		private int dimSize3;
 		private int dimSize4;
 		private int dimSize5;
 		private int dimSize6;
 		private int dimSize7;
 		private int dimSize8;
 
		public override int GetDimCount()
		{
			return 9;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 				case 2:
					return dimSize2;
 				case 3:
					return dimSize3;
 				case 4:
					return dimSize4;
 				case 5:
					return dimSize5;
 				case 6:
					return dimSize6;
 				case 7:
					return dimSize7;
 				case 8:
					return dimSize8;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1*dimSize2*dimSize3*dimSize4*dimSize5*dimSize6*dimSize7*dimSize8;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=9)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1],indices[2],indices[3],indices[4],indices[5],indices[6],indices[7],indices[8]];
		}
 
		public int GetStartIndex(int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, int _8)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 			if(_2<0 || _2>=dimSize2)
				throw new ArgumentOutOfRangeException("_2");
 			if(_3<0 || _3>=dimSize3)
				throw new ArgumentOutOfRangeException("_3");
 			if(_4<0 || _4>=dimSize4)
				throw new ArgumentOutOfRangeException("_4");
 			if(_5<0 || _5>=dimSize5)
				throw new ArgumentOutOfRangeException("_5");
 			if(_6<0 || _6>=dimSize6)
				throw new ArgumentOutOfRangeException("_6");
 			if(_7<0 || _7>=dimSize7)
				throw new ArgumentOutOfRangeException("_7");
 			if(_8<0 || _8>=dimSize8)
				throw new ArgumentOutOfRangeException("_8");
 
			int index=_8;
			int sum=1;
			  
			sum*=dimSize8;
			index+=sum*_7;
 
  			sum*=dimSize7;
			index+=sum*_6;
 
  			sum*=dimSize6;
			index+=sum*_5;
 
  			sum*=dimSize5;
			index+=sum*_4;
 
  			sum*=dimSize4;
			index+=sum*_3;
 
  			sum*=dimSize3;
			index+=sum*_2;
 
  			sum*=dimSize2;
			index+=sum*_1;
 
  			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, int _8)
		{
			return Get(_0, _1, _2, _3, _4, _5, _6, _7, _8);
		}
 
		public T operator set[](T value, int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, int _8)
		{
			return Set(value, _0, _1, _2, _3, _4, _5, _6, _7, _8);
		}
 
	} 
	generic<inout T>
	public sealed class Array10 : Array
	{
 
		public constructor(int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, int _8, int _9, Array<T> src=null, bool copy=true)
		{
			dimSize0 = _0;
 			dimSize1 = _1;
 			dimSize2 = _2;
 			dimSize3 = _3;
 			dimSize4 = _4;
 			dimSize5 = _5;
 			dimSize6 = _6;
 			dimSize7 = _7;
 			dimSize8 = _8;
 			dimSize9 = _9;
 
			Initialize(this.Length, src, copy);
		}
 
		private int dimSize0;
 		private int dimSize1;
 		private int dimSize2;
 		private int dimSize3;
 		private int dimSize4;
 		private int dimSize5;
 		private int dimSize6;
 		private int dimSize7;
 		private int dimSize8;
 		private int dimSize9;
 
		public override int GetDimCount()
		{
			return 10;
		}
 
		public override int GetDimSize(int dim)
		{
			switch(dim)
			{
				case 0:
					return dimSize0;
 				case 1:
					return dimSize1;
 				case 2:
					return dimSize2;
 				case 3:
					return dimSize3;
 				case 4:
					return dimSize4;
 				case 5:
					return dimSize5;
 				case 6:
					return dimSize6;
 				case 7:
					return dimSize7;
 				case 8:
					return dimSize8;
 				case 9:
					return dimSize9;
 
				default:
					throw new ArgumentOutOfRangeException("dim");
			}
		}
 
		public override int Length
		{
			get
			{
				return dimSize0*dimSize1*dimSize2*dimSize3*dimSize4*dimSize5*dimSize6*dimSize7*dimSize8*dimSize9;
			}
		}
 
		public override int GetStartIndexFromIndices(params int[] indices)
		{
			if(indices.Length!=10)
			{
				throw new ArgumentOutOfRangeException("indices");
			}
			return GetStartIndex[indices[0],indices[1],indices[2],indices[3],indices[4],indices[5],indices[6],indices[7],indices[8],indices[9]];
		}
 
		public int GetStartIndex(int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, int _8, int _9)
		{
			if(_0<0 || _0>=dimSize0)
				throw new ArgumentOutOfRangeException("_0");
 			if(_1<0 || _1>=dimSize1)
				throw new ArgumentOutOfRangeException("_1");
 			if(_2<0 || _2>=dimSize2)
				throw new ArgumentOutOfRangeException("_2");
 			if(_3<0 || _3>=dimSize3)
				throw new ArgumentOutOfRangeException("_3");
 			if(_4<0 || _4>=dimSize4)
				throw new ArgumentOutOfRangeException("_4");
 			if(_5<0 || _5>=dimSize5)
				throw new ArgumentOutOfRangeException("_5");
 			if(_6<0 || _6>=dimSize6)
				throw new ArgumentOutOfRangeException("_6");
 			if(_7<0 || _7>=dimSize7)
				throw new ArgumentOutOfRangeException("_7");
 			if(_8<0 || _8>=dimSize8)
				throw new ArgumentOutOfRangeException("_8");
 			if(_9<0 || _9>=dimSize9)
				throw new ArgumentOutOfRangeException("_9");
 
			int index=_9;
			int sum=1;
			  
			sum*=dimSize9;
			index+=sum*_8;
 
  			sum*=dimSize8;
			index+=sum*_7;
 
  			sum*=dimSize7;
			index+=sum*_6;
 
  			sum*=dimSize6;
			index+=sum*_5;
 
  			sum*=dimSize5;
			index+=sum*_4;
 
  			sum*=dimSize4;
			index+=sum*_3;
 
  			sum*=dimSize3;
			index+=sum*_2;
 
  			sum*=dimSize2;
			index+=sum*_1;
 
  			sum*=dimSize1;
			index+=sum*_0;
 
  
			return index;
		}
 
		public override T GetElement(params int[] indices)
		{
			return Get(GetStartIndexFromIndices(indices));
		}
 
		public override void SetElement(T value, params int[] indices)
		{
			Set(value, GetStartIndexFromIndices(indices));
		}
 
		public T operator get[](int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, int _8, int _9)
		{
			return Get(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9);
		}
 
		public T operator set[](T value, int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7, int _8, int _9)
		{
			return Set(value, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9);
		}
 
	}
}