namespace System
{
	public class Attribute
	{
	}

	public enum switch AttributeTargets
	{
		Class,
		Struct,
		Interface,
		Enum,
		Constructor,
		Method,
		Property,
		Field,
		ConverterOperator,
		EnumItem,
		Parameter,

		TypeDeclaration = AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface | AttributeTargets.Enum,
		TypeMember = AttributeTargets.Method | AttributeTargets.Constructor | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.ConverterOperator,
		All = AttributeTargets.TypeDeclaration | AttributeTargets.TypeMember | AttributeTargets.EnumItem | AttributeTargets.Parameter
	}

	public class AttributeUsageAttribute : Attribute
	{
		public AttributeTargets Targets{get;set;}
		public bool AllowMultiple{get;set;}
		public bool AllowInherit{get;set;}

		public constructor(AttributeTargets targets, bool allowMultiple=true, bool allowInherit=true)
		{
			this.Targets=targets;
			this.AllowMultiple=allowMultiple;
			this.AllowInherit=allowInherit;
		}
	}

	namespace CompilerModel
	{
		// compiler will generate code(or intrin) for the method
		[AttributeUsage(AttributeTargets.Method)]
		private class AutoGeneratedAttribute : Attribute
		{
		}
		
		// the type cannot be used as a value or a generic argument everywhere
		[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]
		private class NotInstantiableAttribute : Attribute
		{
		}

		// the type cannot be used as a value, but can be the base type of a struct
		[AttributeUsage(AttributeTargets.Struct)]
		private class StructBaseAttribute : Attribute
		{
		}

		// default value of a parameter
		[AttributeUsage(AttributeTargets.Parameter)]
		generic<in T>
		public class DefaultValueAttribute : Attribute
		{
			public T DefaultValue{get;private set;}

			public constructor(T defaultValue)
			{
				this.DefaultValue=defaultValue;
			}
		}

		// variadic parameter
		[AttributeUsage(AttributeTargets.Parameter)]
		public class VariadicParameterAttribute : Attribute
		{
		}
	}
}