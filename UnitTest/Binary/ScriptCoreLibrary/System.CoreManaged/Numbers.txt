namespace System
{
	public struct SInt8
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(SInt8 value);
 
		[AutoGenerated]
		public static bool operator <(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator <=(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator >(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator >=(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator ==(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator !=(SInt8 a, SInt8 b);
 
		[AutoGenerated]
		public static SInt32 operator +(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator -(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator *(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator /(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator %(SInt8 a, SInt8 b);
 
		[AutoGenerated]
		public static SInt32 operator <<(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator >>(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static Self operator |(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static Self operator &(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static Self operator ^(SInt8 a, SInt8 b);
  
		[AutoGenerated]
		public implicit as SInt16();
  		[AutoGenerated]
		public implicit as SInt32();
  		[AutoGenerated]
		public implicit as SInt64();
  
		[AutoGenerated]
		public override string ToString();
	}
 
	public struct SInt16
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(SInt16 value);
 
		[AutoGenerated]
		public static bool operator <(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator <=(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator >(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator >=(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator ==(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator !=(SInt16 a, SInt16 b);
 
		[AutoGenerated]
		public static SInt32 operator +(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator -(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator *(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator /(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator %(SInt16 a, SInt16 b);
 
		[AutoGenerated]
		public static SInt32 operator <<(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator >>(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static Self operator |(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static Self operator &(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static Self operator ^(SInt16 a, SInt16 b);
  
		[AutoGenerated]
		public implicit as SInt32();
  		[AutoGenerated]
		public implicit as SInt64();
  
		[AutoGenerated]
		public override string ToString();
	}
 
	public struct SInt32
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(SInt32 value);
 
		[AutoGenerated]
		public static bool operator <(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator <=(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator >(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator >=(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator ==(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator !=(SInt32 a, SInt32 b);
 
		[AutoGenerated]
		public static SInt32 operator +(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator -(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator *(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator /(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator %(SInt32 a, SInt32 b);
 
		[AutoGenerated]
		public static SInt32 operator <<(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator >>(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static Self operator |(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static Self operator &(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static Self operator ^(SInt32 a, SInt32 b);
  
		[AutoGenerated]
		public implicit as SInt64();
  
		[AutoGenerated]
		public override string ToString();
	}
 
	public struct SInt64
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(SInt64 value);
 
		[AutoGenerated]
		public static bool operator <(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator <=(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator >(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator >=(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator ==(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator !=(SInt64 a, SInt64 b);
 
		[AutoGenerated]
		public static SInt64 operator +(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator -(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator *(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator /(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator %(SInt64 a, SInt64 b);
 
		[AutoGenerated]
		public static SInt64 operator <<(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator >>(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static Self operator |(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static Self operator &(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static Self operator ^(SInt64 a, SInt64 b);
  

		[AutoGenerated]
		public override string ToString();
	}
 
	public struct UInt8
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(UInt8 value);
 
		[AutoGenerated]
		public static bool operator <(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator <=(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator >(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator >=(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator ==(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator !=(UInt8 a, UInt8 b);
 
		[AutoGenerated]
		public static UInt32 operator +(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator -(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator *(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator /(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator %(UInt8 a, UInt8 b);
 
		[AutoGenerated]
		public static UInt32 operator <<(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator >>(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static Self operator |(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static Self operator &(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static Self operator ^(UInt8 a, UInt8 b);
  
		[AutoGenerated]
		public implicit as UInt16();
  		[AutoGenerated]
		public implicit as UInt32();
  		[AutoGenerated]
		public implicit as UInt64();
  
		[AutoGenerated]
		public override string ToString();
	}
 
	public struct UInt16
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(UInt16 value);
 
		[AutoGenerated]
		public static bool operator <(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator <=(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator >(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator >=(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator ==(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator !=(UInt16 a, UInt16 b);
 
		[AutoGenerated]
		public static UInt32 operator +(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator -(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator *(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator /(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator %(UInt16 a, UInt16 b);
 
		[AutoGenerated]
		public static UInt32 operator <<(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator >>(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static Self operator |(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static Self operator &(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static Self operator ^(UInt16 a, UInt16 b);
  
		[AutoGenerated]
		public implicit as UInt32();
  		[AutoGenerated]
		public implicit as UInt64();
  
		[AutoGenerated]
		public override string ToString();
	}
 
	public struct UInt32
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(UInt32 value);
 
		[AutoGenerated]
		public static bool operator <(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator <=(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator >(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator >=(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator ==(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator !=(UInt32 a, UInt32 b);
 
		[AutoGenerated]
		public static UInt32 operator +(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator -(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator *(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator /(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator %(UInt32 a, UInt32 b);
 
		[AutoGenerated]
		public static UInt32 operator <<(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator >>(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static Self operator |(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static Self operator &(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static Self operator ^(UInt32 a, UInt32 b);
  
		[AutoGenerated]
		public implicit as UInt64();
  
		[AutoGenerated]
		public override string ToString();
	}
 
	public struct UInt64
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(UInt64 value);
 
		[AutoGenerated]
		public static bool operator <(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator <=(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator >(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator >=(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator ==(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator !=(UInt64 a, UInt64 b);
 
		[AutoGenerated]
		public static UInt64 operator +(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator -(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator *(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator /(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator %(UInt64 a, UInt64 b);
 
		[AutoGenerated]
		public static UInt64 operator <<(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator >>(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static Self operator |(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static Self operator &(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static Self operator ^(UInt64 a, UInt64 b);
  

		[AutoGenerated]
		public override string ToString();
	}
 
	public struct Single
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(Single value);
 
		[AutoGenerated]
		public static bool operator <(Single a, Single b);
		[AutoGenerated]
		public static bool operator <=(Single a, Single b);
		[AutoGenerated]
		public static bool operator >(Single a, Single b);
		[AutoGenerated]
		public static bool operator >=(Single a, Single b);
		[AutoGenerated]
		public static bool operator ==(Single a, Single b);
		[AutoGenerated]
		public static bool operator !=(Single a, Single b);
 
		[AutoGenerated]
		public static Signle operator +(Single a, Single b);
		[AutoGenerated]
		public static Signle operator -(Single a, Single b);
		[AutoGenerated]
		public static Signle operator *(Single a, Single b);
		[AutoGenerated]
		public static Signle operator /(Single a, Single b);
  
		[AutoGenerated]
		public implicit as Double();
  
		[AutoGenerated]
		public override string ToString();
	}
 
	public struct Double
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(Double value);
 
		[AutoGenerated]
		public static bool operator <(Double a, Double b);
		[AutoGenerated]
		public static bool operator <=(Double a, Double b);
		[AutoGenerated]
		public static bool operator >(Double a, Double b);
		[AutoGenerated]
		public static bool operator >=(Double a, Double b);
		[AutoGenerated]
		public static bool operator ==(Double a, Double b);
		[AutoGenerated]
		public static bool operator !=(Double a, Double b);
 
		[AutoGenerated]
		public static Double operator +(Double a, Double b);
		[AutoGenerated]
		public static Double operator -(Double a, Double b);
		[AutoGenerated]
		public static Double operator *(Double a, Double b);
		[AutoGenerated]
		public static Double operator /(Double a, Double b);
  

		[AutoGenerated]
		public override string ToString();
	}
 
	public struct Char
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(Char value);
 
		[AutoGenerated]
		public static bool operator <(Char a, Char b);
		[AutoGenerated]
		public static bool operator <=(Char a, Char b);
		[AutoGenerated]
		public static bool operator >(Char a, Char b);
		[AutoGenerated]
		public static bool operator >=(Char a, Char b);
		[AutoGenerated]
		public static bool operator ==(Char a, Char b);
		[AutoGenerated]
		public static bool operator !=(Char a, Char b);
		[AutoGenerated]
		public override string ToString();
	}
 
	public struct Bool
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(Bool value);
 
		[AutoGenerated]
		public static bool operator ==(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator !=(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator |(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator &(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ^(Bool a, Bool b);
 
		[AutoGenerated]
		public override string ToString();
	}
}