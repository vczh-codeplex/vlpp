namespace System
{
	public struct SInt8
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(SInt8 value);
 
		public override external string ToString();
		public static external SInt8 Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as SInt8);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator <=(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator >(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator >=(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator ==(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static bool operator !=(SInt8 a, SInt8 b);
 
		[AutoGenerated]
		public static SInt32 operator +(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator +=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator -(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator -=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator *(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator *=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator /(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator /=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator %(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator %=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator prefix ++(ref SInt8 a);
		[AutoGenerated]
		public static SInt8 operator prefix --(ref SInt8 a);
		[AutoGenerated]
		public static SInt8 operator postfix ++(ref SInt8 a);
		[AutoGenerated]
		public static SInt8 operator postfix --(ref SInt8 a);
		[AutoGenerated]
		public static SInt8 operator prefix +(SInt8 a);
		[AutoGenerated]
		public static SInt8 operator prefix -(SInt8 a);
 
		[AutoGenerated]
		public static SInt32 operator <<(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator <<=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt32 operator >>(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator >>=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator |(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator |=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator &(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator &=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator ^(SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator ^=(ref SInt8 a, SInt8 b);
		[AutoGenerated]
		public static SInt8 operator prefix ~(SInt8 a);
  
		[AutoGenerated]
		public implicit as SInt16();
  		[AutoGenerated]
		public implicit as SInt32();
  		[AutoGenerated]
		public implicit as SInt64();
  
	}
 
	public struct SInt16
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(SInt16 value);
 
		public override external string ToString();
		public static external SInt16 Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as SInt16);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator <=(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator >(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator >=(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator ==(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static bool operator !=(SInt16 a, SInt16 b);
 
		[AutoGenerated]
		public static SInt32 operator +(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator +=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator -(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator -=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator *(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator *=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator /(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator /=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator %(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator %=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator prefix ++(ref SInt16 a);
		[AutoGenerated]
		public static SInt16 operator prefix --(ref SInt16 a);
		[AutoGenerated]
		public static SInt16 operator postfix ++(ref SInt16 a);
		[AutoGenerated]
		public static SInt16 operator postfix --(ref SInt16 a);
		[AutoGenerated]
		public static SInt16 operator prefix +(SInt16 a);
		[AutoGenerated]
		public static SInt16 operator prefix -(SInt16 a);
 
		[AutoGenerated]
		public static SInt32 operator <<(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator <<=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt32 operator >>(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator >>=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator |(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator |=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator &(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator &=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator ^(SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator ^=(ref SInt16 a, SInt16 b);
		[AutoGenerated]
		public static SInt16 operator prefix ~(SInt16 a);
  
		[AutoGenerated]
		public implicit as SInt32();
  		[AutoGenerated]
		public implicit as SInt64();
  
	}
 
	public struct SInt32
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(SInt32 value);
 
		public override external string ToString();
		public static external SInt32 Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as SInt32);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator <=(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator >(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator >=(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator ==(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static bool operator !=(SInt32 a, SInt32 b);
 
		[AutoGenerated]
		public static SInt32 operator +(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator +=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator -(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator -=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator *(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator *=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator /(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator /=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator %(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator %=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator prefix ++(ref SInt32 a);
		[AutoGenerated]
		public static SInt32 operator prefix --(ref SInt32 a);
		[AutoGenerated]
		public static SInt32 operator postfix ++(ref SInt32 a);
		[AutoGenerated]
		public static SInt32 operator postfix --(ref SInt32 a);
		[AutoGenerated]
		public static SInt32 operator prefix +(SInt32 a);
		[AutoGenerated]
		public static SInt32 operator prefix -(SInt32 a);
 
		[AutoGenerated]
		public static SInt32 operator <<(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator <<=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator >>(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator >>=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator |(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator |=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator &(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator &=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator ^(SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator ^=(ref SInt32 a, SInt32 b);
		[AutoGenerated]
		public static SInt32 operator prefix ~(SInt32 a);
  
		[AutoGenerated]
		public implicit as SInt64();
  
	}
 
	public struct SInt64
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(SInt64 value);
 
		public override external string ToString();
		public static external SInt64 Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as SInt64);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator <=(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator >(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator >=(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator ==(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static bool operator !=(SInt64 a, SInt64 b);
 
		[AutoGenerated]
		public static SInt64 operator +(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator +=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator -(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator -=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator *(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator *=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator /(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator /=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator %(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator %=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator prefix ++(ref SInt64 a);
		[AutoGenerated]
		public static SInt64 operator prefix --(ref SInt64 a);
		[AutoGenerated]
		public static SInt64 operator postfix ++(ref SInt64 a);
		[AutoGenerated]
		public static SInt64 operator postfix --(ref SInt64 a);
		[AutoGenerated]
		public static SInt64 operator prefix +(SInt64 a);
		[AutoGenerated]
		public static SInt64 operator prefix -(SInt64 a);
 
		[AutoGenerated]
		public static SInt64 operator <<(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator <<=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator >>(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator >>=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator |(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator |=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator &(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator &=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator ^(SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator ^=(ref SInt64 a, SInt64 b);
		[AutoGenerated]
		public static SInt64 operator prefix ~(SInt64 a);
  

	}
 
	public struct UInt8
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(UInt8 value);
 
		public override external string ToString();
		public static external UInt8 Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as UInt8);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator <=(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator >(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator >=(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator ==(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static bool operator !=(UInt8 a, UInt8 b);
 
		[AutoGenerated]
		public static UInt32 operator +(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator +=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator -(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator -=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator *(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator *=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator /(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator /=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator %(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator %=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator prefix ++(ref UInt8 a);
		[AutoGenerated]
		public static UInt8 operator prefix --(ref UInt8 a);
		[AutoGenerated]
		public static UInt8 operator postfix ++(ref UInt8 a);
		[AutoGenerated]
		public static UInt8 operator postfix --(ref UInt8 a);
		[AutoGenerated]
		public static UInt8 operator prefix +(UInt8 a);
		[AutoGenerated]
		public static UInt8 operator prefix -(UInt8 a);
 
		[AutoGenerated]
		public static UInt32 operator <<(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator <<=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt32 operator >>(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator >>=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator |(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator |=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator &(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator &=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator ^(UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator ^=(ref UInt8 a, UInt8 b);
		[AutoGenerated]
		public static UInt8 operator prefix ~(UInt8 a);
  
		[AutoGenerated]
		public implicit as UInt16();
  		[AutoGenerated]
		public implicit as UInt32();
  		[AutoGenerated]
		public implicit as UInt64();
  
	}
 
	public struct UInt16
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(UInt16 value);
 
		public override external string ToString();
		public static external UInt16 Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as UInt16);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator <=(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator >(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator >=(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator ==(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static bool operator !=(UInt16 a, UInt16 b);
 
		[AutoGenerated]
		public static UInt32 operator +(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator +=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator -(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator -=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator *(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator *=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator /(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator /=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator %(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator %=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator prefix ++(ref UInt16 a);
		[AutoGenerated]
		public static UInt16 operator prefix --(ref UInt16 a);
		[AutoGenerated]
		public static UInt16 operator postfix ++(ref UInt16 a);
		[AutoGenerated]
		public static UInt16 operator postfix --(ref UInt16 a);
		[AutoGenerated]
		public static UInt16 operator prefix +(UInt16 a);
		[AutoGenerated]
		public static UInt16 operator prefix -(UInt16 a);
 
		[AutoGenerated]
		public static UInt32 operator <<(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator <<=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt32 operator >>(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator >>=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator |(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator |=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator &(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator &=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator ^(UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator ^=(ref UInt16 a, UInt16 b);
		[AutoGenerated]
		public static UInt16 operator prefix ~(UInt16 a);
  
		[AutoGenerated]
		public implicit as UInt32();
  		[AutoGenerated]
		public implicit as UInt64();
  
	}
 
	public struct UInt32
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(UInt32 value);
 
		public override external string ToString();
		public static external UInt32 Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as UInt32);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator <=(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator >(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator >=(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator ==(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static bool operator !=(UInt32 a, UInt32 b);
 
		[AutoGenerated]
		public static UInt32 operator +(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator +=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator -(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator -=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator *(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator *=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator /(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator /=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator %(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator %=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator prefix ++(ref UInt32 a);
		[AutoGenerated]
		public static UInt32 operator prefix --(ref UInt32 a);
		[AutoGenerated]
		public static UInt32 operator postfix ++(ref UInt32 a);
		[AutoGenerated]
		public static UInt32 operator postfix --(ref UInt32 a);
		[AutoGenerated]
		public static UInt32 operator prefix +(UInt32 a);
		[AutoGenerated]
		public static UInt32 operator prefix -(UInt32 a);
 
		[AutoGenerated]
		public static UInt32 operator <<(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator <<=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator >>(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator >>=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator |(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator |=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator &(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator &=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator ^(UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator ^=(ref UInt32 a, UInt32 b);
		[AutoGenerated]
		public static UInt32 operator prefix ~(UInt32 a);
  
		[AutoGenerated]
		public implicit as UInt64();
  
	}
 
	public struct UInt64
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(UInt64 value);
 
		public override external string ToString();
		public static external UInt64 Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as UInt64);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator <=(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator >(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator >=(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator ==(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static bool operator !=(UInt64 a, UInt64 b);
 
		[AutoGenerated]
		public static UInt64 operator +(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator +=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator -(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator -=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator *(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator *=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator /(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator /=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator %(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator %=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator prefix ++(ref UInt64 a);
		[AutoGenerated]
		public static UInt64 operator prefix --(ref UInt64 a);
		[AutoGenerated]
		public static UInt64 operator postfix ++(ref UInt64 a);
		[AutoGenerated]
		public static UInt64 operator postfix --(ref UInt64 a);
		[AutoGenerated]
		public static UInt64 operator prefix +(UInt64 a);
		[AutoGenerated]
		public static UInt64 operator prefix -(UInt64 a);
 
		[AutoGenerated]
		public static UInt64 operator <<(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator <<=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator >>(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator >>=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator |(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator |=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator &(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator &=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator ^(UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator ^=(ref UInt64 a, UInt64 b);
		[AutoGenerated]
		public static UInt64 operator prefix ~(UInt64 a);
  

	}
 
	public struct Single
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(Single value);
 
		public override external string ToString();
		public static external Single Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as Single);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(Single a, Single b);
		[AutoGenerated]
		public static bool operator <=(Single a, Single b);
		[AutoGenerated]
		public static bool operator >(Single a, Single b);
		[AutoGenerated]
		public static bool operator >=(Single a, Single b);
		[AutoGenerated]
		public static bool operator ==(Single a, Single b);
		[AutoGenerated]
		public static bool operator !=(Single a, Single b);
 
		[AutoGenerated]
		public static Single operator +(Single a, Single b);
		[AutoGenerated]
		public static Single operator +=(ref Single a, Single b);
		[AutoGenerated]
		public static Single operator -(Single a, Single b);
		[AutoGenerated]
		public static Single operator -=(ref Single a, Single b);
		[AutoGenerated]
		public static Single operator *(Single a, Single b);
		[AutoGenerated]
		public static Single operator *=(ref Single a, Single b);
		[AutoGenerated]
		public static Single operator /(Single a, Single b);
		[AutoGenerated]
		public static Single operator /=(ref Single a, Single b);
  
		[AutoGenerated]
		public implicit as Double();
  
	}
 
	public struct Double
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(Double value);
 
		public override external string ToString();
		public static external Double Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as Double);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(Double a, Double b);
		[AutoGenerated]
		public static bool operator <=(Double a, Double b);
		[AutoGenerated]
		public static bool operator >(Double a, Double b);
		[AutoGenerated]
		public static bool operator >=(Double a, Double b);
		[AutoGenerated]
		public static bool operator ==(Double a, Double b);
		[AutoGenerated]
		public static bool operator !=(Double a, Double b);
 
		[AutoGenerated]
		public static Double operator +(Double a, Double b);
		[AutoGenerated]
		public static Double operator +=(ref Double a, Double b);
		[AutoGenerated]
		public static Double operator -(Double a, Double b);
		[AutoGenerated]
		public static Double operator -=(ref Double a, Double b);
		[AutoGenerated]
		public static Double operator *(Double a, Double b);
		[AutoGenerated]
		public static Double operator *=(ref Double a, Double b);
		[AutoGenerated]
		public static Double operator /(Double a, Double b);
		[AutoGenerated]
		public static Double operator /=(ref Double a, Double b);
  

	}
 
	public struct Char
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(Char value);
 
		public override external string ToString();
		public static external Char Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as Char);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator <(Char a, Char b);
		[AutoGenerated]
		public static bool operator <=(Char a, Char b);
		[AutoGenerated]
		public static bool operator >(Char a, Char b);
		[AutoGenerated]
		public static bool operator >=(Char a, Char b);
		[AutoGenerated]
		public static bool operator ==(Char a, Char b);
		[AutoGenerated]
		public static bool operator !=(Char a, Char b);
	}
 
	public struct Bool
	{
		[AutoGenerated]
		public constructor();
		[AutoGenerated]
		public constructor(Bool value);
 
		public override external string ToString();
		public static external Bool Parse(string value);
 
		public override bool Equals(object o)
		{
			try
			{
				return this==(o as Bool);
			}
			catch(TypeConversionException)
			{
				return false;
			}
		}
 
		[AutoGenerated]
		public static bool operator ==(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator !=(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ||(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ||=(ref Bool a, Bool b);
		[AutoGenerated]
		public static bool operator &&(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator &&=(ref Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ^(Bool a, Bool b);
		[AutoGenerated]
		public static bool operator ^=(ref Bool a, Bool b);
		[AutoGenerated]
		public static bool operator prefix !(Bool a);
	}
}