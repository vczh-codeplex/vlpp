namespace System
{
	[StructBase]
	public struct EnumItemBase
	{
		public int Value{get; protected internal set;}

		public constructor()
		{
		}

		public constructor(int value)
		{
			this.Value=value;
		}
	}

	generic<inout T : EnumItemBase, new()>
	public class EnumItemManager
	{
		public int GetPredefinedItemCount()
		{
			return this.predefinedItems.Length;
		}

		public T GetPredefinedItem(int index)
		{
			return this.predefinedItems[index];
		}

		public constructor(bool composable, Type enumerationType)
		{
			throw new NotImplementedException();
		}

		public T ItemFromString(string value)
		{
			throw new NotImplementedException();
		}

		public string ItemToString(T item)
		{
			throw new NotImplementedException();
		}
	}
}