using System.Reflection;

namespace System
{
	public interface IEnumItem
	{
		public int Value{get;}
	}

	[StructBase]
	public struct EnumItem : IEnumItem
	{
		private int value;

		public int Value
		{
			get
			{
				return value;
			}
		}

		public constructor()
		{
			this.value=0;
		}

		public constructor(int value)
		{
			this.value=value;
		}
	}

	generic<inout T : IEnumItem, new()>
	public class EnumItemManager
	{
		private T[] predefinedItems;

		public int GetPredefinedItemCount()
		{
			return this.predefinedItems.Length;
		}

		public T GetPredefinedItem(int index)
		{
			return this.predefinedItems[index];
		}

		public constructor(bool composable, Type enumerationType)
		{
			throw new NotImplementedException();
		}

		public T ItemFromString(string value)
		{
			throw new NotImplementedException();
		}

		public string ItemToString(T item)
		{
			throw new NotImplementedException();
		}
	}
}