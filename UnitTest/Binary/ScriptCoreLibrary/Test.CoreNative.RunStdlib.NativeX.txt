unit RunStdlib;

uses syscrnat;

function void ClearA(char* str)
{
    str[0]=cast<char>(0);
}

function void ClearW(wchar* str)
{
    str[0]=cast<wchar>(0);
}

function void AssertStringA(char* a, char* b, int size)
{
    Assert(strlen(a)==size, L"strlen should succeed");
    Assert(strlen(b)==size, L"strlen should succeed");
    Assert(strcmp(a, b)==0, L"strcmp should succeed");
    for(variable int i=0; when(i<=size) with i++;) do
    {
        Assert(a[i]==b[i], L"Chars in two equal string should be the same");
        if(i==size)
        {
            Assert(a[i]==0, L"String should end by 0");
        }
    }
}

function void AssertStringW(wchar* a, wchar* b, int size)
{
    Assert(wcslen(a)==size, L"wcslen should succeed");
    Assert(wcslen(b)==size, L"wcslen should succeed");
    Assert(wcscmp(a, b)==0, L"wcscmp should succeed");
    for(variable int i=0; when(i<=size) with i++;) do
    {
        Assert(a[i]==b[i], L"Chars in two equal string should be the same");
        if(i==size)
        {
            Assert(a[i]==0, L"String should end by 0");
        }
    }
}

function void TestCase_RunAdders()
{
    variable int sum=0;
    Print(L"sum++ for 1048576 times...");
    for(variable int i=0; when(i<1048576) with i++;) do
    {
        sum++;
    }
    Assert(sum==1048576, L"Just add it!");
}

function void TestCase_RunStdlibStringFunctions()
{
    variable char[100] bufferA1;
    variable char[100] bufferA2;
    variable char[100] bufferA3;
    variable wchar[100] bufferW1;
    variable wchar[100] bufferW2;
    variable wchar[100] bufferW3;
    variable char* a1=cast<char*>(&bufferA1);
    variable char* a2=cast<char*>(&bufferA2);
    variable char* a3=cast<char*>(&bufferA3);
    variable wchar* w1=cast<wchar*>(&bufferW1);
    variable wchar* w2=cast<wchar*>(&bufferW2);
    variable wchar* w3=cast<wchar*>(&bufferW3);
    ClearA(a1);
    ClearA(a2);
    ClearW(w1);
    ClearW(w2);

    AssertStringA(strcpy(a1, "abcdefg"), "abcdefg", 7);
    AssertStringA(strcpy(a2, "ABCDEFG"), "ABCDEFG", 7);
    AssertStringA(a1, "abcdefg", 7);
    AssertStringA(a2, "ABCDEFG", 7);
    strncpy(a3, a1, 3)[3]=cast<char>(0);
    AssertStringA(a3, "abc", 3);
    AssertStringA(strcat(a3, a2), "abcABCDEFG", 10);
    AssertStringA(a3, "abcABCDEFG", 10);
    strncat(a3, a1, 3)[13]=cast<char>(0);
    AssertStringA(a3, "abcABCDEFGabc", 13);
    Assert(strcmp("ABC", "abc")<0, L"strcmp should succeed");
    Assert(strcmp("abc", "abc")==0, L"strcmp should succeed");
    Assert(strcmp("ABC", "ABC")==0, L"strcmp should succeed");
    Assert(strcmp("abc", "ABC")>0, L"strcmp should succeed");
    Assert(stricmp("ABC", "abc")==0, L"stricmp should succeed");
    Assert(stricmp("abc", "abc")==0, L"stricmp should succeed");
    Assert(stricmp("ABC", "ABC")==0, L"stricmp should succeed");
    Assert(stricmp("abc", "ABC")==0, L"stricmp should succeed");
    Assert(strncmp("ABC", "abd", 2)<0, L"strncmp should succeed");
    Assert(strncmp("abc", "abd", 2)==0, L"strncmp should succeed");
    Assert(strncmp("ABC", "ABD", 2)==0, L"strncmp should succeed");
    Assert(strncmp("abc", "ABD", 2)>0, L"strncmp should succeed");
    Assert(strnicmp("ABC", "abd", 2)==0, L"strnicmp should succeed");
    Assert(strnicmp("abc", "abd", 2)==0, L"strnicmp should succeed");
    Assert(strnicmp("ABC", "ABD", 2)==0, L"strnicmp should succeed");
    Assert(strnicmp("abc", "ABD", 2)==0, L"strnicmp should succeed");
    AssertStringA(strstr("abcdefg", "de"), "defg", 4);
    Assert(strstr("abcdefg", "DE")==null, L"strstr should succeed");

    AssertStringW(wcscpy(w1, L"abcdefg"), L"abcdefg", 7);
    AssertStringW(wcscpy(w2, L"ABCDEFG"), L"ABCDEFG", 7);
    AssertStringW(w1, L"abcdefg", 7);
    AssertStringW(w2, L"ABCDEFG", 7);
    wcsncpy(w3, w1, 3)[3]=cast<wchar>(0);
    AssertStringW(w3, L"abc", 3);
    AssertStringW(wcscat(w3, w2), L"abcABCDEFG", 10);
    AssertStringW(w3, L"abcABCDEFG", 10);
    wcsncat(w3, w1, 3)[13]=cast<wchar>(0);
    AssertStringW(w3, L"abcABCDEFGabc", 13);
    Assert(wcscmp(L"ABC", L"abc")<0, L"wcscmp should succeed");
    Assert(wcscmp(L"abc", L"abc")==0, L"wcscmp should succeed");
    Assert(wcscmp(L"ABC", L"ABC")==0, L"wcscmp should succeed");
    Assert(wcscmp(L"abc", L"ABC")>0, L"wcscmp should succeed");
    Assert(wcsicmp(L"ABC", L"abc")==0, L"wcsicmp should succeed");
    Assert(wcsicmp(L"abc", L"abc")==0, L"wcsicmp should succeed");
    Assert(wcsicmp(L"ABC", L"ABC")==0, L"wcsicmp should succeed");
    Assert(wcsicmp(L"abc", L"ABC")==0, L"wcsicmp should succeed");
    Assert(wcsncmp(L"ABC", L"abd", 2)<0, L"wcsncmp should succeed");
    Assert(wcsncmp(L"abc", L"abd", 2)==0, L"wcsncmp should succeed");
    Assert(wcsncmp(L"ABC", L"ABD", 2)==0, L"wcsncmp should succeed");
    Assert(wcsncmp(L"abc", L"ABD", 2)>0, L"wcsncmp should succeed");
    Assert(wcsnicmp(L"ABC", L"abd", 2)==0, L"wcsnicmp should succeed");
    Assert(wcsnicmp(L"abc", L"abd", 2)==0, L"wcsnicmp should succeed");
    Assert(wcsnicmp(L"ABC", L"ABD", 2)==0, L"wcsnicmp should succeed");
    Assert(wcsnicmp(L"abc", L"ABD", 2)==0, L"wcsnicmp should succeed");
    AssertStringW(wcsstr(L"abcdefg", L"de"), L"defg", 4);
    Assert(wcsstr(L"abcdefg", L"DE")==null, L"wcsstr should succeed");

	variable int len = 0;

	strcpy(a1, "vczh is a genius");
	len = strtowcs(a1, null, 0);
	Assert(len==17, L"strtowcs should succeed");
	strtowcs(a1, w1, len);
	Assert(wcscmp(w1, L"vczh is a genius")==0, L"strtowcs should succeed");

	wcscpy(w1, L"vczh is a genius");
	len = wcstostr(w1, null, 0);
	Assert(len==17, L"wcstostr should succeed");
	wcstostr(w1, a1, len);
	Assert(strcmp(a1, "vczh is a genius")==0, L"wcstostr should succeed");
}

function void TestCase_RunStdlibConversionFunctions()
{
    variable char[100] stra;
    variable wchar[100] strw;
    variable char* pa = cast<char*>(&stra);
    variable wchar* pw = cast<wchar*>(&strw);

    Assert(atoi("100", null, 10)==100, L"atoi should succeed");
    Assert(wtoi(L"100", null, 10)==100, L"wtoi should succeed");
    Assert(atoi64("100", null, 10)==100, L"atoi64 should succeed");
    Assert(wtoi64(L"100", null, 10)==100, L"wtoi64 should succeed");
    Assert(atou("100", null, 10)==100, L"atou should succeed");
    Assert(wtou(L"100", null, 10)==100, L"wtou should succeed");
    Assert(atou64("100", null, 10)==100, L"atou64 should succeed");
    Assert(wtou64(L"100", null, 10)==100, L"wtou64 should succeed");
    Assert(atof("100", null)==100, L"atof should succeed");
    Assert(wtof(L"100", null)==100, L"wtof should succeed");

    Assert(itoa(100, pa, 100, 10)==pa, L"itoa should succeed");
    Assert(strcmp(pa, "100")==0, L"itoa should succeed");
    Assert(itow(100, pw, 100, 10)==pw, L"itow should succeed");
    Assert(wcscmp(pw, L"100")==0, L"itow should succeed");

    Assert(i64toa(200, pa, 100, 10)==pa, L"i64toa should succeed");
    Assert(strcmp(pa, "200")==0, L"i64toa should succeed");
    Assert(i64tow(200, pw, 100, 10)==pw, L"i64tow should succeed");
    Assert(wcscmp(pw, L"200")==0, L"i64tow should succeed");

    Assert(utoa(300u32, pa, 100, 10)==pa, L"utoa should succeed");
    Assert(strcmp(pa, "300")==0, L"utoa should succeed");
    Assert(utow(300u32, pw, 100, 10)==pw, L"utow should succeed");
    Assert(wcscmp(pw, L"300")==0, L"utow should succeed");

    Assert(u64toa(400u64, pa, 100, 10)==pa, L"u64toa should succeed");
    Assert(strcmp(pa, "400")==0, L"u64toa should succeed");
    Assert(u64tow(400u64, pw, 100, 10)==pw, L"u64tow should succeed");
    Assert(wcscmp(pw, L"400")==0, L"u64tow should succeed");

    Assert(ftoa(1.5, pa, 100)==pa, L"ftoa should succeed");
    Assert(strcmp(pa, "1.5")==0, L"ftoa should succeed");
    Assert(ftow(1.5, pw, 100)==pw, L"ftow should succeed");
    Assert(wcscmp(pw, L"1.5")==0, L"ftow should succeed");
}

function void TestCase_RunStdlibMathFunctions()
{
    rand16();
    sin(0.0);
    cos(0.0);
    tan(0.0);
    asin(0.0);
    acos(0.0);
    atan(0.0);
    exp(0.0);
    log2(0.0);
    log10(0.0);
    floor(0.0);
    ceil(0.0);
    abs(0.0);
    sinf(0.0f);
    cosf(0.0f);
    tanf(0.0f);
    asinf(0.0f);
    acosf(0.0f);
    atanf(0.0f);
    expf(0.0f);
    log2f(0.0f);
    log10f(0.0f);
    floorf(0.0f);
    ceilf(0.0f);
    absf(0.0f);
}