KEYWORDS:

NATIVE X
-------------------------------------------

function alias public variable structure type result cast if else while when for break continue return
@keyword-as-identifier

-------------------------------------------

function int Add(int a, int b) alias "abcde";
function int Add(int a, int b) public "abcde" statement;

variable int a;
variable int a=0;
variable int a public "abcde";
variable int a public "abcde" = 0;
variablt int a alias "abcde";

structure Link;
structure Link
{
  int data;
  Link* next;
  Link* prev;
}
structure Link public "abcde"
{
  int data;
  Link* next;
  Link* prev;
}
structure Link alias "abcde"

type a=b;

-------------------------------------------

int(8|16|32|64)
uint(8|16|32|64)
int
uint
bool
f(32|64)
char
wchar
Type[100]
Type*

-------------------------------------------

--a
a--
++a
a++
&a
*a
-a
!a
~a

-------------------------------------------

a+b,-,*,/,%,<<,>>,&,|,^,&&,||,<,>,<=,>=,!=,==
a+=b,-=,*=,/=,%=,<<=,>>=,&=,|=,^=,&&=,||=,=
a[b]
a(b,c,d)
result
cast<b>(a)

-------------------------------------------

;
{a;b;c;}
expression;
variable int a;
if(a)b;else c;

while([a])b;when([c]);

for(a,b;c;d,e)f;
break;
continue;
return;

======================================================================================

IMPORT/EXPORT DECLARATIONS

everything exported
use public to rename export declarations
use alias to import declarations
(import declaration auto code generator)

======================================================================================

BINARY STRUCTURE

"VLSA"[VERSION:int][SEGMENT-COUNT:int][SEGMENT-OFFSET:int-array]
  ([SEGMENT-NAME-CHARACTERS:int][SEGMENT-NAME:wchar-array][SEGMENT-DATA])*

global-data:[GLOBAL-BYTES:int][GLOBAL-DATA]
instruction:[INSTRUCTION-COUNT:int][INSTRUCTIONS]

======================================================================================

structure building expression (only when a structure has a no-parameter constructor)
array building expression
sizeof expression
new expression
delete expression

structure copy constructor
structure init constructor
structure destructor
template structure (assembly, code)
template function (assembly, code)
function rename declaration

======================================================================================

TEMPLATE IMPLEMENTATION

use a segment "template-declaration" and "template-function" to store exported template definitions

======================================================================================

Native
  X, Pascal, Basic, Python (stands for 4 kinds of syntax style, needs different technologies to write the syntax analyzers)
  C

Managed Object-Oriented
  X, Pascal, Basic, Python
  F#

Dynamic
  X, Pascal, Basic, Python
  Ruby, PHP, Lua, JavaScript
  
Functional
  Lisp

Logic
  Prolog
    
current:
  1. implement basic kernel utility functions
  2. implement link-time only instructions
  3. code generator