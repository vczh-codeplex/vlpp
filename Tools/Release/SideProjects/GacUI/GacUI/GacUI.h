/***********************************************************************
DO NOT MODIFY!!!
THIS FILE IS GENERATED BY _TranslateXMLtoCode.exe

Developer: 陈梓瀚(vczh)
***********************************************************************/

#ifndef GACUI_CONTROL_LIBRARY_CPP
#define GACUI_CONTROL_LIBRARY_CPP

#include "GacUICommon.h"

namespace gacui_cpp_1_0
{
	class GuiGraphicsComposition;
	class GuiControl;
	class GuiControlHost;
	class GuiComponent;
	class GuiMenu;
	class IGuiGraphicsElement;
	class IGuiGraphicsRenderer;
	class GuiTableComposition;
	class GuiTab;
	class INodeProvider;
	class INodeRootProvider;
	class INodeItemStyleProvider;
	class MemoryNodeProvider;
	class INativeImage;
	class INativeImageFrame;
	class INativeWindow;

/***********************************************************************
Alignment :: Type
***********************************************************************/

	class GACUI_API Alignment
	{
	public:
		enum Type
		{
			Left = 0,
			Top = 0,
			Center = 1,
			Right = 2,
			Bottom = 2,
		};
		
	};
	

/***********************************************************************
CharAtt
***********************************************************************/

	class GACUI_API CharAtt
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		CharAtt(void* __internal_object_reference_input);
	
	public:
		virtual ~CharAtt();
	
	public:
		
		unsigned __int32 get_rightOffset();
		void set_rightOffset(unsigned __int32 value);
		unsigned __int32 get_colorIndex();
		void set_colorIndex(unsigned __int32 value);
		
	};
	

/***********************************************************************
Color
***********************************************************************/

	class GACUI_API Color
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Color(void* __internal_object_reference_input);
	
	public:
		virtual ~Color();
	
	public:
		
		static rptr<Color> CreateRptr(unsigned __int8 _r, unsigned __int8 _g, unsigned __int8 _b, unsigned __int8 _a);
		static Color Create(unsigned __int8 _r, unsigned __int8 _g, unsigned __int8 _b, unsigned __int8 _a);
		static rptr<Color> CreateRptr();
		static Color Create();
		
		signed __int32 Compare(Color color);
		bool operator==(Color color);
		bool operator!=(Color color);
		bool operator<(Color color);
		bool operator<=(Color value);
		bool operator>(Color color);
		bool operator>=(Color value);
		
		unsigned __int8 get_r();
		void set_r(unsigned __int8 value);
		unsigned __int8 get_g();
		void set_g(unsigned __int8 value);
		unsigned __int8 get_b();
		void set_b(unsigned __int8 value);
		unsigned __int8 get_a();
		void set_a(unsigned __int8 value);
		unsigned __int32 get_value();
		void set_value(unsigned __int32 value);
		
	};
	

/***********************************************************************
ColorItem
***********************************************************************/

	class GACUI_API ColorItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ColorItem(void* __internal_object_reference_input);
	
	public:
		virtual ~ColorItem();
	
	public:
		
		static rptr<ColorItem> CreateRptr();
		static ColorItem Create();
		
		Color get_text();
		void set_text(Color value);
		Color get_background();
		void set_background(Color value);
		
	};
	

/***********************************************************************
ColorEntry
***********************************************************************/

	class GACUI_API ColorEntry
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ColorEntry(void* __internal_object_reference_input);
	
	public:
		virtual ~ColorEntry();
	
	public:
		
		static rptr<ColorEntry> CreateRptr();
		static ColorEntry Create();
		
		bool operator==(const ColorEntry& value);
		bool operator!=(const ColorEntry& value);
		
		ColorItem get_normal();
		void set_normal(ColorItem value);
		ColorItem get_selectedFocused();
		void set_selectedFocused(ColorItem value);
		ColorItem get_selectedUnfocused();
		void set_selectedUnfocused(ColorItem value);
		
	};
	

/***********************************************************************
Array_of_ColorEntry
***********************************************************************/

	class GACUI_API Array_of_ColorEntry
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Array_of_ColorEntry(void* __internal_object_reference_input);
	
	public:
		virtual ~Array_of_ColorEntry();
	
	public:
		
		static rptr<Array_of_ColorEntry> CreateRptr(signed __int32 size);
		
		bool Contains(const ColorEntry& item);
		signed __int32 Count();
		const ColorEntry& Get(signed __int32 index);
		ColorEntry& operator[](signed __int32 index);
		signed __int32 IndexOf(const ColorEntry& item);
		void Set(signed __int32 index, const ColorEntry& item);
		void Resize(signed __int32 size);
		rptr<Array_of_ColorEntry> operator=(rptr<Array_of_ColorEntry> value);
		
	};
	

/***********************************************************************
DescriptableObject
***********************************************************************/

	class GACUI_API DescriptableObject
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		DescriptableObject(void* __internal_object_reference_input);
	
	public:
		virtual ~DescriptableObject();
	
	public:
		
		static rptr<DescriptableObject> CreateRptr();
		static DescriptableObject Create();
		
		DescriptableObject& operator=(const DescriptableObject& value);
		
	};
	

/***********************************************************************
ElementShape :: Type
***********************************************************************/

	class GACUI_API ElementShape
	{
	public:
		enum Type
		{
			Rectangle = 0,
			Ellipse = 1,
		};
		
	};
	

/***********************************************************************
FontProperties
***********************************************************************/

	class GACUI_API FontProperties
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		FontProperties(void* __internal_object_reference_input);
	
	public:
		virtual ~FontProperties();
	
	public:
		
		static rptr<FontProperties> CreateRptr(const FontProperties& __that);
		static FontProperties Create(const FontProperties& __that);
		static rptr<FontProperties> CreateRptr();
		static FontProperties Create();
		
		signed __int32 Compare(const FontProperties& value);
		bool operator==(const FontProperties& value);
		bool operator!=(const FontProperties& value);
		bool operator<(const FontProperties& value);
		bool operator<=(const FontProperties& value);
		bool operator>(const FontProperties& value);
		bool operator>=(const FontProperties& value);
		FontProperties& operator=(const FontProperties& __that);
		
		GacString get_fontFamily();
		void set_fontFamily(GacString value);
		signed __int32 get_size();
		void set_size(signed __int32 value);
		bool get_bold();
		void set_bold(bool value);
		bool get_italic();
		void set_italic(bool value);
		bool get_underline();
		void set_underline(bool value);
		bool get_strikeline();
		void set_strikeline(bool value);
		bool get_antialias();
		void set_antialias(bool value);
		
	};
	

/***********************************************************************
GuiCellOption :: ComposeType
***********************************************************************/

	class GACUI_API GuiCellOption
	{
	public:
		enum ComposeType
		{
			Absolute = 0,
			Percentage = 1,
			MinSize = 2,
		};
		

/***********************************************************************
GuiCellOption
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiCellOption(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiCellOption();
	
	public:
		
		static rptr<GuiCellOption> CreateRptr();
		static GuiCellOption Create();
		
		bool operator==(const GuiCellOption& value);
		bool operator!=(const GuiCellOption& value);
		
		static GuiCellOption AbsoluteOption(signed __int32 value);
		static GuiCellOption PercentageOption(double value);
		static GuiCellOption MinSizeOption();
		
		GuiCellOption :: ComposeType get_composeType();
		void set_composeType(GuiCellOption :: ComposeType value);
		signed __int32 get_absolute();
		void set_absolute(signed __int32 value);
		double get_percentage();
		void set_percentage(double value);
		
	};
	

/***********************************************************************
GuiComponent
***********************************************************************/

	class GACUI_API GuiComponent
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiComponent(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiComponent();
	
	public:
		
		static rptr<GuiComponent> CreateRptr();
		
		rptr<GuiComponent> operator=(rptr<GuiComponent> value);
		
		rptr<GuiControlHost> GetControlHost();
		
	};
	

/***********************************************************************
GuiEventArgs
***********************************************************************/

	class GACUI_API GuiEventArgs
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiEventArgs();
	
	public:
		
		static rptr<GuiEventArgs> CreateRptr();
		static GuiEventArgs Create();
		static rptr<GuiEventArgs> CreateRptr(rptr<GuiGraphicsComposition> composition);
		static GuiEventArgs Create(rptr<GuiGraphicsComposition> composition);
		
		rptr<GuiGraphicsComposition> get_compositionSource();
		void set_compositionSource(rptr<GuiGraphicsComposition> value);
		rptr<GuiGraphicsComposition> get_eventSource();
		void set_eventSource(rptr<GuiGraphicsComposition> value);
		bool get_handled();
		void set_handled(bool value);
		
	};
	

/***********************************************************************
GuiImageData
***********************************************************************/

	class GACUI_API GuiImageData
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiImageData(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiImageData();
	
	public:
		
		static rptr<GuiImageData> CreateRptr(sptr<INativeImage> _image, signed __int32 _frameIndex);
		static GuiImageData Create(sptr<INativeImage> _image, signed __int32 _frameIndex);
		static rptr<GuiImageData> CreateRptr();
		static GuiImageData Create();
		
		GuiImageData& operator=(const GuiImageData& value);
		
		sptr<INativeImage> GetImage();
		signed __int32 GetFrameIndex();
		
	};
	

/***********************************************************************
GuiRequestEventArgs
***********************************************************************/

	class GACUI_API GuiRequestEventArgs : public GuiEventArgs
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiRequestEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiRequestEventArgs();
	
	public:
		
		static rptr<GuiRequestEventArgs> CreateRptr(rptr<GuiGraphicsComposition> composition);
		static GuiRequestEventArgs Create(rptr<GuiGraphicsComposition> composition);
		static rptr<GuiRequestEventArgs> CreateRptr();
		static GuiRequestEventArgs Create();
		
		bool get_cancel();
		void set_cancel(bool value);
		
	};
	

/***********************************************************************
IDescriptable
***********************************************************************/

	class GACUI_API IDescriptable : public DescriptableObject
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IDescriptable(void* __internal_object_reference_input);
	
	public:
		virtual ~IDescriptable();
	
	public:
		
		static rptr<IDescriptable> CreateRptr();
		
		rptr<IDescriptable> operator=(rptr<IDescriptable> value);
		
	};
	

/***********************************************************************
GuiGraphicsEvent_of_GuiEventArgs
***********************************************************************/

	class GACUI_API GuiGraphicsEvent_of_GuiEventArgs
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsEvent_of_GuiEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsEvent_of_GuiEventArgs();
	
	public:
		class IHandler;
		
		static rptr<GuiGraphicsEvent_of_GuiEventArgs> CreateRptr(rptr<GuiGraphicsComposition> _sender);
		
		bool Attach(sptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> handler);
		bool Detach(sptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> handler);
		void Execute(GuiEventArgs& argument);
		rptr<GuiGraphicsEvent_of_GuiEventArgs> operator=(rptr<GuiGraphicsEvent_of_GuiEventArgs> value);
		
		rptr<GuiGraphicsComposition> GetAssociatedComposition();
		void SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
		

/***********************************************************************
GuiGraphicsEvent_of_GuiEventArgs :: IHandler
***********************************************************************/

		class GACUI_API IHandler : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IHandler(void* __internal_object_reference_input);
		
		public:
			virtual ~IHandler();
		
		public:
			void Execute(rptr<GuiGraphicsComposition> sender, GuiEventArgs& argument);
			rptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> operator=(rptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> value);
			
		};
		
	};
	

/***********************************************************************
GuiGraphicsEvent_of_GuiRequestEventArgs
***********************************************************************/

	class GACUI_API GuiGraphicsEvent_of_GuiRequestEventArgs
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsEvent_of_GuiRequestEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsEvent_of_GuiRequestEventArgs();
	
	public:
		class IHandler;
		
		static rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> CreateRptr(rptr<GuiGraphicsComposition> _sender);
		
		bool Attach(sptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> handler);
		bool Detach(sptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> handler);
		void Execute(GuiRequestEventArgs& argument);
		rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> operator=(rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> value);
		
		rptr<GuiGraphicsComposition> GetAssociatedComposition();
		void SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
		

/***********************************************************************
GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler
***********************************************************************/

		class GACUI_API IHandler : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IHandler(void* __internal_object_reference_input);
		
		public:
			virtual ~IHandler();
		
		public:
			void Execute(rptr<GuiGraphicsComposition> sender, GuiRequestEventArgs& argument);
			rptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> operator=(rptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> value);
			
		};
		
	};
	

/***********************************************************************
GuiTabPage
***********************************************************************/

	class GACUI_API GuiTabPage
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiTabPage(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiTabPage();
	
	public:
		
		rptr<GuiTabPage> operator=(rptr<GuiTabPage> value);
		
		rptr<GuiControl> GetContainer();
		rptr<GuiTab> GetOwnerTab();
		const GacString& GetText();
		void SetText(const GacString& value);
		bool GetSelected();
		GuiGraphicsEvent_of_GuiEventArgs on_TextChanged();
		
	};
	

/***********************************************************************
IGuiGraphicsAnimation
***********************************************************************/

	class GACUI_API IGuiGraphicsAnimation : public IDescriptable
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IGuiGraphicsAnimation(void* __internal_object_reference_input);
	
	public:
		virtual ~IGuiGraphicsAnimation();
	
	public:
		
		void Play(signed __int32 currentPosition, signed __int32 totalLength);
		void Stop();
		rptr<IGuiGraphicsAnimation> operator=(rptr<IGuiGraphicsAnimation> value);
		
		signed __int32 GetTotalLength();
		signed __int32 GetCurrentPosition();
		
	};
	

/***********************************************************************
GuiGraphicsAnimationManager
***********************************************************************/

	class GACUI_API GuiGraphicsAnimationManager
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsAnimationManager(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsAnimationManager();
	
	public:
		
		static rptr<GuiGraphicsAnimationManager> CreateRptr();
		
		void AddAnimation(sptr<IGuiGraphicsAnimation> animation);
		bool HasAnimation();
		void Play();
		rptr<GuiGraphicsAnimationManager> operator=(rptr<GuiGraphicsAnimationManager> value);
		
	};
	

/***********************************************************************
GuiTimeBasedAnimation
***********************************************************************/

	class GACUI_API GuiTimeBasedAnimation : public IGuiGraphicsAnimation
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiTimeBasedAnimation(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiTimeBasedAnimation();
	
	public:
		
		static rptr<GuiTimeBasedAnimation> CreateRptr(signed __int32 totalMilliseconds);
		
		void Restart(signed __int32 totalMilliseconds);
		rptr<GuiTimeBasedAnimation> operator=(rptr<GuiTimeBasedAnimation> value);
		
	};
	

/***********************************************************************
IGuiGraphicsElementFactory
***********************************************************************/

	class GACUI_API IGuiGraphicsElementFactory
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IGuiGraphicsElementFactory(void* __internal_object_reference_input);
	
	public:
		virtual ~IGuiGraphicsElementFactory();
	
	public:
		
		rptr<IGuiGraphicsElement> Create();
		rptr<IGuiGraphicsElementFactory> operator=(rptr<IGuiGraphicsElementFactory> value);
		
		GacString GetElementTypeName();
		
	};
	

/***********************************************************************
IGuiGraphicsElement
***********************************************************************/

	class GACUI_API IGuiGraphicsElement : public IDescriptable
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IGuiGraphicsElement(void* __internal_object_reference_input);
	
	public:
		virtual ~IGuiGraphicsElement();
	
	public:
		
		rptr<IGuiGraphicsElement> operator=(rptr<IGuiGraphicsElement> value);
		
		rptr<IGuiGraphicsElementFactory> GetFactory();
		rptr<IGuiGraphicsRenderer> GetRenderer();
		
	};
	

/***********************************************************************
Gui3DBorderElement
***********************************************************************/

	class GACUI_API Gui3DBorderElement : public IGuiGraphicsElement
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Gui3DBorderElement(void* __internal_object_reference_input);
	
	public:
		virtual ~Gui3DBorderElement();
	
	public:
		
		void SetColors(Color value1, Color value2);
		rptr<Gui3DBorderElement> operator=(rptr<Gui3DBorderElement> value);
		
		static rptr<Gui3DBorderElement> Create();
		
		Color GetColor1();
		Color GetColor2();
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
Gui3DSplitterElement :: Direction
***********************************************************************/

	class GACUI_API Gui3DSplitterElement : public IGuiGraphicsElement
	{
	public:
		enum Direction
		{
			Horizontal = 0,
			Vertical = 1,
		};
		

/***********************************************************************
Gui3DSplitterElement
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Gui3DSplitterElement(void* __internal_object_reference_input);
	
	public:
		virtual ~Gui3DSplitterElement();
	
	public:
		
		void SetColors(Color value1, Color value2);
		rptr<Gui3DSplitterElement> operator=(rptr<Gui3DSplitterElement> value);
		
		static rptr<Gui3DSplitterElement> Create();
		
		Color GetColor1();
		Color GetColor2();
		Gui3DSplitterElement :: Direction GetDirection();
		void SetDirection(Gui3DSplitterElement :: Direction value);
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
GuiGradientBackgroundElement :: Direction
***********************************************************************/

	class GACUI_API GuiGradientBackgroundElement : public IGuiGraphicsElement
	{
	public:
		enum Direction
		{
			Horizontal = 0,
			Vertical = 1,
			Slash = 2,
			Backslash = 3,
		};
		

/***********************************************************************
GuiGradientBackgroundElement
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGradientBackgroundElement(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGradientBackgroundElement();
	
	public:
		
		void SetColors(Color value1, Color value2);
		rptr<GuiGradientBackgroundElement> operator=(rptr<GuiGradientBackgroundElement> value);
		
		static rptr<GuiGradientBackgroundElement> Create();
		
		Color GetColor1();
		Color GetColor2();
		GuiGradientBackgroundElement :: Direction GetDirection();
		void SetDirection(GuiGradientBackgroundElement :: Direction value);
		ElementShape :: Type GetShape();
		void SetShape(ElementShape :: Type value);
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
GuiImageFrameElement
***********************************************************************/

	class GACUI_API GuiImageFrameElement : public IGuiGraphicsElement
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiImageFrameElement(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiImageFrameElement();
	
	public:
		
		void SetImage(sptr<INativeImage> _image, signed __int32 _frameIndex);
		void SetAlignments(Alignment :: Type horizontal, Alignment :: Type vertical);
		rptr<GuiImageFrameElement> operator=(rptr<GuiImageFrameElement> value);
		
		static rptr<GuiImageFrameElement> Create();
		
		sptr<INativeImage> GetImage();
		signed __int32 GetFrameIndex();
		Alignment :: Type GetHorizontalAlignment();
		Alignment :: Type GetVerticalAlignment();
		bool GetStretch();
		void SetStretch(bool value);
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
GuiRoundBorderElement
***********************************************************************/

	class GACUI_API GuiRoundBorderElement : public IGuiGraphicsElement
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiRoundBorderElement(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiRoundBorderElement();
	
	public:
		
		rptr<GuiRoundBorderElement> operator=(rptr<GuiRoundBorderElement> value);
		
		static rptr<GuiRoundBorderElement> Create();
		
		Color GetColor();
		void SetColor(Color value);
		signed __int32 GetRadius();
		void SetRadius(signed __int32 value);
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
GuiSolidBackgroundElement
***********************************************************************/

	class GACUI_API GuiSolidBackgroundElement : public IGuiGraphicsElement
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiSolidBackgroundElement(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiSolidBackgroundElement();
	
	public:
		
		rptr<GuiSolidBackgroundElement> operator=(rptr<GuiSolidBackgroundElement> value);
		
		static rptr<GuiSolidBackgroundElement> Create();
		
		Color GetColor();
		void SetColor(Color value);
		ElementShape :: Type GetShape();
		void SetShape(ElementShape :: Type value);
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
GuiSolidBorderElement
***********************************************************************/

	class GACUI_API GuiSolidBorderElement : public IGuiGraphicsElement
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiSolidBorderElement(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiSolidBorderElement();
	
	public:
		
		rptr<GuiSolidBorderElement> operator=(rptr<GuiSolidBorderElement> value);
		
		static rptr<GuiSolidBorderElement> Create();
		
		Color GetColor();
		void SetColor(Color value);
		ElementShape :: Type GetShape();
		void SetShape(ElementShape :: Type value);
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
GuiSolidLabelElement
***********************************************************************/

	class GACUI_API GuiSolidLabelElement : public IGuiGraphicsElement
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiSolidLabelElement(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiSolidLabelElement();
	
	public:
		
		void SetAlignments(Alignment :: Type horizontal, Alignment :: Type vertical);
		rptr<GuiSolidLabelElement> operator=(rptr<GuiSolidLabelElement> value);
		
		static rptr<GuiSolidLabelElement> Create();
		
		Color GetColor();
		void SetColor(Color value);
		const FontProperties& GetFont();
		void SetFont(const FontProperties& value);
		const GacString& GetText();
		void SetText(const GacString& value);
		Alignment :: Type GetHorizontalAlignment();
		Alignment :: Type GetVerticalAlignment();
		bool GetWrapLine();
		void SetWrapLine(bool value);
		bool GetEllipse();
		void SetEllipse(bool value);
		bool GetMultiline();
		void SetMultiline(bool value);
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
IGuiGraphicsRendererFactory
***********************************************************************/

	class GACUI_API IGuiGraphicsRendererFactory
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IGuiGraphicsRendererFactory(void* __internal_object_reference_input);
	
	public:
		virtual ~IGuiGraphicsRendererFactory();
	
	public:
		
		rptr<IGuiGraphicsRenderer> Create();
		rptr<IGuiGraphicsRendererFactory> operator=(rptr<IGuiGraphicsRendererFactory> value);
		
	};
	

/***********************************************************************
IGuiMenuService :: Direction
***********************************************************************/

	class GACUI_API IGuiMenuService : public IDescriptable
	{
	public:
		enum Direction
		{
			Horizontal = 0,
			Vertical = 1,
		};
		

/***********************************************************************
IGuiMenuService
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IGuiMenuService(void* __internal_object_reference_input);
	
	public:
		virtual ~IGuiMenuService();
	
	public:
		
		bool IsActiveState();
		void MenuItemExecuted();
		void MenuOpened(rptr<GuiMenu> menu);
		void MenuClosed(rptr<GuiMenu> menu);
		rptr<IGuiMenuService> operator=(rptr<IGuiMenuService> value);
		
		rptr<IGuiMenuService> GetParent();
		IGuiMenuService :: Direction GetPreferredDirection();
		rptr<GuiMenu> GetOpeningMenu();
		
		static wchar_t* get_Identifier();
		static void set_Identifier(wchar_t* value);
		
	};
	

/***********************************************************************
IList_of_int
***********************************************************************/

	class GACUI_API IList_of_int
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IList_of_int(void* __internal_object_reference_input);
	
	public:
		virtual ~IList_of_int();
	
	public:
		
		signed __int32 Insert(signed __int32 index, signed __int32 item);
		bool Set(signed __int32 index, signed __int32 item);
		rptr<IList_of_int> operator=(rptr<IList_of_int> value);
		
	};
	

/***********************************************************************
IList_of_MemoryNodeProvider
***********************************************************************/

	class GACUI_API IList_of_MemoryNodeProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IList_of_MemoryNodeProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~IList_of_MemoryNodeProvider();
	
	public:
		
		signed __int32 Insert(signed __int32 index, sptr<MemoryNodeProvider> item);
		bool Set(signed __int32 index, sptr<MemoryNodeProvider> item);
		rptr<IList_of_MemoryNodeProvider> operator=(rptr<IList_of_MemoryNodeProvider> value);
		
	};
	

/***********************************************************************
INativeAsyncService
***********************************************************************/

	class GACUI_API INativeAsyncService
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeAsyncService(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeAsyncService();
	
	public:
		
		bool IsInMainThread();
		rptr<INativeAsyncService> operator=(rptr<INativeAsyncService> value);
		
	};
	

/***********************************************************************
INativeClipboardService
***********************************************************************/

	class GACUI_API INativeClipboardService
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeClipboardService(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeClipboardService();
	
	public:
		
		bool ContainsText();
		bool SetText(const GacString& value);
		rptr<INativeClipboardService> operator=(rptr<INativeClipboardService> value);
		
		GacString GetText();
		
	};
	

/***********************************************************************
INativeCursor :: SystemCursorType
***********************************************************************/

	class GACUI_API INativeCursor
	{
	public:
		enum SystemCursorType
		{
			SmallWaiting = 0,
			LargeWaiting = 1,
			Arrow = 2,
			Cross = 3,
			Hand = 4,
			Help = 5,
			IBeam = 6,
			SizeAll = 7,
			SizeNESW = 8,
			SizeNS = 9,
			SizeNWSE = 10,
			SizeWE = 11,
			LastSystemCursor = 11,
		};
		

/***********************************************************************
INativeCursor
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeCursor(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeCursor();
	
	public:
		
		bool IsSystemCursor();
		rptr<INativeCursor> operator=(rptr<INativeCursor> value);
		
		INativeCursor :: SystemCursorType GetSystemCursorType();
		
	};
	

/***********************************************************************
INativeImageFrameCache
***********************************************************************/

	class GACUI_API INativeImageFrameCache
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeImageFrameCache(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeImageFrameCache();
	
	public:
		
		void OnAttach(rptr<INativeImageFrame> frame);
		void OnDetach(rptr<INativeImageFrame> frame);
		rptr<INativeImageFrameCache> operator=(rptr<INativeImageFrameCache> value);
		
	};
	

/***********************************************************************
INativeImageService
***********************************************************************/

	class GACUI_API INativeImageService
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeImageService(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeImageService();
	
	public:
		
		sptr<INativeImage> CreateImageFromFile(const GacString& path);
		rptr<INativeImageService> operator=(rptr<INativeImageService> value);
		
	};
	

/***********************************************************************
INativeImage :: FormatType
***********************************************************************/

	class GACUI_API INativeImage
	{
	public:
		enum FormatType
		{
			Bmp = 0,
			Gif = 1,
			Icon = 2,
			Jpeg = 3,
			Png = 4,
			Tiff = 5,
			Wmp = 6,
			Unknown = 7,
		};
		

/***********************************************************************
INativeImage
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeImage(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeImage();
	
	public:
		
		rptr<INativeImageFrame> GetFrame(signed __int32 index);
		rptr<INativeImage> operator=(rptr<INativeImage> value);
		
		rptr<INativeImageService> GetImageService();
		INativeImage :: FormatType GetFormat();
		signed __int32 GetFrameCount();
		
	};
	

/***********************************************************************
INativeInputService
***********************************************************************/

	class GACUI_API INativeInputService
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeInputService(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeInputService();
	
	public:
		
		void StartHookMouse();
		void StopHookMouse();
		bool IsHookingMouse();
		void StartTimer();
		void StopTimer();
		bool IsTimerEnabled();
		bool IsKeyPressing(signed __int32 code);
		bool IsKeyToggled(signed __int32 code);
		rptr<INativeInputService> operator=(rptr<INativeInputService> value);
		
	};
	

/***********************************************************************
INativeResourceService
***********************************************************************/

	class GACUI_API INativeResourceService
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeResourceService(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeResourceService();
	
	public:
		
		rptr<INativeCursor> GetSystemCursor(INativeCursor :: SystemCursorType type);
		rptr<INativeResourceService> operator=(rptr<INativeResourceService> value);
		
		rptr<INativeCursor> GetDefaultSystemCursor();
		FontProperties GetDefaultFont();
		void SetDefaultFont(const FontProperties& value);
		
	};
	

/***********************************************************************
INodeItemPrimaryTextView
***********************************************************************/

	class GACUI_API INodeItemPrimaryTextView : public IDescriptable
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INodeItemPrimaryTextView(void* __internal_object_reference_input);
	
	public:
		virtual ~INodeItemPrimaryTextView();
	
	public:
		
		GacString GetPrimaryTextViewText(rptr<INodeProvider> node);
		rptr<INodeItemPrimaryTextView> operator=(rptr<INodeItemPrimaryTextView> value);
		
		static wchar_t* get_Identifier();
		static void set_Identifier(wchar_t* value);
		
	};
	

/***********************************************************************
INodeProvider
***********************************************************************/

	class GACUI_API INodeProvider : public IDescriptable
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INodeProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~INodeProvider();
	
	public:
		
		signed __int32 CalculateTotalVisibleNodes();
		rptr<INodeProvider> RequestChild(signed __int32 index);
		void ReleaseChild(rptr<INodeProvider> node);
		rptr<INodeProvider> operator=(rptr<INodeProvider> value);
		
		bool GetExpanding();
		void SetExpanding(bool value);
		signed __int32 GetChildCount();
		rptr<INodeProvider> GetParent();
		
	};
	

/***********************************************************************
INodeProviderCallback
***********************************************************************/

	class GACUI_API INodeProviderCallback : public IDescriptable
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INodeProviderCallback(void* __internal_object_reference_input);
	
	public:
		virtual ~INodeProviderCallback();
	
	public:
		
		void OnAttached(rptr<INodeRootProvider> provider);
		void OnBeforeItemModified(rptr<INodeProvider> parentNode, signed __int32 start, signed __int32 count, signed __int32 newCount);
		void OnAfterItemModified(rptr<INodeProvider> parentNode, signed __int32 start, signed __int32 count, signed __int32 newCount);
		void OnItemExpanded(rptr<INodeProvider> node);
		void OnItemCollapsed(rptr<INodeProvider> node);
		rptr<INodeProviderCallback> operator=(rptr<INodeProviderCallback> value);
		
	};
	

/***********************************************************************
INodeRootProvider
***********************************************************************/

	class GACUI_API INodeRootProvider : public IDescriptable
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INodeRootProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~INodeRootProvider();
	
	public:
		
		bool CanGetNodeByVisibleIndex();
		rptr<INodeProvider> GetNodeByVisibleIndex(signed __int32 index);
		bool AttachCallback(rptr<INodeProviderCallback> value);
		bool DetachCallback(rptr<INodeProviderCallback> value);
		rptr<IDescriptable> RequestView(const GacString& identifier);
		void ReleaseView(rptr<IDescriptable> view);
		rptr<INodeRootProvider> operator=(rptr<INodeRootProvider> value);
		
		rptr<INodeProvider> GetRootNode();
		
	};
	

/***********************************************************************
IReadonlyList_of_ColorEntry
***********************************************************************/

	class GACUI_API IReadonlyList_of_ColorEntry
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IReadonlyList_of_ColorEntry(void* __internal_object_reference_input);
	
	public:
		virtual ~IReadonlyList_of_ColorEntry();
	
	public:
		
		bool Contains(const ColorEntry& item);
		signed __int32 Count();
		const ColorEntry& Get(signed __int32 index);
		const ColorEntry& operator[](signed __int32 index);
		signed __int32 IndexOf(const ColorEntry& item);
		rptr<IReadonlyList_of_ColorEntry> operator=(rptr<IReadonlyList_of_ColorEntry> value);
		
	};
	

/***********************************************************************
IReadonlyList_of_GuiGraphicsComposition_raw_pointer
***********************************************************************/

	class GACUI_API IReadonlyList_of_GuiGraphicsComposition_raw_pointer
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IReadonlyList_of_GuiGraphicsComposition_raw_pointer(void* __internal_object_reference_input);
	
	public:
		virtual ~IReadonlyList_of_GuiGraphicsComposition_raw_pointer();
	
	public:
		
		bool Contains(rptr<GuiGraphicsComposition> item);
		signed __int32 Count();
		rptr<GuiGraphicsComposition> Get(signed __int32 index);
		rptr<GuiGraphicsComposition> operator[](signed __int32 index);
		signed __int32 IndexOf(rptr<GuiGraphicsComposition> item);
		rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> operator=(rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> value);
		
	};
	

/***********************************************************************
IReadonlyList_of_GuiTabPage_raw_pointer
***********************************************************************/

	class GACUI_API IReadonlyList_of_GuiTabPage_raw_pointer
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IReadonlyList_of_GuiTabPage_raw_pointer(void* __internal_object_reference_input);
	
	public:
		virtual ~IReadonlyList_of_GuiTabPage_raw_pointer();
	
	public:
		
		bool Contains(rptr<GuiTabPage> item);
		signed __int32 Count();
		rptr<GuiTabPage> Get(signed __int32 index);
		rptr<GuiTabPage> operator[](signed __int32 index);
		signed __int32 IndexOf(rptr<GuiTabPage> item);
		rptr<IReadonlyList_of_GuiTabPage_raw_pointer> operator=(rptr<IReadonlyList_of_GuiTabPage_raw_pointer> value);
		
	};
	

/***********************************************************************
IReadonlyList_of_int
***********************************************************************/

	class GACUI_API IReadonlyList_of_int
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IReadonlyList_of_int(void* __internal_object_reference_input);
	
	public:
		virtual ~IReadonlyList_of_int();
	
	public:
		
		bool Contains(signed __int32 item);
		signed __int32 Count();
		signed __int32 Get(signed __int32 index);
		signed __int32 operator[](signed __int32 index);
		signed __int32 IndexOf(signed __int32 item);
		rptr<IReadonlyList_of_int> operator=(rptr<IReadonlyList_of_int> value);
		
	};
	

/***********************************************************************
ITreeViewItemView
***********************************************************************/

	class GACUI_API ITreeViewItemView : public INodeItemPrimaryTextView
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ITreeViewItemView(void* __internal_object_reference_input);
	
	public:
		virtual ~ITreeViewItemView();
	
	public:
		
		sptr<GuiImageData> GetNodeImage(rptr<INodeProvider> node);
		GacString GetNodeText(rptr<INodeProvider> node);
		rptr<ITreeViewItemView> operator=(rptr<ITreeViewItemView> value);
		
		static wchar_t* get_Identifier();
		static void set_Identifier(wchar_t* value);
		
	};
	

/***********************************************************************
List_of_ObjectString_of_wchar_t
***********************************************************************/

	class GACUI_API List_of_ObjectString_of_wchar_t
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		List_of_ObjectString_of_wchar_t(void* __internal_object_reference_input);
	
	public:
		virtual ~List_of_ObjectString_of_wchar_t();
	
	public:
		
		static rptr<List_of_ObjectString_of_wchar_t> CreateRptr();
		
		bool Contains(const GacString& item);
		signed __int32 IndexOf(const GacString& item);
		signed __int32 Add(const GacString& item);
		signed __int32 Insert(signed __int32 index, const GacString& item);
		bool Remove(const GacString& item);
		bool Set(signed __int32 index, const GacString& item);
		GacString& operator[](signed __int32 index);
		rptr<List_of_ObjectString_of_wchar_t> operator=(rptr<List_of_ObjectString_of_wchar_t> value);
		
	};
	

/***********************************************************************
ListViewColumn
***********************************************************************/

	class GACUI_API ListViewColumn
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewColumn(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewColumn();
	
	public:
		
		static rptr<ListViewColumn> CreateRptr(const GacString& _text, signed __int32 _size);
		static ListViewColumn Create(const GacString& _text, signed __int32 _size);
		
		ListViewColumn& operator=(const ListViewColumn& value);
		
		GacString get_text();
		void set_text(GacString value);
		signed __int32 get_size();
		void set_size(signed __int32 value);
		
	};
	

/***********************************************************************
IList_of_ListViewColumn
***********************************************************************/

	class GACUI_API IList_of_ListViewColumn
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IList_of_ListViewColumn(void* __internal_object_reference_input);
	
	public:
		virtual ~IList_of_ListViewColumn();
	
	public:
		
		signed __int32 Insert(signed __int32 index, sptr<ListViewColumn> item);
		bool Set(signed __int32 index, sptr<ListViewColumn> item);
		rptr<IList_of_ListViewColumn> operator=(rptr<IList_of_ListViewColumn> value);
		
	};
	

/***********************************************************************
ListViewItem
***********************************************************************/

	class GACUI_API ListViewItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewItem(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewItem();
	
	public:
		
		ListViewItem& operator=(const ListViewItem& value);
		
		sptr<GuiImageData> get_smallImage();
		void set_smallImage(sptr<GuiImageData> value);
		sptr<GuiImageData> get_largeImage();
		void set_largeImage(sptr<GuiImageData> value);
		GacString get_text();
		void set_text(GacString value);
		List_of_ObjectString_of_wchar_t get_subItems();
		void set_subItems(List_of_ObjectString_of_wchar_t value);
		
	};
	

/***********************************************************************
IList_of_ListViewItem
***********************************************************************/

	class GACUI_API IList_of_ListViewItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IList_of_ListViewItem(void* __internal_object_reference_input);
	
	public:
		virtual ~IList_of_ListViewItem();
	
	public:
		
		signed __int32 Insert(signed __int32 index, sptr<ListViewItem> item);
		bool Set(signed __int32 index, sptr<ListViewItem> item);
		rptr<IList_of_ListViewItem> operator=(rptr<IList_of_ListViewItem> value);
		
	};
	

/***********************************************************************
Margin
***********************************************************************/

	class GACUI_API Margin
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Margin(void* __internal_object_reference_input);
	
	public:
		virtual ~Margin();
	
	public:
		
		static rptr<Margin> CreateRptr(signed __int32 _left, signed __int32 _top, signed __int32 _right, signed __int32 _bottom);
		static Margin Create(signed __int32 _left, signed __int32 _top, signed __int32 _right, signed __int32 _bottom);
		static rptr<Margin> CreateRptr();
		static Margin Create();
		
		bool operator==(Margin margin);
		bool operator!=(Margin margin);
		
		signed __int32 get_left();
		void set_left(signed __int32 value);
		signed __int32 get_top();
		void set_top(signed __int32 value);
		signed __int32 get_right();
		void set_right(signed __int32 value);
		signed __int32 get_bottom();
		void set_bottom(signed __int32 value);
		
	};
	

/***********************************************************************
MemoryNodeProvider
***********************************************************************/

	class GACUI_API MemoryNodeProvider : public INodeProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		MemoryNodeProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~MemoryNodeProvider();
	
	public:
		
		static rptr<MemoryNodeProvider> CreateRptr(sptr<DescriptableObject> _data);
		static rptr<MemoryNodeProvider> CreateRptr();
		
		void NotifyDataModified();
		rptr<IList_of_MemoryNodeProvider> Children();
		rptr<MemoryNodeProvider> operator=(rptr<MemoryNodeProvider> value);
		
		sptr<DescriptableObject> GetData();
		void SetData(sptr<DescriptableObject> value);
		
	};
	

/***********************************************************************
NativeWindowCharInfo
***********************************************************************/

	class GACUI_API NativeWindowCharInfo
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		NativeWindowCharInfo(void* __internal_object_reference_input);
	
	public:
		virtual ~NativeWindowCharInfo();
	
	public:
		
		wchar_t get_code();
		void set_code(wchar_t value);
		bool get_ctrl();
		void set_ctrl(bool value);
		bool get_shift();
		void set_shift(bool value);
		bool get_alt();
		void set_alt(bool value);
		bool get_capslock();
		void set_capslock(bool value);
		
	};
	

/***********************************************************************
GuiCharEventArgs
***********************************************************************/

	class GACUI_API GuiCharEventArgs : public GuiEventArgs, public NativeWindowCharInfo
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiCharEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiCharEventArgs();
	
	public:
		
		static rptr<GuiCharEventArgs> CreateRptr(rptr<GuiGraphicsComposition> composition);
		static GuiCharEventArgs Create(rptr<GuiGraphicsComposition> composition);
		static rptr<GuiCharEventArgs> CreateRptr();
		static GuiCharEventArgs Create();
		
	};
	

/***********************************************************************
GuiGraphicsEvent_of_GuiCharEventArgs
***********************************************************************/

	class GACUI_API GuiGraphicsEvent_of_GuiCharEventArgs
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsEvent_of_GuiCharEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsEvent_of_GuiCharEventArgs();
	
	public:
		class IHandler;
		
		static rptr<GuiGraphicsEvent_of_GuiCharEventArgs> CreateRptr(rptr<GuiGraphicsComposition> _sender);
		
		bool Attach(sptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> handler);
		bool Detach(sptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> handler);
		void Execute(GuiCharEventArgs& argument);
		rptr<GuiGraphicsEvent_of_GuiCharEventArgs> operator=(rptr<GuiGraphicsEvent_of_GuiCharEventArgs> value);
		
		rptr<GuiGraphicsComposition> GetAssociatedComposition();
		void SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
		

/***********************************************************************
GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler
***********************************************************************/

		class GACUI_API IHandler : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IHandler(void* __internal_object_reference_input);
		
		public:
			virtual ~IHandler();
		
		public:
			void Execute(rptr<GuiGraphicsComposition> sender, GuiCharEventArgs& argument);
			rptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> operator=(rptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> value);
			
		};
		
	};
	

/***********************************************************************
NativeWindowKeyInfo
***********************************************************************/

	class GACUI_API NativeWindowKeyInfo
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		NativeWindowKeyInfo(void* __internal_object_reference_input);
	
	public:
		virtual ~NativeWindowKeyInfo();
	
	public:
		
		signed __int32 get_code();
		void set_code(signed __int32 value);
		bool get_ctrl();
		void set_ctrl(bool value);
		bool get_shift();
		void set_shift(bool value);
		bool get_alt();
		void set_alt(bool value);
		bool get_capslock();
		void set_capslock(bool value);
		
	};
	

/***********************************************************************
GuiKeyEventArgs
***********************************************************************/

	class GACUI_API GuiKeyEventArgs : public GuiEventArgs, public NativeWindowKeyInfo
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiKeyEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiKeyEventArgs();
	
	public:
		
		static rptr<GuiKeyEventArgs> CreateRptr(rptr<GuiGraphicsComposition> composition);
		static GuiKeyEventArgs Create(rptr<GuiGraphicsComposition> composition);
		static rptr<GuiKeyEventArgs> CreateRptr();
		static GuiKeyEventArgs Create();
		
	};
	

/***********************************************************************
GuiGraphicsEvent_of_GuiKeyEventArgs
***********************************************************************/

	class GACUI_API GuiGraphicsEvent_of_GuiKeyEventArgs
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsEvent_of_GuiKeyEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsEvent_of_GuiKeyEventArgs();
	
	public:
		class IHandler;
		
		static rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> CreateRptr(rptr<GuiGraphicsComposition> _sender);
		
		bool Attach(sptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> handler);
		bool Detach(sptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> handler);
		void Execute(GuiKeyEventArgs& argument);
		rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> operator=(rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> value);
		
		rptr<GuiGraphicsComposition> GetAssociatedComposition();
		void SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
		

/***********************************************************************
GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler
***********************************************************************/

		class GACUI_API IHandler : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IHandler(void* __internal_object_reference_input);
		
		public:
			virtual ~IHandler();
		
		public:
			void Execute(rptr<GuiGraphicsComposition> sender, GuiKeyEventArgs& argument);
			rptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> operator=(rptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> value);
			
		};
		
	};
	

/***********************************************************************
NativeWindowMouseInfo
***********************************************************************/

	class GACUI_API NativeWindowMouseInfo
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		NativeWindowMouseInfo(void* __internal_object_reference_input);
	
	public:
		virtual ~NativeWindowMouseInfo();
	
	public:
		
		bool get_ctrl();
		void set_ctrl(bool value);
		bool get_shift();
		void set_shift(bool value);
		bool get_left();
		void set_left(bool value);
		bool get_middle();
		void set_middle(bool value);
		bool get_right();
		void set_right(bool value);
		signed __int32 get_x();
		void set_x(signed __int32 value);
		signed __int32 get_y();
		void set_y(signed __int32 value);
		signed __int32 get_wheel();
		void set_wheel(signed __int32 value);
		
	};
	

/***********************************************************************
GuiMouseEventArgs
***********************************************************************/

	class GACUI_API GuiMouseEventArgs : public GuiEventArgs, public NativeWindowMouseInfo
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiMouseEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiMouseEventArgs();
	
	public:
		
		static rptr<GuiMouseEventArgs> CreateRptr(rptr<GuiGraphicsComposition> composition);
		static GuiMouseEventArgs Create(rptr<GuiGraphicsComposition> composition);
		static rptr<GuiMouseEventArgs> CreateRptr();
		static GuiMouseEventArgs Create();
		
	};
	

/***********************************************************************
GuiGraphicsEvent_of_GuiMouseEventArgs
***********************************************************************/

	class GACUI_API GuiGraphicsEvent_of_GuiMouseEventArgs
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsEvent_of_GuiMouseEventArgs(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsEvent_of_GuiMouseEventArgs();
	
	public:
		class IHandler;
		
		static rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> CreateRptr(rptr<GuiGraphicsComposition> _sender);
		
		bool Attach(sptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> handler);
		bool Detach(sptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> handler);
		void Execute(GuiMouseEventArgs& argument);
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> operator=(rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> value);
		
		rptr<GuiGraphicsComposition> GetAssociatedComposition();
		void SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
		

/***********************************************************************
GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler
***********************************************************************/

		class GACUI_API IHandler : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IHandler(void* __internal_object_reference_input);
		
		public:
			virtual ~IHandler();
		
		public:
			void Execute(rptr<GuiGraphicsComposition> sender, GuiMouseEventArgs& argument);
			rptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> operator=(rptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> value);
			
		};
		
	};
	

/***********************************************************************
GuiGraphicsEventReceiver
***********************************************************************/

	class GACUI_API GuiGraphicsEventReceiver
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsEventReceiver(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsEventReceiver();
	
	public:
		
		static rptr<GuiGraphicsEventReceiver> CreateRptr(rptr<GuiGraphicsComposition> _sender);
		
		rptr<GuiGraphicsEventReceiver> operator=(rptr<GuiGraphicsEventReceiver> value);
		
		rptr<GuiGraphicsComposition> GetAssociatedComposition();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_leftButtonDown();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_leftButtonUp();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_leftButtonDoubleClick();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_middleButtonDown();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_middleButtonUp();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_middleButtonDoubleClick();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_rightButtonDown();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_rightButtonUp();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_rightButtonDoubleClick();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_horizontalWheel();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_verticalWheel();
		GuiGraphicsEvent_of_GuiMouseEventArgs on_mouseMove();
		GuiGraphicsEvent_of_GuiEventArgs on_mouseEnter();
		GuiGraphicsEvent_of_GuiEventArgs on_mouseLeave();
		GuiGraphicsEvent_of_GuiKeyEventArgs on_previewKey();
		GuiGraphicsEvent_of_GuiKeyEventArgs on_keyDown();
		GuiGraphicsEvent_of_GuiKeyEventArgs on_keyUp();
		GuiGraphicsEvent_of_GuiKeyEventArgs on_systemKeyDown();
		GuiGraphicsEvent_of_GuiKeyEventArgs on_systemKeyUp();
		GuiGraphicsEvent_of_GuiCharEventArgs on_previewCharInput();
		GuiGraphicsEvent_of_GuiCharEventArgs on_charInput();
		GuiGraphicsEvent_of_GuiEventArgs on_gotFocus();
		GuiGraphicsEvent_of_GuiEventArgs on_lostFocus();
		GuiGraphicsEvent_of_GuiEventArgs on_caretNotify();
		
	};
	

/***********************************************************************
NodeRootProviderBase
***********************************************************************/

	class GACUI_API NodeRootProviderBase : public INodeRootProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		NodeRootProviderBase(void* __internal_object_reference_input);
	
	public:
		virtual ~NodeRootProviderBase();
	
	public:
		
		static rptr<NodeRootProviderBase> CreateRptr();
		
		rptr<NodeRootProviderBase> operator=(rptr<NodeRootProviderBase> value);
		
	};
	

/***********************************************************************
MemoryNodeRootProvider
***********************************************************************/

	class GACUI_API MemoryNodeRootProvider : public MemoryNodeProvider, public NodeRootProviderBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		MemoryNodeRootProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~MemoryNodeRootProvider();
	
	public:
		
		static rptr<MemoryNodeRootProvider> CreateRptr();
		
		rptr<MemoryNodeRootProvider> operator=(rptr<MemoryNodeRootProvider> value);
		
	};
	

/***********************************************************************
Point
***********************************************************************/

	class GACUI_API Point
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Point(void* __internal_object_reference_input);
	
	public:
		virtual ~Point();
	
	public:
		
		static rptr<Point> CreateRptr(signed __int32 _x, signed __int32 _y);
		static Point Create(signed __int32 _x, signed __int32 _y);
		static rptr<Point> CreateRptr();
		static Point Create();
		
		bool operator==(Point point);
		bool operator!=(Point point);
		
		signed __int32 get_x();
		void set_x(signed __int32 value);
		signed __int32 get_y();
		void set_y(signed __int32 value);
		
	};
	

/***********************************************************************
INativeControllerListener
***********************************************************************/

	class GACUI_API INativeControllerListener
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeControllerListener(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeControllerListener();
	
	public:
		
		static rptr<INativeControllerListener> CreateRptr();
		
		void LeftButtonDown(Point position);
		void LeftButtonUp(Point position);
		void RightButtonDown(Point position);
		void RightButtonUp(Point position);
		void MouseMoving(Point position);
		void GlobalTimer();
		void ClipboardUpdated();
		void NativeWindowCreated(rptr<INativeWindow> window);
		void NativeWindowDestroying(rptr<INativeWindow> window);
		rptr<INativeControllerListener> operator=(rptr<INativeControllerListener> value);
		
	};
	

/***********************************************************************
INativeCallbackService
***********************************************************************/

	class GACUI_API INativeCallbackService
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeCallbackService(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeCallbackService();
	
	public:
		
		bool InstallListener(rptr<INativeControllerListener> listener);
		bool UninstallListener(rptr<INativeControllerListener> listener);
		rptr<INativeCallbackService> operator=(rptr<INativeCallbackService> value);
		
	};
	

/***********************************************************************
INativeWindowService
***********************************************************************/

	class GACUI_API INativeWindowService
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeWindowService(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeWindowService();
	
	public:
		
		rptr<INativeWindow> CreateNativeWindow();
		void DestroyNativeWindow(rptr<INativeWindow> window);
		rptr<INativeWindow> GetWindow(Point location);
		void Run(rptr<INativeWindow> window);
		rptr<INativeWindowService> operator=(rptr<INativeWindowService> value);
		
		rptr<INativeWindow> GetMainWindow();
		
	};
	

/***********************************************************************
Size
***********************************************************************/

	class GACUI_API Size
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Size(void* __internal_object_reference_input);
	
	public:
		virtual ~Size();
	
	public:
		
		static rptr<Size> CreateRptr(signed __int32 _x, signed __int32 _y);
		static Size Create(signed __int32 _x, signed __int32 _y);
		static rptr<Size> CreateRptr();
		static Size Create();
		
		bool operator==(Size size);
		bool operator!=(Size size);
		
		signed __int32 get_x();
		void set_x(signed __int32 value);
		signed __int32 get_y();
		void set_y(signed __int32 value);
		
	};
	

/***********************************************************************
GuiPolygonElement
***********************************************************************/

	class GACUI_API GuiPolygonElement : public IGuiGraphicsElement
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiPolygonElement(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiPolygonElement();
	
	public:
		
		void SetPoints(Point* p, signed __int32 count);
		rptr<GuiPolygonElement> operator=(rptr<GuiPolygonElement> value);
		
		static rptr<GuiPolygonElement> Create();
		
		Size GetSize();
		void SetSize(Size value);
		Point* GetPoints();
		signed __int32 GetPointCount();
		Color GetBorderColor();
		void SetBorderColor(Color value);
		Color GetBackgroundColor();
		void SetBackgroundColor(Color value);
		
		static GacString GetElementTypeName();
		
	};
	

/***********************************************************************
INativeImageFrame
***********************************************************************/

	class GACUI_API INativeImageFrame
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeImageFrame(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeImageFrame();
	
	public:
		
		bool SetCache(void* key, sptr<INativeImageFrameCache> cache);
		sptr<INativeImageFrameCache> GetCache(void* key);
		sptr<INativeImageFrameCache> RemoveCache(void* key);
		rptr<INativeImageFrame> operator=(rptr<INativeImageFrame> value);
		
		rptr<INativeImage> GetImage();
		Size GetSize();
		
	};
	

/***********************************************************************
Rect
***********************************************************************/

	class GACUI_API Rect
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Rect(void* __internal_object_reference_input);
	
	public:
		virtual ~Rect();
	
	public:
		
		static rptr<Rect> CreateRptr(Point p, Size s);
		static Rect Create(Point p, Size s);
		static rptr<Rect> CreateRptr(signed __int32 _x1, signed __int32 _y1, signed __int32 _x2, signed __int32 _y2);
		static Rect Create(signed __int32 _x1, signed __int32 _y1, signed __int32 _x2, signed __int32 _y2);
		static rptr<Rect> CreateRptr();
		static Rect Create();
		
		bool operator==(Rect rect);
		bool operator!=(Rect rect);
		Point LeftTop();
		Point RightBottom();
		signed __int32 Left();
		signed __int32 Right();
		signed __int32 Width();
		signed __int32 Top();
		signed __int32 Bottom();
		signed __int32 Height();
		void Expand(Size s);
		void Expand(signed __int32 x, signed __int32 y);
		void Move(Size s);
		void Move(signed __int32 x, signed __int32 y);
		bool Contains(Point p);
		
		Size GetSize();
		signed __int32 get_x1();
		void set_x1(signed __int32 value);
		signed __int32 get_y1();
		void set_y1(signed __int32 value);
		signed __int32 get_x2();
		void set_x2(signed __int32 value);
		signed __int32 get_y2();
		void set_y2(signed __int32 value);
		
	};
	

/***********************************************************************
IGuiGraphicsRenderTarget
***********************************************************************/

	class GACUI_API IGuiGraphicsRenderTarget
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IGuiGraphicsRenderTarget(void* __internal_object_reference_input);
	
	public:
		virtual ~IGuiGraphicsRenderTarget();
	
	public:
		
		void StartRendering();
		void StopRendering();
		void PushClipper(Rect clipper);
		void PopClipper();
		bool IsClipperCoverWholeTarget();
		rptr<IGuiGraphicsRenderTarget> operator=(rptr<IGuiGraphicsRenderTarget> value);
		
		Rect GetClipper();
		
	};
	

/***********************************************************************
CharMeasurer
***********************************************************************/

	class GACUI_API CharMeasurer : public IDescriptable
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		CharMeasurer(void* __internal_object_reference_input);
	
	public:
		virtual ~CharMeasurer();
	
	public:
		
		signed __int32 MeasureWidth(wchar_t character);
		rptr<CharMeasurer> operator=(rptr<CharMeasurer> value);
		void SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value);
		
		signed __int32 GetRowHeight();
		
	};
	

/***********************************************************************
GuiGraphicsResourceManager
***********************************************************************/

	class GACUI_API GuiGraphicsResourceManager
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsResourceManager(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsResourceManager();
	
	public:
		
		bool RegisterElementFactory(rptr<IGuiGraphicsElementFactory> factory);
		bool RegisterRendererFactory(const GacString& elementTypeName, rptr<IGuiGraphicsRendererFactory> factory);
		rptr<IGuiGraphicsElementFactory> GetElementFactory(const GacString& elementTypeName);
		rptr<IGuiGraphicsRendererFactory> GetRendererFactory(const GacString& elementTypeName);
		rptr<IGuiGraphicsRenderTarget> GetRenderTarget(rptr<INativeWindow> window);
		rptr<GuiGraphicsResourceManager> operator=(rptr<GuiGraphicsResourceManager> value);
		
	};
	

/***********************************************************************
IGuiGraphicsRenderer
***********************************************************************/

	class GACUI_API IGuiGraphicsRenderer
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IGuiGraphicsRenderer(void* __internal_object_reference_input);
	
	public:
		virtual ~IGuiGraphicsRenderer();
	
	public:
		
		void Initialize(rptr<IGuiGraphicsElement> _element);
		void Finalize();
		void Render(Rect bounds);
		void OnElementStateChanged();
		rptr<IGuiGraphicsRenderer> operator=(rptr<IGuiGraphicsRenderer> value);
		void SetRenderTarget(rptr<IGuiGraphicsRenderTarget> _renderTarget);
		
		rptr<IGuiGraphicsRendererFactory> GetFactory();
		Size GetMinSize();
		
	};
	

/***********************************************************************
INativeScreen
***********************************************************************/

	class GACUI_API INativeScreen
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeScreen(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeScreen();
	
	public:
		
		bool IsPrimary();
		rptr<INativeScreen> operator=(rptr<INativeScreen> value);
		
		Rect GetBounds();
		Rect GetClientBounds();
		GacString GetName();
		
	};
	

/***********************************************************************
INativeScreenService
***********************************************************************/

	class GACUI_API INativeScreenService
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeScreenService(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeScreenService();
	
	public:
		
		rptr<INativeScreen> GetScreen(rptr<INativeWindow> window);
		rptr<INativeScreen> GetScreen(signed __int32 index);
		rptr<INativeScreenService> operator=(rptr<INativeScreenService> value);
		
		signed __int32 GetScreenCount();
		
	};
	

/***********************************************************************
INativeController
***********************************************************************/

	class GACUI_API INativeController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeController(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeController();
	
	public:
		
		rptr<INativeCallbackService> CallbackService();
		rptr<INativeResourceService> ResourceService();
		rptr<INativeAsyncService> AsyncService();
		rptr<INativeClipboardService> ClipboardService();
		rptr<INativeImageService> ImageService();
		rptr<INativeScreenService> ScreenService();
		rptr<INativeWindowService> WindowService();
		rptr<INativeInputService> InputService();
		rptr<INativeController> operator=(rptr<INativeController> value);
		
	};
	

/***********************************************************************
INativeWindowListener
***********************************************************************/

	class GACUI_API INativeWindowListener
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeWindowListener(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeWindowListener();
	
	public:
		
		static rptr<INativeWindowListener> CreateRptr();
		
		void Moving(Rect& bounds, bool fixSizeOnly);
		void Moved();
		void Enabled();
		void Disabled();
		void GotFocus();
		void LostFocus();
		void Activated();
		void Deactivated();
		void Opened();
		void Closing(bool& cancel);
		void Closed();
		void Paint();
		void Destroying();
		void Destroyed();
		void LeftButtonDown(const NativeWindowMouseInfo& info);
		void LeftButtonUp(const NativeWindowMouseInfo& info);
		void LeftButtonDoubleClick(const NativeWindowMouseInfo& info);
		void RightButtonDown(const NativeWindowMouseInfo& info);
		void RightButtonUp(const NativeWindowMouseInfo& info);
		void RightButtonDoubleClick(const NativeWindowMouseInfo& info);
		void MiddleButtonDown(const NativeWindowMouseInfo& info);
		void MiddleButtonUp(const NativeWindowMouseInfo& info);
		void MiddleButtonDoubleClick(const NativeWindowMouseInfo& info);
		void HorizontalWheel(const NativeWindowMouseInfo& info);
		void VerticalWheel(const NativeWindowMouseInfo& info);
		void MouseMoving(const NativeWindowMouseInfo& info);
		void MouseEntered();
		void MouseLeaved();
		void KeyDown(const NativeWindowKeyInfo& info);
		void KeyUp(const NativeWindowKeyInfo& info);
		void SysKeyDown(const NativeWindowKeyInfo& info);
		void SysKeyUp(const NativeWindowKeyInfo& info);
		void Char(const NativeWindowCharInfo& info);
		rptr<INativeWindowListener> operator=(rptr<INativeWindowListener> value);
		
	};
	

/***********************************************************************
GuiGraphicsHost
***********************************************************************/

	class GACUI_API GuiGraphicsHost
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsHost(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsHost();
	
	public:
		
		static rptr<GuiGraphicsHost> CreateRptr();
		
		void Render();
		bool SetFocus(rptr<GuiGraphicsComposition> composition);
		void SetCaretPoint(Point value, rptr<GuiGraphicsComposition> referenceComposition);
		rptr<GuiGraphicsHost> operator=(rptr<GuiGraphicsHost> value);
		
		rptr<INativeWindow> GetNativeWindow();
		void SetNativeWindow(rptr<INativeWindow> _nativeWindow);
		rptr<GuiGraphicsComposition> GetMainComposition();
		rptr<GuiGraphicsComposition> GetFocusedComposition();
		Point GetCaretPoint();
		rptr<GuiGraphicsAnimationManager> GetAnimationManager();
		
	};
	

/***********************************************************************
GuiGraphicsComposition :: MinSizeLimitation
***********************************************************************/

	class GACUI_API GuiGraphicsComposition
	{
	public:
		enum MinSizeLimitation
		{
			NoLimit = 0,
			LimitToElement = 1,
			LimitToElementAndChildren = 2,
		};
		

/***********************************************************************
GuiGraphicsComposition :: ParentSizeAffection
***********************************************************************/

		enum ParentSizeAffection
		{
			NotAffectedByParent = 0,
			AffectedByParent = 1,
			TotallyDecidedByParent = 2,
		};
		

/***********************************************************************
GuiGraphicsComposition
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsComposition();
	
	public:
		
		rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> Children();
		bool AddChild(rptr<GuiGraphicsComposition> child);
		bool InsertChild(signed __int32 index, rptr<GuiGraphicsComposition> child);
		bool RemoveChild(rptr<GuiGraphicsComposition> child);
		bool MoveChild(rptr<GuiGraphicsComposition> child, signed __int32 newIndex);
		void Render(Size offset);
		bool HasEventReceiver();
		rptr<GuiGraphicsComposition> FindComposition(Point location);
		bool IsSizeAffectParent();
		rptr<GuiGraphicsComposition> operator=(rptr<GuiGraphicsComposition> value);
		
		rptr<GuiGraphicsComposition> GetParent();
		sptr<IGuiGraphicsElement> GetOwnedElement();
		void SetOwnedElement(sptr<IGuiGraphicsElement> element);
		bool GetVisible();
		void SetVisible(bool value);
		GuiGraphicsComposition :: MinSizeLimitation GetMinSizeLimitation();
		void SetMinSizeLimitation(GuiGraphicsComposition :: MinSizeLimitation value);
		rptr<IGuiGraphicsRenderTarget> GetRenderTarget();
		void SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value);
		rptr<GuiGraphicsEventReceiver> GetEventReceiver();
		Rect GetGlobalBounds();
		rptr<GuiControl> GetAssociatedControl();
		rptr<GuiGraphicsHost> GetAssociatedHost();
		rptr<INativeCursor> GetAssociatedCursor();
		void SetAssociatedCursor(rptr<INativeCursor> cursor);
		rptr<GuiControl> GetRelatedControl();
		rptr<GuiGraphicsHost> GetRelatedGraphicsHost();
		rptr<GuiControlHost> GetRelatedControlHost();
		rptr<INativeCursor> GetRelatedCursor();
		Margin GetMargin();
		void SetMargin(Margin value);
		Margin GetInternalMargin();
		void SetInternalMargin(Margin value);
		Size GetPreferredMinSize();
		void SetPreferredMinSize(Size value);
		Rect GetClientArea();
		GuiGraphicsComposition :: ParentSizeAffection GetAffectionFromParent();
		Size GetMinPreferredClientSize();
		Rect GetPreferredBounds();
		Rect GetBounds();
		
	};
	

/***********************************************************************
GuiGraphicsSite
***********************************************************************/

	class GACUI_API GuiGraphicsSite : public GuiGraphicsComposition
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiGraphicsSite(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiGraphicsSite();
	
	public:
		
		static rptr<GuiGraphicsSite> CreateRptr();
		
		rptr<GuiGraphicsSite> operator=(rptr<GuiGraphicsSite> value);
		
	};
	

/***********************************************************************
GuiBoundsComposition
***********************************************************************/

	class GACUI_API GuiBoundsComposition : public GuiGraphicsSite
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiBoundsComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiBoundsComposition();
	
	public:
		
		static rptr<GuiBoundsComposition> CreateRptr();
		
		void ClearAlignmentToParent();
		bool IsAlignedToParent();
		rptr<GuiBoundsComposition> operator=(rptr<GuiBoundsComposition> value);
		void SetBounds(Rect value);
		
		Margin GetAlignmentToParent();
		void SetAlignmentToParent(Margin value);
		GuiGraphicsEvent_of_GuiEventArgs on_BoundsChanged();
		
	};
	

/***********************************************************************
GuiCellComposition
***********************************************************************/

	class GACUI_API GuiCellComposition : public GuiGraphicsSite
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiCellComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiCellComposition();
	
	public:
		
		static rptr<GuiCellComposition> CreateRptr();
		
		bool SetSite(signed __int32 _row, signed __int32 _column, signed __int32 _rowSpan, signed __int32 _columnSpan);
		rptr<GuiCellComposition> operator=(rptr<GuiCellComposition> value);
		
		rptr<GuiTableComposition> GetTableParent();
		signed __int32 GetRow();
		signed __int32 GetRowSpan();
		signed __int32 GetColumn();
		signed __int32 GetColumnSpan();
		
	};
	

/***********************************************************************
GuiControl
***********************************************************************/

	class GACUI_API GuiControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiControl(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiControl();
	
	public:
		class IStyleController;
		class IStyleProvider;
		
		static rptr<GuiControl> CreateRptr(rptr<GuiControl :: IStyleController> _styleController);
		
		rptr<GuiControl> GetChild(signed __int32 index);
		rptr<IDescriptable> QueryService(const GacString& identifier);
		rptr<GuiControl> operator=(rptr<GuiControl> value);
		
		GuiEventArgs GetNotifyEventArguments();
		rptr<GuiControl :: IStyleController> GetStyleController();
		rptr<GuiBoundsComposition> GetBoundsComposition();
		rptr<GuiGraphicsComposition> GetContainerComposition();
		rptr<GuiGraphicsComposition> GetFocusableComposition();
		rptr<GuiGraphicsEventReceiver> GetEventReceiver();
		rptr<GuiControl> GetParent();
		signed __int32 GetChildrenCount();
		rptr<GuiControlHost> GetRelatedControlHost();
		bool GetVisuallyEnabled();
		bool GetEnabled();
		void SetEnabled(bool value);
		bool GetVisible();
		void SetVisible(bool value);
		const GacString& GetText();
		void SetText(const GacString& value);
		const FontProperties& GetFont();
		void SetFont(const FontProperties& value);
		GuiGraphicsEvent_of_GuiEventArgs on_VisibleChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_EnabledChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_VisuallyEnabledChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_TextChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_FontChanged();
		

/***********************************************************************
GuiControl :: IStyleController
***********************************************************************/

		class GACUI_API IStyleController : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleController();
		
		public:
			rptr<GuiControl :: IStyleController> operator=(rptr<GuiControl :: IStyleController> value);
			void SetFocusableComposition(rptr<GuiGraphicsComposition> value);
			void SetText(const GacString& value);
			void SetFont(const FontProperties& value);
			void SetVisuallyEnabled(bool value);
			
			rptr<GuiBoundsComposition> GetBoundsComposition();
			rptr<GuiGraphicsComposition> GetContainerComposition();
			
		};
		

/***********************************************************************
GuiControl :: IStyleProvider
***********************************************************************/

		class GACUI_API IStyleProvider : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleProvider();
		
		public:
			void AssociateStyleController(rptr<GuiControl :: IStyleController> controller);
			rptr<GuiControl :: IStyleProvider> operator=(rptr<GuiControl :: IStyleProvider> value);
			void SetFocusableComposition(rptr<GuiGraphicsComposition> value);
			void SetText(const GacString& value);
			void SetFont(const FontProperties& value);
			void SetVisuallyEnabled(bool value);
			
		};
		
	};
	

/***********************************************************************
GuiButton :: ControlState
***********************************************************************/

	class GACUI_API GuiButton : public GuiControl
	{
	public:
		enum ControlState
		{
			Normal = 0,
			Active = 1,
			Pressed = 2,
		};
		

/***********************************************************************
GuiButton
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiButton(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiButton();
	
	public:
		class IStyleController;
		
		static rptr<GuiButton> CreateRptr(rptr<GuiButton :: IStyleController> _styleController);
		
		rptr<GuiButton> operator=(rptr<GuiButton> value);
		
		GuiGraphicsEvent_of_GuiEventArgs on_Clicked();
		

/***********************************************************************
GuiButton :: IStyleController
***********************************************************************/

		class GACUI_API IStyleController : public GuiControl :: IStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleController();
		
		public:
			void Transfer(GuiButton :: ControlState value);
			rptr<GuiButton :: IStyleController> operator=(rptr<GuiButton :: IStyleController> value);
			
		};
		
	};
	

/***********************************************************************
GuiControlHost
***********************************************************************/

	class GACUI_API GuiControlHost : public GuiControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiControlHost(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiControlHost();
	
	public:
		
		static rptr<GuiControlHost> CreateRptr(rptr<GuiControl :: IStyleController> _styleController);
		
		void Render();
		void SetFocused();
		void SetActivated();
		bool AddComponent(rptr<GuiComponent> component);
		bool RemoveComponent(rptr<GuiComponent> component);
		bool ContainsComponent(rptr<GuiComponent> component);
		void Show();
		void ShowDeactivated();
		void ShowRestored();
		void ShowMaximized();
		void ShowMinimized();
		void Hide();
		void Close();
		rptr<GuiControlHost> operator=(rptr<GuiControlHost> value);
		
		rptr<GuiGraphicsHost> GetGraphicsHost();
		rptr<GuiGraphicsComposition> GetMainComposition();
		rptr<INativeWindow> GetNativeWindow();
		void SetNativeWindow(rptr<INativeWindow> window);
		bool GetFocused();
		bool GetActivated();
		bool GetShowInTaskBar();
		void SetShowInTaskBar(bool value);
		bool GetEnabledActivate();
		void SetEnabledActivate(bool value);
		bool GetMaximizedBox();
		void SetMaximizedBox(bool visible);
		bool GetMinimizedBox();
		void SetMinimizedBox(bool visible);
		bool GetBorder();
		void SetBorder(bool visible);
		bool GetSizeBox();
		void SetSizeBox(bool visible);
		bool GetIconVisible();
		void SetIconVisible(bool visible);
		bool GetTitleBar();
		void SetTitleBar(bool visible);
		bool GetTopMost();
		void SetTopMost(bool topmost);
		Size GetClientSize();
		void SetClientSize(Size value);
		Rect GetBounds();
		void SetBounds(Rect value);
		rptr<INativeScreen> GetRelatedScreen();
		bool GetOpening();
		GuiGraphicsEvent_of_GuiEventArgs on_WindowGotFocus();
		GuiGraphicsEvent_of_GuiEventArgs on_WindowLostFocus();
		GuiGraphicsEvent_of_GuiEventArgs on_WindowActivated();
		GuiGraphicsEvent_of_GuiEventArgs on_WindowDeactivated();
		GuiGraphicsEvent_of_GuiEventArgs on_WindowOpened();
		GuiGraphicsEvent_of_GuiRequestEventArgs on_WindowClosing();
		GuiGraphicsEvent_of_GuiEventArgs on_WindowClosed();
		GuiGraphicsEvent_of_GuiEventArgs on_WindowDestroying();
		
	};
	

/***********************************************************************
GuiMenuBar
***********************************************************************/

	class GACUI_API GuiMenuBar : public GuiControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiMenuBar(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiMenuBar();
	
	public:
		
		static rptr<GuiMenuBar> CreateRptr(rptr<GuiControl :: IStyleController> _styleController);
		
		rptr<GuiMenuBar> operator=(rptr<GuiMenuBar> value);
		
	};
	

/***********************************************************************
GuiMenuButton
***********************************************************************/

	class GACUI_API GuiMenuButton : public GuiButton
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiMenuButton(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiMenuButton();
	
	public:
		class IStyleController;
		
		static rptr<GuiMenuButton> CreateRptr(rptr<GuiMenuButton :: IStyleController> _styleController);
		
		bool IsSubMenuExists();
		void CreateSubMenu(rptr<GuiControl :: IStyleController> subMenuStyleController);
		void DestroySubMenu();
		rptr<GuiMenuButton> operator=(rptr<GuiMenuButton> value);
		
		rptr<GuiMenu> GetSubMenu();
		bool GetSubMenuOpening();
		void SetSubMenuOpening(bool value);
		Size GetPreferredMenuClientSize();
		void SetPreferredMenuClientSize(Size value);
		GuiGraphicsEvent_of_GuiEventArgs on_SubMenuOpeningChanged();
		

/***********************************************************************
GuiMenuButton :: IStyleController
***********************************************************************/

		class GACUI_API IStyleController : public GuiButton :: IStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleController();
		
		public:
			rptr<GuiControl :: IStyleController> CreateSubMenuStyleController();
			rptr<GuiMenuButton :: IStyleController> operator=(rptr<GuiMenuButton :: IStyleController> value);
			void SetSubMenuExisting(bool value);
			void SetSubMenuOpening(bool value);
			
		};
		
	};
	

/***********************************************************************
GuiPartialViewComposition
***********************************************************************/

	class GACUI_API GuiPartialViewComposition : public GuiGraphicsSite
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiPartialViewComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiPartialViewComposition();
	
	public:
		
		static rptr<GuiPartialViewComposition> CreateRptr();
		
		rptr<GuiPartialViewComposition> operator=(rptr<GuiPartialViewComposition> value);
		
		double GetWidthRatio();
		void SetWidthRatio(double value);
		double GetWidthPageSize();
		void SetWidthPageSize(double value);
		double GetHeightRatio();
		void SetHeightRatio(double value);
		double GetHeightPageSize();
		void SetHeightPageSize(double value);
		
	};
	

/***********************************************************************
GuiScroll
***********************************************************************/

	class GACUI_API GuiScroll : public GuiControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiScroll(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiScroll();
	
	public:
		class ICommandExecutor;
		class IStyleController;
		
		static rptr<GuiScroll> CreateRptr(rptr<GuiScroll :: IStyleController> _styleController);
		
		rptr<GuiScroll> operator=(rptr<GuiScroll> value);
		
		signed __int32 GetTotalSize();
		void SetTotalSize(signed __int32 value);
		signed __int32 GetPageSize();
		void SetPageSize(signed __int32 value);
		signed __int32 GetPosition();
		void SetPosition(signed __int32 value);
		signed __int32 GetSmallMove();
		void SetSmallMove(signed __int32 value);
		signed __int32 GetBigMove();
		void SetBigMove(signed __int32 value);
		signed __int32 GetMinPosition();
		signed __int32 GetMaxPosition();
		GuiGraphicsEvent_of_GuiEventArgs on_TotalSizeChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_PageSizeChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_PositionChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_SmallMoveChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_BigMoveChanged();
		

/***********************************************************************
GuiScroll :: ICommandExecutor
***********************************************************************/

		class GACUI_API ICommandExecutor : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ICommandExecutor(void* __internal_object_reference_input);
		
		public:
			virtual ~ICommandExecutor();
		
		public:
			void SmallDecrease();
			void SmallIncrease();
			void BigDecrease();
			void BigIncrease();
			rptr<GuiScroll :: ICommandExecutor> operator=(rptr<GuiScroll :: ICommandExecutor> value);
			void SetTotalSize(signed __int32 value);
			void SetPageSize(signed __int32 value);
			void SetPosition(signed __int32 value);
			
		};
		

/***********************************************************************
GuiScroll :: IStyleController
***********************************************************************/

		class GACUI_API IStyleController : public GuiControl :: IStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleController();
		
		public:
			rptr<GuiScroll :: IStyleController> operator=(rptr<GuiScroll :: IStyleController> value);
			void SetCommandExecutor(rptr<GuiScroll :: ICommandExecutor> value);
			void SetTotalSize(signed __int32 value);
			void SetPageSize(signed __int32 value);
			void SetPosition(signed __int32 value);
			
		};
		
	};
	

/***********************************************************************
CommonScrollStyle :: Direction
***********************************************************************/

	class GACUI_API CommonScrollStyle : public GuiScroll :: IStyleController
	{
	public:
		enum Direction
		{
			Horizontal = 0,
			Vertical = 1,
		};
		

/***********************************************************************
CommonScrollStyle
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		CommonScrollStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~CommonScrollStyle();
	
	public:
		
		rptr<CommonScrollStyle> operator=(rptr<CommonScrollStyle> value);
		
	};
	

/***********************************************************************
CommonTrackStyle :: Direction
***********************************************************************/

	class GACUI_API CommonTrackStyle : public GuiScroll :: IStyleController
	{
	public:
		enum Direction
		{
			Horizontal = 0,
			Vertical = 1,
		};
		

/***********************************************************************
CommonTrackStyle
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		CommonTrackStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~CommonTrackStyle();
	
	public:
		
		rptr<CommonTrackStyle> operator=(rptr<CommonTrackStyle> value);
		
	};
	

/***********************************************************************
GuiScrollView
***********************************************************************/

	class GACUI_API GuiScrollView : public GuiControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiScrollView(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiScrollView();
	
	public:
		class IStyleProvider;
		class StyleController;
		
		void CalculateView();
		rptr<GuiScrollView> operator=(rptr<GuiScrollView> value);
		
		Size GetViewSize();
		Rect GetViewBounds();
		rptr<GuiScroll> GetHorizontalScroll();
		rptr<GuiScroll> GetVerticalScroll();
		bool GetHorizontalAlwaysVisible();
		void SetHorizontalAlwaysVisible(bool value);
		bool GetVerticalAlwaysVisible();
		void SetVerticalAlwaysVisible(bool value);
		

/***********************************************************************
GuiScrollView :: IStyleProvider
***********************************************************************/

		class GACUI_API IStyleProvider : public GuiControl :: IStyleProvider
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleProvider();
		
		public:
			rptr<GuiScroll :: IStyleController> CreateHorizontalScrollStyle();
			rptr<GuiScroll :: IStyleController> CreateVerticalScrollStyle();
			rptr<GuiGraphicsComposition> InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
			rptr<GuiScrollView :: IStyleProvider> operator=(rptr<GuiScrollView :: IStyleProvider> value);
			
			signed __int32 GetDefaultScrollSize();
			
		};
		

/***********************************************************************
GuiScrollView :: StyleController
***********************************************************************/

		class GACUI_API StyleController : public GuiControl :: IStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			StyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~StyleController();
		
		public:
			static rptr<GuiScrollView :: StyleController> CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider);
			
			void AdjustView(Size fullSize);
			rptr<GuiScrollView :: StyleController> operator=(rptr<GuiScrollView :: StyleController> value);
			void SetScrollView(rptr<GuiScrollView> _scrollView);
			
			rptr<GuiScrollView :: IStyleProvider> GetStyleProvider();
			rptr<GuiScroll> GetHorizontalScroll();
			rptr<GuiScroll> GetVerticalScroll();
			rptr<GuiTableComposition> GetInternalTableComposition();
			rptr<GuiBoundsComposition> GetInternalContainerComposition();
			bool GetHorizontalAlwaysVisible();
			void SetHorizontalAlwaysVisible(bool value);
			bool GetVerticalAlwaysVisible();
			void SetVerticalAlwaysVisible(bool value);
			
		};
		
	};
	

/***********************************************************************
GuiListControl
***********************************************************************/

	class GACUI_API GuiListControl : public GuiScrollView
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiListControl(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiListControl();
	
	public:
		class IItemArranger;
		class IItemArrangerCallback;
		class IItemCoordinateTransformer;
		class IItemPrimaryTextView;
		class IItemProvider;
		class IItemProviderCallback;
		class IItemStyleController;
		class IItemStyleProvider;
		
		static rptr<GuiListControl> CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider, bool acceptFocus);
		
		sptr<GuiListControl :: IItemStyleProvider> SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value);
		sptr<GuiListControl :: IItemArranger> SetArranger(sptr<GuiListControl :: IItemArranger> value);
		sptr<GuiListControl :: IItemCoordinateTransformer> SetCoordinateTransformer(sptr<GuiListControl :: IItemCoordinateTransformer> value);
		rptr<GuiListControl> operator=(rptr<GuiListControl> value);
		
		rptr<GuiListControl :: IItemProvider> GetItemProvider();
		rptr<GuiListControl :: IItemStyleProvider> GetStyleProvider();
		rptr<GuiListControl :: IItemArranger> GetArranger();
		rptr<GuiListControl :: IItemCoordinateTransformer> GetCoordinateTransformer();
		GuiGraphicsEvent_of_GuiEventArgs on_StyleProviderChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_ArrangerChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_CoordinateTransformerChanged();
		

/***********************************************************************
GuiListControl :: IItemArrangerCallback
***********************************************************************/

		class GACUI_API IItemArrangerCallback : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemArrangerCallback(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemArrangerCallback();
		
		public:
			rptr<GuiListControl :: IItemStyleController> RequestItem(signed __int32 itemIndex);
			void ReleaseItem(rptr<GuiListControl :: IItemStyleController> style);
			Size GetStylePreferredSize(rptr<GuiListControl :: IItemStyleController> style);
			void SetStyleAlignmentToParent(rptr<GuiListControl :: IItemStyleController> style, Margin margin);
			void SetStyleBounds(rptr<GuiListControl :: IItemStyleController> style, Rect bounds);
			void OnTotalSizeChanged();
			rptr<GuiListControl :: IItemArrangerCallback> operator=(rptr<GuiListControl :: IItemArrangerCallback> value);
			void SetViewLocation(Point value);
			
			rptr<GuiGraphicsComposition> GetContainerComposition();
			
		};
		

/***********************************************************************
GuiListControl :: IItemCoordinateTransformer
***********************************************************************/

		class GACUI_API IItemCoordinateTransformer : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemCoordinateTransformer(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemCoordinateTransformer();
		
		public:
			Size RealSizeToVirtualSize(Size size);
			Size VirtualSizeToRealSize(Size size);
			Point RealPointToVirtualPoint(Size realFullSize, Point point);
			Point VirtualPointToRealPoint(Size realFullSize, Point point);
			Rect RealRectToVirtualRect(Size realFullSize, Rect rect);
			Rect VirtualRectToRealRect(Size realFullSize, Rect rect);
			Margin RealMarginToVirtualMargin(Margin margin);
			Margin VirtualMarginToRealMargin(Margin margin);
			rptr<GuiListControl :: IItemCoordinateTransformer> operator=(rptr<GuiListControl :: IItemCoordinateTransformer> value);
			
		};
		

/***********************************************************************
GuiListControl :: IItemPrimaryTextView
***********************************************************************/

		class GACUI_API IItemPrimaryTextView : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemPrimaryTextView(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemPrimaryTextView();
		
		public:
			GacString GetPrimaryTextViewText(signed __int32 itemIndex);
			bool ContainsPrimaryText(signed __int32 itemIndex);
			rptr<GuiListControl :: IItemPrimaryTextView> operator=(rptr<GuiListControl :: IItemPrimaryTextView> value);
			
			static wchar_t* get_Identifier();
			static void set_Identifier(wchar_t* value);
			
		};
		

/***********************************************************************
GuiListControl :: IItemProvider
***********************************************************************/

		class GACUI_API IItemProvider : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemProvider();
		
		public:
			bool AttachCallback(rptr<GuiListControl :: IItemProviderCallback> value);
			bool DetachCallback(rptr<GuiListControl :: IItemProviderCallback> value);
			signed __int32 Count();
			rptr<IDescriptable> RequestView(const GacString& identifier);
			void ReleaseView(rptr<IDescriptable> view);
			rptr<GuiListControl :: IItemProvider> operator=(rptr<GuiListControl :: IItemProvider> value);
			
		};
		

/***********************************************************************
GuiListControl :: IItemProviderCallback
***********************************************************************/

		class GACUI_API IItemProviderCallback : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemProviderCallback(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemProviderCallback();
		
		public:
			void OnAttached(rptr<GuiListControl :: IItemProvider> provider);
			void OnItemModified(signed __int32 start, signed __int32 count, signed __int32 newCount);
			rptr<GuiListControl :: IItemProviderCallback> operator=(rptr<GuiListControl :: IItemProviderCallback> value);
			
		};
		

/***********************************************************************
GuiListControl :: IItemArranger
***********************************************************************/

		class GACUI_API IItemArranger : public GuiListControl :: IItemProviderCallback
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemArranger(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemArranger();
		
		public:
			void AttachListControl(rptr<GuiListControl> value);
			void DetachListControl();
			rptr<GuiListControl :: IItemStyleController> GetVisibleStyle(signed __int32 itemIndex);
			signed __int32 GetVisibleIndex(rptr<GuiListControl :: IItemStyleController> style);
			void OnViewChanged(Rect bounds);
			rptr<GuiListControl :: IItemArranger> operator=(rptr<GuiListControl :: IItemArranger> value);
			
			rptr<GuiListControl :: IItemArrangerCallback> GetCallback();
			void SetCallback(rptr<GuiListControl :: IItemArrangerCallback> value);
			Size GetTotalSize();
			
		};
		

/***********************************************************************
GuiListControl :: IItemStyleController
***********************************************************************/

		class GACUI_API IItemStyleController : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemStyleController();
		
		public:
			bool IsCacheable();
			bool IsInstalled();
			void OnInstalled();
			void OnUninstalled();
			rptr<GuiListControl :: IItemStyleController> operator=(rptr<GuiListControl :: IItemStyleController> value);
			
			rptr<GuiListControl :: IItemStyleProvider> GetStyleProvider();
			signed __int32 GetItemStyleId();
			rptr<GuiBoundsComposition> GetBoundsComposition();
			
		};
		

/***********************************************************************
GuiListControl :: IItemStyleProvider
***********************************************************************/

		class GACUI_API IItemStyleProvider : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemStyleProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemStyleProvider();
		
		public:
			void AttachListControl(rptr<GuiListControl> value);
			void DetachListControl();
			signed __int32 GetItemStyleId(signed __int32 itemIndex);
			rptr<GuiListControl :: IItemStyleController> CreateItemStyle(signed __int32 styleId);
			void DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style);
			void Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex);
			rptr<GuiListControl :: IItemStyleProvider> operator=(rptr<GuiListControl :: IItemStyleProvider> value);
			
		};
		
	};
	

/***********************************************************************
AxisAlignedItemCoordinateTransformer :: Alignment
***********************************************************************/

	class GACUI_API AxisAlignedItemCoordinateTransformer : public GuiListControl :: IItemCoordinateTransformer
	{
	public:
		enum Alignment
		{
			LeftDown = 0,
			RightDown = 1,
			LeftUp = 2,
			RightUp = 3,
			DownLeft = 4,
			DownRight = 5,
			UpLeft = 6,
			UpRight = 7,
		};
		

/***********************************************************************
AxisAlignedItemCoordinateTransformer
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		AxisAlignedItemCoordinateTransformer(void* __internal_object_reference_input);
	
	public:
		virtual ~AxisAlignedItemCoordinateTransformer();
	
	public:
		
		static rptr<AxisAlignedItemCoordinateTransformer> CreateRptr(AxisAlignedItemCoordinateTransformer :: Alignment _alignment);
		
		rptr<AxisAlignedItemCoordinateTransformer> operator=(rptr<AxisAlignedItemCoordinateTransformer> value);
		
		AxisAlignedItemCoordinateTransformer :: Alignment GetAlignment();
		
	};
	

/***********************************************************************
DefaultItemCoordinateTransformer
***********************************************************************/

	class GACUI_API DefaultItemCoordinateTransformer : public GuiListControl :: IItemCoordinateTransformer
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		DefaultItemCoordinateTransformer(void* __internal_object_reference_input);
	
	public:
		virtual ~DefaultItemCoordinateTransformer();
	
	public:
		
		static rptr<DefaultItemCoordinateTransformer> CreateRptr();
		
		rptr<DefaultItemCoordinateTransformer> operator=(rptr<DefaultItemCoordinateTransformer> value);
		
	};
	

/***********************************************************************
GuiScrollContainer
***********************************************************************/

	class GACUI_API GuiScrollContainer : public GuiScrollView
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiScrollContainer(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiScrollContainer();
	
	public:
		class StyleController;
		
		static rptr<GuiScrollContainer> CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider);
		
		rptr<GuiScrollContainer> operator=(rptr<GuiScrollContainer> value);
		

/***********************************************************************
GuiScrollContainer :: StyleController
***********************************************************************/

		class GACUI_API StyleController : public GuiScrollView :: StyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			StyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~StyleController();
		
		public:
			static rptr<GuiScrollContainer :: StyleController> CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider);
			
			void MoveContainer(Point leftTop);
			rptr<GuiScrollContainer :: StyleController> operator=(rptr<GuiScrollContainer :: StyleController> value);
			
		};
		
	};
	

/***********************************************************************
GuiSelectableButton
***********************************************************************/

	class GACUI_API GuiSelectableButton : public GuiButton
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiSelectableButton(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiSelectableButton();
	
	public:
		class GroupController;
		class IStyleController;
		class MutexGroupController;
		
		static rptr<GuiSelectableButton> CreateRptr(rptr<GuiSelectableButton :: IStyleController> _styleController);
		
		rptr<GuiSelectableButton> operator=(rptr<GuiSelectableButton> value);
		
		rptr<GuiSelectableButton :: GroupController> GetGroupController();
		void SetGroupController(rptr<GuiSelectableButton :: GroupController> value);
		bool GetAutoSelection();
		void SetAutoSelection(bool value);
		bool GetSelected();
		void SetSelected(bool value);
		GuiGraphicsEvent_of_GuiEventArgs on_GroupControllerChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_AutoSelectionChanged();
		GuiGraphicsEvent_of_GuiEventArgs on_SelectedChanged();
		

/***********************************************************************
GuiSelectableButton :: GroupController
***********************************************************************/

		class GACUI_API GroupController : public GuiComponent
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			GroupController(void* __internal_object_reference_input);
		
		public:
			virtual ~GroupController();
		
		public:
			void Attach(rptr<GuiSelectableButton> button);
			void Detach(rptr<GuiSelectableButton> button);
			void OnSelectedChanged(rptr<GuiSelectableButton> button);
			rptr<GuiSelectableButton :: GroupController> operator=(rptr<GuiSelectableButton :: GroupController> value);
			
		};
		

/***********************************************************************
GuiSelectableButton :: IStyleController
***********************************************************************/

		class GACUI_API IStyleController : public GuiButton :: IStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleController();
		
		public:
			rptr<GuiSelectableButton :: IStyleController> operator=(rptr<GuiSelectableButton :: IStyleController> value);
			void SetSelected(bool value);
			
		};
		

/***********************************************************************
GuiSelectableButton :: MutexGroupController
***********************************************************************/

		class GACUI_API MutexGroupController : public GuiSelectableButton :: GroupController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			MutexGroupController(void* __internal_object_reference_input);
		
		public:
			virtual ~MutexGroupController();
		
		public:
			static rptr<GuiSelectableButton :: MutexGroupController> CreateRptr();
			
			rptr<GuiSelectableButton :: MutexGroupController> operator=(rptr<GuiSelectableButton :: MutexGroupController> value);
			
		};
		
	};
	

/***********************************************************************
GuiSelectableListControl
***********************************************************************/

	class GACUI_API GuiSelectableListControl : public GuiListControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiSelectableListControl(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiSelectableListControl();
	
	public:
		class IItemStyleProvider;
		
		static rptr<GuiSelectableListControl> CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider);
		
		bool GetSelected(signed __int32 itemIndex);
		void SetSelected(signed __int32 itemIndex, bool value);
		void ClearSelection();
		rptr<GuiSelectableListControl> operator=(rptr<GuiSelectableListControl> value);
		
		bool GetMultiSelect();
		void SetMultiSelect(bool value);
		rptr<IReadonlyList_of_int> GetSelectedItems();
		GuiGraphicsEvent_of_GuiEventArgs on_SelectionChanged();
		

/***********************************************************************
GuiSelectableListControl :: IItemStyleProvider
***********************************************************************/

		class GACUI_API IItemStyleProvider : public GuiListControl :: IItemStyleProvider
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IItemStyleProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IItemStyleProvider();
		
		public:
			void SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value);
			rptr<GuiSelectableListControl :: IItemStyleProvider> operator=(rptr<GuiSelectableListControl :: IItemStyleProvider> value);
			
		};
		
	};
	

/***********************************************************************
GuiListViewBase
***********************************************************************/

	class GACUI_API GuiListViewBase : public GuiSelectableListControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiListViewBase(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiListViewBase();
	
	public:
		class IStyleProvider;
		
		static rptr<GuiListViewBase> CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider);
		
		rptr<GuiListViewBase> operator=(rptr<GuiListViewBase> value);
		
		rptr<GuiListViewBase :: IStyleProvider> GetListViewStyleProvider();
		

/***********************************************************************
GuiListViewBase :: IStyleProvider
***********************************************************************/

		class GACUI_API IStyleProvider : public GuiScrollView :: IStyleProvider
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleProvider();
		
		public:
			rptr<GuiSelectableButton :: IStyleController> CreateItemBackground();
			rptr<GuiSelectableButton :: IStyleController> CreateColumnStyle();
			rptr<GuiListViewBase :: IStyleProvider> operator=(rptr<GuiListViewBase :: IStyleProvider> value);
			
			Color GetPrimaryTextColor();
			Color GetSecondaryTextColor();
			Color GetItemSeparatorColor();
			
		};
		
	};
	

/***********************************************************************
GuiSideAlignedComposition :: Direction
***********************************************************************/

	class GACUI_API GuiSideAlignedComposition : public GuiGraphicsSite
	{
	public:
		enum Direction
		{
			Left = 0,
			Top = 1,
			Right = 2,
			Bottom = 3,
		};
		

/***********************************************************************
GuiSideAlignedComposition
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiSideAlignedComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiSideAlignedComposition();
	
	public:
		
		static rptr<GuiSideAlignedComposition> CreateRptr();
		
		rptr<GuiSideAlignedComposition> operator=(rptr<GuiSideAlignedComposition> value);
		
		GuiSideAlignedComposition :: Direction GetDirection();
		void SetDirection(GuiSideAlignedComposition :: Direction value);
		signed __int32 GetMaxLength();
		void SetMaxLength(signed __int32 value);
		double GetMaxRatio();
		void SetMaxRatio(double value);
		
	};
	

/***********************************************************************
GuiStackItemComposition
***********************************************************************/

	class GACUI_API GuiStackItemComposition : public GuiGraphicsSite
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiStackItemComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiStackItemComposition();
	
	public:
		
		static rptr<GuiStackItemComposition> CreateRptr();
		
		rptr<GuiStackItemComposition> operator=(rptr<GuiStackItemComposition> value);
		void SetBounds(Rect value);
		
		Margin GetExtraMargin();
		void SetExtraMargin(Margin value);
		
	};
	

/***********************************************************************
GuiTab
***********************************************************************/

	class GACUI_API GuiTab : public GuiControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiTab(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiTab();
	
	public:
		class ICommandExecutor;
		class IStyleController;
		
		static rptr<GuiTab> CreateRptr(rptr<GuiTab :: IStyleController> _styleController);
		
		bool CreatePage(rptr<GuiTabPage> page, signed __int32 index);
		rptr<GuiTabPage> CreatePage(signed __int32 index);
		bool RemovePage(rptr<GuiTabPage> value);
		bool MovePage(rptr<GuiTabPage> page, signed __int32 newIndex);
		bool SetSelectedPage(rptr<GuiTabPage> value);
		rptr<GuiTab> operator=(rptr<GuiTab> value);
		
		rptr<IReadonlyList_of_GuiTabPage_raw_pointer> GetPages();
		rptr<GuiTabPage> GetSelectedPage();
		GuiGraphicsEvent_of_GuiEventArgs on_SelectedPageChanged();
		

/***********************************************************************
GuiTab :: ICommandExecutor
***********************************************************************/

		class GACUI_API ICommandExecutor : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ICommandExecutor(void* __internal_object_reference_input);
		
		public:
			virtual ~ICommandExecutor();
		
		public:
			void ShowTab(signed __int32 index);
			rptr<GuiTab :: ICommandExecutor> operator=(rptr<GuiTab :: ICommandExecutor> value);
			
		};
		

/***********************************************************************
GuiTab :: IStyleController
***********************************************************************/

		class GACUI_API IStyleController : public GuiControl :: IStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleController();
		
		public:
			void InsertTab(signed __int32 index);
			void SetTabText(signed __int32 index, const GacString& value);
			void RemoveTab(signed __int32 index);
			void MoveTab(signed __int32 oldIndex, signed __int32 newIndex);
			rptr<GuiControl :: IStyleController> CreateTabPageStyleController();
			rptr<GuiTab :: IStyleController> operator=(rptr<GuiTab :: IStyleController> value);
			void SetCommandExecutor(rptr<GuiTab :: ICommandExecutor> value);
			void SetSelectedTab(signed __int32 index);
			
		};
		
	};
	

/***********************************************************************
GuiTableComposition
***********************************************************************/

	class GACUI_API GuiTableComposition : public GuiBoundsComposition
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiTableComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiTableComposition();
	
	public:
		
		static rptr<GuiTableComposition> CreateRptr();
		
		bool SetRowsAndColumns(signed __int32 _rows, signed __int32 _columns);
		rptr<GuiCellComposition> GetSitedCell(signed __int32 _row, signed __int32 _column);
		GuiCellOption GetRowOption(signed __int32 _row);
		void SetRowOption(signed __int32 _row, GuiCellOption option);
		GuiCellOption GetColumnOption(signed __int32 _column);
		void SetColumnOption(signed __int32 _column, GuiCellOption option);
		void UpdateCellBounds();
		rptr<GuiTableComposition> operator=(rptr<GuiTableComposition> value);
		
		signed __int32 GetRows();
		signed __int32 GetColumns();
		signed __int32 GetCellPadding();
		void SetCellPadding(signed __int32 value);
		Rect GetCellArea();
		
	};
	

/***********************************************************************
GuiWindow
***********************************************************************/

	class GACUI_API GuiWindow : public GuiControlHost
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiWindow(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiWindow();
	
	public:
		
		static rptr<GuiWindow> CreateRptr(rptr<GuiControl :: IStyleController> _styleController);
		
		rptr<GuiWindow> operator=(rptr<GuiWindow> value);
		
	};
	

/***********************************************************************
GuiPopup
***********************************************************************/

	class GACUI_API GuiPopup : public GuiWindow
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiPopup(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiPopup();
	
	public:
		
		static rptr<GuiPopup> CreateRptr(rptr<GuiControl :: IStyleController> _styleController);
		
		bool IsClippedByScreen(Point location);
		void ShowPopup(rptr<GuiControl> control, bool preferredTopBottomSide);
		void ShowPopup(Point location);
		rptr<GuiPopup> operator=(rptr<GuiPopup> value);
		
	};
	

/***********************************************************************
GuiComboBoxBase
***********************************************************************/

	class GACUI_API GuiComboBoxBase : public GuiButton
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiComboBoxBase(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiComboBoxBase();
	
	public:
		class ICommandExecutor;
		class IStyleController;
		
		static rptr<GuiComboBoxBase> CreateRptr(rptr<GuiComboBoxBase :: IStyleController> _styleController);
		
		void ShowPopup();
		rptr<GuiComboBoxBase> operator=(rptr<GuiComboBoxBase> value);
		
		rptr<GuiPopup> GetPopup();
		GuiGraphicsEvent_of_GuiEventArgs on_PopupOpened();
		GuiGraphicsEvent_of_GuiEventArgs on_PopupClosed();
		GuiGraphicsEvent_of_GuiEventArgs on_ItemSelecting();
		GuiGraphicsEvent_of_GuiEventArgs on_ItemSelected();
		

/***********************************************************************
GuiComboBoxBase :: ICommandExecutor
***********************************************************************/

		class GACUI_API ICommandExecutor : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ICommandExecutor(void* __internal_object_reference_input);
		
		public:
			virtual ~ICommandExecutor();
		
		public:
			void ShowPopup();
			void SelectItem();
			rptr<GuiComboBoxBase :: ICommandExecutor> operator=(rptr<GuiComboBoxBase :: ICommandExecutor> value);
			
		};
		

/***********************************************************************
GuiComboBoxBase :: IStyleController
***********************************************************************/

		class GACUI_API IStyleController : public GuiButton :: IStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleController();
		
		public:
			void OnClicked();
			void OnPopupOpened();
			void OnPopupClosed();
			void OnItemSelected();
			rptr<GuiControl :: IStyleController> CreatePopupStyle();
			rptr<GuiComboBoxBase :: IStyleController> operator=(rptr<GuiComboBoxBase :: IStyleController> value);
			void SetCommandExecutor(rptr<GuiComboBoxBase :: ICommandExecutor> value);
			
		};
		
	};
	

/***********************************************************************
GuiComboBoxListControl
***********************************************************************/

	class GACUI_API GuiComboBoxListControl : public GuiComboBoxBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiComboBoxListControl(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiComboBoxListControl();
	
	public:
		
		static rptr<GuiComboBoxListControl> CreateRptr(rptr<GuiComboBoxBase :: IStyleController> _styleController, rptr<GuiSelectableListControl> _containedListControl);
		
		rptr<GuiComboBoxListControl> operator=(rptr<GuiComboBoxListControl> value);
		
		rptr<GuiSelectableListControl> GetContainedListControl();
		signed __int32 GetSelectedIndex();
		void SetSelectedIndex(signed __int32 value);
		rptr<GuiListControl :: IItemProvider> GetItemProvider();
		GuiGraphicsEvent_of_GuiEventArgs on_SelectedIndexChanged();
		
	};
	

/***********************************************************************
GuiMenu
***********************************************************************/

	class GACUI_API GuiMenu : public GuiPopup
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiMenu(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiMenu();
	
	public:
		
		static rptr<GuiMenu> CreateRptr(rptr<GuiControl :: IStyleController> _styleController, rptr<GuiControl> _owner);
		
		void UpdateMenuService();
		rptr<GuiMenu> operator=(rptr<GuiMenu> value);
		
	};
	

/***********************************************************************
GuiWindowComposition
***********************************************************************/

	class GACUI_API GuiWindowComposition : public GuiGraphicsSite
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiWindowComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiWindowComposition();
	
	public:
		
		static rptr<GuiWindowComposition> CreateRptr();
		
		rptr<GuiWindowComposition> operator=(rptr<GuiWindowComposition> value);
		
		rptr<INativeWindow> GetAttachedWindow();
		void SetAttachedWindow(rptr<INativeWindow> window);
		
	};
	

/***********************************************************************
INativeWindow
***********************************************************************/

	class GACUI_API INativeWindow
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INativeWindow(void* __internal_object_reference_input);
	
	public:
		virtual ~INativeWindow();
	
	public:
		
		void Show();
		void ShowDeactivated();
		void ShowRestored();
		void ShowMaximized();
		void ShowMinimized();
		void Hide();
		bool IsVisible();
		void Enable();
		void Disable();
		bool IsEnabled();
		void SetFocus();
		bool IsFocused();
		void SetActivate();
		bool IsActivated();
		void ShowInTaskBar();
		void HideInTaskBar();
		bool IsAppearedInTaskBar();
		void EnableActivate();
		void DisableActivate();
		bool IsEnabledActivate();
		bool RequireCapture();
		bool ReleaseCapture();
		bool InstallListener(rptr<INativeWindowListener> listener);
		bool UninstallListener(rptr<INativeWindowListener> listener);
		void RedrawContent();
		rptr<INativeWindow> operator=(rptr<INativeWindow> value);
		
		Rect GetBounds();
		void SetBounds(const Rect& bounds);
		Size GetClientSize();
		void SetClientSize(Size size);
		Rect GetClientBoundsInScreen();
		GacString GetTitle();
		void SetTitle(GacString _title);
		rptr<INativeCursor> GetWindowCursor();
		void SetWindowCursor(rptr<INativeCursor> _cursor);
		Point GetCaretPoint();
		void SetCaretPoint(Point point);
		rptr<INativeWindow> GetParent();
		void SetParent(rptr<INativeWindow> parent);
		bool GetAlwaysPassFocusToParent();
		void SetAlwaysPassFocusToParent(bool value);
		bool GetMaximizedBox();
		void SetMaximizedBox(bool visible);
		bool GetMinimizedBox();
		void SetMinimizedBox(bool visible);
		bool GetBorder();
		void SetBorder(bool visible);
		bool GetSizeBox();
		void SetSizeBox(bool visible);
		bool GetIconVisible();
		void SetIconVisible(bool visible);
		bool GetTitleBar();
		void SetTitleBar(bool visible);
		bool GetTopMost();
		void SetTopMost(bool topmost);
		
	};
	

/***********************************************************************
INodeItemStyleController
***********************************************************************/

	class GACUI_API INodeItemStyleController : public GuiListControl :: IItemStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INodeItemStyleController(void* __internal_object_reference_input);
	
	public:
		virtual ~INodeItemStyleController();
	
	public:
		
		rptr<INodeItemStyleController> operator=(rptr<INodeItemStyleController> value);
		
		rptr<INodeItemStyleProvider> GetNodeStyleProvider();
		
	};
	

/***********************************************************************
INodeItemStyleProvider
***********************************************************************/

	class GACUI_API INodeItemStyleProvider : public IDescriptable
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INodeItemStyleProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~INodeItemStyleProvider();
	
	public:
		
		void BindItemStyleProvider(rptr<GuiListControl :: IItemStyleProvider> styleProvider);
		void AttachListControl(rptr<GuiListControl> value);
		void DetachListControl();
		signed __int32 GetItemStyleId(rptr<INodeProvider> node);
		rptr<INodeItemStyleController> CreateItemStyle(signed __int32 styleId);
		void DestroyItemStyle(rptr<INodeItemStyleController> style);
		void Install(rptr<INodeItemStyleController> style, rptr<INodeProvider> node);
		void SetStyleSelected(rptr<INodeItemStyleController> style, bool value);
		rptr<INodeItemStyleProvider> operator=(rptr<INodeItemStyleProvider> value);
		
		rptr<GuiListControl :: IItemStyleProvider> GetBindedItemStyleProvider();
		
	};
	

/***********************************************************************
INodeItemView
***********************************************************************/

	class GACUI_API INodeItemView : public GuiListControl :: IItemPrimaryTextView
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		INodeItemView(void* __internal_object_reference_input);
	
	public:
		virtual ~INodeItemView();
	
	public:
		
		rptr<INodeProvider> RequestNode(signed __int32 index);
		void ReleaseNode(rptr<INodeProvider> node);
		signed __int32 CalculateNodeVisibilityIndex(rptr<INodeProvider> node);
		rptr<INodeItemView> operator=(rptr<INodeItemView> value);
		
		static wchar_t* get_Identifier();
		static void set_Identifier(wchar_t* value);
		
	};
	

/***********************************************************************
GuiVirtualTreeListControl
***********************************************************************/

	class GACUI_API GuiVirtualTreeListControl : public GuiSelectableListControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiVirtualTreeListControl(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiVirtualTreeListControl();
	
	public:
		
		static rptr<GuiVirtualTreeListControl> CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<INodeRootProvider> _nodeRootProvider);
		
		sptr<INodeItemStyleProvider> SetNodeStyleProvider(sptr<INodeItemStyleProvider> styleProvider);
		rptr<GuiVirtualTreeListControl> operator=(rptr<GuiVirtualTreeListControl> value);
		
		rptr<INodeItemView> GetNodeItemView();
		rptr<INodeRootProvider> GetNodeRootProvider();
		rptr<INodeItemStyleProvider> GetNodeStyleProvider();
		
	};
	

/***********************************************************************
IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer
***********************************************************************/

	class GACUI_API IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer(void* __internal_object_reference_input);
	
	public:
		virtual ~IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer();
	
	public:
		
		bool Contains(rptr<GuiListControl :: IItemStyleController> item);
		signed __int32 Count();
		rptr<GuiListControl :: IItemStyleController> Get(signed __int32 index);
		rptr<GuiListControl :: IItemStyleController> operator[](signed __int32 index);
		signed __int32 IndexOf(rptr<GuiListControl :: IItemStyleController> item);
		rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> operator=(rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> value);
		
	};
	

/***********************************************************************
IReadonlyList_of_GuiStackItemComposition_raw_pointer
***********************************************************************/

	class GACUI_API IReadonlyList_of_GuiStackItemComposition_raw_pointer
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IReadonlyList_of_GuiStackItemComposition_raw_pointer(void* __internal_object_reference_input);
	
	public:
		virtual ~IReadonlyList_of_GuiStackItemComposition_raw_pointer();
	
	public:
		
		bool Contains(rptr<GuiStackItemComposition> item);
		signed __int32 Count();
		rptr<GuiStackItemComposition> Get(signed __int32 index);
		rptr<GuiStackItemComposition> operator[](signed __int32 index);
		signed __int32 IndexOf(rptr<GuiStackItemComposition> item);
		rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> operator=(rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> value);
		
	};
	

/***********************************************************************
GuiStackComposition :: Direction
***********************************************************************/

	class GACUI_API GuiStackComposition : public GuiBoundsComposition
	{
	public:
		enum Direction
		{
			Horizontal = 0,
			Vertical = 1,
		};
		

/***********************************************************************
GuiStackComposition
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiStackComposition(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiStackComposition();
	
	public:
		
		static rptr<GuiStackComposition> CreateRptr();
		
		bool InsertStackItem(signed __int32 index, rptr<GuiStackItemComposition> item);
		rptr<GuiStackComposition> operator=(rptr<GuiStackComposition> value);
		
		rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> GetStackItems();
		GuiStackComposition :: Direction GetDirection();
		void SetDirection(GuiStackComposition :: Direction value);
		signed __int32 GetPadding();
		void SetPadding(signed __int32 value);
		Margin GetExtraMargin();
		void SetExtraMargin(Margin value);
		
	};
	

/***********************************************************************
IReadonlyList_of_GuiWindow_raw_pointer
***********************************************************************/

	class GACUI_API IReadonlyList_of_GuiWindow_raw_pointer
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IReadonlyList_of_GuiWindow_raw_pointer(void* __internal_object_reference_input);
	
	public:
		virtual ~IReadonlyList_of_GuiWindow_raw_pointer();
	
	public:
		
		bool Contains(rptr<GuiWindow> item);
		signed __int32 Count();
		rptr<GuiWindow> Get(signed __int32 index);
		rptr<GuiWindow> operator[](signed __int32 index);
		signed __int32 IndexOf(rptr<GuiWindow> item);
		rptr<IReadonlyList_of_GuiWindow_raw_pointer> operator=(rptr<IReadonlyList_of_GuiWindow_raw_pointer> value);
		
	};
	

/***********************************************************************
GuiApplication
***********************************************************************/

	class GACUI_API GuiApplication
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiApplication(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiApplication();
	
	public:
		
		void Run(rptr<GuiWindow> _mainWindow);
		rptr<GuiWindow> GetWindow(Point location);
		bool IsInMainThread();
		rptr<GuiApplication> operator=(rptr<GuiApplication> value);
		
		rptr<IReadonlyList_of_GuiWindow_raw_pointer> GetWindows();
		
	};
	

/***********************************************************************
ItemProviderBase
***********************************************************************/

	class GACUI_API ItemProviderBase : public GuiListControl :: IItemProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ItemProviderBase(void* __internal_object_reference_input);
	
	public:
		virtual ~ItemProviderBase();
	
	public:
		
		static rptr<ItemProviderBase> CreateRptr();
		
		rptr<ItemProviderBase> operator=(rptr<ItemProviderBase> value);
		
	};
	

/***********************************************************************
ItemStyleControllerBase
***********************************************************************/

	class GACUI_API ItemStyleControllerBase : public GuiListControl :: IItemStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ItemStyleControllerBase(void* __internal_object_reference_input);
	
	public:
		virtual ~ItemStyleControllerBase();
	
	public:
		
		rptr<ItemStyleControllerBase> operator=(rptr<ItemStyleControllerBase> value);
		
	};
	

/***********************************************************************
ListViewItemStyleProviderBase
***********************************************************************/

	class GACUI_API ListViewItemStyleProviderBase : public GuiSelectableListControl :: IItemStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewItemStyleProviderBase(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewItemStyleProviderBase();
	
	public:
		class ListViewItemStyleController;
		
		static rptr<ListViewItemStyleProviderBase> CreateRptr();
		
		rptr<ListViewItemStyleProviderBase> operator=(rptr<ListViewItemStyleProviderBase> value);
		

/***********************************************************************
ListViewItemStyleProviderBase :: ListViewItemStyleController
***********************************************************************/

		class GACUI_API ListViewItemStyleController : public ItemStyleControllerBase
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ListViewItemStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~ListViewItemStyleController();
		
		public:
			static rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> CreateRptr(rptr<ListViewItemStyleProviderBase> provider);
			
			rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> operator=(rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> value);
			
			bool GetSelected();
			void SetSelected(bool value);
			
		};
		
	};
	

/***********************************************************************
ListViewItemStyleProvider
***********************************************************************/

	class GACUI_API ListViewItemStyleProvider : public ListViewItemStyleProviderBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewItemStyleProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewItemStyleProvider();
	
	public:
		class IListViewItemContent;
		class IListViewItemContentProvider;
		class IListViewItemView;
		class ListViewContentItemStyleController;
		
		static rptr<ListViewItemStyleProvider> CreateRptr(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> itemContentProvider);
		
		bool IsItemStyleAttachedToListView(rptr<GuiListControl :: IItemStyleController> itemStyle);
		rptr<ListViewItemStyleProvider> operator=(rptr<ListViewItemStyleProvider> value);
		
		rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> GetCreatedItemStyles();
		

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemContent
***********************************************************************/

		class GACUI_API IListViewItemContent : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IListViewItemContent(void* __internal_object_reference_input);
		
		public:
			virtual ~IListViewItemContent();
		
		public:
			void Install(rptr<GuiListViewBase :: IStyleProvider> styleProvider, rptr<ListViewItemStyleProvider :: IListViewItemView> view, signed __int32 itemIndex);
			rptr<ListViewItemStyleProvider :: IListViewItemContent> operator=(rptr<ListViewItemStyleProvider :: IListViewItemContent> value);
			
			rptr<GuiBoundsComposition> GetContentComposition();
			rptr<GuiBoundsComposition> GetBackgroundDecorator();
			
		};
		

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemContentProvider
***********************************************************************/

		class GACUI_API IListViewItemContentProvider : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IListViewItemContentProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IListViewItemContentProvider();
		
		public:
			rptr<GuiListControl :: IItemCoordinateTransformer> CreatePreferredCoordinateTransformer();
			rptr<GuiListControl :: IItemArranger> CreatePreferredArranger();
			rptr<ListViewItemStyleProvider :: IListViewItemContent> CreateItemContent(const FontProperties& font);
			void AttachListControl(rptr<GuiListControl> value);
			void DetachListControl();
			rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> operator=(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> value);
			
		};
		

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemView
***********************************************************************/

		class GACUI_API IListViewItemView : public GuiListControl :: IItemPrimaryTextView
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IListViewItemView(void* __internal_object_reference_input);
		
		public:
			virtual ~IListViewItemView();
		
		public:
			sptr<GuiImageData> GetSmallImage(signed __int32 itemIndex);
			sptr<GuiImageData> GetLargeImage(signed __int32 itemIndex);
			GacString GetText(signed __int32 itemIndex);
			GacString GetSubItem(signed __int32 itemIndex, signed __int32 index);
			signed __int32 GetDataColumn(signed __int32 index);
			GacString GetColumnText(signed __int32 index);
			rptr<ListViewItemStyleProvider :: IListViewItemView> operator=(rptr<ListViewItemStyleProvider :: IListViewItemView> value);
			
			signed __int32 GetDataColumnCount();
			signed __int32 GetColumnCount();
			
			static wchar_t* get_Identifier();
			static void set_Identifier(wchar_t* value);
			
		};
		

/***********************************************************************
ListViewItemStyleProvider :: ListViewContentItemStyleController
***********************************************************************/

		class GACUI_API ListViewContentItemStyleController : public ListViewItemStyleProviderBase :: ListViewItemStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ListViewContentItemStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~ListViewContentItemStyleController();
		
		public:
			static rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> CreateRptr(rptr<ListViewItemStyleProvider> provider);
			
			void Install(rptr<ListViewItemStyleProvider :: IListViewItemView> view, signed __int32 itemIndex);
			rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> operator=(rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> value);
			
			rptr<ListViewItemStyleProvider :: IListViewItemContent> GetItemContent();
			
		};
		
	};
	

/***********************************************************************
GuiVirtualListView
***********************************************************************/

	class GACUI_API GuiVirtualListView : public GuiListViewBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiVirtualListView(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiVirtualListView();
	
	public:
		
		static rptr<GuiVirtualListView> CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider);
		
		void ChangeItemStyle(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> contentProvider);
		rptr<GuiVirtualListView> operator=(rptr<GuiVirtualListView> value);
		
	};
	

/***********************************************************************
ListViewBigIconContentProvider
***********************************************************************/

	class GACUI_API ListViewBigIconContentProvider : public ListViewItemStyleProvider :: IListViewItemContentProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewBigIconContentProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewBigIconContentProvider();
	
	public:
		
		static rptr<ListViewBigIconContentProvider> CreateRptr(Size _iconSize);
		
		rptr<ListViewBigIconContentProvider> operator=(rptr<ListViewBigIconContentProvider> value);
		
	};
	

/***********************************************************************
ListViewInformationContentProvider
***********************************************************************/

	class GACUI_API ListViewInformationContentProvider : public ListViewItemStyleProvider :: IListViewItemContentProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewInformationContentProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewInformationContentProvider();
	
	public:
		
		static rptr<ListViewInformationContentProvider> CreateRptr(Size _iconSize);
		
		rptr<ListViewInformationContentProvider> operator=(rptr<ListViewInformationContentProvider> value);
		
	};
	

/***********************************************************************
ListViewListContentProvider
***********************************************************************/

	class GACUI_API ListViewListContentProvider : public ListViewItemStyleProvider :: IListViewItemContentProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewListContentProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewListContentProvider();
	
	public:
		
		static rptr<ListViewListContentProvider> CreateRptr(Size _iconSize);
		
		rptr<ListViewListContentProvider> operator=(rptr<ListViewListContentProvider> value);
		
	};
	

/***********************************************************************
ListViewSmallIconContentProvider
***********************************************************************/

	class GACUI_API ListViewSmallIconContentProvider : public ListViewItemStyleProvider :: IListViewItemContentProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewSmallIconContentProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewSmallIconContentProvider();
	
	public:
		
		static rptr<ListViewSmallIconContentProvider> CreateRptr(Size _iconSize);
		
		rptr<ListViewSmallIconContentProvider> operator=(rptr<ListViewSmallIconContentProvider> value);
		
	};
	

/***********************************************************************
ListViewTileContentProvider
***********************************************************************/

	class GACUI_API ListViewTileContentProvider : public ListViewItemStyleProvider :: IListViewItemContentProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewTileContentProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewTileContentProvider();
	
	public:
		
		static rptr<ListViewTileContentProvider> CreateRptr(Size _iconSize);
		
		rptr<ListViewTileContentProvider> operator=(rptr<ListViewTileContentProvider> value);
		
	};
	

/***********************************************************************
ListWrapperProvider_of_ListViewItem
***********************************************************************/

	class GACUI_API ListWrapperProvider_of_ListViewItem : public ItemProviderBase, public IList_of_ListViewItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListWrapperProvider_of_ListViewItem(void* __internal_object_reference_input);
	
	public:
		virtual ~ListWrapperProvider_of_ListViewItem();
	
	public:
		
		bool NotifyUpdate(signed __int32 start, signed __int32 count);
		rptr<ListWrapperProvider_of_ListViewItem> operator=(rptr<ListWrapperProvider_of_ListViewItem> value);
		
	};
	

/***********************************************************************
ListProvider_of_ListViewItem
***********************************************************************/

	class GACUI_API ListProvider_of_ListViewItem : public ListWrapperProvider_of_ListViewItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListProvider_of_ListViewItem(void* __internal_object_reference_input);
	
	public:
		virtual ~ListProvider_of_ListViewItem();
	
	public:
		
		static rptr<ListProvider_of_ListViewItem> CreateRptr();
		
		rptr<ListProvider_of_ListViewItem> operator=(rptr<ListProvider_of_ListViewItem> value);
		
	};
	

/***********************************************************************
NodeItemProvider
***********************************************************************/

	class GACUI_API NodeItemProvider : public ItemProviderBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		NodeItemProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~NodeItemProvider();
	
	public:
		
		static rptr<NodeItemProvider> CreateRptr(rptr<INodeRootProvider> _root);
		
		rptr<NodeItemProvider> operator=(rptr<NodeItemProvider> value);
		
		sptr<INodeRootProvider> GetRoot();
		
	};
	

/***********************************************************************
NodeItemStyleProvider
***********************************************************************/

	class GACUI_API NodeItemStyleProvider : public GuiSelectableListControl :: IItemStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		NodeItemStyleProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~NodeItemStyleProvider();
	
	public:
		
		static rptr<NodeItemStyleProvider> CreateRptr(sptr<INodeItemStyleProvider> provider);
		
		rptr<NodeItemStyleProvider> operator=(rptr<NodeItemStyleProvider> value);
		
	};
	

/***********************************************************************
RangedItemArrangerBase
***********************************************************************/

	class GACUI_API RangedItemArrangerBase : public GuiListControl :: IItemArranger
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		RangedItemArrangerBase(void* __internal_object_reference_input);
	
	public:
		virtual ~RangedItemArrangerBase();
	
	public:
		
		rptr<RangedItemArrangerBase> operator=(rptr<RangedItemArrangerBase> value);
		
	};
	

/***********************************************************************
FixedHeightItemArranger
***********************************************************************/

	class GACUI_API FixedHeightItemArranger : public RangedItemArrangerBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		FixedHeightItemArranger(void* __internal_object_reference_input);
	
	public:
		virtual ~FixedHeightItemArranger();
	
	public:
		
		static rptr<FixedHeightItemArranger> CreateRptr();
		
		rptr<FixedHeightItemArranger> operator=(rptr<FixedHeightItemArranger> value);
		
	};
	

/***********************************************************************
FixedHeightMultiColumnItemArranger
***********************************************************************/

	class GACUI_API FixedHeightMultiColumnItemArranger : public RangedItemArrangerBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		FixedHeightMultiColumnItemArranger(void* __internal_object_reference_input);
	
	public:
		virtual ~FixedHeightMultiColumnItemArranger();
	
	public:
		
		static rptr<FixedHeightMultiColumnItemArranger> CreateRptr();
		
		rptr<FixedHeightMultiColumnItemArranger> operator=(rptr<FixedHeightMultiColumnItemArranger> value);
		
	};
	

/***********************************************************************
FixedSizeMultiColumnItemArranger
***********************************************************************/

	class GACUI_API FixedSizeMultiColumnItemArranger : public RangedItemArrangerBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		FixedSizeMultiColumnItemArranger(void* __internal_object_reference_input);
	
	public:
		virtual ~FixedSizeMultiColumnItemArranger();
	
	public:
		
		static rptr<FixedSizeMultiColumnItemArranger> CreateRptr();
		
		rptr<FixedSizeMultiColumnItemArranger> operator=(rptr<FixedSizeMultiColumnItemArranger> value);
		
	};
	

/***********************************************************************
ListViewColumnItemArranger
***********************************************************************/

	class GACUI_API ListViewColumnItemArranger : public FixedHeightItemArranger
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewColumnItemArranger(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewColumnItemArranger();
	
	public:
		class IColumnItemView;
		class IColumnItemViewCallback;
		
		static rptr<ListViewColumnItemArranger> CreateRptr();
		
		rptr<ListViewColumnItemArranger> operator=(rptr<ListViewColumnItemArranger> value);
		

/***********************************************************************
ListViewColumnItemArranger :: IColumnItemView
***********************************************************************/

		class GACUI_API IColumnItemView : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IColumnItemView(void* __internal_object_reference_input);
		
		public:
			virtual ~IColumnItemView();
		
		public:
			bool AttachCallback(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value);
			bool DetachCallback(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value);
			GacString GetColumnText(signed __int32 index);
			signed __int32 GetColumnSize(signed __int32 index);
			void SetColumnSize(signed __int32 index, signed __int32 value);
			rptr<ListViewColumnItemArranger :: IColumnItemView> operator=(rptr<ListViewColumnItemArranger :: IColumnItemView> value);
			
			signed __int32 GetColumnCount();
			
			static wchar_t* get_Identifier();
			static void set_Identifier(wchar_t* value);
			
		};
		

/***********************************************************************
ListViewColumnItemArranger :: IColumnItemViewCallback
***********************************************************************/

		class GACUI_API IColumnItemViewCallback : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IColumnItemViewCallback(void* __internal_object_reference_input);
		
		public:
			virtual ~IColumnItemViewCallback();
		
		public:
			void OnColumnChanged();
			void OnColumnSizeChanged(signed __int32 index);
			rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> operator=(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value);
			
		};
		
	};
	

/***********************************************************************
ListViewDetailContentProvider
***********************************************************************/

	class GACUI_API ListViewDetailContentProvider : public ListViewItemStyleProvider :: IListViewItemContentProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewDetailContentProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewDetailContentProvider();
	
	public:
		
		static rptr<ListViewDetailContentProvider> CreateRptr(Size _iconSize);
		
		rptr<ListViewDetailContentProvider> operator=(rptr<ListViewDetailContentProvider> value);
		
	};
	

/***********************************************************************
ListViewItemProvider
***********************************************************************/

	class GACUI_API ListViewItemProvider : public ListProvider_of_ListViewItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListViewItemProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~ListViewItemProvider();
	
	public:
		
		static rptr<ListViewItemProvider> CreateRptr();
		
		void NotifyDataColumnsUpdated();
		void NotifyColumnsUpdated();
		rptr<ListViewItemProvider> operator=(rptr<ListViewItemProvider> value);
		
		rptr<IList_of_int> GetDataColumns();
		rptr<IList_of_ListViewColumn> GetColumns();
		
	};
	

/***********************************************************************
GuiListView
***********************************************************************/

	class GACUI_API GuiListView : public GuiVirtualListView
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiListView(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiListView();
	
	public:
		
		static rptr<GuiListView> CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider);
		
		rptr<GuiListView> operator=(rptr<GuiListView> value);
		
		rptr<ListViewItemProvider> GetItems();
		
	};
	

/***********************************************************************
TextItem
***********************************************************************/

	class GACUI_API TextItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TextItem(void* __internal_object_reference_input);
	
	public:
		virtual ~TextItem();
	
	public:
		
		static rptr<TextItem> CreateRptr(wchar_t* _text, bool _checked);
		static TextItem Create(wchar_t* _text, bool _checked);
		static rptr<TextItem> CreateRptr(const GacString& _text, bool _checked);
		static TextItem Create(const GacString& _text, bool _checked);
		static rptr<TextItem> CreateRptr(const TextItem& item);
		static TextItem Create(const TextItem& item);
		static rptr<TextItem> CreateRptr();
		static TextItem Create();
		
		bool operator==(const TextItem& value);
		bool operator!=(const TextItem& value);
		TextItem& operator=(const TextItem& __that);
		
		const GacString& GetText();
		bool GetChecked();
		
	};
	

/***********************************************************************
IList_of_TextItem
***********************************************************************/

	class GACUI_API IList_of_TextItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		IList_of_TextItem(void* __internal_object_reference_input);
	
	public:
		virtual ~IList_of_TextItem();
	
	public:
		
		signed __int32 Insert(signed __int32 index, const TextItem& item);
		bool Set(signed __int32 index, const TextItem& item);
		rptr<IList_of_TextItem> operator=(rptr<IList_of_TextItem> value);
		
	};
	

/***********************************************************************
ListWrapperProvider_of_TextItem
***********************************************************************/

	class GACUI_API ListWrapperProvider_of_TextItem : public ItemProviderBase, public IList_of_TextItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListWrapperProvider_of_TextItem(void* __internal_object_reference_input);
	
	public:
		virtual ~ListWrapperProvider_of_TextItem();
	
	public:
		
		bool NotifyUpdate(signed __int32 start, signed __int32 count);
		rptr<ListWrapperProvider_of_TextItem> operator=(rptr<ListWrapperProvider_of_TextItem> value);
		
	};
	

/***********************************************************************
ListProvider_of_TextItem
***********************************************************************/

	class GACUI_API ListProvider_of_TextItem : public ListWrapperProvider_of_TextItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		ListProvider_of_TextItem(void* __internal_object_reference_input);
	
	public:
		virtual ~ListProvider_of_TextItem();
	
	public:
		
		static rptr<ListProvider_of_TextItem> CreateRptr();
		
		rptr<ListProvider_of_TextItem> operator=(rptr<ListProvider_of_TextItem> value);
		
	};
	

/***********************************************************************
TextItemStyleProvider
***********************************************************************/

	class GACUI_API TextItemStyleProvider : public GuiSelectableListControl :: IItemStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TextItemStyleProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~TextItemStyleProvider();
	
	public:
		class ITextItemStyleProvider;
		class ITextItemView;
		class TextItemStyleController;
		
		static rptr<TextItemStyleProvider> CreateRptr(rptr<TextItemStyleProvider :: ITextItemStyleProvider> _textItemStyleProvider);
		
		rptr<TextItemStyleProvider> operator=(rptr<TextItemStyleProvider> value);
		

/***********************************************************************
TextItemStyleProvider :: ITextItemStyleProvider
***********************************************************************/

		class GACUI_API ITextItemStyleProvider : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ITextItemStyleProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~ITextItemStyleProvider();
		
		public:
			rptr<GuiSelectableButton :: IStyleController> CreateBackgroundStyleController();
			rptr<GuiSelectableButton :: IStyleController> CreateBulletStyleController();
			rptr<TextItemStyleProvider :: ITextItemStyleProvider> operator=(rptr<TextItemStyleProvider :: ITextItemStyleProvider> value);
			
		};
		

/***********************************************************************
TextItemStyleProvider :: ITextItemView
***********************************************************************/

		class GACUI_API ITextItemView : public GuiListControl :: IItemPrimaryTextView
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ITextItemView(void* __internal_object_reference_input);
		
		public:
			virtual ~ITextItemView();
		
		public:
			GacString GetText(signed __int32 itemIndex);
			bool GetChecked(signed __int32 itemIndex);
			void SetCheckedSilently(signed __int32 itemIndex, bool value);
			rptr<TextItemStyleProvider :: ITextItemView> operator=(rptr<TextItemStyleProvider :: ITextItemView> value);
			
			static wchar_t* get_Identifier();
			static void set_Identifier(wchar_t* value);
			
		};
		

/***********************************************************************
TextItemStyleProvider :: TextItemStyleController
***********************************************************************/

		class GACUI_API TextItemStyleController : public ItemStyleControllerBase
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			TextItemStyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~TextItemStyleController();
		
		public:
			static rptr<TextItemStyleProvider :: TextItemStyleController> CreateRptr(rptr<TextItemStyleProvider> provider);
			
			rptr<TextItemStyleProvider :: TextItemStyleController> operator=(rptr<TextItemStyleProvider :: TextItemStyleController> value);
			
			bool GetSelected();
			void SetSelected(bool value);
			bool GetChecked();
			void SetChecked(bool value);
			const GacString& GetText();
			void SetText(const GacString& value);
			
		};
		
	};
	

/***********************************************************************
GuiVirtualTextList
***********************************************************************/

	class GACUI_API GuiVirtualTextList : public GuiSelectableListControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiVirtualTextList(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiVirtualTextList();
	
	public:
		
		static rptr<GuiVirtualTextList> CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<TextItemStyleProvider :: ITextItemStyleProvider> _itemStyleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider);
		
		sptr<GuiListControl :: IItemStyleProvider> ChangeItemStyle(rptr<TextItemStyleProvider :: ITextItemStyleProvider> itemStyleProvider);
		rptr<GuiVirtualTextList> operator=(rptr<GuiVirtualTextList> value);
		
	};
	

/***********************************************************************
TextItemProvider
***********************************************************************/

	class GACUI_API TextItemProvider : public ListProvider_of_TextItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TextItemProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~TextItemProvider();
	
	public:
		
		static rptr<TextItemProvider> CreateRptr();
		
		void SetText(signed __int32 itemIndex, const GacString& value);
		void SetChecked(signed __int32 itemIndex, bool value);
		rptr<TextItemProvider> operator=(rptr<TextItemProvider> value);
		
	};
	

/***********************************************************************
GuiTextList
***********************************************************************/

	class GACUI_API GuiTextList : public GuiVirtualTextList
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiTextList(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiTextList();
	
	public:
		
		static rptr<GuiTextList> CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<TextItemStyleProvider :: ITextItemStyleProvider> _itemStyleProvider);
		
		rptr<GuiTextList> operator=(rptr<GuiTextList> value);
		
		rptr<TextItemProvider> GetItems();
		
	};
	

/***********************************************************************
TextLine
***********************************************************************/

	class GACUI_API TextLine
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TextLine(void* __internal_object_reference_input);
	
	public:
		virtual ~TextLine();
	
	public:
		
		static rptr<TextLine> CreateRptr();
		static TextLine Create();
		
		bool operator==(const TextLine& value);
		bool operator!=(const TextLine& value);
		void Initialize();
		void Finalize();
		bool IsReady();
		bool Modify(signed __int32 start, signed __int32 count, wchar_t* input, signed __int32 inputCount);
		TextLine Split(signed __int32 index);
		void AppendAndFinalize(TextLine& line);
		
		static signed __int32 CalculateBufferLength(signed __int32 dataLength);
		
		wchar_t* get_text();
		void set_text(wchar_t* value);
		rptr<CharAtt> get_att();
		void set_att(rptr<CharAtt> value);
		signed __int32 get_availableOffsetCount();
		void set_availableOffsetCount(signed __int32 value);
		signed __int32 get_bufferLength();
		void set_bufferLength(signed __int32 value);
		signed __int32 get_dataLength();
		void set_dataLength(signed __int32 value);
		
	};
	

/***********************************************************************
TextPos
***********************************************************************/

	class GACUI_API TextPos
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TextPos(void* __internal_object_reference_input);
	
	public:
		virtual ~TextPos();
	
	public:
		
		static rptr<TextPos> CreateRptr(signed __int32 _row, signed __int32 _column);
		static TextPos Create(signed __int32 _row, signed __int32 _column);
		static rptr<TextPos> CreateRptr();
		static TextPos Create();
		
		signed __int32 Compare(const TextPos& value);
		bool operator==(const TextPos& value);
		bool operator!=(const TextPos& value);
		bool operator<(const TextPos& value);
		bool operator<=(const TextPos& value);
		bool operator>(const TextPos& value);
		bool operator>=(const TextPos& value);
		
		signed __int32 get_row();
		void set_row(signed __int32 value);
		signed __int32 get_column();
		void set_column(signed __int32 value);
		
	};
	

/***********************************************************************
GuiTextBoxCommonInterface
***********************************************************************/

	class GACUI_API GuiTextBoxCommonInterface
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiTextBoxCommonInterface(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiTextBoxCommonInterface();
	
	public:
		
		static rptr<GuiTextBoxCommonInterface> CreateRptr();
		
		bool CanCut();
		bool CanCopy();
		bool CanPaste();
		void SelectAll();
		bool Cut();
		bool Copy();
		bool Paste();
		GacString GetRowText(signed __int32 row);
		GacString GetFragmentText(TextPos start, TextPos end);
		signed __int32 GetRowWidth(signed __int32 row);
		TextPos GetTextPosFromPoint(Point point);
		Point GetPointFromTextPos(TextPos pos);
		Rect GetRectFromTextPos(TextPos pos);
		TextPos GetNearestTextPos(Point point);
		void Select(TextPos begin, TextPos end);
		rptr<GuiTextBoxCommonInterface> operator=(rptr<GuiTextBoxCommonInterface> value);
		
		rptr<GuiGraphicsComposition> GetTextComposition();
		signed __int32 GetRowHeight();
		signed __int32 GetMaxWidth();
		signed __int32 GetMaxHeight();
		TextPos GetCaretBegin();
		TextPos GetCaretEnd();
		TextPos GetCaretSmall();
		TextPos GetCaretLarge();
		GacString GetSelectionText();
		void SetSelectionText(const GacString& value);
		GuiGraphicsEvent_of_GuiEventArgs on_SelectionChanged();
		
	};
	

/***********************************************************************
TextLines
***********************************************************************/

	class GACUI_API TextLines
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TextLines(void* __internal_object_reference_input);
	
	public:
		virtual ~TextLines();
	
	public:
		
		static rptr<TextLines> CreateRptr();
		static TextLines Create();
		
		TextLine& GetLine(signed __int32 row);
		GacString GetText(TextPos start, TextPos end);
		bool RemoveLines(signed __int32 start, signed __int32 count);
		bool IsAvailable(TextPos pos);
		TextPos Normalize(TextPos pos);
		TextPos Modify(TextPos start, TextPos end, const GacString& input);
		TextPos Modify(TextPos start, TextPos end, wchar_t* input);
		TextPos Modify(TextPos start, TextPos end, wchar_t* input, signed __int32 inputCount);
		TextPos Modify(TextPos start, TextPos end, wchar_t** inputs, signed __int32* inputCounts, signed __int32 rows);
		void Clear();
		void ClearMeasurement();
		void MeasureRow(signed __int32 row);
		signed __int32 GetRowWidth(signed __int32 row);
		TextPos GetTextPosFromPoint(Point point);
		Point GetPointFromTextPos(TextPos pos);
		Rect GetRectFromTextPos(TextPos pos);
		TextLines& operator=(const TextLines& value);
		
		signed __int32 GetCount();
		rptr<CharMeasurer> GetCharMeasurer();
		void SetCharMeasurer(rptr<CharMeasurer> value);
		rptr<IGuiGraphicsRenderTarget> GetRenderTarget();
		void SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value);
		GacString GetText();
		void SetText(const GacString& value);
		signed __int32 GetTabSpaceCount();
		void SetTabSpaceCount(signed __int32 value);
		signed __int32 GetRowHeight();
		signed __int32 GetMaxWidth();
		signed __int32 GetMaxHeight();
		
	};
	

/***********************************************************************
GuiColorizedTextElement
***********************************************************************/

	class GACUI_API GuiColorizedTextElement : public IGuiGraphicsElement
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiColorizedTextElement(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiColorizedTextElement();
	
	public:
		class ICallback;
		
		rptr<GuiColorizedTextElement> operator=(rptr<GuiColorizedTextElement> value);
		
		static rptr<GuiColorizedTextElement> Create();
		
		TextLines& GetLines();
		rptr<GuiColorizedTextElement :: ICallback> GetCallback();
		void SetCallback(rptr<GuiColorizedTextElement :: ICallback> value);
		rptr<IReadonlyList_of_ColorEntry> GetColors();
		void SetColors(rptr<Array_of_ColorEntry> value);
		const FontProperties& GetFont();
		void SetFont(const FontProperties& value);
		Point GetViewPosition();
		void SetViewPosition(Point value);
		bool GetVisuallyEnabled();
		void SetVisuallyEnabled(bool value);
		bool GetFocused();
		void SetFocused(bool value);
		TextPos GetCaretBegin();
		void SetCaretBegin(TextPos value);
		TextPos GetCaretEnd();
		void SetCaretEnd(TextPos value);
		bool GetCaretVisible();
		void SetCaretVisible(bool value);
		Color GetCaretColor();
		void SetCaretColor(Color value);
		
		static GacString GetElementTypeName();
		

/***********************************************************************
GuiColorizedTextElement :: ICallback
***********************************************************************/

		class GACUI_API ICallback : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ICallback(void* __internal_object_reference_input);
		
		public:
			virtual ~ICallback();
		
		public:
			void ColorChanged();
			void FontChanged();
			rptr<GuiColorizedTextElement :: ICallback> operator=(rptr<GuiColorizedTextElement :: ICallback> value);
			
		};
		
	};
	

/***********************************************************************
GuiTextElementOperator
***********************************************************************/

	class GACUI_API GuiTextElementOperator
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiTextElementOperator(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiTextElementOperator();
	
	public:
		class DefaultCallback;
		class ICallback;
		
		static rptr<GuiTextElementOperator> CreateRptr();
		
		void Install(rptr<GuiColorizedTextElement> _textElement, rptr<GuiGraphicsComposition> _textComposition, rptr<GuiControl> _textControl);
		TextPos GetNearestTextPos(Point point);
		void Select(TextPos begin, TextPos end);
		bool CanCut();
		bool CanCopy();
		bool CanPaste();
		void SelectAll();
		bool Cut();
		bool Copy();
		bool Paste();
		rptr<GuiTextElementOperator> operator=(rptr<GuiTextElementOperator> value);
		
		rptr<GuiTextElementOperator :: ICallback> GetCallback();
		void SetCallback(rptr<GuiTextElementOperator :: ICallback> value);
		rptr<GuiTextBoxCommonInterface> GetTextBoxCommonInterface();
		void SetTextBoxCommonInterface(rptr<GuiTextBoxCommonInterface> value);
		rptr<GuiColorizedTextElement> GetTextElement();
		rptr<GuiGraphicsComposition> GetTextComposition();
		GacString GetSelectionText();
		void SetSelectionText(const GacString& value);
		

/***********************************************************************
GuiTextElementOperator :: ICallback
***********************************************************************/

		class GACUI_API ICallback : public IDescriptable
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			ICallback(void* __internal_object_reference_input);
		
		public:
			virtual ~ICallback();
		
		public:
			TextPos GetLeftWord(TextPos pos);
			TextPos GetRightWord(TextPos pos);
			void GetWord(TextPos pos, TextPos& begin, TextPos& end);
			bool BeforeModify(TextPos& start, TextPos& end, const GacString& originalText, GacString& inputText);
			void AfterModify(TextPos originalStart, TextPos originalEnd, const GacString& originalText, TextPos inputStart, TextPos inputEnd, const GacString& inputText);
			void ScrollToView(Point point);
			rptr<GuiTextElementOperator :: ICallback> operator=(rptr<GuiTextElementOperator :: ICallback> value);
			
			signed __int32 GetPageRows();
			signed __int32 GetTextMargin();
			
		};
		

/***********************************************************************
GuiTextElementOperator :: DefaultCallback
***********************************************************************/

		class GACUI_API DefaultCallback : public GuiTextElementOperator :: ICallback
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			DefaultCallback(void* __internal_object_reference_input);
		
		public:
			virtual ~DefaultCallback();
		
		public:
			static rptr<GuiTextElementOperator :: DefaultCallback> CreateRptr(rptr<GuiColorizedTextElement> _textElement, rptr<GuiGraphicsComposition> _textComposition);
			
			rptr<GuiTextElementOperator :: DefaultCallback> operator=(rptr<GuiTextElementOperator :: DefaultCallback> value);
			
		};
		
	};
	

/***********************************************************************
GuiMultilineTextBox
***********************************************************************/

	class GACUI_API GuiMultilineTextBox : public GuiScrollView, public GuiTextBoxCommonInterface
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiMultilineTextBox(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiMultilineTextBox();
	
	public:
		class StyleController;
		class TextElementOperatorCallback;
		
		static rptr<GuiMultilineTextBox> CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider);
		
		rptr<GuiMultilineTextBox> operator=(rptr<GuiMultilineTextBox> value);
		

/***********************************************************************
GuiMultilineTextBox :: StyleController
***********************************************************************/

		class GACUI_API StyleController : public GuiScrollView :: StyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			StyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~StyleController();
		
		public:
			static rptr<GuiMultilineTextBox :: StyleController> CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider);
			
			rptr<GuiMultilineTextBox :: StyleController> operator=(rptr<GuiMultilineTextBox :: StyleController> value);
			void SetViewPosition(Point value);
			
			rptr<GuiColorizedTextElement> GetTextElement();
			rptr<GuiGraphicsComposition> GetTextComposition();
			rptr<GuiTextElementOperator> GetTextElementOperator();
			GacString GetText();
			
		};
		

/***********************************************************************
GuiMultilineTextBox :: TextElementOperatorCallback
***********************************************************************/

		class GACUI_API TextElementOperatorCallback : public GuiTextElementOperator :: DefaultCallback
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			TextElementOperatorCallback(void* __internal_object_reference_input);
		
		public:
			virtual ~TextElementOperatorCallback();
		
		public:
			static rptr<GuiMultilineTextBox :: TextElementOperatorCallback> CreateRptr(rptr<GuiMultilineTextBox> _textControl);
			
			rptr<GuiMultilineTextBox :: TextElementOperatorCallback> operator=(rptr<GuiMultilineTextBox :: TextElementOperatorCallback> value);
			
		};
		
	};
	

/***********************************************************************
GuiSinglelineTextBox
***********************************************************************/

	class GACUI_API GuiSinglelineTextBox : public GuiControl, public GuiTextBoxCommonInterface
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiSinglelineTextBox(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiSinglelineTextBox();
	
	public:
		class IStyleProvider;
		class StyleController;
		class TextElementOperatorCallback;
		
		static rptr<GuiSinglelineTextBox> CreateRptr(rptr<GuiSinglelineTextBox :: IStyleProvider> styleProvider);
		
		rptr<GuiSinglelineTextBox> operator=(rptr<GuiSinglelineTextBox> value);
		

/***********************************************************************
GuiSinglelineTextBox :: IStyleProvider
***********************************************************************/

		class GACUI_API IStyleProvider : public GuiControl :: IStyleProvider
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleProvider();
		
		public:
			rptr<GuiGraphicsComposition> InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
			rptr<GuiSinglelineTextBox :: IStyleProvider> operator=(rptr<GuiSinglelineTextBox :: IStyleProvider> value);
			
		};
		

/***********************************************************************
GuiSinglelineTextBox :: StyleController
***********************************************************************/

		class GACUI_API StyleController : public GuiControl :: IStyleController
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			StyleController(void* __internal_object_reference_input);
		
		public:
			virtual ~StyleController();
		
		public:
			static rptr<GuiSinglelineTextBox :: StyleController> CreateRptr(rptr<GuiSinglelineTextBox :: IStyleProvider> _styleProvider);
			
			void RearrangeTextElement();
			rptr<GuiSinglelineTextBox :: StyleController> operator=(rptr<GuiSinglelineTextBox :: StyleController> value);
			void SetTextBox(rptr<GuiSinglelineTextBox> value);
			void SetViewPosition(Point value);
			
			GacString GetText();
			rptr<GuiColorizedTextElement> GetTextElement();
			rptr<GuiGraphicsComposition> GetTextComposition();
			rptr<GuiTextElementOperator> GetTextElementOperator();
			
		};
		

/***********************************************************************
GuiSinglelineTextBox :: TextElementOperatorCallback
***********************************************************************/

		class GACUI_API TextElementOperatorCallback : public GuiTextElementOperator :: DefaultCallback
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			TextElementOperatorCallback(void* __internal_object_reference_input);
		
		public:
			virtual ~TextElementOperatorCallback();
		
		public:
			static rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> CreateRptr(rptr<GuiSinglelineTextBox> _textControl);
			
			rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> operator=(rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> value);
			
		};
		
	};
	

/***********************************************************************
TreeViewItem
***********************************************************************/

	class GACUI_API TreeViewItem
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TreeViewItem(void* __internal_object_reference_input);
	
	public:
		virtual ~TreeViewItem();
	
	public:
		
		static rptr<TreeViewItem> CreateRptr(sptr<GuiImageData> _image, const GacString& _text);
		static rptr<TreeViewItem> CreateRptr();
		
		rptr<TreeViewItem> operator=(rptr<TreeViewItem> value);
		
		sptr<GuiImageData> get_image();
		void set_image(sptr<GuiImageData> value);
		GacString get_text();
		void set_text(GacString value);
		
	};
	

/***********************************************************************
TreeViewItemRootProvider
***********************************************************************/

	class GACUI_API TreeViewItemRootProvider : public MemoryNodeRootProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TreeViewItemRootProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~TreeViewItemRootProvider();
	
	public:
		
		static rptr<TreeViewItemRootProvider> CreateRptr();
		
		rptr<TreeViewItemRootProvider> operator=(rptr<TreeViewItemRootProvider> value);
		
	};
	

/***********************************************************************
GuiTreeView
***********************************************************************/

	class GACUI_API GuiTreeView : public GuiVirtualTreeListControl
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		GuiTreeView(void* __internal_object_reference_input);
	
	public:
		virtual ~GuiTreeView();
	
	public:
		class IStyleProvider;
		
		static rptr<GuiTreeView> CreateRptr(rptr<GuiTreeView :: IStyleProvider> _styleProvider, rptr<INodeRootProvider> _nodeRootProvider);
		
		sptr<TreeViewItemRootProvider> Nodes();
		rptr<GuiTreeView> operator=(rptr<GuiTreeView> value);
		
		rptr<GuiTreeView :: IStyleProvider> GetTreeViewStyleProvider();
		

/***********************************************************************
GuiTreeView :: IStyleProvider
***********************************************************************/

		class GACUI_API IStyleProvider : public GuiScrollView :: IStyleProvider
		{
		public:
		
		protected:
			template<typename T> friend class __GacUIInternal;
			void* __internal_object_reference;
			IStyleProvider(void* __internal_object_reference_input);
		
		public:
			virtual ~IStyleProvider();
		
		public:
			rptr<GuiSelectableButton :: IStyleController> CreateItemBackground();
			rptr<GuiSelectableButton :: IStyleController> CreateItemExpandingDecorator();
			rptr<GuiTreeView :: IStyleProvider> operator=(rptr<GuiTreeView :: IStyleProvider> value);
			
			Color GetTextColor();
			
		};
		
	};
	

/***********************************************************************
TreeViewNodeItemStyleProvider
***********************************************************************/

	class GACUI_API TreeViewNodeItemStyleProvider : public INodeItemStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		TreeViewNodeItemStyleProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~TreeViewNodeItemStyleProvider();
	
	public:
		
		static rptr<TreeViewNodeItemStyleProvider> CreateRptr();
		
		rptr<TreeViewNodeItemStyleProvider> operator=(rptr<TreeViewNodeItemStyleProvider> value);
		
	};
	

/***********************************************************************
Win7ButtonColors
***********************************************************************/

	class GACUI_API Win7ButtonColors
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ButtonColors(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ButtonColors();
	
	public:
		
		static rptr<Win7ButtonColors> CreateRptr();
		static Win7ButtonColors Create();
		
		bool operator==(const Win7ButtonColors& colors);
		bool operator!=(const Win7ButtonColors& colors);
		void SetAlphaWithoutText(unsigned __int8 a);
		
		static Win7ButtonColors Blend(const Win7ButtonColors& c1, const Win7ButtonColors& c2, signed __int32 ratio, signed __int32 total);
		static Win7ButtonColors ButtonNormal();
		static Win7ButtonColors ButtonActive();
		static Win7ButtonColors ButtonPressed();
		static Win7ButtonColors ButtonDisabled();
		static Win7ButtonColors ItemNormal();
		static Win7ButtonColors ItemActive();
		static Win7ButtonColors ItemSelected();
		static Win7ButtonColors ItemDisabled();
		static Win7ButtonColors CheckedNormal(bool selected);
		static Win7ButtonColors CheckedActive(bool selected);
		static Win7ButtonColors CheckedPressed(bool selected);
		static Win7ButtonColors CheckedDisabled(bool selected);
		static Win7ButtonColors ToolstripButtonNormal();
		static Win7ButtonColors ToolstripButtonActive();
		static Win7ButtonColors ToolstripButtonPressed();
		static Win7ButtonColors ToolstripButtonDisabled();
		static Win7ButtonColors MenuBarButtonNormal();
		static Win7ButtonColors MenuBarButtonActive();
		static Win7ButtonColors MenuBarButtonPressed();
		static Win7ButtonColors MenuBarButtonDisabled();
		static Win7ButtonColors MenuItemButtonNormal();
		static Win7ButtonColors MenuItemButtonNormalActive();
		static Win7ButtonColors MenuItemButtonDisabled();
		static Win7ButtonColors MenuItemButtonDisabledActive();
		static Win7ButtonColors TabPageHeaderNormal();
		static Win7ButtonColors TabPageHeaderActive();
		static Win7ButtonColors TabPageHeaderSelected();
		
		Color get_borderColor();
		void set_borderColor(Color value);
		Color get_backgroundColor();
		void set_backgroundColor(Color value);
		Color get_g1();
		void set_g1(Color value);
		Color get_g2();
		void set_g2(Color value);
		Color get_g3();
		void set_g3(Color value);
		Color get_g4();
		void set_g4(Color value);
		Color get_textColor();
		void set_textColor(Color value);
		Color get_bulletLight();
		void set_bulletLight(Color value);
		Color get_bulletDark();
		void set_bulletDark(Color value);
		
	};
	

/***********************************************************************
Win7ButtonStyleBase
***********************************************************************/

	class GACUI_API Win7ButtonStyleBase : public GuiSelectableButton :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ButtonStyleBase(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ButtonStyleBase();
	
	public:
		
		rptr<Win7ButtonStyleBase> operator=(rptr<Win7ButtonStyleBase> value);
		
		bool GetTransparentWhenInactive();
		void SetTransparentWhenInactive(bool value);
		bool GetTransparentWhenDisabled();
		void SetTransparentWhenDisabled(bool value);
		bool GetAutoSizeForText();
		void SetAutoSizeForText(bool value);
		
	};
	

/***********************************************************************
Win7ButtonStyle
***********************************************************************/

	class GACUI_API Win7ButtonStyle : public Win7ButtonStyleBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ButtonStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ButtonStyle();
	
	public:
		
		static rptr<Win7ButtonStyle> CreateRptr(bool verticalGradient);
		
		rptr<Win7ButtonStyle> operator=(rptr<Win7ButtonStyle> value);
		
	};
	

/***********************************************************************
Win7CheckBoxStyle :: BulletStyle
***********************************************************************/

	class GACUI_API Win7CheckBoxStyle : public GuiSelectableButton :: IStyleController
	{
	public:
		enum BulletStyle
		{
			CheckBox = 0,
			RadioButton = 1,
		};
		

/***********************************************************************
Win7CheckBoxStyle
***********************************************************************/

	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7CheckBoxStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7CheckBoxStyle();
	
	public:
		
		static rptr<Win7CheckBoxStyle> CreateRptr(Win7CheckBoxStyle :: BulletStyle bulletStyle, bool backgroundVisible);
		
		rptr<Win7CheckBoxStyle> operator=(rptr<Win7CheckBoxStyle> value);
		
	};
	

/***********************************************************************
Win7DropDownComboBoxStyle
***********************************************************************/

	class GACUI_API Win7DropDownComboBoxStyle : public Win7ButtonStyle, public GuiComboBoxBase :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7DropDownComboBoxStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7DropDownComboBoxStyle();
	
	public:
		
		static rptr<Win7DropDownComboBoxStyle> CreateRptr();
		
		rptr<Win7DropDownComboBoxStyle> operator=(rptr<Win7DropDownComboBoxStyle> value);
		
	};
	

/***********************************************************************
Win7EmptyStyle
***********************************************************************/

	class GACUI_API Win7EmptyStyle : public GuiControl :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7EmptyStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7EmptyStyle();
	
	public:
		
		static rptr<Win7EmptyStyle> CreateRptr(Color color);
		
		rptr<Win7EmptyStyle> operator=(rptr<Win7EmptyStyle> value);
		
	};
	

/***********************************************************************
Win7GroupBoxStyle
***********************************************************************/

	class GACUI_API Win7GroupBoxStyle : public GuiControl :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7GroupBoxStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7GroupBoxStyle();
	
	public:
		
		static rptr<Win7GroupBoxStyle> CreateRptr();
		
		rptr<Win7GroupBoxStyle> operator=(rptr<Win7GroupBoxStyle> value);
		
	};
	

/***********************************************************************
Win7ListViewColumnDropDownStyle
***********************************************************************/

	class GACUI_API Win7ListViewColumnDropDownStyle : public GuiSelectableButton :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ListViewColumnDropDownStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ListViewColumnDropDownStyle();
	
	public:
		
		static rptr<Win7ListViewColumnDropDownStyle> CreateRptr();
		
		rptr<Win7ListViewColumnDropDownStyle> operator=(rptr<Win7ListViewColumnDropDownStyle> value);
		
	};
	

/***********************************************************************
Win7ListViewColumnHeaderStyle
***********************************************************************/

	class GACUI_API Win7ListViewColumnHeaderStyle : public GuiSelectableButton :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ListViewColumnHeaderStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ListViewColumnHeaderStyle();
	
	public:
		
		static rptr<Win7ListViewColumnHeaderStyle> CreateRptr();
		
		rptr<Win7ListViewColumnHeaderStyle> operator=(rptr<Win7ListViewColumnHeaderStyle> value);
		
	};
	

/***********************************************************************
Win7MenuBarButtonStyle
***********************************************************************/

	class GACUI_API Win7MenuBarButtonStyle : public GuiMenuButton :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7MenuBarButtonStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7MenuBarButtonStyle();
	
	public:
		
		static rptr<Win7MenuBarButtonStyle> CreateRptr();
		
		rptr<Win7MenuBarButtonStyle> operator=(rptr<Win7MenuBarButtonStyle> value);
		
	};
	

/***********************************************************************
Win7MenuBarStyle
***********************************************************************/

	class GACUI_API Win7MenuBarStyle : public GuiControl :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7MenuBarStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7MenuBarStyle();
	
	public:
		
		static rptr<Win7MenuBarStyle> CreateRptr();
		
		rptr<Win7MenuBarStyle> operator=(rptr<Win7MenuBarStyle> value);
		
	};
	

/***********************************************************************
Win7MenuItemButtonStyle
***********************************************************************/

	class GACUI_API Win7MenuItemButtonStyle : public GuiMenuButton :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7MenuItemButtonStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7MenuItemButtonStyle();
	
	public:
		
		static rptr<Win7MenuItemButtonStyle> CreateRptr();
		
		rptr<Win7MenuItemButtonStyle> operator=(rptr<Win7MenuItemButtonStyle> value);
		
	};
	

/***********************************************************************
Win7MenuSplitterStyle
***********************************************************************/

	class GACUI_API Win7MenuSplitterStyle : public GuiControl :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7MenuSplitterStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7MenuSplitterStyle();
	
	public:
		
		static rptr<Win7MenuSplitterStyle> CreateRptr();
		
		rptr<Win7MenuSplitterStyle> operator=(rptr<Win7MenuSplitterStyle> value);
		
	};
	

/***********************************************************************
Win7MenuStyle
***********************************************************************/

	class GACUI_API Win7MenuStyle : public GuiControl :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7MenuStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7MenuStyle();
	
	public:
		
		static rptr<Win7MenuStyle> CreateRptr();
		
		rptr<Win7MenuStyle> operator=(rptr<Win7MenuStyle> value);
		
	};
	

/***********************************************************************
Win7ScrollStyle
***********************************************************************/

	class GACUI_API Win7ScrollStyle : public CommonScrollStyle
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ScrollStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ScrollStyle();
	
	public:
		
		static rptr<Win7ScrollStyle> CreateRptr(CommonScrollStyle :: Direction _direction);
		
		rptr<Win7ScrollStyle> operator=(rptr<Win7ScrollStyle> value);
		
	};
	

/***********************************************************************
Win7ScrollViewProvider
***********************************************************************/

	class GACUI_API Win7ScrollViewProvider : public GuiScrollView :: IStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ScrollViewProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ScrollViewProvider();
	
	public:
		
		static rptr<Win7ScrollViewProvider> CreateRptr();
		
		rptr<Win7ScrollViewProvider> operator=(rptr<Win7ScrollViewProvider> value);
		
	};
	

/***********************************************************************
Win7MultilineTextBoxProvider
***********************************************************************/

	class GACUI_API Win7MultilineTextBoxProvider : public Win7ScrollViewProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7MultilineTextBoxProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7MultilineTextBoxProvider();
	
	public:
		
		static rptr<Win7MultilineTextBoxProvider> CreateRptr();
		
		rptr<Win7MultilineTextBoxProvider> operator=(rptr<Win7MultilineTextBoxProvider> value);
		
	};
	

/***********************************************************************
Win7ListViewProvider
***********************************************************************/

	class GACUI_API Win7ListViewProvider : public Win7MultilineTextBoxProvider, public GuiListViewBase :: IStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ListViewProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ListViewProvider();
	
	public:
		
		static rptr<Win7ListViewProvider> CreateRptr();
		
		rptr<Win7ListViewProvider> operator=(rptr<Win7ListViewProvider> value);
		
	};
	

/***********************************************************************
Win7SelectableItemStyle
***********************************************************************/

	class GACUI_API Win7SelectableItemStyle : public Win7ButtonStyleBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7SelectableItemStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7SelectableItemStyle();
	
	public:
		
		static rptr<Win7SelectableItemStyle> CreateRptr();
		
		rptr<Win7SelectableItemStyle> operator=(rptr<Win7SelectableItemStyle> value);
		
	};
	

/***********************************************************************
Win7SinglelineTextBoxProvider
***********************************************************************/

	class GACUI_API Win7SinglelineTextBoxProvider : public GuiSinglelineTextBox :: IStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7SinglelineTextBoxProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7SinglelineTextBoxProvider();
	
	public:
		
		static rptr<Win7SinglelineTextBoxProvider> CreateRptr();
		
		rptr<Win7SinglelineTextBoxProvider> operator=(rptr<Win7SinglelineTextBoxProvider> value);
		
	};
	

/***********************************************************************
Win7TabPageHeaderStyle
***********************************************************************/

	class GACUI_API Win7TabPageHeaderStyle : public Win7ButtonStyleBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7TabPageHeaderStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7TabPageHeaderStyle();
	
	public:
		
		static rptr<Win7TabPageHeaderStyle> CreateRptr();
		
		rptr<Win7TabPageHeaderStyle> operator=(rptr<Win7TabPageHeaderStyle> value);
		
	};
	

/***********************************************************************
Win7TabStyle
***********************************************************************/

	class GACUI_API Win7TabStyle : public GuiTab :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7TabStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7TabStyle();
	
	public:
		
		static rptr<Win7TabStyle> CreateRptr();
		
		rptr<Win7TabStyle> operator=(rptr<Win7TabStyle> value);
		
	};
	

/***********************************************************************
Win7TextBoxBackground
***********************************************************************/

	class GACUI_API Win7TextBoxBackground
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7TextBoxBackground(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7TextBoxBackground();
	
	public:
		
		static rptr<Win7TextBoxBackground> CreateRptr();
		
		void AssociateStyleController(rptr<GuiControl :: IStyleController> controller);
		rptr<GuiGraphicsComposition> InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
		void InitializeTextElement(rptr<GuiColorizedTextElement> _textElement);
		rptr<Win7TextBoxBackground> operator=(rptr<Win7TextBoxBackground> value);
		void SetFocusableComposition(rptr<GuiGraphicsComposition> value);
		void SetVisuallyEnabled(bool value);
		
	};
	

/***********************************************************************
Win7TextListProvider
***********************************************************************/

	class GACUI_API Win7TextListProvider : public TextItemStyleProvider :: ITextItemStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7TextListProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7TextListProvider();
	
	public:
		
		static rptr<Win7TextListProvider> CreateRptr();
		
		rptr<Win7TextListProvider> operator=(rptr<Win7TextListProvider> value);
		
	};
	

/***********************************************************************
Win7CheckTextListProvider
***********************************************************************/

	class GACUI_API Win7CheckTextListProvider : public Win7TextListProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7CheckTextListProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7CheckTextListProvider();
	
	public:
		
		static rptr<Win7CheckTextListProvider> CreateRptr();
		
		rptr<Win7CheckTextListProvider> operator=(rptr<Win7CheckTextListProvider> value);
		
	};
	

/***********************************************************************
Win7RadioTextListProvider
***********************************************************************/

	class GACUI_API Win7RadioTextListProvider : public Win7TextListProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7RadioTextListProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7RadioTextListProvider();
	
	public:
		
		static rptr<Win7RadioTextListProvider> CreateRptr();
		
		rptr<Win7RadioTextListProvider> operator=(rptr<Win7RadioTextListProvider> value);
		
	};
	

/***********************************************************************
Win7ToolstripButtonStyle
***********************************************************************/

	class GACUI_API Win7ToolstripButtonStyle : public Win7ButtonStyleBase
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7ToolstripButtonStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7ToolstripButtonStyle();
	
	public:
		
		static rptr<Win7ToolstripButtonStyle> CreateRptr(bool transparent);
		
		rptr<Win7ToolstripButtonStyle> operator=(rptr<Win7ToolstripButtonStyle> value);
		
	};
	

/***********************************************************************
Win7TrackStyle
***********************************************************************/

	class GACUI_API Win7TrackStyle : public CommonTrackStyle
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7TrackStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7TrackStyle();
	
	public:
		
		static rptr<Win7TrackStyle> CreateRptr(CommonTrackStyle :: Direction _direction);
		
		rptr<Win7TrackStyle> operator=(rptr<Win7TrackStyle> value);
		
	};
	

/***********************************************************************
Win7TreeViewExpandingButtonStyle
***********************************************************************/

	class GACUI_API Win7TreeViewExpandingButtonStyle : public GuiSelectableButton :: IStyleController
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7TreeViewExpandingButtonStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7TreeViewExpandingButtonStyle();
	
	public:
		
		static rptr<Win7TreeViewExpandingButtonStyle> CreateRptr();
		
		rptr<Win7TreeViewExpandingButtonStyle> operator=(rptr<Win7TreeViewExpandingButtonStyle> value);
		
	};
	

/***********************************************************************
Win7TreeViewProvider
***********************************************************************/

	class GACUI_API Win7TreeViewProvider : public Win7MultilineTextBoxProvider, public GuiTreeView :: IStyleProvider
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7TreeViewProvider(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7TreeViewProvider();
	
	public:
		
		static rptr<Win7TreeViewProvider> CreateRptr();
		
		rptr<Win7TreeViewProvider> operator=(rptr<Win7TreeViewProvider> value);
		
	};
	

/***********************************************************************
Win7WindowStyle
***********************************************************************/

	class GACUI_API Win7WindowStyle : public Win7EmptyStyle
	{
	public:
	
	protected:
		template<typename T> friend class __GacUIInternal;
		void* __internal_object_reference;
		Win7WindowStyle(void* __internal_object_reference_input);
	
	public:
		virtual ~Win7WindowStyle();
	
	public:
		
		static rptr<Win7WindowStyle> CreateRptr();
		
		rptr<Win7WindowStyle> operator=(rptr<Win7WindowStyle> value);
		
	};
}

namespace g{ using namespace gacui_cpp_1_0; }
#endif
