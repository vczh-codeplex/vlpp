/***********************************************************************
DO NOT MODIFY!!!
THIS FILE IS GENERATED BY _TranslateXMLtoCode.exe

Developer: 陈梓瀚(vczh)
***********************************************************************/

#include "GacUICommonInternal.h"
#include "GacUI.h"
#include "..\..\..\..\..\Candidate\GUI\GUI\GacUI.h"

namespace gacui_cpp_1_0
{
	template<typename T>
	class __GacUIInternal{};

/***********************************************************************
__GacUIInternal<T> Implementations
***********************************************************************/

	template<>
	class __GacUIInternal<CharAtt>
	{
	public:
		typedef CharAtt WrappedObjectType;
		typedef vl::presentation::elements::text::CharAtt InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Color>
	{
	public:
		typedef Color WrappedObjectType;
		typedef vl::presentation::Color InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ColorItem>
	{
	public:
		typedef ColorItem WrappedObjectType;
		typedef vl::presentation::elements::text::ColorItem InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ColorEntry>
	{
	public:
		typedef ColorEntry WrappedObjectType;
		typedef vl::presentation::elements::text::ColorEntry InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Array_of_ColorEntry>
	{
	public:
		typedef Array_of_ColorEntry WrappedObjectType;
		typedef vl::collections::Array<vl::presentation::elements::text::ColorEntry,vl::presentation::elements::text::ColorEntry> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<DescriptableObject>
	{
	public:
		typedef DescriptableObject WrappedObjectType;
		typedef vl::presentation::DescriptableObject InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<FontProperties>
	{
	public:
		typedef FontProperties WrappedObjectType;
		typedef vl::presentation::FontProperties InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiCellOption>
	{
	public:
		typedef GuiCellOption WrappedObjectType;
		typedef vl::presentation::elements::GuiCellOption InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiComponent>
	{
	public:
		typedef GuiComponent WrappedObjectType;
		typedef vl::presentation::controls::GuiComponent InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiEventArgs>
	{
	public:
		typedef GuiEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiImageData>
	{
	public:
		typedef GuiImageData WrappedObjectType;
		typedef vl::presentation::controls::GuiImageData InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiRequestEventArgs>
	{
	public:
		typedef GuiRequestEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiRequestEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IDescriptable>
	{
	public:
		typedef IDescriptable WrappedObjectType;
		typedef vl::presentation::IDescriptable InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiRequestEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiRequestEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiRequestEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTabPage>
	{
	public:
		typedef GuiTabPage WrappedObjectType;
		typedef vl::presentation::controls::GuiTabPage InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IGuiGraphicsAnimation>
	{
	public:
		typedef IGuiGraphicsAnimation WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsAnimation InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsAnimationManager>
	{
	public:
		typedef GuiGraphicsAnimationManager WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsAnimationManager InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTimeBasedAnimation>
	{
	public:
		typedef GuiTimeBasedAnimation WrappedObjectType;
		typedef vl::presentation::elements::GuiTimeBasedAnimation InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IGuiGraphicsElementFactory>
	{
	public:
		typedef IGuiGraphicsElementFactory WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsElementFactory InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IGuiGraphicsElement>
	{
	public:
		typedef IGuiGraphicsElement WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Gui3DBorderElement>
	{
	public:
		typedef Gui3DBorderElement WrappedObjectType;
		typedef vl::presentation::elements::Gui3DBorderElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Gui3DSplitterElement>
	{
	public:
		typedef Gui3DSplitterElement WrappedObjectType;
		typedef vl::presentation::elements::Gui3DSplitterElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGradientBackgroundElement>
	{
	public:
		typedef GuiGradientBackgroundElement WrappedObjectType;
		typedef vl::presentation::elements::GuiGradientBackgroundElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiImageFrameElement>
	{
	public:
		typedef GuiImageFrameElement WrappedObjectType;
		typedef vl::presentation::elements::GuiImageFrameElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiRoundBorderElement>
	{
	public:
		typedef GuiRoundBorderElement WrappedObjectType;
		typedef vl::presentation::elements::GuiRoundBorderElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSolidBackgroundElement>
	{
	public:
		typedef GuiSolidBackgroundElement WrappedObjectType;
		typedef vl::presentation::elements::GuiSolidBackgroundElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSolidBorderElement>
	{
	public:
		typedef GuiSolidBorderElement WrappedObjectType;
		typedef vl::presentation::elements::GuiSolidBorderElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSolidLabelElement>
	{
	public:
		typedef GuiSolidLabelElement WrappedObjectType;
		typedef vl::presentation::elements::GuiSolidLabelElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IGuiGraphicsRendererFactory>
	{
	public:
		typedef IGuiGraphicsRendererFactory WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsRendererFactory InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IGuiMenuService>
	{
	public:
		typedef IGuiMenuService WrappedObjectType;
		typedef vl::presentation::controls::IGuiMenuService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IList_of_int>
	{
	public:
		typedef IList_of_int WrappedObjectType;
		typedef vl::collections::IList<int,int> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IList_of_MemoryNodeProvider>
	{
	public:
		typedef IList_of_MemoryNodeProvider WrappedObjectType;
		typedef vl::collections::IList<vl::Ptr<vl::presentation::controls::tree::MemoryNodeProvider>,vl::presentation::controls::tree::MemoryNodeProvider *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeAsyncService>
	{
	public:
		typedef INativeAsyncService WrappedObjectType;
		typedef vl::presentation::INativeAsyncService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeClipboardService>
	{
	public:
		typedef INativeClipboardService WrappedObjectType;
		typedef vl::presentation::INativeClipboardService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeCursor>
	{
	public:
		typedef INativeCursor WrappedObjectType;
		typedef vl::presentation::INativeCursor InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeImageFrameCache>
	{
	public:
		typedef INativeImageFrameCache WrappedObjectType;
		typedef vl::presentation::INativeImageFrameCache InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeImageService>
	{
	public:
		typedef INativeImageService WrappedObjectType;
		typedef vl::presentation::INativeImageService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeImage>
	{
	public:
		typedef INativeImage WrappedObjectType;
		typedef vl::presentation::INativeImage InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeInputService>
	{
	public:
		typedef INativeInputService WrappedObjectType;
		typedef vl::presentation::INativeInputService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeResourceService>
	{
	public:
		typedef INativeResourceService WrappedObjectType;
		typedef vl::presentation::INativeResourceService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INodeItemPrimaryTextView>
	{
	public:
		typedef INodeItemPrimaryTextView WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeItemPrimaryTextView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INodeProvider>
	{
	public:
		typedef INodeProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INodeProviderCallback>
	{
	public:
		typedef INodeProviderCallback WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeProviderCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INodeRootProvider>
	{
	public:
		typedef INodeRootProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeRootProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IReadonlyList_of_ColorEntry>
	{
	public:
		typedef IReadonlyList_of_ColorEntry WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::elements::text::ColorEntry,vl::presentation::elements::text::ColorEntry> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IReadonlyList_of_GuiGraphicsComposition_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiGraphicsComposition_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::elements::GuiGraphicsComposition *,vl::presentation::elements::GuiGraphicsComposition *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IReadonlyList_of_GuiTabPage_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiTabPage_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::controls::GuiTabPage *,vl::presentation::controls::GuiTabPage *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IReadonlyList_of_int>
	{
	public:
		typedef IReadonlyList_of_int WrappedObjectType;
		typedef vl::collections::IReadonlyList<int,int> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ITreeViewItemView>
	{
	public:
		typedef ITreeViewItemView WrappedObjectType;
		typedef vl::presentation::controls::tree::ITreeViewItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<List_of_ObjectString_of_wchar_t>
	{
	public:
		typedef List_of_ObjectString_of_wchar_t WrappedObjectType;
		typedef vl::collections::List<vl::ObjectString<wchar_t>,vl::ObjectString<wchar_t> > InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewColumn>
	{
	public:
		typedef ListViewColumn WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewColumn InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IList_of_ListViewColumn>
	{
	public:
		typedef IList_of_ListViewColumn WrappedObjectType;
		typedef vl::collections::IList<vl::Ptr<vl::presentation::controls::list::ListViewColumn>,vl::presentation::controls::list::ListViewColumn *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItem>
	{
	public:
		typedef ListViewItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItem InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IList_of_ListViewItem>
	{
	public:
		typedef IList_of_ListViewItem WrappedObjectType;
		typedef vl::collections::IList<vl::Ptr<vl::presentation::controls::list::ListViewItem>,vl::presentation::controls::list::ListViewItem *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Margin>
	{
	public:
		typedef Margin WrappedObjectType;
		typedef vl::presentation::Margin InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<MemoryNodeProvider>
	{
	public:
		typedef MemoryNodeProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::MemoryNodeProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<NativeWindowCharInfo>
	{
	public:
		typedef NativeWindowCharInfo WrappedObjectType;
		typedef vl::presentation::NativeWindowCharInfo InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiCharEventArgs>
	{
	public:
		typedef GuiCharEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiCharEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiCharEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiCharEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiCharEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<NativeWindowKeyInfo>
	{
	public:
		typedef NativeWindowKeyInfo WrappedObjectType;
		typedef vl::presentation::NativeWindowKeyInfo InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiKeyEventArgs>
	{
	public:
		typedef GuiKeyEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiKeyEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiKeyEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiKeyEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiKeyEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<NativeWindowMouseInfo>
	{
	public:
		typedef NativeWindowMouseInfo WrappedObjectType;
		typedef vl::presentation::NativeWindowMouseInfo InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiMouseEventArgs>
	{
	public:
		typedef GuiMouseEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiMouseEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiMouseEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiMouseEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiMouseEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsEventReceiver>
	{
	public:
		typedef GuiGraphicsEventReceiver WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEventReceiver InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<NodeRootProviderBase>
	{
	public:
		typedef NodeRootProviderBase WrappedObjectType;
		typedef vl::presentation::controls::tree::NodeRootProviderBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<MemoryNodeRootProvider>
	{
	public:
		typedef MemoryNodeRootProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::MemoryNodeRootProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Point>
	{
	public:
		typedef Point WrappedObjectType;
		typedef vl::presentation::Point InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeControllerListener>
	{
	public:
		typedef INativeControllerListener WrappedObjectType;
		typedef vl::presentation::INativeControllerListener InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeCallbackService>
	{
	public:
		typedef INativeCallbackService WrappedObjectType;
		typedef vl::presentation::INativeCallbackService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeWindowService>
	{
	public:
		typedef INativeWindowService WrappedObjectType;
		typedef vl::presentation::INativeWindowService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Size>
	{
	public:
		typedef Size WrappedObjectType;
		typedef vl::presentation::Size InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiPolygonElement>
	{
	public:
		typedef GuiPolygonElement WrappedObjectType;
		typedef vl::presentation::elements::GuiPolygonElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeImageFrame>
	{
	public:
		typedef INativeImageFrame WrappedObjectType;
		typedef vl::presentation::INativeImageFrame InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Rect>
	{
	public:
		typedef Rect WrappedObjectType;
		typedef vl::presentation::Rect InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IGuiGraphicsRenderTarget>
	{
	public:
		typedef IGuiGraphicsRenderTarget WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsRenderTarget InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<CharMeasurer>
	{
	public:
		typedef CharMeasurer WrappedObjectType;
		typedef vl::presentation::elements::text::CharMeasurer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsResourceManager>
	{
	public:
		typedef GuiGraphicsResourceManager WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsResourceManager InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IGuiGraphicsRenderer>
	{
	public:
		typedef IGuiGraphicsRenderer WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsRenderer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeScreen>
	{
	public:
		typedef INativeScreen WrappedObjectType;
		typedef vl::presentation::INativeScreen InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeScreenService>
	{
	public:
		typedef INativeScreenService WrappedObjectType;
		typedef vl::presentation::INativeScreenService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeController>
	{
	public:
		typedef INativeController WrappedObjectType;
		typedef vl::presentation::INativeController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeWindowListener>
	{
	public:
		typedef INativeWindowListener WrappedObjectType;
		typedef vl::presentation::INativeWindowListener InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsHost>
	{
	public:
		typedef GuiGraphicsHost WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsHost InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsComposition>
	{
	public:
		typedef GuiGraphicsComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiGraphicsSite>
	{
	public:
		typedef GuiGraphicsSite WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsSite InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiBoundsComposition>
	{
	public:
		typedef GuiBoundsComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiBoundsComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiCellComposition>
	{
	public:
		typedef GuiCellComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiCellComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiControl>
	{
	public:
		typedef GuiControl WrappedObjectType;
		typedef vl::presentation::controls::GuiControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiControl :: IStyleController>
	{
	public:
		typedef GuiControl :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiControl::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiControl :: IStyleProvider>
	{
	public:
		typedef GuiControl :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiControl::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiButton>
	{
	public:
		typedef GuiButton WrappedObjectType;
		typedef vl::presentation::controls::GuiButton InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiButton :: IStyleController>
	{
	public:
		typedef GuiButton :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiButton::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiControlHost>
	{
	public:
		typedef GuiControlHost WrappedObjectType;
		typedef vl::presentation::controls::GuiControlHost InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiMenuBar>
	{
	public:
		typedef GuiMenuBar WrappedObjectType;
		typedef vl::presentation::controls::GuiMenuBar InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiMenuButton>
	{
	public:
		typedef GuiMenuButton WrappedObjectType;
		typedef vl::presentation::controls::GuiMenuButton InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiMenuButton :: IStyleController>
	{
	public:
		typedef GuiMenuButton :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiMenuButton::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiPartialViewComposition>
	{
	public:
		typedef GuiPartialViewComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiPartialViewComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiScroll>
	{
	public:
		typedef GuiScroll WrappedObjectType;
		typedef vl::presentation::controls::GuiScroll InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiScroll :: ICommandExecutor>
	{
	public:
		typedef GuiScroll :: ICommandExecutor WrappedObjectType;
		typedef vl::presentation::controls::GuiScroll::ICommandExecutor InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiScroll :: IStyleController>
	{
	public:
		typedef GuiScroll :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiScroll::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<CommonScrollStyle>
	{
	public:
		typedef CommonScrollStyle WrappedObjectType;
		typedef vl::presentation::common_styles::CommonScrollStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<CommonTrackStyle>
	{
	public:
		typedef CommonTrackStyle WrappedObjectType;
		typedef vl::presentation::common_styles::CommonTrackStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiScrollView>
	{
	public:
		typedef GuiScrollView WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiScrollView :: IStyleProvider>
	{
	public:
		typedef GuiScrollView :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollView::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiScrollView :: StyleController>
	{
	public:
		typedef GuiScrollView :: StyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollView::StyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl>
	{
	public:
		typedef GuiListControl WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl :: IItemArrangerCallback>
	{
	public:
		typedef GuiListControl :: IItemArrangerCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemArrangerCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>
	{
	public:
		typedef GuiListControl :: IItemCoordinateTransformer WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemCoordinateTransformer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl :: IItemPrimaryTextView>
	{
	public:
		typedef GuiListControl :: IItemPrimaryTextView WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemPrimaryTextView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl :: IItemProvider>
	{
	public:
		typedef GuiListControl :: IItemProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl :: IItemProviderCallback>
	{
	public:
		typedef GuiListControl :: IItemProviderCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemProviderCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl :: IItemArranger>
	{
	public:
		typedef GuiListControl :: IItemArranger WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl :: IItemStyleController>
	{
	public:
		typedef GuiListControl :: IItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListControl :: IItemStyleProvider>
	{
	public:
		typedef GuiListControl :: IItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<AxisAlignedItemCoordinateTransformer>
	{
	public:
		typedef AxisAlignedItemCoordinateTransformer WrappedObjectType;
		typedef vl::presentation::controls::list::AxisAlignedItemCoordinateTransformer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<DefaultItemCoordinateTransformer>
	{
	public:
		typedef DefaultItemCoordinateTransformer WrappedObjectType;
		typedef vl::presentation::controls::list::DefaultItemCoordinateTransformer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiScrollContainer>
	{
	public:
		typedef GuiScrollContainer WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollContainer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiScrollContainer :: StyleController>
	{
	public:
		typedef GuiScrollContainer :: StyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollContainer::StyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSelectableButton>
	{
	public:
		typedef GuiSelectableButton WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableButton InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSelectableButton :: GroupController>
	{
	public:
		typedef GuiSelectableButton :: GroupController WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableButton::GroupController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSelectableButton :: IStyleController>
	{
	public:
		typedef GuiSelectableButton :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableButton::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSelectableButton :: MutexGroupController>
	{
	public:
		typedef GuiSelectableButton :: MutexGroupController WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableButton::MutexGroupController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSelectableListControl>
	{
	public:
		typedef GuiSelectableListControl WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableListControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>
	{
	public:
		typedef GuiSelectableListControl :: IItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableListControl::IItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListViewBase>
	{
	public:
		typedef GuiListViewBase WrappedObjectType;
		typedef vl::presentation::controls::GuiListViewBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListViewBase :: IStyleProvider>
	{
	public:
		typedef GuiListViewBase :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiListViewBase::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSideAlignedComposition>
	{
	public:
		typedef GuiSideAlignedComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiSideAlignedComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiStackItemComposition>
	{
	public:
		typedef GuiStackItemComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiStackItemComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTab>
	{
	public:
		typedef GuiTab WrappedObjectType;
		typedef vl::presentation::controls::GuiTab InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTab :: ICommandExecutor>
	{
	public:
		typedef GuiTab :: ICommandExecutor WrappedObjectType;
		typedef vl::presentation::controls::GuiTab::ICommandExecutor InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTab :: IStyleController>
	{
	public:
		typedef GuiTab :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiTab::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTableComposition>
	{
	public:
		typedef GuiTableComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiTableComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiWindow>
	{
	public:
		typedef GuiWindow WrappedObjectType;
		typedef vl::presentation::controls::GuiWindow InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiPopup>
	{
	public:
		typedef GuiPopup WrappedObjectType;
		typedef vl::presentation::controls::GuiPopup InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiComboBoxBase>
	{
	public:
		typedef GuiComboBoxBase WrappedObjectType;
		typedef vl::presentation::controls::GuiComboBoxBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiComboBoxBase :: ICommandExecutor>
	{
	public:
		typedef GuiComboBoxBase :: ICommandExecutor WrappedObjectType;
		typedef vl::presentation::controls::GuiComboBoxBase::ICommandExecutor InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiComboBoxBase :: IStyleController>
	{
	public:
		typedef GuiComboBoxBase :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiComboBoxBase::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiComboBoxListControl>
	{
	public:
		typedef GuiComboBoxListControl WrappedObjectType;
		typedef vl::presentation::controls::GuiComboBoxListControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiMenu>
	{
	public:
		typedef GuiMenu WrappedObjectType;
		typedef vl::presentation::controls::GuiMenu InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiWindowComposition>
	{
	public:
		typedef GuiWindowComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiWindowComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INativeWindow>
	{
	public:
		typedef INativeWindow WrappedObjectType;
		typedef vl::presentation::INativeWindow InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INodeItemStyleController>
	{
	public:
		typedef INodeItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INodeItemStyleProvider>
	{
	public:
		typedef INodeItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<INodeItemView>
	{
	public:
		typedef INodeItemView WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiVirtualTreeListControl>
	{
	public:
		typedef GuiVirtualTreeListControl WrappedObjectType;
		typedef vl::presentation::controls::GuiVirtualTreeListControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::controls::GuiListControl::IItemStyleController *,vl::presentation::controls::GuiListControl::IItemStyleController *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IReadonlyList_of_GuiStackItemComposition_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiStackItemComposition_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::elements::GuiStackItemComposition *,vl::presentation::elements::GuiStackItemComposition *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiStackComposition>
	{
	public:
		typedef GuiStackComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiStackComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IReadonlyList_of_GuiWindow_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiWindow_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::controls::GuiWindow *,vl::presentation::controls::GuiWindow *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiApplication>
	{
	public:
		typedef GuiApplication WrappedObjectType;
		typedef vl::presentation::controls::GuiApplication InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ItemProviderBase>
	{
	public:
		typedef ItemProviderBase WrappedObjectType;
		typedef vl::presentation::controls::list::ItemProviderBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ItemStyleControllerBase>
	{
	public:
		typedef ItemStyleControllerBase WrappedObjectType;
		typedef vl::presentation::controls::list::ItemStyleControllerBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItemStyleProviderBase>
	{
	public:
		typedef ListViewItemStyleProviderBase WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProviderBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>
	{
	public:
		typedef ListViewItemStyleProviderBase :: ListViewItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProviderBase::ListViewItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItemStyleProvider>
	{
	public:
		typedef ListViewItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>
	{
	public:
		typedef ListViewItemStyleProvider :: IListViewItemContent WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemContent InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>
	{
	public:
		typedef ListViewItemStyleProvider :: IListViewItemContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>
	{
	public:
		typedef ListViewItemStyleProvider :: IListViewItemView WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItemStyleProvider :: ListViewContentItemStyleController>
	{
	public:
		typedef ListViewItemStyleProvider :: ListViewContentItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider::ListViewContentItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiVirtualListView>
	{
	public:
		typedef GuiVirtualListView WrappedObjectType;
		typedef vl::presentation::controls::GuiVirtualListView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewBigIconContentProvider>
	{
	public:
		typedef ListViewBigIconContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewBigIconContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewInformationContentProvider>
	{
	public:
		typedef ListViewInformationContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewInformationContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewListContentProvider>
	{
	public:
		typedef ListViewListContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewListContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewSmallIconContentProvider>
	{
	public:
		typedef ListViewSmallIconContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewSmallIconContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewTileContentProvider>
	{
	public:
		typedef ListViewTileContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewTileContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListWrapperProvider_of_ListViewItem>
	{
	public:
		typedef ListWrapperProvider_of_ListViewItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListWrapperProvider<vl::Ptr<vl::presentation::controls::list::ListViewItem>,vl::presentation::controls::list::ListViewItem *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListProvider_of_ListViewItem>
	{
	public:
		typedef ListProvider_of_ListViewItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListProvider<vl::Ptr<vl::presentation::controls::list::ListViewItem> > InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<NodeItemProvider>
	{
	public:
		typedef NodeItemProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::NodeItemProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<NodeItemStyleProvider>
	{
	public:
		typedef NodeItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::NodeItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<RangedItemArrangerBase>
	{
	public:
		typedef RangedItemArrangerBase WrappedObjectType;
		typedef vl::presentation::controls::list::RangedItemArrangerBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<FixedHeightItemArranger>
	{
	public:
		typedef FixedHeightItemArranger WrappedObjectType;
		typedef vl::presentation::controls::list::FixedHeightItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<FixedHeightMultiColumnItemArranger>
	{
	public:
		typedef FixedHeightMultiColumnItemArranger WrappedObjectType;
		typedef vl::presentation::controls::list::FixedHeightMultiColumnItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<FixedSizeMultiColumnItemArranger>
	{
	public:
		typedef FixedSizeMultiColumnItemArranger WrappedObjectType;
		typedef vl::presentation::controls::list::FixedSizeMultiColumnItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewColumnItemArranger>
	{
	public:
		typedef ListViewColumnItemArranger WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewColumnItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>
	{
	public:
		typedef ListViewColumnItemArranger :: IColumnItemView WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>
	{
	public:
		typedef ListViewColumnItemArranger :: IColumnItemViewCallback WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemViewCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewDetailContentProvider>
	{
	public:
		typedef ListViewDetailContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewDetailContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListViewItemProvider>
	{
	public:
		typedef ListViewItemProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiListView>
	{
	public:
		typedef GuiListView WrappedObjectType;
		typedef vl::presentation::controls::GuiListView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextItem>
	{
	public:
		typedef TextItem WrappedObjectType;
		typedef vl::presentation::controls::list::TextItem InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<IList_of_TextItem>
	{
	public:
		typedef IList_of_TextItem WrappedObjectType;
		typedef vl::collections::IList<vl::presentation::controls::list::TextItem,vl::presentation::controls::list::TextItem> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListWrapperProvider_of_TextItem>
	{
	public:
		typedef ListWrapperProvider_of_TextItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListWrapperProvider<vl::presentation::controls::list::TextItem,vl::presentation::controls::list::TextItem> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<ListProvider_of_TextItem>
	{
	public:
		typedef ListProvider_of_TextItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListProvider<vl::presentation::controls::list::TextItem> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextItemStyleProvider>
	{
	public:
		typedef TextItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>
	{
	public:
		typedef TextItemStyleProvider :: ITextItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemStyleProvider::ITextItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextItemStyleProvider :: ITextItemView>
	{
	public:
		typedef TextItemStyleProvider :: ITextItemView WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemStyleProvider::ITextItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextItemStyleProvider :: TextItemStyleController>
	{
	public:
		typedef TextItemStyleProvider :: TextItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemStyleProvider::TextItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiVirtualTextList>
	{
	public:
		typedef GuiVirtualTextList WrappedObjectType;
		typedef vl::presentation::controls::GuiVirtualTextList InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextItemProvider>
	{
	public:
		typedef TextItemProvider WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTextList>
	{
	public:
		typedef GuiTextList WrappedObjectType;
		typedef vl::presentation::controls::GuiTextList InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextLine>
	{
	public:
		typedef TextLine WrappedObjectType;
		typedef vl::presentation::elements::text::TextLine InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextPos>
	{
	public:
		typedef TextPos WrappedObjectType;
		typedef vl::presentation::TextPos InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTextBoxCommonInterface>
	{
	public:
		typedef GuiTextBoxCommonInterface WrappedObjectType;
		typedef vl::presentation::controls::GuiTextBoxCommonInterface InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TextLines>
	{
	public:
		typedef TextLines WrappedObjectType;
		typedef vl::presentation::elements::text::TextLines InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiColorizedTextElement>
	{
	public:
		typedef GuiColorizedTextElement WrappedObjectType;
		typedef vl::presentation::elements::GuiColorizedTextElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiColorizedTextElement :: ICallback>
	{
	public:
		typedef GuiColorizedTextElement :: ICallback WrappedObjectType;
		typedef vl::presentation::elements::GuiColorizedTextElement::ICallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTextElementOperator>
	{
	public:
		typedef GuiTextElementOperator WrappedObjectType;
		typedef vl::presentation::controls::GuiTextElementOperator InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTextElementOperator :: ICallback>
	{
	public:
		typedef GuiTextElementOperator :: ICallback WrappedObjectType;
		typedef vl::presentation::controls::GuiTextElementOperator::ICallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTextElementOperator :: DefaultCallback>
	{
	public:
		typedef GuiTextElementOperator :: DefaultCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiTextElementOperator::DefaultCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiMultilineTextBox>
	{
	public:
		typedef GuiMultilineTextBox WrappedObjectType;
		typedef vl::presentation::controls::GuiMultilineTextBox InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiMultilineTextBox :: StyleController>
	{
	public:
		typedef GuiMultilineTextBox :: StyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiMultilineTextBox::StyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiMultilineTextBox :: TextElementOperatorCallback>
	{
	public:
		typedef GuiMultilineTextBox :: TextElementOperatorCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiMultilineTextBox::TextElementOperatorCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSinglelineTextBox>
	{
	public:
		typedef GuiSinglelineTextBox WrappedObjectType;
		typedef vl::presentation::controls::GuiSinglelineTextBox InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>
	{
	public:
		typedef GuiSinglelineTextBox :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiSinglelineTextBox::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSinglelineTextBox :: StyleController>
	{
	public:
		typedef GuiSinglelineTextBox :: StyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiSinglelineTextBox::StyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiSinglelineTextBox :: TextElementOperatorCallback>
	{
	public:
		typedef GuiSinglelineTextBox :: TextElementOperatorCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiSinglelineTextBox::TextElementOperatorCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TreeViewItem>
	{
	public:
		typedef TreeViewItem WrappedObjectType;
		typedef vl::presentation::controls::tree::TreeViewItem InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TreeViewItemRootProvider>
	{
	public:
		typedef TreeViewItemRootProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::TreeViewItemRootProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTreeView>
	{
	public:
		typedef GuiTreeView WrappedObjectType;
		typedef vl::presentation::controls::GuiTreeView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<GuiTreeView :: IStyleProvider>
	{
	public:
		typedef GuiTreeView :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiTreeView::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<TreeViewNodeItemStyleProvider>
	{
	public:
		typedef TreeViewNodeItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::TreeViewNodeItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ButtonColors>
	{
	public:
		typedef Win7ButtonColors WrappedObjectType;
		typedef vl::presentation::win7::Win7ButtonColors InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static WrappedObjectType BuildCopy(const InternalObjectType* input)
		{
			return new InternalObjectType(*input);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ButtonStyleBase>
	{
	public:
		typedef Win7ButtonStyleBase WrappedObjectType;
		typedef vl::presentation::win7::Win7ButtonStyleBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ButtonStyle>
	{
	public:
		typedef Win7ButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7CheckBoxStyle>
	{
	public:
		typedef Win7CheckBoxStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7CheckBoxStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7DropDownComboBoxStyle>
	{
	public:
		typedef Win7DropDownComboBoxStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7DropDownComboBoxStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7EmptyStyle>
	{
	public:
		typedef Win7EmptyStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7EmptyStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7GroupBoxStyle>
	{
	public:
		typedef Win7GroupBoxStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7GroupBoxStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ListViewColumnDropDownStyle>
	{
	public:
		typedef Win7ListViewColumnDropDownStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ListViewColumnDropDownStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ListViewColumnHeaderStyle>
	{
	public:
		typedef Win7ListViewColumnHeaderStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ListViewColumnHeaderStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7MenuBarButtonStyle>
	{
	public:
		typedef Win7MenuBarButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuBarButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7MenuBarStyle>
	{
	public:
		typedef Win7MenuBarStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuBarStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7MenuItemButtonStyle>
	{
	public:
		typedef Win7MenuItemButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuItemButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7MenuSplitterStyle>
	{
	public:
		typedef Win7MenuSplitterStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuSplitterStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7MenuStyle>
	{
	public:
		typedef Win7MenuStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ScrollStyle>
	{
	public:
		typedef Win7ScrollStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ScrollStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ScrollViewProvider>
	{
	public:
		typedef Win7ScrollViewProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7ScrollViewProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7MultilineTextBoxProvider>
	{
	public:
		typedef Win7MultilineTextBoxProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7MultilineTextBoxProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ListViewProvider>
	{
	public:
		typedef Win7ListViewProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7ListViewProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7SelectableItemStyle>
	{
	public:
		typedef Win7SelectableItemStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7SelectableItemStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7SinglelineTextBoxProvider>
	{
	public:
		typedef Win7SinglelineTextBoxProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7SinglelineTextBoxProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7TabPageHeaderStyle>
	{
	public:
		typedef Win7TabPageHeaderStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7TabPageHeaderStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7TabStyle>
	{
	public:
		typedef Win7TabStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7TabStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7TextBoxBackground>
	{
	public:
		typedef Win7TextBoxBackground WrappedObjectType;
		typedef vl::presentation::win7::Win7TextBoxBackground InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7TextListProvider>
	{
	public:
		typedef Win7TextListProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7TextListProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7CheckTextListProvider>
	{
	public:
		typedef Win7CheckTextListProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7CheckTextListProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7RadioTextListProvider>
	{
	public:
		typedef Win7RadioTextListProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7RadioTextListProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7ToolstripButtonStyle>
	{
	public:
		typedef Win7ToolstripButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ToolstripButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7TrackStyle>
	{
	public:
		typedef Win7TrackStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7TrackStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7TreeViewExpandingButtonStyle>
	{
	public:
		typedef Win7TreeViewExpandingButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7TreeViewExpandingButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7TreeViewProvider>
	{
	public:
		typedef Win7TreeViewProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7TreeViewProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	
	template<>
	class __GacUIInternal<Win7WindowStyle>
	{
	public:
		typedef Win7WindowStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7WindowStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
		
		static InternalObjectType* GetInternalObject(const rptr<WrappedObjectType>& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject->__internal_object_reference;
		}
		
		static Ptr<InternalObjectType> GetInternalObject(const sptr<WrappedObjectType>& wrappedObject)
		{
			return _SptrBuilder<WrappedObjectType>::RetrivePtr<InternalObjectType>(wrappedObject);
		}
		
		static rptr<WrappedObjectType> BuildRptr(const InternalObjectType* input)
		{
			return _RptrBuilder<WrappedObjectType>::CreateRptr(input);
		}
		
		static sptr<WrappedObjectType> BuildSptr(const vl::Ptr<InternalObjectType>& input)
		{
			return _SptrBuilder<WrappedObjectType>::CreateSptr(input);
		}
		
	};
	

/***********************************************************************
CharAtt
***********************************************************************/

	CharAtt::CharAtt(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	CharAtt::~CharAtt()
	{
		delete __GacUIInternal<CharAtt>::GetInternalObject(*this);
	}
	
	void CharAtt::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	unsigned __int32 CharAtt::get_rightOffset()
	{
		unsigned __int32 _wrapped_result = __GacUIInternal<CharAtt>::GetInternalObject(*this)->rightOffset;
		return _wrapped_result;
	}
	
	void CharAtt::set_rightOffset(unsigned __int32 value)
	{
		unsigned __int32 _unwrapped_value = value;
		__GacUIInternal<CharAtt>::GetInternalObject(*this)->rightOffset = _unwrapped_value;
	}
	
	unsigned __int32 CharAtt::get_colorIndex()
	{
		unsigned __int32 _wrapped_result = __GacUIInternal<CharAtt>::GetInternalObject(*this)->colorIndex;
		return _wrapped_result;
	}
	
	void CharAtt::set_colorIndex(unsigned __int32 value)
	{
		unsigned __int32 _unwrapped_value = value;
		__GacUIInternal<CharAtt>::GetInternalObject(*this)->colorIndex = _unwrapped_value;
	}
	

/***********************************************************************
Color
***********************************************************************/

	Color::Color(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Color::~Color()
	{
		delete __GacUIInternal<Color>::GetInternalObject(*this);
	}
	
	void Color::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<Color> Color::CreateRptr(unsigned __int8 _r, unsigned __int8 _g, unsigned __int8 _b, unsigned __int8 _a)
	{
		unsigned __int8 _unwrapped__r = _r;
		unsigned __int8 _unwrapped__g = _g;
		unsigned __int8 _unwrapped__b = _b;
		unsigned __int8 _unwrapped__a = _a;
		vl::presentation::Color* _unwrapped_result = new vl::presentation::Color(_unwrapped__r, _unwrapped__g, _unwrapped__b, _unwrapped__a);
		return __GacUIInternal<Color>::BuildRptr(_unwrapped_result);
	}
	
	Color Color::Create(unsigned __int8 _r, unsigned __int8 _g, unsigned __int8 _b, unsigned __int8 _a)
	{
		unsigned __int8 _unwrapped__r = _r;
		unsigned __int8 _unwrapped__g = _g;
		unsigned __int8 _unwrapped__b = _b;
		unsigned __int8 _unwrapped__a = _a;
		vl::presentation::Color _unwrapped_result = vl::presentation::Color(_unwrapped__r, _unwrapped__g, _unwrapped__b, _unwrapped__a);
		return __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<Color> Color::CreateRptr()
	{
		vl::presentation::Color* _unwrapped_result = new vl::presentation::Color();
		return __GacUIInternal<Color>::BuildRptr(_unwrapped_result);
	}
	
	Color Color::Create()
	{
		vl::presentation::Color _unwrapped_result = vl::presentation::Color();
		return __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
	}
	
	signed __int32 Color::Compare(Color color)
	{
		vl::presentation::Color _unwrapped_color = *__GacUIInternal<Color>::GetInternalObject(color);
		signed __int32 _unwrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->Compare(_unwrapped_color);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Color::operator==(Color color)
	{
		vl::presentation::Color _unwrapped_color = *__GacUIInternal<Color>::GetInternalObject(color);
		bool _unwrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->operator==(_unwrapped_color);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Color::operator!=(Color color)
	{
		vl::presentation::Color _unwrapped_color = *__GacUIInternal<Color>::GetInternalObject(color);
		bool _unwrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->operator!=(_unwrapped_color);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Color::operator<(Color color)
	{
		vl::presentation::Color _unwrapped_color = *__GacUIInternal<Color>::GetInternalObject(color);
		bool _unwrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->operator<(_unwrapped_color);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Color::operator<=(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->operator<=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Color::operator>(Color color)
	{
		vl::presentation::Color _unwrapped_color = *__GacUIInternal<Color>::GetInternalObject(color);
		bool _unwrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->operator>(_unwrapped_color);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Color::operator>=(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->operator>=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	unsigned __int8 Color::get_r()
	{
		unsigned __int8 _wrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->r;
		return _wrapped_result;
	}
	
	void Color::set_r(unsigned __int8 value)
	{
		unsigned __int8 _unwrapped_value = value;
		__GacUIInternal<Color>::GetInternalObject(*this)->r = _unwrapped_value;
	}
	
	unsigned __int8 Color::get_g()
	{
		unsigned __int8 _wrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->g;
		return _wrapped_result;
	}
	
	void Color::set_g(unsigned __int8 value)
	{
		unsigned __int8 _unwrapped_value = value;
		__GacUIInternal<Color>::GetInternalObject(*this)->g = _unwrapped_value;
	}
	
	unsigned __int8 Color::get_b()
	{
		unsigned __int8 _wrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->b;
		return _wrapped_result;
	}
	
	void Color::set_b(unsigned __int8 value)
	{
		unsigned __int8 _unwrapped_value = value;
		__GacUIInternal<Color>::GetInternalObject(*this)->b = _unwrapped_value;
	}
	
	unsigned __int8 Color::get_a()
	{
		unsigned __int8 _wrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->a;
		return _wrapped_result;
	}
	
	void Color::set_a(unsigned __int8 value)
	{
		unsigned __int8 _unwrapped_value = value;
		__GacUIInternal<Color>::GetInternalObject(*this)->a = _unwrapped_value;
	}
	
	unsigned __int32 Color::get_value()
	{
		unsigned __int32 _wrapped_result = __GacUIInternal<Color>::GetInternalObject(*this)->value;
		return _wrapped_result;
	}
	
	void Color::set_value(unsigned __int32 value)
	{
		unsigned __int32 _unwrapped_value = value;
		__GacUIInternal<Color>::GetInternalObject(*this)->value = _unwrapped_value;
	}
	

/***********************************************************************
ColorItem
***********************************************************************/

	ColorItem::ColorItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	ColorItem::~ColorItem()
	{
		delete __GacUIInternal<ColorItem>::GetInternalObject(*this);
	}
	
	void ColorItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<ColorItem> ColorItem::CreateRptr()
	{
		vl::presentation::elements::text::ColorItem* _unwrapped_result = new vl::presentation::elements::text::ColorItem();
		return __GacUIInternal<ColorItem>::BuildRptr(_unwrapped_result);
	}
	
	ColorItem ColorItem::Create()
	{
		vl::presentation::elements::text::ColorItem _unwrapped_result = vl::presentation::elements::text::ColorItem();
		return __GacUIInternal<ColorItem>::BuildCopy(&_unwrapped_result);
	}
	
	Color ColorItem::get_text()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<ColorItem>::GetInternalObject(*this)->text);
		return _wrapped_result;
	}
	
	void ColorItem::set_text(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<ColorItem>::GetInternalObject(*this)->text = _unwrapped_value;
	}
	
	Color ColorItem::get_background()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<ColorItem>::GetInternalObject(*this)->background);
		return _wrapped_result;
	}
	
	void ColorItem::set_background(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<ColorItem>::GetInternalObject(*this)->background = _unwrapped_value;
	}
	

/***********************************************************************
ColorEntry
***********************************************************************/

	ColorEntry::ColorEntry(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	ColorEntry::~ColorEntry()
	{
		delete __GacUIInternal<ColorEntry>::GetInternalObject(*this);
	}
	
	void ColorEntry::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<ColorEntry> ColorEntry::CreateRptr()
	{
		vl::presentation::elements::text::ColorEntry* _unwrapped_result = new vl::presentation::elements::text::ColorEntry();
		return __GacUIInternal<ColorEntry>::BuildRptr(_unwrapped_result);
	}
	
	ColorEntry ColorEntry::Create()
	{
		vl::presentation::elements::text::ColorEntry _unwrapped_result = vl::presentation::elements::text::ColorEntry();
		return __GacUIInternal<ColorEntry>::BuildCopy(&_unwrapped_result);
	}
	
	bool ColorEntry::operator==(rptr<ColorEntry> value)
	{
		vl::presentation::elements::text::ColorEntry const& _unwrapped_value = *__GacUIInternal<ColorEntry>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<ColorEntry>::GetInternalObject(*this)->operator==(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool ColorEntry::operator!=(rptr<ColorEntry> value)
	{
		vl::presentation::elements::text::ColorEntry const& _unwrapped_value = *__GacUIInternal<ColorEntry>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<ColorEntry>::GetInternalObject(*this)->operator!=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	ColorItem ColorEntry::get_normal()
	{
		ColorItem _wrapped_result = __GacUIInternal<ColorItem>::BuildCopy(&__GacUIInternal<ColorEntry>::GetInternalObject(*this)->normal);
		return _wrapped_result;
	}
	
	void ColorEntry::set_normal(ColorItem value)
	{
		vl::presentation::elements::text::ColorItem _unwrapped_value = *__GacUIInternal<ColorItem>::GetInternalObject(value);
		__GacUIInternal<ColorEntry>::GetInternalObject(*this)->normal = _unwrapped_value;
	}
	
	ColorItem ColorEntry::get_selectedFocused()
	{
		ColorItem _wrapped_result = __GacUIInternal<ColorItem>::BuildCopy(&__GacUIInternal<ColorEntry>::GetInternalObject(*this)->selectedFocused);
		return _wrapped_result;
	}
	
	void ColorEntry::set_selectedFocused(ColorItem value)
	{
		vl::presentation::elements::text::ColorItem _unwrapped_value = *__GacUIInternal<ColorItem>::GetInternalObject(value);
		__GacUIInternal<ColorEntry>::GetInternalObject(*this)->selectedFocused = _unwrapped_value;
	}
	
	ColorItem ColorEntry::get_selectedUnfocused()
	{
		ColorItem _wrapped_result = __GacUIInternal<ColorItem>::BuildCopy(&__GacUIInternal<ColorEntry>::GetInternalObject(*this)->selectedUnfocused);
		return _wrapped_result;
	}
	
	void ColorEntry::set_selectedUnfocused(ColorItem value)
	{
		vl::presentation::elements::text::ColorItem _unwrapped_value = *__GacUIInternal<ColorItem>::GetInternalObject(value);
		__GacUIInternal<ColorEntry>::GetInternalObject(*this)->selectedUnfocused = _unwrapped_value;
	}
	

/***********************************************************************
Array_of_ColorEntry
***********************************************************************/

	Array_of_ColorEntry::Array_of_ColorEntry(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Array_of_ColorEntry::~Array_of_ColorEntry()
	{
	}
	
	void Array_of_ColorEntry::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<Array_of_ColorEntry> Array_of_ColorEntry::CreateRptr(signed __int32 size)
	{
		signed __int32 _unwrapped_size = size;
		vl::collections::Array<vl::presentation::elements::text::ColorEntry,vl::presentation::elements::text::ColorEntry>* _unwrapped_result = new vl::collections::Array<vl::presentation::elements::text::ColorEntry,vl::presentation::elements::text::ColorEntry>(_unwrapped_size);
		return __GacUIInternal<Array_of_ColorEntry>::BuildRptr(_unwrapped_result);
	}
	
	bool Array_of_ColorEntry::Contains(rptr<ColorEntry> item)
	{
		vl::presentation::elements::text::ColorEntry const& _unwrapped_item = *__GacUIInternal<ColorEntry>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<Array_of_ColorEntry>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Array_of_ColorEntry::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<Array_of_ColorEntry>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<ColorEntry> Array_of_ColorEntry::Get(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::text::ColorEntry const& _unwrapped_result = __GacUIInternal<Array_of_ColorEntry>::GetInternalObject(*this)->Get(_unwrapped_index);
		rptr<ColorEntry> _wrapped_result = __GacUIInternal<ColorEntry>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<ColorEntry> Array_of_ColorEntry::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::text::ColorEntry& _unwrapped_result = __GacUIInternal<Array_of_ColorEntry>::GetInternalObject(*this)->operator[](_unwrapped_index);
		rptr<ColorEntry> _wrapped_result = __GacUIInternal<ColorEntry>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 Array_of_ColorEntry::IndexOf(rptr<ColorEntry> item)
	{
		vl::presentation::elements::text::ColorEntry const& _unwrapped_item = *__GacUIInternal<ColorEntry>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<Array_of_ColorEntry>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void Array_of_ColorEntry::Set(signed __int32 index, rptr<ColorEntry> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::text::ColorEntry const& _unwrapped_item = *__GacUIInternal<ColorEntry>::GetInternalObject(item);
		__GacUIInternal<Array_of_ColorEntry>::GetInternalObject(*this)->Set(_unwrapped_index, _unwrapped_item);
	}
	
	void Array_of_ColorEntry::Resize(signed __int32 size)
	{
		signed __int32 _unwrapped_size = size;
		__GacUIInternal<Array_of_ColorEntry>::GetInternalObject(*this)->Resize(_unwrapped_size);
	}
	

/***********************************************************************
DescriptableObject
***********************************************************************/

	DescriptableObject::DescriptableObject(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	DescriptableObject::~DescriptableObject()
	{
		delete __GacUIInternal<DescriptableObject>::GetInternalObject(*this);
	}
	
	void DescriptableObject::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<DescriptableObject> DescriptableObject::CreateRptr()
	{
		vl::presentation::DescriptableObject* _unwrapped_result = new vl::presentation::DescriptableObject();
		return __GacUIInternal<DescriptableObject>::BuildRptr(_unwrapped_result);
	}
	
	DescriptableObject DescriptableObject::Create()
	{
		vl::presentation::DescriptableObject _unwrapped_result = vl::presentation::DescriptableObject();
		return __GacUIInternal<DescriptableObject>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<DescriptableObject> DescriptableObject::operator=(rptr<DescriptableObject> value)
	{
		vl::presentation::DescriptableObject const& _unwrapped_value = *__GacUIInternal<DescriptableObject>::GetInternalObject(value);
		vl::presentation::DescriptableObject& _unwrapped_result = __GacUIInternal<DescriptableObject>::GetInternalObject(*this)->operator=(_unwrapped_value);
		rptr<DescriptableObject> _wrapped_result = __GacUIInternal<DescriptableObject>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
FontProperties
***********************************************************************/

	FontProperties::FontProperties(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	FontProperties::~FontProperties()
	{
		delete __GacUIInternal<FontProperties>::GetInternalObject(*this);
	}
	
	void FontProperties::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<FontProperties> FontProperties::CreateRptr(rptr<FontProperties> __that)
	{
		vl::presentation::FontProperties const& _unwrapped___that = *__GacUIInternal<FontProperties>::GetInternalObject(__that);
		vl::presentation::FontProperties* _unwrapped_result = new vl::presentation::FontProperties(_unwrapped___that);
		return __GacUIInternal<FontProperties>::BuildRptr(_unwrapped_result);
	}
	
	FontProperties FontProperties::Create(rptr<FontProperties> __that)
	{
		vl::presentation::FontProperties const& _unwrapped___that = *__GacUIInternal<FontProperties>::GetInternalObject(__that);
		vl::presentation::FontProperties _unwrapped_result = vl::presentation::FontProperties(_unwrapped___that);
		return __GacUIInternal<FontProperties>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<FontProperties> FontProperties::CreateRptr()
	{
		vl::presentation::FontProperties* _unwrapped_result = new vl::presentation::FontProperties();
		return __GacUIInternal<FontProperties>::BuildRptr(_unwrapped_result);
	}
	
	FontProperties FontProperties::Create()
	{
		vl::presentation::FontProperties _unwrapped_result = vl::presentation::FontProperties();
		return __GacUIInternal<FontProperties>::BuildCopy(&_unwrapped_result);
	}
	
	signed __int32 FontProperties::Compare(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		signed __int32 _unwrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->Compare(_unwrapped_value);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool FontProperties::operator==(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->operator==(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool FontProperties::operator!=(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->operator!=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool FontProperties::operator<(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->operator<(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool FontProperties::operator<=(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->operator<=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool FontProperties::operator>(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->operator>(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool FontProperties::operator>=(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->operator>=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<FontProperties> FontProperties::operator=(rptr<FontProperties> __that)
	{
		vl::presentation::FontProperties const& _unwrapped___that = *__GacUIInternal<FontProperties>::GetInternalObject(__that);
		vl::presentation::FontProperties& _unwrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->operator=(_unwrapped___that);
		rptr<FontProperties> _wrapped_result = __GacUIInternal<FontProperties>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString FontProperties::get_fontFamily()
	{
		GacString _wrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->fontFamily.Buffer();
		return _wrapped_result;
	}
	
	void FontProperties::set_fontFamily(GacString value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<FontProperties>::GetInternalObject(*this)->fontFamily = _unwrapped_value;
	}
	
	signed __int32 FontProperties::get_size()
	{
		signed __int32 _wrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->size;
		return _wrapped_result;
	}
	
	void FontProperties::set_size(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<FontProperties>::GetInternalObject(*this)->size = _unwrapped_value;
	}
	
	bool FontProperties::get_bold()
	{
		bool _wrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->bold;
		return _wrapped_result;
	}
	
	void FontProperties::set_bold(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<FontProperties>::GetInternalObject(*this)->bold = _unwrapped_value;
	}
	
	bool FontProperties::get_italic()
	{
		bool _wrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->italic;
		return _wrapped_result;
	}
	
	void FontProperties::set_italic(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<FontProperties>::GetInternalObject(*this)->italic = _unwrapped_value;
	}
	
	bool FontProperties::get_underline()
	{
		bool _wrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->underline;
		return _wrapped_result;
	}
	
	void FontProperties::set_underline(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<FontProperties>::GetInternalObject(*this)->underline = _unwrapped_value;
	}
	
	bool FontProperties::get_strikeline()
	{
		bool _wrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->strikeline;
		return _wrapped_result;
	}
	
	void FontProperties::set_strikeline(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<FontProperties>::GetInternalObject(*this)->strikeline = _unwrapped_value;
	}
	
	bool FontProperties::get_antialias()
	{
		bool _wrapped_result = __GacUIInternal<FontProperties>::GetInternalObject(*this)->antialias;
		return _wrapped_result;
	}
	
	void FontProperties::set_antialias(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<FontProperties>::GetInternalObject(*this)->antialias = _unwrapped_value;
	}
	

/***********************************************************************
GuiCellOption
***********************************************************************/

	GuiCellOption::GuiCellOption(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiCellOption::~GuiCellOption()
	{
		delete __GacUIInternal<GuiCellOption>::GetInternalObject(*this);
	}
	
	void GuiCellOption::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiCellOption> GuiCellOption::CreateRptr()
	{
		vl::presentation::elements::GuiCellOption* _unwrapped_result = new vl::presentation::elements::GuiCellOption();
		return __GacUIInternal<GuiCellOption>::BuildRptr(_unwrapped_result);
	}
	
	GuiCellOption GuiCellOption::Create()
	{
		vl::presentation::elements::GuiCellOption _unwrapped_result = vl::presentation::elements::GuiCellOption();
		return __GacUIInternal<GuiCellOption>::BuildCopy(&_unwrapped_result);
	}
	
	bool GuiCellOption::operator==(rptr<GuiCellOption> value)
	{
		vl::presentation::elements::GuiCellOption const& _unwrapped_value = *__GacUIInternal<GuiCellOption>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<GuiCellOption>::GetInternalObject(*this)->operator==(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiCellOption::operator!=(rptr<GuiCellOption> value)
	{
		vl::presentation::elements::GuiCellOption const& _unwrapped_value = *__GacUIInternal<GuiCellOption>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<GuiCellOption>::GetInternalObject(*this)->operator!=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	GuiCellOption GuiCellOption::AbsoluteOption(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		vl::presentation::elements::GuiCellOption _unwrapped_result = vl::presentation::elements::GuiCellOption::AbsoluteOption(_unwrapped_value);
		GuiCellOption _wrapped_result = __GacUIInternal<GuiCellOption>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GuiCellOption GuiCellOption::PercentageOption(double value)
	{
		double _unwrapped_value = value;
		vl::presentation::elements::GuiCellOption _unwrapped_result = vl::presentation::elements::GuiCellOption::PercentageOption(_unwrapped_value);
		GuiCellOption _wrapped_result = __GacUIInternal<GuiCellOption>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GuiCellOption GuiCellOption::MinSizeOption()
	{
		vl::presentation::elements::GuiCellOption _unwrapped_result = vl::presentation::elements::GuiCellOption::MinSizeOption();
		GuiCellOption _wrapped_result = __GacUIInternal<GuiCellOption>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GuiCellOption :: ComposeType GuiCellOption::get_composeType()
	{
		GuiCellOption :: ComposeType _wrapped_result = (GuiCellOption :: ComposeType)__GacUIInternal<GuiCellOption>::GetInternalObject(*this)->composeType;
		return _wrapped_result;
	}
	
	void GuiCellOption::set_composeType(GuiCellOption :: ComposeType value)
	{
		vl::presentation::elements::GuiCellOption::ComposeType _unwrapped_value = (vl::presentation::elements::GuiCellOption::ComposeType)value;
		__GacUIInternal<GuiCellOption>::GetInternalObject(*this)->composeType = _unwrapped_value;
	}
	
	signed __int32 GuiCellOption::get_absolute()
	{
		signed __int32 _wrapped_result = __GacUIInternal<GuiCellOption>::GetInternalObject(*this)->absolute;
		return _wrapped_result;
	}
	
	void GuiCellOption::set_absolute(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiCellOption>::GetInternalObject(*this)->absolute = _unwrapped_value;
	}
	
	double GuiCellOption::get_percentage()
	{
		double _wrapped_result = __GacUIInternal<GuiCellOption>::GetInternalObject(*this)->percentage;
		return _wrapped_result;
	}
	
	void GuiCellOption::set_percentage(double value)
	{
		double _unwrapped_value = value;
		__GacUIInternal<GuiCellOption>::GetInternalObject(*this)->percentage = _unwrapped_value;
	}
	

/***********************************************************************
GuiComponent
***********************************************************************/

	GuiComponent::GuiComponent(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiComponent::~GuiComponent()
	{
	}
	
	void GuiComponent::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiComponent> GuiComponent::CreateRptr()
	{
		vl::presentation::controls::GuiComponent* _unwrapped_result = new vl::presentation::controls::GuiComponent();
		return __GacUIInternal<GuiComponent>::BuildRptr(_unwrapped_result);
	}
	
	rptr<GuiControlHost> GuiComponent::GetControlHost()
	{
		vl::presentation::controls::GuiControlHost* _unwrapped_result = __GacUIInternal<GuiComponent>::GetInternalObject(*this)->GetControlHost();
		rptr<GuiControlHost> _wrapped_result = __GacUIInternal<GuiControlHost>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiEventArgs
***********************************************************************/

	GuiEventArgs::GuiEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiEventArgs::~GuiEventArgs()
	{
		delete __GacUIInternal<GuiEventArgs>::GetInternalObject(*this);
	}
	
	void GuiEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiEventArgs> GuiEventArgs::CreateRptr()
	{
		vl::presentation::elements::GuiEventArgs* _unwrapped_result = new vl::presentation::elements::GuiEventArgs();
		return __GacUIInternal<GuiEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiEventArgs GuiEventArgs::Create()
	{
		vl::presentation::elements::GuiEventArgs _unwrapped_result = vl::presentation::elements::GuiEventArgs();
		return __GacUIInternal<GuiEventArgs>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<GuiEventArgs> GuiEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiEventArgs* _unwrapped_result = new vl::presentation::elements::GuiEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiEventArgs GuiEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiEventArgs _unwrapped_result = vl::presentation::elements::GuiEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiEventArgs>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<GuiGraphicsComposition> GuiEventArgs::get_compositionSource()
	{
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(__GacUIInternal<GuiEventArgs>::GetInternalObject(*this)->compositionSource);
		return _wrapped_result;
	}
	
	void GuiEventArgs::set_compositionSource(rptr<GuiGraphicsComposition> value)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_value = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(value);
		__GacUIInternal<GuiEventArgs>::GetInternalObject(*this)->compositionSource = _unwrapped_value;
	}
	
	rptr<GuiGraphicsComposition> GuiEventArgs::get_eventSource()
	{
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(__GacUIInternal<GuiEventArgs>::GetInternalObject(*this)->eventSource);
		return _wrapped_result;
	}
	
	void GuiEventArgs::set_eventSource(rptr<GuiGraphicsComposition> value)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_value = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(value);
		__GacUIInternal<GuiEventArgs>::GetInternalObject(*this)->eventSource = _unwrapped_value;
	}
	
	bool GuiEventArgs::get_handled()
	{
		bool _wrapped_result = __GacUIInternal<GuiEventArgs>::GetInternalObject(*this)->handled;
		return _wrapped_result;
	}
	
	void GuiEventArgs::set_handled(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiEventArgs>::GetInternalObject(*this)->handled = _unwrapped_value;
	}
	

/***********************************************************************
GuiImageData
***********************************************************************/

	GuiImageData::GuiImageData(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiImageData::~GuiImageData()
	{
		delete __GacUIInternal<GuiImageData>::GetInternalObject(*this);
	}
	
	void GuiImageData::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiImageData> GuiImageData::CreateRptr(sptr<INativeImage> _image, signed __int32 _frameIndex)
	{
		vl::Ptr<vl::presentation::INativeImage> _unwrapped__image = __GacUIInternal<INativeImage>::GetInternalObject(_image);
		signed __int32 _unwrapped__frameIndex = _frameIndex;
		vl::presentation::controls::GuiImageData* _unwrapped_result = new vl::presentation::controls::GuiImageData(_unwrapped__image, _unwrapped__frameIndex);
		return __GacUIInternal<GuiImageData>::BuildRptr(_unwrapped_result);
	}
	
	GuiImageData GuiImageData::Create(sptr<INativeImage> _image, signed __int32 _frameIndex)
	{
		vl::Ptr<vl::presentation::INativeImage> _unwrapped__image = __GacUIInternal<INativeImage>::GetInternalObject(_image);
		signed __int32 _unwrapped__frameIndex = _frameIndex;
		vl::presentation::controls::GuiImageData _unwrapped_result = vl::presentation::controls::GuiImageData(_unwrapped__image, _unwrapped__frameIndex);
		return __GacUIInternal<GuiImageData>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<GuiImageData> GuiImageData::CreateRptr()
	{
		vl::presentation::controls::GuiImageData* _unwrapped_result = new vl::presentation::controls::GuiImageData();
		return __GacUIInternal<GuiImageData>::BuildRptr(_unwrapped_result);
	}
	
	GuiImageData GuiImageData::Create()
	{
		vl::presentation::controls::GuiImageData _unwrapped_result = vl::presentation::controls::GuiImageData();
		return __GacUIInternal<GuiImageData>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<GuiImageData> GuiImageData::operator=(rptr<GuiImageData> value)
	{
		vl::presentation::controls::GuiImageData const& _unwrapped_value = *__GacUIInternal<GuiImageData>::GetInternalObject(value);
		vl::presentation::controls::GuiImageData& _unwrapped_result = __GacUIInternal<GuiImageData>::GetInternalObject(*this)->operator=(_unwrapped_value);
		rptr<GuiImageData> _wrapped_result = __GacUIInternal<GuiImageData>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<INativeImage> GuiImageData::GetImage()
	{
		vl::Ptr<vl::presentation::INativeImage> _unwrapped_result = __GacUIInternal<GuiImageData>::GetInternalObject(*this)->GetImage();
		sptr<INativeImage> _wrapped_result = __GacUIInternal<INativeImage>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiImageData::GetFrameIndex()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiImageData>::GetInternalObject(*this)->GetFrameIndex();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiRequestEventArgs
***********************************************************************/

	GuiRequestEventArgs::GuiRequestEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiEventArgs(static_cast<__GacUIInternal<GuiEventArgs>::InternalObjectType*>((__GacUIInternal<GuiRequestEventArgs>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiRequestEventArgs::~GuiRequestEventArgs()
	{
		delete __GacUIInternal<GuiRequestEventArgs>::GetInternalObject(*this);
	}
	
	void GuiRequestEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiEventArgs::ClearInternalObjectReference();
	}
	
	rptr<GuiRequestEventArgs> GuiRequestEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiRequestEventArgs* _unwrapped_result = new vl::presentation::elements::GuiRequestEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiRequestEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiRequestEventArgs GuiRequestEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiRequestEventArgs _unwrapped_result = vl::presentation::elements::GuiRequestEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiRequestEventArgs>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<GuiRequestEventArgs> GuiRequestEventArgs::CreateRptr()
	{
		vl::presentation::elements::GuiRequestEventArgs* _unwrapped_result = new vl::presentation::elements::GuiRequestEventArgs();
		return __GacUIInternal<GuiRequestEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiRequestEventArgs GuiRequestEventArgs::Create()
	{
		vl::presentation::elements::GuiRequestEventArgs _unwrapped_result = vl::presentation::elements::GuiRequestEventArgs();
		return __GacUIInternal<GuiRequestEventArgs>::BuildCopy(&_unwrapped_result);
	}
	
	bool GuiRequestEventArgs::get_cancel()
	{
		bool _wrapped_result = __GacUIInternal<GuiRequestEventArgs>::GetInternalObject(*this)->cancel;
		return _wrapped_result;
	}
	
	void GuiRequestEventArgs::set_cancel(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiRequestEventArgs>::GetInternalObject(*this)->cancel = _unwrapped_value;
	}
	

/***********************************************************************
IDescriptable
***********************************************************************/

	IDescriptable::IDescriptable(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,DescriptableObject(static_cast<__GacUIInternal<DescriptableObject>::InternalObjectType*>((__GacUIInternal<IDescriptable>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	IDescriptable::~IDescriptable()
	{
	}
	
	void IDescriptable::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		DescriptableObject::ClearInternalObjectReference();
	}
	
	rptr<IDescriptable> IDescriptable::CreateRptr()
	{
		vl::presentation::IDescriptable* _unwrapped_result = new vl::presentation::IDescriptable();
		return __GacUIInternal<IDescriptable>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiEventArgs
***********************************************************************/

	GuiGraphicsEvent_of_GuiEventArgs::GuiGraphicsEvent_of_GuiEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiEventArgs::~GuiGraphicsEvent_of_GuiEventArgs()
	{
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEvent_of_GuiEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiEventArgs>* _unwrapped_result = new vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiEventArgs>(_unwrapped__sender);
		return __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiGraphicsEvent_of_GuiEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::GetInternalObject(*this)->Attach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsEvent_of_GuiEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::GetInternalObject(*this)->Detach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::Execute(rptr<GuiEventArgs> argument)
	{
		vl::presentation::elements::GuiEventArgs& _unwrapped_argument = *__GacUIInternal<GuiEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::GetInternalObject(*this)->Execute(_unwrapped_argument);
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiEventArgs::GetAssociatedComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::GetInternalObject(*this)->GetAssociatedComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		__GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::GetInternalObject(*this)->SetAssociatedComposition(_unwrapped__sender);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiEventArgs :: IHandler
***********************************************************************/

	GuiGraphicsEvent_of_GuiEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::IHandler::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, rptr<GuiEventArgs> argument)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(sender);
		vl::presentation::elements::GuiEventArgs& _unwrapped_argument = *__GacUIInternal<GuiEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs :: IHandler>::GetInternalObject(*this)->Execute(_unwrapped_sender, _unwrapped_argument);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiRequestEventArgs
***********************************************************************/

	GuiGraphicsEvent_of_GuiRequestEventArgs::GuiGraphicsEvent_of_GuiRequestEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiRequestEventArgs::~GuiGraphicsEvent_of_GuiRequestEventArgs()
	{
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> GuiGraphicsEvent_of_GuiRequestEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiRequestEventArgs>* _unwrapped_result = new vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiRequestEventArgs>(_unwrapped__sender);
		return __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiGraphicsEvent_of_GuiRequestEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiRequestEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>::GetInternalObject(*this)->Attach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsEvent_of_GuiRequestEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiRequestEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>::GetInternalObject(*this)->Detach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::Execute(rptr<GuiRequestEventArgs> argument)
	{
		vl::presentation::elements::GuiRequestEventArgs& _unwrapped_argument = *__GacUIInternal<GuiRequestEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>::GetInternalObject(*this)->Execute(_unwrapped_argument);
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiRequestEventArgs::GetAssociatedComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>::GetInternalObject(*this)->GetAssociatedComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		__GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>::GetInternalObject(*this)->SetAssociatedComposition(_unwrapped__sender);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler
***********************************************************************/

	GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, rptr<GuiRequestEventArgs> argument)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(sender);
		vl::presentation::elements::GuiRequestEventArgs& _unwrapped_argument = *__GacUIInternal<GuiRequestEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler>::GetInternalObject(*this)->Execute(_unwrapped_sender, _unwrapped_argument);
	}
	

/***********************************************************************
GuiTabPage
***********************************************************************/

	GuiTabPage::GuiTabPage(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiTabPage::~GuiTabPage()
	{
	}
	
	void GuiTabPage::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiControl> GuiTabPage::GetContainer()
	{
		vl::presentation::controls::GuiControl* _unwrapped_result = __GacUIInternal<GuiTabPage>::GetInternalObject(*this)->GetContainer();
		rptr<GuiControl> _wrapped_result = __GacUIInternal<GuiControl>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiTab> GuiTabPage::GetOwnerTab()
	{
		vl::presentation::controls::GuiTab* _unwrapped_result = __GacUIInternal<GuiTabPage>::GetInternalObject(*this)->GetOwnerTab();
		rptr<GuiTab> _wrapped_result = __GacUIInternal<GuiTab>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	const GacString& GuiTabPage::GetText()
	{
		vl::ObjectString<wchar_t> const& _unwrapped_result = __GacUIInternal<GuiTabPage>::GetInternalObject(*this)->GetText();
		const GacString& _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	void GuiTabPage::SetText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<GuiTabPage>::GetInternalObject(*this)->SetText(_unwrapped_value);
	}
	
	bool GuiTabPage::GetSelected()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTabPage>::GetInternalObject(*this)->GetSelected();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiTabPage::on_TextChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiTabPage>::GetInternalObject(*this)->TextChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
IGuiGraphicsAnimation
***********************************************************************/

	IGuiGraphicsAnimation::IGuiGraphicsAnimation(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<IGuiGraphicsAnimation>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	IGuiGraphicsAnimation::~IGuiGraphicsAnimation()
	{
	}
	
	void IGuiGraphicsAnimation::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void IGuiGraphicsAnimation::Play(signed __int32 currentPosition, signed __int32 totalLength)
	{
		signed __int32 _unwrapped_currentPosition = currentPosition;
		signed __int32 _unwrapped_totalLength = totalLength;
		__GacUIInternal<IGuiGraphicsAnimation>::GetInternalObject(*this)->Play(_unwrapped_currentPosition, _unwrapped_totalLength);
	}
	
	void IGuiGraphicsAnimation::Stop()
	{
		__GacUIInternal<IGuiGraphicsAnimation>::GetInternalObject(*this)->Stop();
	}
	
	signed __int32 IGuiGraphicsAnimation::GetTotalLength()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IGuiGraphicsAnimation>::GetInternalObject(*this)->GetTotalLength();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IGuiGraphicsAnimation::GetCurrentPosition()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IGuiGraphicsAnimation>::GetInternalObject(*this)->GetCurrentPosition();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiGraphicsAnimationManager
***********************************************************************/

	GuiGraphicsAnimationManager::GuiGraphicsAnimationManager(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsAnimationManager::~GuiGraphicsAnimationManager()
	{
	}
	
	void GuiGraphicsAnimationManager::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiGraphicsAnimationManager> GuiGraphicsAnimationManager::CreateRptr()
	{
		vl::presentation::elements::GuiGraphicsAnimationManager* _unwrapped_result = new vl::presentation::elements::GuiGraphicsAnimationManager();
		return __GacUIInternal<GuiGraphicsAnimationManager>::BuildRptr(_unwrapped_result);
	}
	
	void GuiGraphicsAnimationManager::AddAnimation(sptr<IGuiGraphicsAnimation> animation)
	{
		vl::Ptr<vl::presentation::elements::IGuiGraphicsAnimation> _unwrapped_animation = __GacUIInternal<IGuiGraphicsAnimation>::GetInternalObject(animation);
		__GacUIInternal<GuiGraphicsAnimationManager>::GetInternalObject(*this)->AddAnimation(_unwrapped_animation);
	}
	
	bool GuiGraphicsAnimationManager::HasAnimation()
	{
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsAnimationManager>::GetInternalObject(*this)->HasAnimation();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsAnimationManager::Play()
	{
		__GacUIInternal<GuiGraphicsAnimationManager>::GetInternalObject(*this)->Play();
	}
	

/***********************************************************************
GuiTimeBasedAnimation
***********************************************************************/

	GuiTimeBasedAnimation::GuiTimeBasedAnimation(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsAnimation(static_cast<__GacUIInternal<IGuiGraphicsAnimation>::InternalObjectType*>((__GacUIInternal<GuiTimeBasedAnimation>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTimeBasedAnimation::~GuiTimeBasedAnimation()
	{
	}
	
	void GuiTimeBasedAnimation::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsAnimation::ClearInternalObjectReference();
	}
	
	rptr<GuiTimeBasedAnimation> GuiTimeBasedAnimation::CreateRptr(signed __int32 totalMilliseconds)
	{
		signed __int32 _unwrapped_totalMilliseconds = totalMilliseconds;
		vl::presentation::elements::GuiTimeBasedAnimation* _unwrapped_result = new vl::presentation::elements::GuiTimeBasedAnimation(_unwrapped_totalMilliseconds);
		return __GacUIInternal<GuiTimeBasedAnimation>::BuildRptr(_unwrapped_result);
	}
	
	void GuiTimeBasedAnimation::Restart(signed __int32 totalMilliseconds)
	{
		signed __int32 _unwrapped_totalMilliseconds = totalMilliseconds;
		__GacUIInternal<GuiTimeBasedAnimation>::GetInternalObject(*this)->Restart(_unwrapped_totalMilliseconds);
	}
	

/***********************************************************************
IGuiGraphicsElementFactory
***********************************************************************/

	IGuiGraphicsElementFactory::IGuiGraphicsElementFactory(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IGuiGraphicsElementFactory::~IGuiGraphicsElementFactory()
	{
	}
	
	void IGuiGraphicsElementFactory::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<IGuiGraphicsElement> IGuiGraphicsElementFactory::Create()
	{
		vl::presentation::elements::IGuiGraphicsElement* _unwrapped_result = __GacUIInternal<IGuiGraphicsElementFactory>::GetInternalObject(*this)->Create();
		rptr<IGuiGraphicsElement> _wrapped_result = __GacUIInternal<IGuiGraphicsElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString IGuiGraphicsElementFactory::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<IGuiGraphicsElementFactory>::GetInternalObject(*this)->GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
IGuiGraphicsElement
***********************************************************************/

	IGuiGraphicsElement::IGuiGraphicsElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	IGuiGraphicsElement::~IGuiGraphicsElement()
	{
	}
	
	void IGuiGraphicsElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	rptr<IGuiGraphicsElementFactory> IGuiGraphicsElement::GetFactory()
	{
		vl::presentation::elements::IGuiGraphicsElementFactory* _unwrapped_result = __GacUIInternal<IGuiGraphicsElement>::GetInternalObject(*this)->GetFactory();
		rptr<IGuiGraphicsElementFactory> _wrapped_result = __GacUIInternal<IGuiGraphicsElementFactory>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<IGuiGraphicsRenderer> IGuiGraphicsElement::GetRenderer()
	{
		vl::presentation::elements::IGuiGraphicsRenderer* _unwrapped_result = __GacUIInternal<IGuiGraphicsElement>::GetInternalObject(*this)->GetRenderer();
		rptr<IGuiGraphicsRenderer> _wrapped_result = __GacUIInternal<IGuiGraphicsRenderer>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
Gui3DBorderElement
***********************************************************************/

	Gui3DBorderElement::Gui3DBorderElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<Gui3DBorderElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Gui3DBorderElement::~Gui3DBorderElement()
	{
	}
	
	void Gui3DBorderElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	void Gui3DBorderElement::SetColors(Color value1, Color value2)
	{
		vl::presentation::Color _unwrapped_value1 = *__GacUIInternal<Color>::GetInternalObject(value1);
		vl::presentation::Color _unwrapped_value2 = *__GacUIInternal<Color>::GetInternalObject(value2);
		__GacUIInternal<Gui3DBorderElement>::GetInternalObject(*this)->SetColors(_unwrapped_value1, _unwrapped_value2);
	}
	
	rptr<Gui3DBorderElement> Gui3DBorderElement::Create()
	{
		vl::presentation::elements::Gui3DBorderElement* _unwrapped_result = vl::presentation::elements::Gui3DBorderElement::Create();
		rptr<Gui3DBorderElement> _wrapped_result = __GacUIInternal<Gui3DBorderElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color Gui3DBorderElement::GetColor1()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<Gui3DBorderElement>::GetInternalObject(*this)->GetColor1();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Color Gui3DBorderElement::GetColor2()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<Gui3DBorderElement>::GetInternalObject(*this)->GetColor2();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString Gui3DBorderElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::Gui3DBorderElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
Gui3DSplitterElement
***********************************************************************/

	Gui3DSplitterElement::Gui3DSplitterElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<Gui3DSplitterElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Gui3DSplitterElement::~Gui3DSplitterElement()
	{
	}
	
	void Gui3DSplitterElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	void Gui3DSplitterElement::SetColors(Color value1, Color value2)
	{
		vl::presentation::Color _unwrapped_value1 = *__GacUIInternal<Color>::GetInternalObject(value1);
		vl::presentation::Color _unwrapped_value2 = *__GacUIInternal<Color>::GetInternalObject(value2);
		__GacUIInternal<Gui3DSplitterElement>::GetInternalObject(*this)->SetColors(_unwrapped_value1, _unwrapped_value2);
	}
	
	rptr<Gui3DSplitterElement> Gui3DSplitterElement::Create()
	{
		vl::presentation::elements::Gui3DSplitterElement* _unwrapped_result = vl::presentation::elements::Gui3DSplitterElement::Create();
		rptr<Gui3DSplitterElement> _wrapped_result = __GacUIInternal<Gui3DSplitterElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color Gui3DSplitterElement::GetColor1()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<Gui3DSplitterElement>::GetInternalObject(*this)->GetColor1();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Color Gui3DSplitterElement::GetColor2()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<Gui3DSplitterElement>::GetInternalObject(*this)->GetColor2();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Gui3DSplitterElement :: Direction Gui3DSplitterElement::GetDirection()
	{
		vl::presentation::elements::Gui3DSplitterElement::Direction _unwrapped_result = __GacUIInternal<Gui3DSplitterElement>::GetInternalObject(*this)->GetDirection();
		Gui3DSplitterElement :: Direction _wrapped_result = (Gui3DSplitterElement :: Direction)_unwrapped_result;
		return _wrapped_result;
	}
	
	void Gui3DSplitterElement::SetDirection(Gui3DSplitterElement :: Direction value)
	{
		vl::presentation::elements::Gui3DSplitterElement::Direction _unwrapped_value = (vl::presentation::elements::Gui3DSplitterElement::Direction)value;
		__GacUIInternal<Gui3DSplitterElement>::GetInternalObject(*this)->SetDirection(_unwrapped_value);
	}
	
	GacString Gui3DSplitterElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::Gui3DSplitterElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
GuiGradientBackgroundElement
***********************************************************************/

	GuiGradientBackgroundElement::GuiGradientBackgroundElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiGradientBackgroundElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGradientBackgroundElement::~GuiGradientBackgroundElement()
	{
	}
	
	void GuiGradientBackgroundElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	void GuiGradientBackgroundElement::SetColors(Color value1, Color value2)
	{
		vl::presentation::Color _unwrapped_value1 = *__GacUIInternal<Color>::GetInternalObject(value1);
		vl::presentation::Color _unwrapped_value2 = *__GacUIInternal<Color>::GetInternalObject(value2);
		__GacUIInternal<GuiGradientBackgroundElement>::GetInternalObject(*this)->SetColors(_unwrapped_value1, _unwrapped_value2);
	}
	
	rptr<GuiGradientBackgroundElement> GuiGradientBackgroundElement::Create()
	{
		vl::presentation::elements::GuiGradientBackgroundElement* _unwrapped_result = vl::presentation::elements::GuiGradientBackgroundElement::Create();
		rptr<GuiGradientBackgroundElement> _wrapped_result = __GacUIInternal<GuiGradientBackgroundElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiGradientBackgroundElement::GetColor1()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiGradientBackgroundElement>::GetInternalObject(*this)->GetColor1();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiGradientBackgroundElement::GetColor2()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiGradientBackgroundElement>::GetInternalObject(*this)->GetColor2();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GuiGradientBackgroundElement :: Direction GuiGradientBackgroundElement::GetDirection()
	{
		vl::presentation::elements::GuiGradientBackgroundElement::Direction _unwrapped_result = __GacUIInternal<GuiGradientBackgroundElement>::GetInternalObject(*this)->GetDirection();
		GuiGradientBackgroundElement :: Direction _wrapped_result = (GuiGradientBackgroundElement :: Direction)_unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGradientBackgroundElement::SetDirection(GuiGradientBackgroundElement :: Direction value)
	{
		vl::presentation::elements::GuiGradientBackgroundElement::Direction _unwrapped_value = (vl::presentation::elements::GuiGradientBackgroundElement::Direction)value;
		__GacUIInternal<GuiGradientBackgroundElement>::GetInternalObject(*this)->SetDirection(_unwrapped_value);
	}
	
	ElementShape :: Type GuiGradientBackgroundElement::GetShape()
	{
		vl::presentation::elements::ElementShape::Type _unwrapped_result = __GacUIInternal<GuiGradientBackgroundElement>::GetInternalObject(*this)->GetShape();
		ElementShape :: Type _wrapped_result = (ElementShape :: Type)_unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGradientBackgroundElement::SetShape(ElementShape :: Type value)
	{
		vl::presentation::elements::ElementShape::Type _unwrapped_value = (vl::presentation::elements::ElementShape::Type)value;
		__GacUIInternal<GuiGradientBackgroundElement>::GetInternalObject(*this)->SetShape(_unwrapped_value);
	}
	
	GacString GuiGradientBackgroundElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::GuiGradientBackgroundElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
GuiImageFrameElement
***********************************************************************/

	GuiImageFrameElement::GuiImageFrameElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiImageFrameElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiImageFrameElement::~GuiImageFrameElement()
	{
	}
	
	void GuiImageFrameElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	void GuiImageFrameElement::SetImage(sptr<INativeImage> _image, signed __int32 _frameIndex)
	{
		vl::Ptr<vl::presentation::INativeImage> _unwrapped__image = __GacUIInternal<INativeImage>::GetInternalObject(_image);
		signed __int32 _unwrapped__frameIndex = _frameIndex;
		__GacUIInternal<GuiImageFrameElement>::GetInternalObject(*this)->SetImage(_unwrapped__image, _unwrapped__frameIndex);
	}
	
	void GuiImageFrameElement::SetAlignments(Alignment :: Type horizontal, Alignment :: Type vertical)
	{
		vl::presentation::Alignment::Type _unwrapped_horizontal = (vl::presentation::Alignment::Type)horizontal;
		vl::presentation::Alignment::Type _unwrapped_vertical = (vl::presentation::Alignment::Type)vertical;
		__GacUIInternal<GuiImageFrameElement>::GetInternalObject(*this)->SetAlignments(_unwrapped_horizontal, _unwrapped_vertical);
	}
	
	rptr<GuiImageFrameElement> GuiImageFrameElement::Create()
	{
		vl::presentation::elements::GuiImageFrameElement* _unwrapped_result = vl::presentation::elements::GuiImageFrameElement::Create();
		rptr<GuiImageFrameElement> _wrapped_result = __GacUIInternal<GuiImageFrameElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<INativeImage> GuiImageFrameElement::GetImage()
	{
		vl::Ptr<vl::presentation::INativeImage> _unwrapped_result = __GacUIInternal<GuiImageFrameElement>::GetInternalObject(*this)->GetImage();
		sptr<INativeImage> _wrapped_result = __GacUIInternal<INativeImage>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiImageFrameElement::GetFrameIndex()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiImageFrameElement>::GetInternalObject(*this)->GetFrameIndex();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	Alignment :: Type GuiImageFrameElement::GetHorizontalAlignment()
	{
		vl::presentation::Alignment::Type _unwrapped_result = __GacUIInternal<GuiImageFrameElement>::GetInternalObject(*this)->GetHorizontalAlignment();
		Alignment :: Type _wrapped_result = (Alignment :: Type)_unwrapped_result;
		return _wrapped_result;
	}
	
	Alignment :: Type GuiImageFrameElement::GetVerticalAlignment()
	{
		vl::presentation::Alignment::Type _unwrapped_result = __GacUIInternal<GuiImageFrameElement>::GetInternalObject(*this)->GetVerticalAlignment();
		Alignment :: Type _wrapped_result = (Alignment :: Type)_unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiImageFrameElement::GetStretch()
	{
		bool _unwrapped_result = __GacUIInternal<GuiImageFrameElement>::GetInternalObject(*this)->GetStretch();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiImageFrameElement::SetStretch(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiImageFrameElement>::GetInternalObject(*this)->SetStretch(_unwrapped_value);
	}
	
	GacString GuiImageFrameElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::GuiImageFrameElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
GuiRoundBorderElement
***********************************************************************/

	GuiRoundBorderElement::GuiRoundBorderElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiRoundBorderElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiRoundBorderElement::~GuiRoundBorderElement()
	{
	}
	
	void GuiRoundBorderElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	rptr<GuiRoundBorderElement> GuiRoundBorderElement::Create()
	{
		vl::presentation::elements::GuiRoundBorderElement* _unwrapped_result = vl::presentation::elements::GuiRoundBorderElement::Create();
		rptr<GuiRoundBorderElement> _wrapped_result = __GacUIInternal<GuiRoundBorderElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiRoundBorderElement::GetColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiRoundBorderElement>::GetInternalObject(*this)->GetColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiRoundBorderElement::SetColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<GuiRoundBorderElement>::GetInternalObject(*this)->SetColor(_unwrapped_value);
	}
	
	signed __int32 GuiRoundBorderElement::GetRadius()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiRoundBorderElement>::GetInternalObject(*this)->GetRadius();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiRoundBorderElement::SetRadius(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiRoundBorderElement>::GetInternalObject(*this)->SetRadius(_unwrapped_value);
	}
	
	GacString GuiRoundBorderElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::GuiRoundBorderElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSolidBackgroundElement
***********************************************************************/

	GuiSolidBackgroundElement::GuiSolidBackgroundElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiSolidBackgroundElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSolidBackgroundElement::~GuiSolidBackgroundElement()
	{
	}
	
	void GuiSolidBackgroundElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	rptr<GuiSolidBackgroundElement> GuiSolidBackgroundElement::Create()
	{
		vl::presentation::elements::GuiSolidBackgroundElement* _unwrapped_result = vl::presentation::elements::GuiSolidBackgroundElement::Create();
		rptr<GuiSolidBackgroundElement> _wrapped_result = __GacUIInternal<GuiSolidBackgroundElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiSolidBackgroundElement::GetColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiSolidBackgroundElement>::GetInternalObject(*this)->GetColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiSolidBackgroundElement::SetColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<GuiSolidBackgroundElement>::GetInternalObject(*this)->SetColor(_unwrapped_value);
	}
	
	ElementShape :: Type GuiSolidBackgroundElement::GetShape()
	{
		vl::presentation::elements::ElementShape::Type _unwrapped_result = __GacUIInternal<GuiSolidBackgroundElement>::GetInternalObject(*this)->GetShape();
		ElementShape :: Type _wrapped_result = (ElementShape :: Type)_unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSolidBackgroundElement::SetShape(ElementShape :: Type value)
	{
		vl::presentation::elements::ElementShape::Type _unwrapped_value = (vl::presentation::elements::ElementShape::Type)value;
		__GacUIInternal<GuiSolidBackgroundElement>::GetInternalObject(*this)->SetShape(_unwrapped_value);
	}
	
	GacString GuiSolidBackgroundElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::GuiSolidBackgroundElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSolidBorderElement
***********************************************************************/

	GuiSolidBorderElement::GuiSolidBorderElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiSolidBorderElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSolidBorderElement::~GuiSolidBorderElement()
	{
	}
	
	void GuiSolidBorderElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	rptr<GuiSolidBorderElement> GuiSolidBorderElement::Create()
	{
		vl::presentation::elements::GuiSolidBorderElement* _unwrapped_result = vl::presentation::elements::GuiSolidBorderElement::Create();
		rptr<GuiSolidBorderElement> _wrapped_result = __GacUIInternal<GuiSolidBorderElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiSolidBorderElement::GetColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiSolidBorderElement>::GetInternalObject(*this)->GetColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiSolidBorderElement::SetColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<GuiSolidBorderElement>::GetInternalObject(*this)->SetColor(_unwrapped_value);
	}
	
	ElementShape :: Type GuiSolidBorderElement::GetShape()
	{
		vl::presentation::elements::ElementShape::Type _unwrapped_result = __GacUIInternal<GuiSolidBorderElement>::GetInternalObject(*this)->GetShape();
		ElementShape :: Type _wrapped_result = (ElementShape :: Type)_unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSolidBorderElement::SetShape(ElementShape :: Type value)
	{
		vl::presentation::elements::ElementShape::Type _unwrapped_value = (vl::presentation::elements::ElementShape::Type)value;
		__GacUIInternal<GuiSolidBorderElement>::GetInternalObject(*this)->SetShape(_unwrapped_value);
	}
	
	GacString GuiSolidBorderElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::GuiSolidBorderElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSolidLabelElement
***********************************************************************/

	GuiSolidLabelElement::GuiSolidLabelElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiSolidLabelElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSolidLabelElement::~GuiSolidLabelElement()
	{
	}
	
	void GuiSolidLabelElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	void GuiSolidLabelElement::SetAlignments(Alignment :: Type horizontal, Alignment :: Type vertical)
	{
		vl::presentation::Alignment::Type _unwrapped_horizontal = (vl::presentation::Alignment::Type)horizontal;
		vl::presentation::Alignment::Type _unwrapped_vertical = (vl::presentation::Alignment::Type)vertical;
		__GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->SetAlignments(_unwrapped_horizontal, _unwrapped_vertical);
	}
	
	rptr<GuiSolidLabelElement> GuiSolidLabelElement::Create()
	{
		vl::presentation::elements::GuiSolidLabelElement* _unwrapped_result = vl::presentation::elements::GuiSolidLabelElement::Create();
		rptr<GuiSolidLabelElement> _wrapped_result = __GacUIInternal<GuiSolidLabelElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiSolidLabelElement::GetColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->GetColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiSolidLabelElement::SetColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->SetColor(_unwrapped_value);
	}
	
	rptr<FontProperties> GuiSolidLabelElement::GetFont()
	{
		vl::presentation::FontProperties const& _unwrapped_result = __GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->GetFont();
		rptr<FontProperties> _wrapped_result = __GacUIInternal<FontProperties>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiSolidLabelElement::SetFont(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		__GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->SetFont(_unwrapped_value);
	}
	
	const GacString& GuiSolidLabelElement::GetText()
	{
		vl::ObjectString<wchar_t> const& _unwrapped_result = __GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->GetText();
		const GacString& _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	void GuiSolidLabelElement::SetText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->SetText(_unwrapped_value);
	}
	
	Alignment :: Type GuiSolidLabelElement::GetHorizontalAlignment()
	{
		vl::presentation::Alignment::Type _unwrapped_result = __GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->GetHorizontalAlignment();
		Alignment :: Type _wrapped_result = (Alignment :: Type)_unwrapped_result;
		return _wrapped_result;
	}
	
	Alignment :: Type GuiSolidLabelElement::GetVerticalAlignment()
	{
		vl::presentation::Alignment::Type _unwrapped_result = __GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->GetVerticalAlignment();
		Alignment :: Type _wrapped_result = (Alignment :: Type)_unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiSolidLabelElement::GetWrapLine()
	{
		bool _unwrapped_result = __GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->GetWrapLine();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSolidLabelElement::SetWrapLine(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->SetWrapLine(_unwrapped_value);
	}
	
	bool GuiSolidLabelElement::GetEllipse()
	{
		bool _unwrapped_result = __GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->GetEllipse();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSolidLabelElement::SetEllipse(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->SetEllipse(_unwrapped_value);
	}
	
	bool GuiSolidLabelElement::GetMultiline()
	{
		bool _unwrapped_result = __GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->GetMultiline();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSolidLabelElement::SetMultiline(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSolidLabelElement>::GetInternalObject(*this)->SetMultiline(_unwrapped_value);
	}
	
	GacString GuiSolidLabelElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::GuiSolidLabelElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
IGuiGraphicsRendererFactory
***********************************************************************/

	IGuiGraphicsRendererFactory::IGuiGraphicsRendererFactory(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IGuiGraphicsRendererFactory::~IGuiGraphicsRendererFactory()
	{
	}
	
	void IGuiGraphicsRendererFactory::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<IGuiGraphicsRenderer> IGuiGraphicsRendererFactory::Create()
	{
		vl::presentation::elements::IGuiGraphicsRenderer* _unwrapped_result = __GacUIInternal<IGuiGraphicsRendererFactory>::GetInternalObject(*this)->Create();
		rptr<IGuiGraphicsRenderer> _wrapped_result = __GacUIInternal<IGuiGraphicsRenderer>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
IGuiMenuService
***********************************************************************/

	IGuiMenuService::IGuiMenuService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<IGuiMenuService>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	IGuiMenuService::~IGuiMenuService()
	{
	}
	
	void IGuiMenuService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	bool IGuiMenuService::IsActiveState()
	{
		bool _unwrapped_result = __GacUIInternal<IGuiMenuService>::GetInternalObject(*this)->IsActiveState();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void IGuiMenuService::MenuItemExecuted()
	{
		__GacUIInternal<IGuiMenuService>::GetInternalObject(*this)->MenuItemExecuted();
	}
	
	void IGuiMenuService::MenuOpened(rptr<GuiMenu> menu)
	{
		vl::presentation::controls::GuiMenu* _unwrapped_menu = __GacUIInternal<GuiMenu>::GetInternalObject(menu);
		__GacUIInternal<IGuiMenuService>::GetInternalObject(*this)->MenuOpened(_unwrapped_menu);
	}
	
	void IGuiMenuService::MenuClosed(rptr<GuiMenu> menu)
	{
		vl::presentation::controls::GuiMenu* _unwrapped_menu = __GacUIInternal<GuiMenu>::GetInternalObject(menu);
		__GacUIInternal<IGuiMenuService>::GetInternalObject(*this)->MenuClosed(_unwrapped_menu);
	}
	
	rptr<IGuiMenuService> IGuiMenuService::GetParent()
	{
		vl::presentation::controls::IGuiMenuService* _unwrapped_result = __GacUIInternal<IGuiMenuService>::GetInternalObject(*this)->GetParent();
		rptr<IGuiMenuService> _wrapped_result = __GacUIInternal<IGuiMenuService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	IGuiMenuService :: Direction IGuiMenuService::GetPreferredDirection()
	{
		vl::presentation::controls::IGuiMenuService::Direction _unwrapped_result = __GacUIInternal<IGuiMenuService>::GetInternalObject(*this)->GetPreferredDirection();
		IGuiMenuService :: Direction _wrapped_result = (IGuiMenuService :: Direction)_unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiMenu> IGuiMenuService::GetOpeningMenu()
	{
		vl::presentation::controls::GuiMenu* _unwrapped_result = __GacUIInternal<IGuiMenuService>::GetInternalObject(*this)->GetOpeningMenu();
		rptr<GuiMenu> _wrapped_result = __GacUIInternal<GuiMenu>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	wchar_t const* IGuiMenuService::get_Identifier()
	{
		wchar_t const* _wrapped_result = vl::presentation::controls::IGuiMenuService::Identifier;
		return _wrapped_result;
	}
	

/***********************************************************************
IList_of_int
***********************************************************************/

	IList_of_int::IList_of_int(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_int::~IList_of_int()
	{
	}
	
	void IList_of_int::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	signed __int32 IList_of_int::Insert(signed __int32 index, signed __int32 item)
	{
		signed __int32 _unwrapped_index = index;
		signed __int32 _unwrapped_item = item;
		signed __int32 _unwrapped_result = __GacUIInternal<IList_of_int>::GetInternalObject(*this)->Insert(_unwrapped_index, _unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool IList_of_int::Set(signed __int32 index, signed __int32 item)
	{
		signed __int32 _unwrapped_index = index;
		signed __int32 _unwrapped_item = item;
		bool _unwrapped_result = __GacUIInternal<IList_of_int>::GetInternalObject(*this)->Set(_unwrapped_index, _unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
IList_of_MemoryNodeProvider
***********************************************************************/

	IList_of_MemoryNodeProvider::IList_of_MemoryNodeProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_MemoryNodeProvider::~IList_of_MemoryNodeProvider()
	{
	}
	
	void IList_of_MemoryNodeProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	signed __int32 IList_of_MemoryNodeProvider::Insert(signed __int32 index, sptr<MemoryNodeProvider> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::Ptr<vl::presentation::controls::tree::MemoryNodeProvider> _unwrapped_item = __GacUIInternal<MemoryNodeProvider>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IList_of_MemoryNodeProvider>::GetInternalObject(*this)->Insert(_unwrapped_index, _unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool IList_of_MemoryNodeProvider::Set(signed __int32 index, sptr<MemoryNodeProvider> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::Ptr<vl::presentation::controls::tree::MemoryNodeProvider> _unwrapped_item = __GacUIInternal<MemoryNodeProvider>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IList_of_MemoryNodeProvider>::GetInternalObject(*this)->Set(_unwrapped_index, _unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
INativeAsyncService
***********************************************************************/

	INativeAsyncService::INativeAsyncService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeAsyncService::~INativeAsyncService()
	{
	}
	
	void INativeAsyncService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool INativeAsyncService::IsInMainThread()
	{
		bool _unwrapped_result = __GacUIInternal<INativeAsyncService>::GetInternalObject(*this)->IsInMainThread();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
INativeClipboardService
***********************************************************************/

	INativeClipboardService::INativeClipboardService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeClipboardService::~INativeClipboardService()
	{
	}
	
	void INativeClipboardService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool INativeClipboardService::ContainsText()
	{
		bool _unwrapped_result = __GacUIInternal<INativeClipboardService>::GetInternalObject(*this)->ContainsText();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INativeClipboardService::SetText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		bool _unwrapped_result = __GacUIInternal<INativeClipboardService>::GetInternalObject(*this)->SetText(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	GacString INativeClipboardService::GetText()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<INativeClipboardService>::GetInternalObject(*this)->GetText();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
INativeCursor
***********************************************************************/

	INativeCursor::INativeCursor(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeCursor::~INativeCursor()
	{
	}
	
	void INativeCursor::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool INativeCursor::IsSystemCursor()
	{
		bool _unwrapped_result = __GacUIInternal<INativeCursor>::GetInternalObject(*this)->IsSystemCursor();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	INativeCursor :: SystemCursorType INativeCursor::GetSystemCursorType()
	{
		vl::presentation::INativeCursor::SystemCursorType _unwrapped_result = __GacUIInternal<INativeCursor>::GetInternalObject(*this)->GetSystemCursorType();
		INativeCursor :: SystemCursorType _wrapped_result = (INativeCursor :: SystemCursorType)_unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 INativeCursor::get_SystemCursorCount()
	{
		signed __int32 _wrapped_result = vl::presentation::INativeCursor::SystemCursorCount;
		return _wrapped_result;
	}
	

/***********************************************************************
INativeImageFrameCache
***********************************************************************/

	INativeImageFrameCache::INativeImageFrameCache(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeImageFrameCache::~INativeImageFrameCache()
	{
	}
	
	void INativeImageFrameCache::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	void INativeImageFrameCache::OnAttach(rptr<INativeImageFrame> frame)
	{
		vl::presentation::INativeImageFrame* _unwrapped_frame = __GacUIInternal<INativeImageFrame>::GetInternalObject(frame);
		__GacUIInternal<INativeImageFrameCache>::GetInternalObject(*this)->OnAttach(_unwrapped_frame);
	}
	
	void INativeImageFrameCache::OnDetach(rptr<INativeImageFrame> frame)
	{
		vl::presentation::INativeImageFrame* _unwrapped_frame = __GacUIInternal<INativeImageFrame>::GetInternalObject(frame);
		__GacUIInternal<INativeImageFrameCache>::GetInternalObject(*this)->OnDetach(_unwrapped_frame);
	}
	

/***********************************************************************
INativeImageService
***********************************************************************/

	INativeImageService::INativeImageService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeImageService::~INativeImageService()
	{
	}
	
	void INativeImageService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	sptr<INativeImage> INativeImageService::CreateImageFromFile(const GacString& path)
	{
		vl::ObjectString<wchar_t> _unwrapped_path = path.Buffer();
		vl::Ptr<vl::presentation::INativeImage> _unwrapped_result = __GacUIInternal<INativeImageService>::GetInternalObject(*this)->CreateImageFromFile(_unwrapped_path);
		sptr<INativeImage> _wrapped_result = __GacUIInternal<INativeImage>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
INativeImage
***********************************************************************/

	INativeImage::INativeImage(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeImage::~INativeImage()
	{
	}
	
	void INativeImage::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<INativeImageFrame> INativeImage::GetFrame(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::INativeImageFrame* _unwrapped_result = __GacUIInternal<INativeImage>::GetInternalObject(*this)->GetFrame(_unwrapped_index);
		rptr<INativeImageFrame> _wrapped_result = __GacUIInternal<INativeImageFrame>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeImageService> INativeImage::GetImageService()
	{
		vl::presentation::INativeImageService* _unwrapped_result = __GacUIInternal<INativeImage>::GetInternalObject(*this)->GetImageService();
		rptr<INativeImageService> _wrapped_result = __GacUIInternal<INativeImageService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	INativeImage :: FormatType INativeImage::GetFormat()
	{
		vl::presentation::INativeImage::FormatType _unwrapped_result = __GacUIInternal<INativeImage>::GetInternalObject(*this)->GetFormat();
		INativeImage :: FormatType _wrapped_result = (INativeImage :: FormatType)_unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 INativeImage::GetFrameCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<INativeImage>::GetInternalObject(*this)->GetFrameCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
INativeInputService
***********************************************************************/

	INativeInputService::INativeInputService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeInputService::~INativeInputService()
	{
	}
	
	void INativeInputService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	void INativeInputService::StartHookMouse()
	{
		__GacUIInternal<INativeInputService>::GetInternalObject(*this)->StartHookMouse();
	}
	
	void INativeInputService::StopHookMouse()
	{
		__GacUIInternal<INativeInputService>::GetInternalObject(*this)->StopHookMouse();
	}
	
	bool INativeInputService::IsHookingMouse()
	{
		bool _unwrapped_result = __GacUIInternal<INativeInputService>::GetInternalObject(*this)->IsHookingMouse();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeInputService::StartTimer()
	{
		__GacUIInternal<INativeInputService>::GetInternalObject(*this)->StartTimer();
	}
	
	void INativeInputService::StopTimer()
	{
		__GacUIInternal<INativeInputService>::GetInternalObject(*this)->StopTimer();
	}
	
	bool INativeInputService::IsTimerEnabled()
	{
		bool _unwrapped_result = __GacUIInternal<INativeInputService>::GetInternalObject(*this)->IsTimerEnabled();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INativeInputService::IsKeyPressing(signed __int32 code)
	{
		signed __int32 _unwrapped_code = code;
		bool _unwrapped_result = __GacUIInternal<INativeInputService>::GetInternalObject(*this)->IsKeyPressing(_unwrapped_code);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INativeInputService::IsKeyToggled(signed __int32 code)
	{
		signed __int32 _unwrapped_code = code;
		bool _unwrapped_result = __GacUIInternal<INativeInputService>::GetInternalObject(*this)->IsKeyToggled(_unwrapped_code);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
INativeResourceService
***********************************************************************/

	INativeResourceService::INativeResourceService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeResourceService::~INativeResourceService()
	{
	}
	
	void INativeResourceService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<INativeCursor> INativeResourceService::GetSystemCursor(INativeCursor :: SystemCursorType type)
	{
		vl::presentation::INativeCursor::SystemCursorType _unwrapped_type = (vl::presentation::INativeCursor::SystemCursorType)type;
		vl::presentation::INativeCursor* _unwrapped_result = __GacUIInternal<INativeResourceService>::GetInternalObject(*this)->GetSystemCursor(_unwrapped_type);
		rptr<INativeCursor> _wrapped_result = __GacUIInternal<INativeCursor>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeCursor> INativeResourceService::GetDefaultSystemCursor()
	{
		vl::presentation::INativeCursor* _unwrapped_result = __GacUIInternal<INativeResourceService>::GetInternalObject(*this)->GetDefaultSystemCursor();
		rptr<INativeCursor> _wrapped_result = __GacUIInternal<INativeCursor>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	FontProperties INativeResourceService::GetDefaultFont()
	{
		vl::presentation::FontProperties _unwrapped_result = __GacUIInternal<INativeResourceService>::GetInternalObject(*this)->GetDefaultFont();
		FontProperties _wrapped_result = __GacUIInternal<FontProperties>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void INativeResourceService::SetDefaultFont(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		__GacUIInternal<INativeResourceService>::GetInternalObject(*this)->SetDefaultFont(_unwrapped_value);
	}
	

/***********************************************************************
INodeItemPrimaryTextView
***********************************************************************/

	INodeItemPrimaryTextView::INodeItemPrimaryTextView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeItemPrimaryTextView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeItemPrimaryTextView::~INodeItemPrimaryTextView()
	{
	}
	
	void INodeItemPrimaryTextView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	GacString INodeItemPrimaryTextView::GetPrimaryTextViewText(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<INodeItemPrimaryTextView>::GetInternalObject(*this)->GetPrimaryTextViewText(_unwrapped_node);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	wchar_t const* INodeItemPrimaryTextView::get_Identifier()
	{
		wchar_t const* _wrapped_result = vl::presentation::controls::tree::INodeItemPrimaryTextView::Identifier;
		return _wrapped_result;
	}
	

/***********************************************************************
INodeProvider
***********************************************************************/

	INodeProvider::INodeProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeProvider::~INodeProvider()
	{
	}
	
	void INodeProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	signed __int32 INodeProvider::CalculateTotalVisibleNodes()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<INodeProvider>::GetInternalObject(*this)->CalculateTotalVisibleNodes();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<INodeProvider> INodeProvider::RequestChild(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::tree::INodeProvider* _unwrapped_result = __GacUIInternal<INodeProvider>::GetInternalObject(*this)->RequestChild(_unwrapped_index);
		rptr<INodeProvider> _wrapped_result = __GacUIInternal<INodeProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void INodeProvider::ReleaseChild(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		__GacUIInternal<INodeProvider>::GetInternalObject(*this)->ReleaseChild(_unwrapped_node);
	}
	
	bool INodeProvider::GetExpanding()
	{
		bool _unwrapped_result = __GacUIInternal<INodeProvider>::GetInternalObject(*this)->GetExpanding();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INodeProvider::SetExpanding(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<INodeProvider>::GetInternalObject(*this)->SetExpanding(_unwrapped_value);
	}
	
	signed __int32 INodeProvider::GetChildCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<INodeProvider>::GetInternalObject(*this)->GetChildCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<INodeProvider> INodeProvider::GetParent()
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_result = __GacUIInternal<INodeProvider>::GetInternalObject(*this)->GetParent();
		rptr<INodeProvider> _wrapped_result = __GacUIInternal<INodeProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
INodeProviderCallback
***********************************************************************/

	INodeProviderCallback::INodeProviderCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeProviderCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeProviderCallback::~INodeProviderCallback()
	{
	}
	
	void INodeProviderCallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void INodeProviderCallback::OnAttached(rptr<INodeRootProvider> provider)
	{
		vl::presentation::controls::tree::INodeRootProvider* _unwrapped_provider = __GacUIInternal<INodeRootProvider>::GetInternalObject(provider);
		__GacUIInternal<INodeProviderCallback>::GetInternalObject(*this)->OnAttached(_unwrapped_provider);
	}
	
	void INodeProviderCallback::OnBeforeItemModified(rptr<INodeProvider> parentNode, signed __int32 start, signed __int32 count, signed __int32 newCount)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_parentNode = __GacUIInternal<INodeProvider>::GetInternalObject(parentNode);
		signed __int32 _unwrapped_start = start;
		signed __int32 _unwrapped_count = count;
		signed __int32 _unwrapped_newCount = newCount;
		__GacUIInternal<INodeProviderCallback>::GetInternalObject(*this)->OnBeforeItemModified(_unwrapped_parentNode, _unwrapped_start, _unwrapped_count, _unwrapped_newCount);
	}
	
	void INodeProviderCallback::OnAfterItemModified(rptr<INodeProvider> parentNode, signed __int32 start, signed __int32 count, signed __int32 newCount)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_parentNode = __GacUIInternal<INodeProvider>::GetInternalObject(parentNode);
		signed __int32 _unwrapped_start = start;
		signed __int32 _unwrapped_count = count;
		signed __int32 _unwrapped_newCount = newCount;
		__GacUIInternal<INodeProviderCallback>::GetInternalObject(*this)->OnAfterItemModified(_unwrapped_parentNode, _unwrapped_start, _unwrapped_count, _unwrapped_newCount);
	}
	
	void INodeProviderCallback::OnItemExpanded(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		__GacUIInternal<INodeProviderCallback>::GetInternalObject(*this)->OnItemExpanded(_unwrapped_node);
	}
	
	void INodeProviderCallback::OnItemCollapsed(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		__GacUIInternal<INodeProviderCallback>::GetInternalObject(*this)->OnItemCollapsed(_unwrapped_node);
	}
	

/***********************************************************************
INodeRootProvider
***********************************************************************/

	INodeRootProvider::INodeRootProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeRootProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeRootProvider::~INodeRootProvider()
	{
	}
	
	void INodeRootProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	bool INodeRootProvider::CanGetNodeByVisibleIndex()
	{
		bool _unwrapped_result = __GacUIInternal<INodeRootProvider>::GetInternalObject(*this)->CanGetNodeByVisibleIndex();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<INodeProvider> INodeRootProvider::GetNodeByVisibleIndex(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::tree::INodeProvider* _unwrapped_result = __GacUIInternal<INodeRootProvider>::GetInternalObject(*this)->GetNodeByVisibleIndex(_unwrapped_index);
		rptr<INodeProvider> _wrapped_result = __GacUIInternal<INodeProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool INodeRootProvider::AttachCallback(rptr<INodeProviderCallback> value)
	{
		vl::presentation::controls::tree::INodeProviderCallback* _unwrapped_value = __GacUIInternal<INodeProviderCallback>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<INodeRootProvider>::GetInternalObject(*this)->AttachCallback(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INodeRootProvider::DetachCallback(rptr<INodeProviderCallback> value)
	{
		vl::presentation::controls::tree::INodeProviderCallback* _unwrapped_value = __GacUIInternal<INodeProviderCallback>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<INodeRootProvider>::GetInternalObject(*this)->DetachCallback(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<IDescriptable> INodeRootProvider::RequestView(const GacString& identifier)
	{
		vl::ObjectString<wchar_t> _unwrapped_identifier = identifier.Buffer();
		vl::presentation::IDescriptable* _unwrapped_result = __GacUIInternal<INodeRootProvider>::GetInternalObject(*this)->RequestView(_unwrapped_identifier);
		rptr<IDescriptable> _wrapped_result = __GacUIInternal<IDescriptable>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void INodeRootProvider::ReleaseView(rptr<IDescriptable> view)
	{
		vl::presentation::IDescriptable* _unwrapped_view = __GacUIInternal<IDescriptable>::GetInternalObject(view);
		__GacUIInternal<INodeRootProvider>::GetInternalObject(*this)->ReleaseView(_unwrapped_view);
	}
	
	rptr<INodeProvider> INodeRootProvider::GetRootNode()
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_result = __GacUIInternal<INodeRootProvider>::GetInternalObject(*this)->GetRootNode();
		rptr<INodeProvider> _wrapped_result = __GacUIInternal<INodeProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
IReadonlyList_of_ColorEntry
***********************************************************************/

	IReadonlyList_of_ColorEntry::IReadonlyList_of_ColorEntry(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_ColorEntry::~IReadonlyList_of_ColorEntry()
	{
	}
	
	void IReadonlyList_of_ColorEntry::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool IReadonlyList_of_ColorEntry::Contains(rptr<ColorEntry> item)
	{
		vl::presentation::elements::text::ColorEntry const& _unwrapped_item = *__GacUIInternal<ColorEntry>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IReadonlyList_of_ColorEntry>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_ColorEntry::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_ColorEntry>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<ColorEntry> IReadonlyList_of_ColorEntry::Get(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::text::ColorEntry const& _unwrapped_result = __GacUIInternal<IReadonlyList_of_ColorEntry>::GetInternalObject(*this)->Get(_unwrapped_index);
		rptr<ColorEntry> _wrapped_result = __GacUIInternal<ColorEntry>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<ColorEntry> IReadonlyList_of_ColorEntry::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::text::ColorEntry const& _unwrapped_result = __GacUIInternal<IReadonlyList_of_ColorEntry>::GetInternalObject(*this)->operator[](_unwrapped_index);
		rptr<ColorEntry> _wrapped_result = __GacUIInternal<ColorEntry>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_ColorEntry::IndexOf(rptr<ColorEntry> item)
	{
		vl::presentation::elements::text::ColorEntry const& _unwrapped_item = *__GacUIInternal<ColorEntry>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_ColorEntry>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
IReadonlyList_of_GuiGraphicsComposition_raw_pointer
***********************************************************************/

	IReadonlyList_of_GuiGraphicsComposition_raw_pointer::IReadonlyList_of_GuiGraphicsComposition_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiGraphicsComposition_raw_pointer::~IReadonlyList_of_GuiGraphicsComposition_raw_pointer()
	{
	}
	
	void IReadonlyList_of_GuiGraphicsComposition_raw_pointer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Contains(rptr<GuiGraphicsComposition> item)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_item = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiGraphicsComposition_raw_pointer>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiGraphicsComposition_raw_pointer>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Get(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiGraphicsComposition_raw_pointer>::GetInternalObject(*this)->Get(_unwrapped_index);
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> IReadonlyList_of_GuiGraphicsComposition_raw_pointer::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiGraphicsComposition_raw_pointer>::GetInternalObject(*this)->operator[](_unwrapped_index);
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiGraphicsComposition_raw_pointer::IndexOf(rptr<GuiGraphicsComposition> item)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_item = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiGraphicsComposition_raw_pointer>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
IReadonlyList_of_GuiTabPage_raw_pointer
***********************************************************************/

	IReadonlyList_of_GuiTabPage_raw_pointer::IReadonlyList_of_GuiTabPage_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiTabPage_raw_pointer::~IReadonlyList_of_GuiTabPage_raw_pointer()
	{
	}
	
	void IReadonlyList_of_GuiTabPage_raw_pointer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool IReadonlyList_of_GuiTabPage_raw_pointer::Contains(rptr<GuiTabPage> item)
	{
		vl::presentation::controls::GuiTabPage* _unwrapped_item = __GacUIInternal<GuiTabPage>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiTabPage_raw_pointer>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiTabPage_raw_pointer::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiTabPage_raw_pointer>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiTabPage> IReadonlyList_of_GuiTabPage_raw_pointer::Get(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::GuiTabPage* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiTabPage_raw_pointer>::GetInternalObject(*this)->Get(_unwrapped_index);
		rptr<GuiTabPage> _wrapped_result = __GacUIInternal<GuiTabPage>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiTabPage> IReadonlyList_of_GuiTabPage_raw_pointer::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::GuiTabPage* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiTabPage_raw_pointer>::GetInternalObject(*this)->operator[](_unwrapped_index);
		rptr<GuiTabPage> _wrapped_result = __GacUIInternal<GuiTabPage>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiTabPage_raw_pointer::IndexOf(rptr<GuiTabPage> item)
	{
		vl::presentation::controls::GuiTabPage* _unwrapped_item = __GacUIInternal<GuiTabPage>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiTabPage_raw_pointer>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
IReadonlyList_of_int
***********************************************************************/

	IReadonlyList_of_int::IReadonlyList_of_int(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_int::~IReadonlyList_of_int()
	{
	}
	
	void IReadonlyList_of_int::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool IReadonlyList_of_int::Contains(signed __int32 item)
	{
		signed __int32 _unwrapped_item = item;
		bool _unwrapped_result = __GacUIInternal<IReadonlyList_of_int>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_int::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_int>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_int::Get(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_int>::GetInternalObject(*this)->Get(_unwrapped_index);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_int::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_int>::GetInternalObject(*this)->operator[](_unwrapped_index);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_int::IndexOf(signed __int32 item)
	{
		signed __int32 _unwrapped_item = item;
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_int>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
ITreeViewItemView
***********************************************************************/

	ITreeViewItemView::ITreeViewItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INodeItemPrimaryTextView(static_cast<__GacUIInternal<INodeItemPrimaryTextView>::InternalObjectType*>((__GacUIInternal<ITreeViewItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ITreeViewItemView::~ITreeViewItemView()
	{
	}
	
	void ITreeViewItemView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		INodeItemPrimaryTextView::ClearInternalObjectReference();
	}
	
	sptr<GuiImageData> ITreeViewItemView::GetNodeImage(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		vl::Ptr<vl::presentation::controls::GuiImageData> _unwrapped_result = __GacUIInternal<ITreeViewItemView>::GetInternalObject(*this)->GetNodeImage(_unwrapped_node);
		sptr<GuiImageData> _wrapped_result = __GacUIInternal<GuiImageData>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString ITreeViewItemView::GetNodeText(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<ITreeViewItemView>::GetInternalObject(*this)->GetNodeText(_unwrapped_node);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	wchar_t const* ITreeViewItemView::get_Identifier()
	{
		wchar_t const* _wrapped_result = vl::presentation::controls::tree::ITreeViewItemView::Identifier;
		return _wrapped_result;
	}
	

/***********************************************************************
List_of_ObjectString_of_wchar_t
***********************************************************************/

	List_of_ObjectString_of_wchar_t::List_of_ObjectString_of_wchar_t(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	List_of_ObjectString_of_wchar_t::~List_of_ObjectString_of_wchar_t()
	{
	}
	
	void List_of_ObjectString_of_wchar_t::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<List_of_ObjectString_of_wchar_t> List_of_ObjectString_of_wchar_t::CreateRptr()
	{
		vl::collections::List<vl::ObjectString<wchar_t>,vl::ObjectString<wchar_t> >* _unwrapped_result = new vl::collections::List<vl::ObjectString<wchar_t>,vl::ObjectString<wchar_t> >();
		return __GacUIInternal<List_of_ObjectString_of_wchar_t>::BuildRptr(_unwrapped_result);
	}
	
	bool List_of_ObjectString_of_wchar_t::Contains(const GacString& item)
	{
		vl::ObjectString<wchar_t> _unwrapped_item = item.Buffer();
		bool _unwrapped_result = __GacUIInternal<List_of_ObjectString_of_wchar_t>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::IndexOf(const GacString& item)
	{
		vl::ObjectString<wchar_t> _unwrapped_item = item.Buffer();
		signed __int32 _unwrapped_result = __GacUIInternal<List_of_ObjectString_of_wchar_t>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::Add(const GacString& item)
	{
		vl::ObjectString<wchar_t> _unwrapped_item = item.Buffer();
		signed __int32 _unwrapped_result = __GacUIInternal<List_of_ObjectString_of_wchar_t>::GetInternalObject(*this)->Add(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::Insert(signed __int32 index, const GacString& item)
	{
		signed __int32 _unwrapped_index = index;
		vl::ObjectString<wchar_t> _unwrapped_item = item.Buffer();
		signed __int32 _unwrapped_result = __GacUIInternal<List_of_ObjectString_of_wchar_t>::GetInternalObject(*this)->Insert(_unwrapped_index, _unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool List_of_ObjectString_of_wchar_t::Remove(const GacString& item)
	{
		vl::ObjectString<wchar_t> _unwrapped_item = item.Buffer();
		bool _unwrapped_result = __GacUIInternal<List_of_ObjectString_of_wchar_t>::GetInternalObject(*this)->Remove(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool List_of_ObjectString_of_wchar_t::Set(signed __int32 index, const GacString& item)
	{
		signed __int32 _unwrapped_index = index;
		vl::ObjectString<wchar_t> _unwrapped_item = item.Buffer();
		bool _unwrapped_result = __GacUIInternal<List_of_ObjectString_of_wchar_t>::GetInternalObject(*this)->Set(_unwrapped_index, _unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	GacString& List_of_ObjectString_of_wchar_t::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::ObjectString<wchar_t>& _unwrapped_result = __GacUIInternal<List_of_ObjectString_of_wchar_t>::GetInternalObject(*this)->operator[](_unwrapped_index);
		GacString& _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
ListViewColumn
***********************************************************************/

	ListViewColumn::ListViewColumn(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	ListViewColumn::~ListViewColumn()
	{
		delete __GacUIInternal<ListViewColumn>::GetInternalObject(*this);
	}
	
	void ListViewColumn::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<ListViewColumn> ListViewColumn::CreateRptr(const GacString& _text, signed __int32 _size)
	{
		vl::ObjectString<wchar_t> _unwrapped__text = _text.Buffer();
		signed __int32 _unwrapped__size = _size;
		vl::presentation::controls::list::ListViewColumn* _unwrapped_result = new vl::presentation::controls::list::ListViewColumn(_unwrapped__text, _unwrapped__size);
		return __GacUIInternal<ListViewColumn>::BuildRptr(_unwrapped_result);
	}
	
	ListViewColumn ListViewColumn::Create(const GacString& _text, signed __int32 _size)
	{
		vl::ObjectString<wchar_t> _unwrapped__text = _text.Buffer();
		signed __int32 _unwrapped__size = _size;
		vl::presentation::controls::list::ListViewColumn _unwrapped_result = vl::presentation::controls::list::ListViewColumn(_unwrapped__text, _unwrapped__size);
		return __GacUIInternal<ListViewColumn>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<ListViewColumn> ListViewColumn::operator=(rptr<ListViewColumn> value)
	{
		vl::presentation::controls::list::ListViewColumn const& _unwrapped_value = *__GacUIInternal<ListViewColumn>::GetInternalObject(value);
		vl::presentation::controls::list::ListViewColumn& _unwrapped_result = __GacUIInternal<ListViewColumn>::GetInternalObject(*this)->operator=(_unwrapped_value);
		rptr<ListViewColumn> _wrapped_result = __GacUIInternal<ListViewColumn>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString ListViewColumn::get_text()
	{
		GacString _wrapped_result = __GacUIInternal<ListViewColumn>::GetInternalObject(*this)->text.Buffer();
		return _wrapped_result;
	}
	
	void ListViewColumn::set_text(GacString value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<ListViewColumn>::GetInternalObject(*this)->text = _unwrapped_value;
	}
	
	signed __int32 ListViewColumn::get_size()
	{
		signed __int32 _wrapped_result = __GacUIInternal<ListViewColumn>::GetInternalObject(*this)->size;
		return _wrapped_result;
	}
	
	void ListViewColumn::set_size(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<ListViewColumn>::GetInternalObject(*this)->size = _unwrapped_value;
	}
	

/***********************************************************************
IList_of_ListViewColumn
***********************************************************************/

	IList_of_ListViewColumn::IList_of_ListViewColumn(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_ListViewColumn::~IList_of_ListViewColumn()
	{
	}
	
	void IList_of_ListViewColumn::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	signed __int32 IList_of_ListViewColumn::Insert(signed __int32 index, sptr<ListViewColumn> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::Ptr<vl::presentation::controls::list::ListViewColumn> _unwrapped_item = __GacUIInternal<ListViewColumn>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IList_of_ListViewColumn>::GetInternalObject(*this)->Insert(_unwrapped_index, _unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool IList_of_ListViewColumn::Set(signed __int32 index, sptr<ListViewColumn> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::Ptr<vl::presentation::controls::list::ListViewColumn> _unwrapped_item = __GacUIInternal<ListViewColumn>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IList_of_ListViewColumn>::GetInternalObject(*this)->Set(_unwrapped_index, _unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
ListViewItem
***********************************************************************/

	ListViewItem::ListViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	ListViewItem::~ListViewItem()
	{
		delete __GacUIInternal<ListViewItem>::GetInternalObject(*this);
	}
	
	void ListViewItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<ListViewItem> ListViewItem::operator=(rptr<ListViewItem> value)
	{
		vl::presentation::controls::list::ListViewItem const& _unwrapped_value = *__GacUIInternal<ListViewItem>::GetInternalObject(value);
		vl::presentation::controls::list::ListViewItem& _unwrapped_result = __GacUIInternal<ListViewItem>::GetInternalObject(*this)->operator=(_unwrapped_value);
		rptr<ListViewItem> _wrapped_result = __GacUIInternal<ListViewItem>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<GuiImageData> ListViewItem::get_smallImage()
	{
		sptr<GuiImageData> _wrapped_result = __GacUIInternal<GuiImageData>::BuildSptr(__GacUIInternal<ListViewItem>::GetInternalObject(*this)->smallImage);
		return _wrapped_result;
	}
	
	void ListViewItem::set_smallImage(sptr<GuiImageData> value)
	{
		vl::Ptr<vl::presentation::controls::GuiImageData> _unwrapped_value = __GacUIInternal<GuiImageData>::GetInternalObject(value);
		__GacUIInternal<ListViewItem>::GetInternalObject(*this)->smallImage = _unwrapped_value;
	}
	
	sptr<GuiImageData> ListViewItem::get_largeImage()
	{
		sptr<GuiImageData> _wrapped_result = __GacUIInternal<GuiImageData>::BuildSptr(__GacUIInternal<ListViewItem>::GetInternalObject(*this)->largeImage);
		return _wrapped_result;
	}
	
	void ListViewItem::set_largeImage(sptr<GuiImageData> value)
	{
		vl::Ptr<vl::presentation::controls::GuiImageData> _unwrapped_value = __GacUIInternal<GuiImageData>::GetInternalObject(value);
		__GacUIInternal<ListViewItem>::GetInternalObject(*this)->largeImage = _unwrapped_value;
	}
	
	GacString ListViewItem::get_text()
	{
		GacString _wrapped_result = __GacUIInternal<ListViewItem>::GetInternalObject(*this)->text.Buffer();
		return _wrapped_result;
	}
	
	void ListViewItem::set_text(GacString value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<ListViewItem>::GetInternalObject(*this)->text = _unwrapped_value;
	}
	
	rptr<List_of_ObjectString_of_wchar_t> ListViewItem::get_subItems()
	{
		rptr<List_of_ObjectString_of_wchar_t> _wrapped_result = __GacUIInternal<List_of_ObjectString_of_wchar_t>::BuildRptr(&__GacUIInternal<ListViewItem>::GetInternalObject(*this)->subItems);
		return _wrapped_result;
	}
	

/***********************************************************************
IList_of_ListViewItem
***********************************************************************/

	IList_of_ListViewItem::IList_of_ListViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_ListViewItem::~IList_of_ListViewItem()
	{
	}
	
	void IList_of_ListViewItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	signed __int32 IList_of_ListViewItem::Insert(signed __int32 index, sptr<ListViewItem> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::Ptr<vl::presentation::controls::list::ListViewItem> _unwrapped_item = __GacUIInternal<ListViewItem>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IList_of_ListViewItem>::GetInternalObject(*this)->Insert(_unwrapped_index, _unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool IList_of_ListViewItem::Set(signed __int32 index, sptr<ListViewItem> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::Ptr<vl::presentation::controls::list::ListViewItem> _unwrapped_item = __GacUIInternal<ListViewItem>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IList_of_ListViewItem>::GetInternalObject(*this)->Set(_unwrapped_index, _unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
Margin
***********************************************************************/

	Margin::Margin(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Margin::~Margin()
	{
		delete __GacUIInternal<Margin>::GetInternalObject(*this);
	}
	
	void Margin::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<Margin> Margin::CreateRptr(signed __int32 _left, signed __int32 _top, signed __int32 _right, signed __int32 _bottom)
	{
		signed __int32 _unwrapped__left = _left;
		signed __int32 _unwrapped__top = _top;
		signed __int32 _unwrapped__right = _right;
		signed __int32 _unwrapped__bottom = _bottom;
		vl::presentation::Margin* _unwrapped_result = new vl::presentation::Margin(_unwrapped__left, _unwrapped__top, _unwrapped__right, _unwrapped__bottom);
		return __GacUIInternal<Margin>::BuildRptr(_unwrapped_result);
	}
	
	Margin Margin::Create(signed __int32 _left, signed __int32 _top, signed __int32 _right, signed __int32 _bottom)
	{
		signed __int32 _unwrapped__left = _left;
		signed __int32 _unwrapped__top = _top;
		signed __int32 _unwrapped__right = _right;
		signed __int32 _unwrapped__bottom = _bottom;
		vl::presentation::Margin _unwrapped_result = vl::presentation::Margin(_unwrapped__left, _unwrapped__top, _unwrapped__right, _unwrapped__bottom);
		return __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<Margin> Margin::CreateRptr()
	{
		vl::presentation::Margin* _unwrapped_result = new vl::presentation::Margin();
		return __GacUIInternal<Margin>::BuildRptr(_unwrapped_result);
	}
	
	Margin Margin::Create()
	{
		vl::presentation::Margin _unwrapped_result = vl::presentation::Margin();
		return __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
	}
	
	bool Margin::operator==(Margin margin)
	{
		vl::presentation::Margin _unwrapped_margin = *__GacUIInternal<Margin>::GetInternalObject(margin);
		bool _unwrapped_result = __GacUIInternal<Margin>::GetInternalObject(*this)->operator==(_unwrapped_margin);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Margin::operator!=(Margin margin)
	{
		vl::presentation::Margin _unwrapped_margin = *__GacUIInternal<Margin>::GetInternalObject(margin);
		bool _unwrapped_result = __GacUIInternal<Margin>::GetInternalObject(*this)->operator!=(_unwrapped_margin);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Margin::get_left()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Margin>::GetInternalObject(*this)->left;
		return _wrapped_result;
	}
	
	void Margin::set_left(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Margin>::GetInternalObject(*this)->left = _unwrapped_value;
	}
	
	signed __int32 Margin::get_top()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Margin>::GetInternalObject(*this)->top;
		return _wrapped_result;
	}
	
	void Margin::set_top(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Margin>::GetInternalObject(*this)->top = _unwrapped_value;
	}
	
	signed __int32 Margin::get_right()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Margin>::GetInternalObject(*this)->right;
		return _wrapped_result;
	}
	
	void Margin::set_right(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Margin>::GetInternalObject(*this)->right = _unwrapped_value;
	}
	
	signed __int32 Margin::get_bottom()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Margin>::GetInternalObject(*this)->bottom;
		return _wrapped_result;
	}
	
	void Margin::set_bottom(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Margin>::GetInternalObject(*this)->bottom = _unwrapped_value;
	}
	

/***********************************************************************
MemoryNodeProvider
***********************************************************************/

	MemoryNodeProvider::MemoryNodeProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INodeProvider(static_cast<__GacUIInternal<INodeProvider>::InternalObjectType*>((__GacUIInternal<MemoryNodeProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	MemoryNodeProvider::~MemoryNodeProvider()
	{
	}
	
	void MemoryNodeProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		INodeProvider::ClearInternalObjectReference();
	}
	
	rptr<MemoryNodeProvider> MemoryNodeProvider::CreateRptr(sptr<DescriptableObject> _data)
	{
		vl::Ptr<vl::presentation::DescriptableObject> _unwrapped__data = __GacUIInternal<DescriptableObject>::GetInternalObject(_data);
		vl::presentation::controls::tree::MemoryNodeProvider* _unwrapped_result = new vl::presentation::controls::tree::MemoryNodeProvider(_unwrapped__data);
		return __GacUIInternal<MemoryNodeProvider>::BuildRptr(_unwrapped_result);
	}
	
	rptr<MemoryNodeProvider> MemoryNodeProvider::CreateRptr()
	{
		vl::presentation::controls::tree::MemoryNodeProvider* _unwrapped_result = new vl::presentation::controls::tree::MemoryNodeProvider();
		return __GacUIInternal<MemoryNodeProvider>::BuildRptr(_unwrapped_result);
	}
	
	void MemoryNodeProvider::NotifyDataModified()
	{
		__GacUIInternal<MemoryNodeProvider>::GetInternalObject(*this)->NotifyDataModified();
	}
	
	rptr<IList_of_MemoryNodeProvider> MemoryNodeProvider::Children()
	{
		vl::collections::IList<vl::Ptr<vl::presentation::controls::tree::MemoryNodeProvider>,vl::presentation::controls::tree::MemoryNodeProvider *>& _unwrapped_result = __GacUIInternal<MemoryNodeProvider>::GetInternalObject(*this)->Children();
		rptr<IList_of_MemoryNodeProvider> _wrapped_result = __GacUIInternal<IList_of_MemoryNodeProvider>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<DescriptableObject> MemoryNodeProvider::GetData()
	{
		vl::Ptr<vl::presentation::DescriptableObject> _unwrapped_result = __GacUIInternal<MemoryNodeProvider>::GetInternalObject(*this)->GetData();
		sptr<DescriptableObject> _wrapped_result = __GacUIInternal<DescriptableObject>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void MemoryNodeProvider::SetData(sptr<DescriptableObject> value)
	{
		vl::Ptr<vl::presentation::DescriptableObject> _unwrapped_value = __GacUIInternal<DescriptableObject>::GetInternalObject(value);
		__GacUIInternal<MemoryNodeProvider>::GetInternalObject(*this)->SetData(_unwrapped_value);
	}
	

/***********************************************************************
NativeWindowCharInfo
***********************************************************************/

	NativeWindowCharInfo::NativeWindowCharInfo(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	NativeWindowCharInfo::~NativeWindowCharInfo()
	{
		delete __GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this);
	}
	
	void NativeWindowCharInfo::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	wchar_t NativeWindowCharInfo::get_code()
	{
		wchar_t _wrapped_result = __GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->code;
		return _wrapped_result;
	}
	
	void NativeWindowCharInfo::set_code(wchar_t value)
	{
		wchar_t _unwrapped_value = value;
		__GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->code = _unwrapped_value;
	}
	
	bool NativeWindowCharInfo::get_ctrl()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->ctrl;
		return _wrapped_result;
	}
	
	void NativeWindowCharInfo::set_ctrl(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->ctrl = _unwrapped_value;
	}
	
	bool NativeWindowCharInfo::get_shift()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->shift;
		return _wrapped_result;
	}
	
	void NativeWindowCharInfo::set_shift(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->shift = _unwrapped_value;
	}
	
	bool NativeWindowCharInfo::get_alt()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->alt;
		return _wrapped_result;
	}
	
	void NativeWindowCharInfo::set_alt(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->alt = _unwrapped_value;
	}
	
	bool NativeWindowCharInfo::get_capslock()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->capslock;
		return _wrapped_result;
	}
	
	void NativeWindowCharInfo::set_capslock(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this)->capslock = _unwrapped_value;
	}
	

/***********************************************************************
GuiCharEventArgs
***********************************************************************/

	GuiCharEventArgs::GuiCharEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiEventArgs(static_cast<__GacUIInternal<GuiEventArgs>::InternalObjectType*>((__GacUIInternal<GuiCharEventArgs>::InternalObjectType*)__internal_object_reference_input))
	    ,NativeWindowCharInfo(static_cast<__GacUIInternal<NativeWindowCharInfo>::InternalObjectType*>((__GacUIInternal<GuiCharEventArgs>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiCharEventArgs::~GuiCharEventArgs()
	{
		delete __GacUIInternal<GuiCharEventArgs>::GetInternalObject(*this);
	}
	
	void GuiCharEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiEventArgs::ClearInternalObjectReference();
		NativeWindowCharInfo::ClearInternalObjectReference();
	}
	
	rptr<GuiCharEventArgs> GuiCharEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiCharEventArgs* _unwrapped_result = new vl::presentation::elements::GuiCharEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiCharEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiCharEventArgs GuiCharEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiCharEventArgs _unwrapped_result = vl::presentation::elements::GuiCharEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiCharEventArgs>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<GuiCharEventArgs> GuiCharEventArgs::CreateRptr()
	{
		vl::presentation::elements::GuiCharEventArgs* _unwrapped_result = new vl::presentation::elements::GuiCharEventArgs();
		return __GacUIInternal<GuiCharEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiCharEventArgs GuiCharEventArgs::Create()
	{
		vl::presentation::elements::GuiCharEventArgs _unwrapped_result = vl::presentation::elements::GuiCharEventArgs();
		return __GacUIInternal<GuiCharEventArgs>::BuildCopy(&_unwrapped_result);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiCharEventArgs
***********************************************************************/

	GuiGraphicsEvent_of_GuiCharEventArgs::GuiGraphicsEvent_of_GuiCharEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiCharEventArgs::~GuiGraphicsEvent_of_GuiCharEventArgs()
	{
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiCharEventArgs> GuiGraphicsEvent_of_GuiCharEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiCharEventArgs>* _unwrapped_result = new vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiCharEventArgs>(_unwrapped__sender);
		return __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiGraphicsEvent_of_GuiCharEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiCharEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>::GetInternalObject(*this)->Attach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsEvent_of_GuiCharEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiCharEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>::GetInternalObject(*this)->Detach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::Execute(rptr<GuiCharEventArgs> argument)
	{
		vl::presentation::elements::GuiCharEventArgs& _unwrapped_argument = *__GacUIInternal<GuiCharEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>::GetInternalObject(*this)->Execute(_unwrapped_argument);
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiCharEventArgs::GetAssociatedComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>::GetInternalObject(*this)->GetAssociatedComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		__GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>::GetInternalObject(*this)->SetAssociatedComposition(_unwrapped__sender);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler
***********************************************************************/

	GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, rptr<GuiCharEventArgs> argument)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(sender);
		vl::presentation::elements::GuiCharEventArgs& _unwrapped_argument = *__GacUIInternal<GuiCharEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler>::GetInternalObject(*this)->Execute(_unwrapped_sender, _unwrapped_argument);
	}
	

/***********************************************************************
NativeWindowKeyInfo
***********************************************************************/

	NativeWindowKeyInfo::NativeWindowKeyInfo(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	NativeWindowKeyInfo::~NativeWindowKeyInfo()
	{
		delete __GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this);
	}
	
	void NativeWindowKeyInfo::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	signed __int32 NativeWindowKeyInfo::get_code()
	{
		signed __int32 _wrapped_result = __GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->code;
		return _wrapped_result;
	}
	
	void NativeWindowKeyInfo::set_code(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->code = _unwrapped_value;
	}
	
	bool NativeWindowKeyInfo::get_ctrl()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->ctrl;
		return _wrapped_result;
	}
	
	void NativeWindowKeyInfo::set_ctrl(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->ctrl = _unwrapped_value;
	}
	
	bool NativeWindowKeyInfo::get_shift()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->shift;
		return _wrapped_result;
	}
	
	void NativeWindowKeyInfo::set_shift(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->shift = _unwrapped_value;
	}
	
	bool NativeWindowKeyInfo::get_alt()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->alt;
		return _wrapped_result;
	}
	
	void NativeWindowKeyInfo::set_alt(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->alt = _unwrapped_value;
	}
	
	bool NativeWindowKeyInfo::get_capslock()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->capslock;
		return _wrapped_result;
	}
	
	void NativeWindowKeyInfo::set_capslock(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this)->capslock = _unwrapped_value;
	}
	

/***********************************************************************
GuiKeyEventArgs
***********************************************************************/

	GuiKeyEventArgs::GuiKeyEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiEventArgs(static_cast<__GacUIInternal<GuiEventArgs>::InternalObjectType*>((__GacUIInternal<GuiKeyEventArgs>::InternalObjectType*)__internal_object_reference_input))
	    ,NativeWindowKeyInfo(static_cast<__GacUIInternal<NativeWindowKeyInfo>::InternalObjectType*>((__GacUIInternal<GuiKeyEventArgs>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiKeyEventArgs::~GuiKeyEventArgs()
	{
		delete __GacUIInternal<GuiKeyEventArgs>::GetInternalObject(*this);
	}
	
	void GuiKeyEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiEventArgs::ClearInternalObjectReference();
		NativeWindowKeyInfo::ClearInternalObjectReference();
	}
	
	rptr<GuiKeyEventArgs> GuiKeyEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiKeyEventArgs* _unwrapped_result = new vl::presentation::elements::GuiKeyEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiKeyEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiKeyEventArgs GuiKeyEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiKeyEventArgs _unwrapped_result = vl::presentation::elements::GuiKeyEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiKeyEventArgs>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<GuiKeyEventArgs> GuiKeyEventArgs::CreateRptr()
	{
		vl::presentation::elements::GuiKeyEventArgs* _unwrapped_result = new vl::presentation::elements::GuiKeyEventArgs();
		return __GacUIInternal<GuiKeyEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiKeyEventArgs GuiKeyEventArgs::Create()
	{
		vl::presentation::elements::GuiKeyEventArgs _unwrapped_result = vl::presentation::elements::GuiKeyEventArgs();
		return __GacUIInternal<GuiKeyEventArgs>::BuildCopy(&_unwrapped_result);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiKeyEventArgs
***********************************************************************/

	GuiGraphicsEvent_of_GuiKeyEventArgs::GuiGraphicsEvent_of_GuiKeyEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs::~GuiGraphicsEvent_of_GuiKeyEventArgs()
	{
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEvent_of_GuiKeyEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiKeyEventArgs>* _unwrapped_result = new vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiKeyEventArgs>(_unwrapped__sender);
		return __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiGraphicsEvent_of_GuiKeyEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiKeyEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::GetInternalObject(*this)->Attach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsEvent_of_GuiKeyEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiKeyEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::GetInternalObject(*this)->Detach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::Execute(rptr<GuiKeyEventArgs> argument)
	{
		vl::presentation::elements::GuiKeyEventArgs& _unwrapped_argument = *__GacUIInternal<GuiKeyEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::GetInternalObject(*this)->Execute(_unwrapped_argument);
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiKeyEventArgs::GetAssociatedComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::GetInternalObject(*this)->GetAssociatedComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		__GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::GetInternalObject(*this)->SetAssociatedComposition(_unwrapped__sender);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler
***********************************************************************/

	GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, rptr<GuiKeyEventArgs> argument)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(sender);
		vl::presentation::elements::GuiKeyEventArgs& _unwrapped_argument = *__GacUIInternal<GuiKeyEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler>::GetInternalObject(*this)->Execute(_unwrapped_sender, _unwrapped_argument);
	}
	

/***********************************************************************
NativeWindowMouseInfo
***********************************************************************/

	NativeWindowMouseInfo::NativeWindowMouseInfo(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	NativeWindowMouseInfo::~NativeWindowMouseInfo()
	{
		delete __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this);
	}
	
	void NativeWindowMouseInfo::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool NativeWindowMouseInfo::get_ctrl()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->ctrl;
		return _wrapped_result;
	}
	
	void NativeWindowMouseInfo::set_ctrl(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->ctrl = _unwrapped_value;
	}
	
	bool NativeWindowMouseInfo::get_shift()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->shift;
		return _wrapped_result;
	}
	
	void NativeWindowMouseInfo::set_shift(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->shift = _unwrapped_value;
	}
	
	bool NativeWindowMouseInfo::get_left()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->left;
		return _wrapped_result;
	}
	
	void NativeWindowMouseInfo::set_left(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->left = _unwrapped_value;
	}
	
	bool NativeWindowMouseInfo::get_middle()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->middle;
		return _wrapped_result;
	}
	
	void NativeWindowMouseInfo::set_middle(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->middle = _unwrapped_value;
	}
	
	bool NativeWindowMouseInfo::get_right()
	{
		bool _wrapped_result = __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->right;
		return _wrapped_result;
	}
	
	void NativeWindowMouseInfo::set_right(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->right = _unwrapped_value;
	}
	
	signed __int32 NativeWindowMouseInfo::get_x()
	{
		signed __int32 _wrapped_result = __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->x;
		return _wrapped_result;
	}
	
	void NativeWindowMouseInfo::set_x(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->x = _unwrapped_value;
	}
	
	signed __int32 NativeWindowMouseInfo::get_y()
	{
		signed __int32 _wrapped_result = __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->y;
		return _wrapped_result;
	}
	
	void NativeWindowMouseInfo::set_y(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->y = _unwrapped_value;
	}
	
	signed __int32 NativeWindowMouseInfo::get_wheel()
	{
		signed __int32 _wrapped_result = __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->wheel;
		return _wrapped_result;
	}
	
	void NativeWindowMouseInfo::set_wheel(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this)->wheel = _unwrapped_value;
	}
	

/***********************************************************************
GuiMouseEventArgs
***********************************************************************/

	GuiMouseEventArgs::GuiMouseEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiEventArgs(static_cast<__GacUIInternal<GuiEventArgs>::InternalObjectType*>((__GacUIInternal<GuiMouseEventArgs>::InternalObjectType*)__internal_object_reference_input))
	    ,NativeWindowMouseInfo(static_cast<__GacUIInternal<NativeWindowMouseInfo>::InternalObjectType*>((__GacUIInternal<GuiMouseEventArgs>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMouseEventArgs::~GuiMouseEventArgs()
	{
		delete __GacUIInternal<GuiMouseEventArgs>::GetInternalObject(*this);
	}
	
	void GuiMouseEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiEventArgs::ClearInternalObjectReference();
		NativeWindowMouseInfo::ClearInternalObjectReference();
	}
	
	rptr<GuiMouseEventArgs> GuiMouseEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiMouseEventArgs* _unwrapped_result = new vl::presentation::elements::GuiMouseEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiMouseEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiMouseEventArgs GuiMouseEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		vl::presentation::elements::GuiMouseEventArgs _unwrapped_result = vl::presentation::elements::GuiMouseEventArgs(_unwrapped_composition);
		return __GacUIInternal<GuiMouseEventArgs>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<GuiMouseEventArgs> GuiMouseEventArgs::CreateRptr()
	{
		vl::presentation::elements::GuiMouseEventArgs* _unwrapped_result = new vl::presentation::elements::GuiMouseEventArgs();
		return __GacUIInternal<GuiMouseEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	GuiMouseEventArgs GuiMouseEventArgs::Create()
	{
		vl::presentation::elements::GuiMouseEventArgs _unwrapped_result = vl::presentation::elements::GuiMouseEventArgs();
		return __GacUIInternal<GuiMouseEventArgs>::BuildCopy(&_unwrapped_result);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiMouseEventArgs
***********************************************************************/

	GuiGraphicsEvent_of_GuiMouseEventArgs::GuiGraphicsEvent_of_GuiMouseEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs::~GuiGraphicsEvent_of_GuiMouseEventArgs()
	{
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEvent_of_GuiMouseEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiMouseEventArgs>* _unwrapped_result = new vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiMouseEventArgs>(_unwrapped__sender);
		return __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiGraphicsEvent_of_GuiMouseEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiMouseEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::GetInternalObject(*this)->Attach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsEvent_of_GuiMouseEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> handler)
	{
		vl::Ptr<vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiMouseEventArgs>::IHandler> _unwrapped_handler = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler>::GetInternalObject(handler);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::GetInternalObject(*this)->Detach(_unwrapped_handler);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::Execute(rptr<GuiMouseEventArgs> argument)
	{
		vl::presentation::elements::GuiMouseEventArgs& _unwrapped_argument = *__GacUIInternal<GuiMouseEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::GetInternalObject(*this)->Execute(_unwrapped_argument);
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiMouseEventArgs::GetAssociatedComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::GetInternalObject(*this)->GetAssociatedComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		__GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::GetInternalObject(*this)->SetAssociatedComposition(_unwrapped__sender);
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler
***********************************************************************/

	GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, rptr<GuiMouseEventArgs> argument)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(sender);
		vl::presentation::elements::GuiMouseEventArgs& _unwrapped_argument = *__GacUIInternal<GuiMouseEventArgs>::GetInternalObject(argument);
		__GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler>::GetInternalObject(*this)->Execute(_unwrapped_sender, _unwrapped_argument);
	}
	

/***********************************************************************
GuiGraphicsEventReceiver
***********************************************************************/

	GuiGraphicsEventReceiver::GuiGraphicsEventReceiver(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEventReceiver::~GuiGraphicsEventReceiver()
	{
	}
	
	void GuiGraphicsEventReceiver::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiGraphicsEventReceiver> GuiGraphicsEventReceiver::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__sender = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_sender);
		vl::presentation::elements::GuiGraphicsEventReceiver* _unwrapped_result = new vl::presentation::elements::GuiGraphicsEventReceiver(_unwrapped__sender);
		return __GacUIInternal<GuiGraphicsEventReceiver>::BuildRptr(_unwrapped_result);
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEventReceiver::GetAssociatedComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->GetAssociatedComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_leftButtonDown()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->leftButtonDown);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_leftButtonUp()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->leftButtonUp);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_leftButtonDoubleClick()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->leftButtonDoubleClick);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_middleButtonDown()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->middleButtonDown);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_middleButtonUp()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->middleButtonUp);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_middleButtonDoubleClick()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->middleButtonDoubleClick);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_rightButtonDown()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->rightButtonDown);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_rightButtonUp()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->rightButtonUp);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_rightButtonDoubleClick()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->rightButtonDoubleClick);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_horizontalWheel()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->horizontalWheel);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_verticalWheel()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->verticalWheel);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEventReceiver::on_mouseMove()
	{
		rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->mouseMove);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEventReceiver::on_mouseEnter()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->mouseEnter);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEventReceiver::on_mouseLeave()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->mouseLeave);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEventReceiver::on_previewKey()
	{
		rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->previewKey);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEventReceiver::on_keyDown()
	{
		rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->keyDown);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEventReceiver::on_keyUp()
	{
		rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->keyUp);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEventReceiver::on_systemKeyDown()
	{
		rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->systemKeyDown);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEventReceiver::on_systemKeyUp()
	{
		rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->systemKeyUp);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiCharEventArgs> GuiGraphicsEventReceiver::on_previewCharInput()
	{
		rptr<GuiGraphicsEvent_of_GuiCharEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->previewCharInput);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiCharEventArgs> GuiGraphicsEventReceiver::on_charInput()
	{
		rptr<GuiGraphicsEvent_of_GuiCharEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->charInput);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEventReceiver::on_gotFocus()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->gotFocus);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEventReceiver::on_lostFocus()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->lostFocus);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEventReceiver::on_caretNotify()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiGraphicsEventReceiver>::GetInternalObject(*this)->caretNotify);
		return _wrapped_result;
	}
	

/***********************************************************************
NodeRootProviderBase
***********************************************************************/

	NodeRootProviderBase::NodeRootProviderBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INodeRootProvider(static_cast<__GacUIInternal<INodeRootProvider>::InternalObjectType*>((__GacUIInternal<NodeRootProviderBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	NodeRootProviderBase::~NodeRootProviderBase()
	{
	}
	
	void NodeRootProviderBase::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		INodeRootProvider::ClearInternalObjectReference();
	}
	
	rptr<NodeRootProviderBase> NodeRootProviderBase::CreateRptr()
	{
		vl::presentation::controls::tree::NodeRootProviderBase* _unwrapped_result = new vl::presentation::controls::tree::NodeRootProviderBase();
		return __GacUIInternal<NodeRootProviderBase>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
MemoryNodeRootProvider
***********************************************************************/

	MemoryNodeRootProvider::MemoryNodeRootProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,MemoryNodeProvider(static_cast<__GacUIInternal<MemoryNodeProvider>::InternalObjectType*>((__GacUIInternal<MemoryNodeRootProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,NodeRootProviderBase(static_cast<__GacUIInternal<NodeRootProviderBase>::InternalObjectType*>((__GacUIInternal<MemoryNodeRootProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	MemoryNodeRootProvider::~MemoryNodeRootProvider()
	{
	}
	
	void MemoryNodeRootProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		MemoryNodeProvider::ClearInternalObjectReference();
		NodeRootProviderBase::ClearInternalObjectReference();
	}
	
	rptr<MemoryNodeRootProvider> MemoryNodeRootProvider::CreateRptr()
	{
		vl::presentation::controls::tree::MemoryNodeRootProvider* _unwrapped_result = new vl::presentation::controls::tree::MemoryNodeRootProvider();
		return __GacUIInternal<MemoryNodeRootProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Point
***********************************************************************/

	Point::Point(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Point::~Point()
	{
		delete __GacUIInternal<Point>::GetInternalObject(*this);
	}
	
	void Point::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<Point> Point::CreateRptr(signed __int32 _x, signed __int32 _y)
	{
		signed __int32 _unwrapped__x = _x;
		signed __int32 _unwrapped__y = _y;
		vl::presentation::Point* _unwrapped_result = new vl::presentation::Point(_unwrapped__x, _unwrapped__y);
		return __GacUIInternal<Point>::BuildRptr(_unwrapped_result);
	}
	
	Point Point::Create(signed __int32 _x, signed __int32 _y)
	{
		signed __int32 _unwrapped__x = _x;
		signed __int32 _unwrapped__y = _y;
		vl::presentation::Point _unwrapped_result = vl::presentation::Point(_unwrapped__x, _unwrapped__y);
		return __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<Point> Point::CreateRptr()
	{
		vl::presentation::Point* _unwrapped_result = new vl::presentation::Point();
		return __GacUIInternal<Point>::BuildRptr(_unwrapped_result);
	}
	
	Point Point::Create()
	{
		vl::presentation::Point _unwrapped_result = vl::presentation::Point();
		return __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
	}
	
	bool Point::operator==(Point point)
	{
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		bool _unwrapped_result = __GacUIInternal<Point>::GetInternalObject(*this)->operator==(_unwrapped_point);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Point::operator!=(Point point)
	{
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		bool _unwrapped_result = __GacUIInternal<Point>::GetInternalObject(*this)->operator!=(_unwrapped_point);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Point::get_x()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Point>::GetInternalObject(*this)->x;
		return _wrapped_result;
	}
	
	void Point::set_x(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Point>::GetInternalObject(*this)->x = _unwrapped_value;
	}
	
	signed __int32 Point::get_y()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Point>::GetInternalObject(*this)->y;
		return _wrapped_result;
	}
	
	void Point::set_y(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Point>::GetInternalObject(*this)->y = _unwrapped_value;
	}
	

/***********************************************************************
INativeControllerListener
***********************************************************************/

	INativeControllerListener::INativeControllerListener(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeControllerListener::~INativeControllerListener()
	{
	}
	
	void INativeControllerListener::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<INativeControllerListener> INativeControllerListener::CreateRptr()
	{
		vl::presentation::INativeControllerListener* _unwrapped_result = new vl::presentation::INativeControllerListener();
		return __GacUIInternal<INativeControllerListener>::BuildRptr(_unwrapped_result);
	}
	
	void INativeControllerListener::LeftButtonDown(Point position)
	{
		vl::presentation::Point _unwrapped_position = *__GacUIInternal<Point>::GetInternalObject(position);
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->LeftButtonDown(_unwrapped_position);
	}
	
	void INativeControllerListener::LeftButtonUp(Point position)
	{
		vl::presentation::Point _unwrapped_position = *__GacUIInternal<Point>::GetInternalObject(position);
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->LeftButtonUp(_unwrapped_position);
	}
	
	void INativeControllerListener::RightButtonDown(Point position)
	{
		vl::presentation::Point _unwrapped_position = *__GacUIInternal<Point>::GetInternalObject(position);
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->RightButtonDown(_unwrapped_position);
	}
	
	void INativeControllerListener::RightButtonUp(Point position)
	{
		vl::presentation::Point _unwrapped_position = *__GacUIInternal<Point>::GetInternalObject(position);
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->RightButtonUp(_unwrapped_position);
	}
	
	void INativeControllerListener::MouseMoving(Point position)
	{
		vl::presentation::Point _unwrapped_position = *__GacUIInternal<Point>::GetInternalObject(position);
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->MouseMoving(_unwrapped_position);
	}
	
	void INativeControllerListener::GlobalTimer()
	{
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->GlobalTimer();
	}
	
	void INativeControllerListener::ClipboardUpdated()
	{
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->ClipboardUpdated();
	}
	
	void INativeControllerListener::NativeWindowCreated(rptr<INativeWindow> window)
	{
		vl::presentation::INativeWindow* _unwrapped_window = __GacUIInternal<INativeWindow>::GetInternalObject(window);
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->NativeWindowCreated(_unwrapped_window);
	}
	
	void INativeControllerListener::NativeWindowDestroying(rptr<INativeWindow> window)
	{
		vl::presentation::INativeWindow* _unwrapped_window = __GacUIInternal<INativeWindow>::GetInternalObject(window);
		__GacUIInternal<INativeControllerListener>::GetInternalObject(*this)->NativeWindowDestroying(_unwrapped_window);
	}
	

/***********************************************************************
INativeCallbackService
***********************************************************************/

	INativeCallbackService::INativeCallbackService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeCallbackService::~INativeCallbackService()
	{
	}
	
	void INativeCallbackService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool INativeCallbackService::InstallListener(rptr<INativeControllerListener> listener)
	{
		vl::presentation::INativeControllerListener* _unwrapped_listener = __GacUIInternal<INativeControllerListener>::GetInternalObject(listener);
		bool _unwrapped_result = __GacUIInternal<INativeCallbackService>::GetInternalObject(*this)->InstallListener(_unwrapped_listener);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INativeCallbackService::UninstallListener(rptr<INativeControllerListener> listener)
	{
		vl::presentation::INativeControllerListener* _unwrapped_listener = __GacUIInternal<INativeControllerListener>::GetInternalObject(listener);
		bool _unwrapped_result = __GacUIInternal<INativeCallbackService>::GetInternalObject(*this)->UninstallListener(_unwrapped_listener);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
INativeWindowService
***********************************************************************/

	INativeWindowService::INativeWindowService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeWindowService::~INativeWindowService()
	{
	}
	
	void INativeWindowService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<INativeWindow> INativeWindowService::CreateNativeWindow()
	{
		vl::presentation::INativeWindow* _unwrapped_result = __GacUIInternal<INativeWindowService>::GetInternalObject(*this)->CreateNativeWindow();
		rptr<INativeWindow> _wrapped_result = __GacUIInternal<INativeWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void INativeWindowService::DestroyNativeWindow(rptr<INativeWindow> window)
	{
		vl::presentation::INativeWindow* _unwrapped_window = __GacUIInternal<INativeWindow>::GetInternalObject(window);
		__GacUIInternal<INativeWindowService>::GetInternalObject(*this)->DestroyNativeWindow(_unwrapped_window);
	}
	
	rptr<INativeWindow> INativeWindowService::GetWindow(Point location)
	{
		vl::presentation::Point _unwrapped_location = *__GacUIInternal<Point>::GetInternalObject(location);
		vl::presentation::INativeWindow* _unwrapped_result = __GacUIInternal<INativeWindowService>::GetInternalObject(*this)->GetWindow(_unwrapped_location);
		rptr<INativeWindow> _wrapped_result = __GacUIInternal<INativeWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void INativeWindowService::Run(rptr<INativeWindow> window)
	{
		vl::presentation::INativeWindow* _unwrapped_window = __GacUIInternal<INativeWindow>::GetInternalObject(window);
		__GacUIInternal<INativeWindowService>::GetInternalObject(*this)->Run(_unwrapped_window);
	}
	
	rptr<INativeWindow> INativeWindowService::GetMainWindow()
	{
		vl::presentation::INativeWindow* _unwrapped_result = __GacUIInternal<INativeWindowService>::GetInternalObject(*this)->GetMainWindow();
		rptr<INativeWindow> _wrapped_result = __GacUIInternal<INativeWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
Size
***********************************************************************/

	Size::Size(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Size::~Size()
	{
		delete __GacUIInternal<Size>::GetInternalObject(*this);
	}
	
	void Size::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<Size> Size::CreateRptr(signed __int32 _x, signed __int32 _y)
	{
		signed __int32 _unwrapped__x = _x;
		signed __int32 _unwrapped__y = _y;
		vl::presentation::Size* _unwrapped_result = new vl::presentation::Size(_unwrapped__x, _unwrapped__y);
		return __GacUIInternal<Size>::BuildRptr(_unwrapped_result);
	}
	
	Size Size::Create(signed __int32 _x, signed __int32 _y)
	{
		signed __int32 _unwrapped__x = _x;
		signed __int32 _unwrapped__y = _y;
		vl::presentation::Size _unwrapped_result = vl::presentation::Size(_unwrapped__x, _unwrapped__y);
		return __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<Size> Size::CreateRptr()
	{
		vl::presentation::Size* _unwrapped_result = new vl::presentation::Size();
		return __GacUIInternal<Size>::BuildRptr(_unwrapped_result);
	}
	
	Size Size::Create()
	{
		vl::presentation::Size _unwrapped_result = vl::presentation::Size();
		return __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
	}
	
	bool Size::operator==(Size size)
	{
		vl::presentation::Size _unwrapped_size = *__GacUIInternal<Size>::GetInternalObject(size);
		bool _unwrapped_result = __GacUIInternal<Size>::GetInternalObject(*this)->operator==(_unwrapped_size);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Size::operator!=(Size size)
	{
		vl::presentation::Size _unwrapped_size = *__GacUIInternal<Size>::GetInternalObject(size);
		bool _unwrapped_result = __GacUIInternal<Size>::GetInternalObject(*this)->operator!=(_unwrapped_size);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Size::get_x()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Size>::GetInternalObject(*this)->x;
		return _wrapped_result;
	}
	
	void Size::set_x(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Size>::GetInternalObject(*this)->x = _unwrapped_value;
	}
	
	signed __int32 Size::get_y()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Size>::GetInternalObject(*this)->y;
		return _wrapped_result;
	}
	
	void Size::set_y(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Size>::GetInternalObject(*this)->y = _unwrapped_value;
	}
	

/***********************************************************************
GuiPolygonElement
***********************************************************************/

	GuiPolygonElement::GuiPolygonElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiPolygonElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiPolygonElement::~GuiPolygonElement()
	{
	}
	
	void GuiPolygonElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	rptr<Point> GuiPolygonElement::GetPoint(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::Point const& _unwrapped_result = __GacUIInternal<GuiPolygonElement>::GetInternalObject(*this)->GetPoint(_unwrapped_index);
		rptr<Point> _wrapped_result = __GacUIInternal<Point>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiPolygonElement::SetPoints(Point const* p, signed __int32 count)
	{
		vl::collections::Array<vl::presentation::Point> _unwrapped_points(count);
		for(int i=0;i<count;i++)
		{
			_unwrapped_points[i] = *__GacUIInternal<Point>::GetInternalObject(p[i]);
		}
		throw 0;
	}
	
	rptr<GuiPolygonElement> GuiPolygonElement::Create()
	{
		vl::presentation::elements::GuiPolygonElement* _unwrapped_result = vl::presentation::elements::GuiPolygonElement::Create();
		rptr<GuiPolygonElement> _wrapped_result = __GacUIInternal<GuiPolygonElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Size GuiPolygonElement::GetSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiPolygonElement>::GetInternalObject(*this)->GetSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiPolygonElement::SetSize(Size value)
	{
		vl::presentation::Size _unwrapped_value = *__GacUIInternal<Size>::GetInternalObject(value);
		__GacUIInternal<GuiPolygonElement>::GetInternalObject(*this)->SetSize(_unwrapped_value);
	}
	
	signed __int32 GuiPolygonElement::GetPointCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiPolygonElement>::GetInternalObject(*this)->GetPointCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	Color GuiPolygonElement::GetBorderColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiPolygonElement>::GetInternalObject(*this)->GetBorderColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiPolygonElement::SetBorderColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<GuiPolygonElement>::GetInternalObject(*this)->SetBorderColor(_unwrapped_value);
	}
	
	Color GuiPolygonElement::GetBackgroundColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiPolygonElement>::GetInternalObject(*this)->GetBackgroundColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiPolygonElement::SetBackgroundColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<GuiPolygonElement>::GetInternalObject(*this)->SetBackgroundColor(_unwrapped_value);
	}
	
	GacString GuiPolygonElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::GuiPolygonElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
INativeImageFrame
***********************************************************************/

	INativeImageFrame::INativeImageFrame(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeImageFrame::~INativeImageFrame()
	{
	}
	
	void INativeImageFrame::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool INativeImageFrame::SetCache(void* key, sptr<INativeImageFrameCache> cache)
	{
		void* _unwrapped_key = key;
		vl::Ptr<vl::presentation::INativeImageFrameCache> _unwrapped_cache = __GacUIInternal<INativeImageFrameCache>::GetInternalObject(cache);
		bool _unwrapped_result = __GacUIInternal<INativeImageFrame>::GetInternalObject(*this)->SetCache(_unwrapped_key, _unwrapped_cache);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	sptr<INativeImageFrameCache> INativeImageFrame::GetCache(void* key)
	{
		void* _unwrapped_key = key;
		vl::Ptr<vl::presentation::INativeImageFrameCache> _unwrapped_result = __GacUIInternal<INativeImageFrame>::GetInternalObject(*this)->GetCache(_unwrapped_key);
		sptr<INativeImageFrameCache> _wrapped_result = __GacUIInternal<INativeImageFrameCache>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<INativeImageFrameCache> INativeImageFrame::RemoveCache(void* key)
	{
		void* _unwrapped_key = key;
		vl::Ptr<vl::presentation::INativeImageFrameCache> _unwrapped_result = __GacUIInternal<INativeImageFrame>::GetInternalObject(*this)->RemoveCache(_unwrapped_key);
		sptr<INativeImageFrameCache> _wrapped_result = __GacUIInternal<INativeImageFrameCache>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeImage> INativeImageFrame::GetImage()
	{
		vl::presentation::INativeImage* _unwrapped_result = __GacUIInternal<INativeImageFrame>::GetInternalObject(*this)->GetImage();
		rptr<INativeImage> _wrapped_result = __GacUIInternal<INativeImage>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Size INativeImageFrame::GetSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<INativeImageFrame>::GetInternalObject(*this)->GetSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
Rect
***********************************************************************/

	Rect::Rect(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Rect::~Rect()
	{
		delete __GacUIInternal<Rect>::GetInternalObject(*this);
	}
	
	void Rect::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<Rect> Rect::CreateRptr(Point p, Size s)
	{
		vl::presentation::Point _unwrapped_p = *__GacUIInternal<Point>::GetInternalObject(p);
		vl::presentation::Size _unwrapped_s = *__GacUIInternal<Size>::GetInternalObject(s);
		vl::presentation::Rect* _unwrapped_result = new vl::presentation::Rect(_unwrapped_p, _unwrapped_s);
		return __GacUIInternal<Rect>::BuildRptr(_unwrapped_result);
	}
	
	Rect Rect::Create(Point p, Size s)
	{
		vl::presentation::Point _unwrapped_p = *__GacUIInternal<Point>::GetInternalObject(p);
		vl::presentation::Size _unwrapped_s = *__GacUIInternal<Size>::GetInternalObject(s);
		vl::presentation::Rect _unwrapped_result = vl::presentation::Rect(_unwrapped_p, _unwrapped_s);
		return __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<Rect> Rect::CreateRptr(signed __int32 _x1, signed __int32 _y1, signed __int32 _x2, signed __int32 _y2)
	{
		signed __int32 _unwrapped__x1 = _x1;
		signed __int32 _unwrapped__y1 = _y1;
		signed __int32 _unwrapped__x2 = _x2;
		signed __int32 _unwrapped__y2 = _y2;
		vl::presentation::Rect* _unwrapped_result = new vl::presentation::Rect(_unwrapped__x1, _unwrapped__y1, _unwrapped__x2, _unwrapped__y2);
		return __GacUIInternal<Rect>::BuildRptr(_unwrapped_result);
	}
	
	Rect Rect::Create(signed __int32 _x1, signed __int32 _y1, signed __int32 _x2, signed __int32 _y2)
	{
		signed __int32 _unwrapped__x1 = _x1;
		signed __int32 _unwrapped__y1 = _y1;
		signed __int32 _unwrapped__x2 = _x2;
		signed __int32 _unwrapped__y2 = _y2;
		vl::presentation::Rect _unwrapped_result = vl::presentation::Rect(_unwrapped__x1, _unwrapped__y1, _unwrapped__x2, _unwrapped__y2);
		return __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<Rect> Rect::CreateRptr()
	{
		vl::presentation::Rect* _unwrapped_result = new vl::presentation::Rect();
		return __GacUIInternal<Rect>::BuildRptr(_unwrapped_result);
	}
	
	Rect Rect::Create()
	{
		vl::presentation::Rect _unwrapped_result = vl::presentation::Rect();
		return __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
	}
	
	bool Rect::operator==(Rect rect)
	{
		vl::presentation::Rect _unwrapped_rect = *__GacUIInternal<Rect>::GetInternalObject(rect);
		bool _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->operator==(_unwrapped_rect);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Rect::operator!=(Rect rect)
	{
		vl::presentation::Rect _unwrapped_rect = *__GacUIInternal<Rect>::GetInternalObject(rect);
		bool _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->operator!=(_unwrapped_rect);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	Point Rect::LeftTop()
	{
		vl::presentation::Point _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->LeftTop();
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Point Rect::RightBottom()
	{
		vl::presentation::Point _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->RightBottom();
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 Rect::Left()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->Left();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Rect::Right()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->Right();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Rect::Width()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->Width();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Rect::Top()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->Top();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Rect::Bottom()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->Bottom();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 Rect::Height()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->Height();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void Rect::Expand(Size s)
	{
		vl::presentation::Size _unwrapped_s = *__GacUIInternal<Size>::GetInternalObject(s);
		__GacUIInternal<Rect>::GetInternalObject(*this)->Expand(_unwrapped_s);
	}
	
	void Rect::Expand(signed __int32 x, signed __int32 y)
	{
		signed __int32 _unwrapped_x = x;
		signed __int32 _unwrapped_y = y;
		__GacUIInternal<Rect>::GetInternalObject(*this)->Expand(_unwrapped_x, _unwrapped_y);
	}
	
	void Rect::Move(Size s)
	{
		vl::presentation::Size _unwrapped_s = *__GacUIInternal<Size>::GetInternalObject(s);
		__GacUIInternal<Rect>::GetInternalObject(*this)->Move(_unwrapped_s);
	}
	
	void Rect::Move(signed __int32 x, signed __int32 y)
	{
		signed __int32 _unwrapped_x = x;
		signed __int32 _unwrapped_y = y;
		__GacUIInternal<Rect>::GetInternalObject(*this)->Move(_unwrapped_x, _unwrapped_y);
	}
	
	bool Rect::Contains(Point p)
	{
		vl::presentation::Point _unwrapped_p = *__GacUIInternal<Point>::GetInternalObject(p);
		bool _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->Contains(_unwrapped_p);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	Size Rect::GetSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->GetSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 Rect::get_x1()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->x1;
		return _wrapped_result;
	}
	
	void Rect::set_x1(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Rect>::GetInternalObject(*this)->x1 = _unwrapped_value;
	}
	
	signed __int32 Rect::get_y1()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->y1;
		return _wrapped_result;
	}
	
	void Rect::set_y1(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Rect>::GetInternalObject(*this)->y1 = _unwrapped_value;
	}
	
	signed __int32 Rect::get_x2()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->x2;
		return _wrapped_result;
	}
	
	void Rect::set_x2(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Rect>::GetInternalObject(*this)->x2 = _unwrapped_value;
	}
	
	signed __int32 Rect::get_y2()
	{
		signed __int32 _wrapped_result = __GacUIInternal<Rect>::GetInternalObject(*this)->y2;
		return _wrapped_result;
	}
	
	void Rect::set_y2(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<Rect>::GetInternalObject(*this)->y2 = _unwrapped_value;
	}
	

/***********************************************************************
IGuiGraphicsRenderTarget
***********************************************************************/

	IGuiGraphicsRenderTarget::IGuiGraphicsRenderTarget(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IGuiGraphicsRenderTarget::~IGuiGraphicsRenderTarget()
	{
	}
	
	void IGuiGraphicsRenderTarget::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	void IGuiGraphicsRenderTarget::StartRendering()
	{
		__GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(*this)->StartRendering();
	}
	
	void IGuiGraphicsRenderTarget::StopRendering()
	{
		__GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(*this)->StopRendering();
	}
	
	void IGuiGraphicsRenderTarget::PushClipper(Rect clipper)
	{
		vl::presentation::Rect _unwrapped_clipper = *__GacUIInternal<Rect>::GetInternalObject(clipper);
		__GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(*this)->PushClipper(_unwrapped_clipper);
	}
	
	void IGuiGraphicsRenderTarget::PopClipper()
	{
		__GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(*this)->PopClipper();
	}
	
	bool IGuiGraphicsRenderTarget::IsClipperCoverWholeTarget()
	{
		bool _unwrapped_result = __GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(*this)->IsClipperCoverWholeTarget();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	Rect IGuiGraphicsRenderTarget::GetClipper()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(*this)->GetClipper();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
CharMeasurer
***********************************************************************/

	CharMeasurer::CharMeasurer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<CharMeasurer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	CharMeasurer::~CharMeasurer()
	{
	}
	
	void CharMeasurer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	signed __int32 CharMeasurer::MeasureWidth(wchar_t character)
	{
		wchar_t _unwrapped_character = character;
		signed __int32 _unwrapped_result = __GacUIInternal<CharMeasurer>::GetInternalObject(*this)->MeasureWidth(_unwrapped_character);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void CharMeasurer::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value)
	{
		vl::presentation::elements::IGuiGraphicsRenderTarget* _unwrapped_value = __GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(value);
		__GacUIInternal<CharMeasurer>::GetInternalObject(*this)->SetRenderTarget(_unwrapped_value);
	}
	
	signed __int32 CharMeasurer::GetRowHeight()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<CharMeasurer>::GetInternalObject(*this)->GetRowHeight();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiGraphicsResourceManager
***********************************************************************/

	GuiGraphicsResourceManager::GuiGraphicsResourceManager(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsResourceManager::~GuiGraphicsResourceManager()
	{
	}
	
	void GuiGraphicsResourceManager::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool GuiGraphicsResourceManager::RegisterElementFactory(rptr<IGuiGraphicsElementFactory> factory)
	{
		vl::presentation::elements::IGuiGraphicsElementFactory* _unwrapped_factory = __GacUIInternal<IGuiGraphicsElementFactory>::GetInternalObject(factory);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsResourceManager>::GetInternalObject(*this)->RegisterElementFactory(_unwrapped_factory);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsResourceManager::RegisterRendererFactory(const GacString& elementTypeName, rptr<IGuiGraphicsRendererFactory> factory)
	{
		vl::ObjectString<wchar_t> _unwrapped_elementTypeName = elementTypeName.Buffer();
		vl::presentation::elements::IGuiGraphicsRendererFactory* _unwrapped_factory = __GacUIInternal<IGuiGraphicsRendererFactory>::GetInternalObject(factory);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsResourceManager>::GetInternalObject(*this)->RegisterRendererFactory(_unwrapped_elementTypeName, _unwrapped_factory);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<IGuiGraphicsElementFactory> GuiGraphicsResourceManager::GetElementFactory(const GacString& elementTypeName)
	{
		vl::ObjectString<wchar_t> _unwrapped_elementTypeName = elementTypeName.Buffer();
		vl::presentation::elements::IGuiGraphicsElementFactory* _unwrapped_result = __GacUIInternal<GuiGraphicsResourceManager>::GetInternalObject(*this)->GetElementFactory(_unwrapped_elementTypeName);
		rptr<IGuiGraphicsElementFactory> _wrapped_result = __GacUIInternal<IGuiGraphicsElementFactory>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<IGuiGraphicsRendererFactory> GuiGraphicsResourceManager::GetRendererFactory(const GacString& elementTypeName)
	{
		vl::ObjectString<wchar_t> _unwrapped_elementTypeName = elementTypeName.Buffer();
		vl::presentation::elements::IGuiGraphicsRendererFactory* _unwrapped_result = __GacUIInternal<GuiGraphicsResourceManager>::GetInternalObject(*this)->GetRendererFactory(_unwrapped_elementTypeName);
		rptr<IGuiGraphicsRendererFactory> _wrapped_result = __GacUIInternal<IGuiGraphicsRendererFactory>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<IGuiGraphicsRenderTarget> GuiGraphicsResourceManager::GetRenderTarget(rptr<INativeWindow> window)
	{
		vl::presentation::INativeWindow* _unwrapped_window = __GacUIInternal<INativeWindow>::GetInternalObject(window);
		vl::presentation::elements::IGuiGraphicsRenderTarget* _unwrapped_result = __GacUIInternal<GuiGraphicsResourceManager>::GetInternalObject(*this)->GetRenderTarget(_unwrapped_window);
		rptr<IGuiGraphicsRenderTarget> _wrapped_result = __GacUIInternal<IGuiGraphicsRenderTarget>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
IGuiGraphicsRenderer
***********************************************************************/

	IGuiGraphicsRenderer::IGuiGraphicsRenderer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IGuiGraphicsRenderer::~IGuiGraphicsRenderer()
	{
	}
	
	void IGuiGraphicsRenderer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	void IGuiGraphicsRenderer::Initialize(rptr<IGuiGraphicsElement> _element)
	{
		vl::presentation::elements::IGuiGraphicsElement* _unwrapped__element = __GacUIInternal<IGuiGraphicsElement>::GetInternalObject(_element);
		__GacUIInternal<IGuiGraphicsRenderer>::GetInternalObject(*this)->Initialize(_unwrapped__element);
	}
	
	void IGuiGraphicsRenderer::Finalize()
	{
		__GacUIInternal<IGuiGraphicsRenderer>::GetInternalObject(*this)->Finalize();
	}
	
	void IGuiGraphicsRenderer::Render(Rect bounds)
	{
		vl::presentation::Rect _unwrapped_bounds = *__GacUIInternal<Rect>::GetInternalObject(bounds);
		__GacUIInternal<IGuiGraphicsRenderer>::GetInternalObject(*this)->Render(_unwrapped_bounds);
	}
	
	void IGuiGraphicsRenderer::OnElementStateChanged()
	{
		__GacUIInternal<IGuiGraphicsRenderer>::GetInternalObject(*this)->OnElementStateChanged();
	}
	
	void IGuiGraphicsRenderer::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> _renderTarget)
	{
		vl::presentation::elements::IGuiGraphicsRenderTarget* _unwrapped__renderTarget = __GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(_renderTarget);
		__GacUIInternal<IGuiGraphicsRenderer>::GetInternalObject(*this)->SetRenderTarget(_unwrapped__renderTarget);
	}
	
	rptr<IGuiGraphicsRendererFactory> IGuiGraphicsRenderer::GetFactory()
	{
		vl::presentation::elements::IGuiGraphicsRendererFactory* _unwrapped_result = __GacUIInternal<IGuiGraphicsRenderer>::GetInternalObject(*this)->GetFactory();
		rptr<IGuiGraphicsRendererFactory> _wrapped_result = __GacUIInternal<IGuiGraphicsRendererFactory>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Size IGuiGraphicsRenderer::GetMinSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<IGuiGraphicsRenderer>::GetInternalObject(*this)->GetMinSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
INativeScreen
***********************************************************************/

	INativeScreen::INativeScreen(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeScreen::~INativeScreen()
	{
	}
	
	void INativeScreen::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool INativeScreen::IsPrimary()
	{
		bool _unwrapped_result = __GacUIInternal<INativeScreen>::GetInternalObject(*this)->IsPrimary();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	Rect INativeScreen::GetBounds()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<INativeScreen>::GetInternalObject(*this)->GetBounds();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect INativeScreen::GetClientBounds()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<INativeScreen>::GetInternalObject(*this)->GetClientBounds();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString INativeScreen::GetName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<INativeScreen>::GetInternalObject(*this)->GetName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
INativeScreenService
***********************************************************************/

	INativeScreenService::INativeScreenService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeScreenService::~INativeScreenService()
	{
	}
	
	void INativeScreenService::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<INativeScreen> INativeScreenService::GetScreen(rptr<INativeWindow> window)
	{
		vl::presentation::INativeWindow* _unwrapped_window = __GacUIInternal<INativeWindow>::GetInternalObject(window);
		vl::presentation::INativeScreen* _unwrapped_result = __GacUIInternal<INativeScreenService>::GetInternalObject(*this)->GetScreen(_unwrapped_window);
		rptr<INativeScreen> _wrapped_result = __GacUIInternal<INativeScreen>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeScreen> INativeScreenService::GetScreen(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::INativeScreen* _unwrapped_result = __GacUIInternal<INativeScreenService>::GetInternalObject(*this)->GetScreen(_unwrapped_index);
		rptr<INativeScreen> _wrapped_result = __GacUIInternal<INativeScreen>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 INativeScreenService::GetScreenCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<INativeScreenService>::GetInternalObject(*this)->GetScreenCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
INativeController
***********************************************************************/

	INativeController::INativeController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeController::~INativeController()
	{
	}
	
	void INativeController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<INativeCallbackService> INativeController::CallbackService()
	{
		vl::presentation::INativeCallbackService* _unwrapped_result = __GacUIInternal<INativeController>::GetInternalObject(*this)->CallbackService();
		rptr<INativeCallbackService> _wrapped_result = __GacUIInternal<INativeCallbackService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeResourceService> INativeController::ResourceService()
	{
		vl::presentation::INativeResourceService* _unwrapped_result = __GacUIInternal<INativeController>::GetInternalObject(*this)->ResourceService();
		rptr<INativeResourceService> _wrapped_result = __GacUIInternal<INativeResourceService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeAsyncService> INativeController::AsyncService()
	{
		vl::presentation::INativeAsyncService* _unwrapped_result = __GacUIInternal<INativeController>::GetInternalObject(*this)->AsyncService();
		rptr<INativeAsyncService> _wrapped_result = __GacUIInternal<INativeAsyncService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeClipboardService> INativeController::ClipboardService()
	{
		vl::presentation::INativeClipboardService* _unwrapped_result = __GacUIInternal<INativeController>::GetInternalObject(*this)->ClipboardService();
		rptr<INativeClipboardService> _wrapped_result = __GacUIInternal<INativeClipboardService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeImageService> INativeController::ImageService()
	{
		vl::presentation::INativeImageService* _unwrapped_result = __GacUIInternal<INativeController>::GetInternalObject(*this)->ImageService();
		rptr<INativeImageService> _wrapped_result = __GacUIInternal<INativeImageService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeScreenService> INativeController::ScreenService()
	{
		vl::presentation::INativeScreenService* _unwrapped_result = __GacUIInternal<INativeController>::GetInternalObject(*this)->ScreenService();
		rptr<INativeScreenService> _wrapped_result = __GacUIInternal<INativeScreenService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeWindowService> INativeController::WindowService()
	{
		vl::presentation::INativeWindowService* _unwrapped_result = __GacUIInternal<INativeController>::GetInternalObject(*this)->WindowService();
		rptr<INativeWindowService> _wrapped_result = __GacUIInternal<INativeWindowService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeInputService> INativeController::InputService()
	{
		vl::presentation::INativeInputService* _unwrapped_result = __GacUIInternal<INativeController>::GetInternalObject(*this)->InputService();
		rptr<INativeInputService> _wrapped_result = __GacUIInternal<INativeInputService>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
INativeWindowListener
***********************************************************************/

	INativeWindowListener::INativeWindowListener(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeWindowListener::~INativeWindowListener()
	{
	}
	
	void INativeWindowListener::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<INativeWindowListener> INativeWindowListener::CreateRptr()
	{
		vl::presentation::INativeWindowListener* _unwrapped_result = new vl::presentation::INativeWindowListener();
		return __GacUIInternal<INativeWindowListener>::BuildRptr(_unwrapped_result);
	}
	
	void INativeWindowListener::Moving(rptr<Rect> bounds, bool fixSizeOnly)
	{
		vl::presentation::Rect& _unwrapped_bounds = *__GacUIInternal<Rect>::GetInternalObject(bounds);
		bool _unwrapped_fixSizeOnly = fixSizeOnly;
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Moving(_unwrapped_bounds, _unwrapped_fixSizeOnly);
	}
	
	void INativeWindowListener::Moved()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Moved();
	}
	
	void INativeWindowListener::Enabled()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Enabled();
	}
	
	void INativeWindowListener::Disabled()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Disabled();
	}
	
	void INativeWindowListener::GotFocus()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->GotFocus();
	}
	
	void INativeWindowListener::LostFocus()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->LostFocus();
	}
	
	void INativeWindowListener::Activated()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Activated();
	}
	
	void INativeWindowListener::Deactivated()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Deactivated();
	}
	
	void INativeWindowListener::Opened()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Opened();
	}
	
	void INativeWindowListener::Closing(bool& cancel)
	{
		bool& _unwrapped_cancel = cancel;
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Closing(_unwrapped_cancel);
	}
	
	void INativeWindowListener::Closed()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Closed();
	}
	
	void INativeWindowListener::Paint()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Paint();
	}
	
	void INativeWindowListener::Destroying()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Destroying();
	}
	
	void INativeWindowListener::Destroyed()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Destroyed();
	}
	
	void INativeWindowListener::LeftButtonDown(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->LeftButtonDown(_unwrapped_info);
	}
	
	void INativeWindowListener::LeftButtonUp(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->LeftButtonUp(_unwrapped_info);
	}
	
	void INativeWindowListener::LeftButtonDoubleClick(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->LeftButtonDoubleClick(_unwrapped_info);
	}
	
	void INativeWindowListener::RightButtonDown(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->RightButtonDown(_unwrapped_info);
	}
	
	void INativeWindowListener::RightButtonUp(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->RightButtonUp(_unwrapped_info);
	}
	
	void INativeWindowListener::RightButtonDoubleClick(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->RightButtonDoubleClick(_unwrapped_info);
	}
	
	void INativeWindowListener::MiddleButtonDown(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->MiddleButtonDown(_unwrapped_info);
	}
	
	void INativeWindowListener::MiddleButtonUp(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->MiddleButtonUp(_unwrapped_info);
	}
	
	void INativeWindowListener::MiddleButtonDoubleClick(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->MiddleButtonDoubleClick(_unwrapped_info);
	}
	
	void INativeWindowListener::HorizontalWheel(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->HorizontalWheel(_unwrapped_info);
	}
	
	void INativeWindowListener::VerticalWheel(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->VerticalWheel(_unwrapped_info);
	}
	
	void INativeWindowListener::MouseMoving(rptr<NativeWindowMouseInfo> info)
	{
		vl::presentation::NativeWindowMouseInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->MouseMoving(_unwrapped_info);
	}
	
	void INativeWindowListener::MouseEntered()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->MouseEntered();
	}
	
	void INativeWindowListener::MouseLeaved()
	{
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->MouseLeaved();
	}
	
	void INativeWindowListener::KeyDown(rptr<NativeWindowKeyInfo> info)
	{
		vl::presentation::NativeWindowKeyInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->KeyDown(_unwrapped_info);
	}
	
	void INativeWindowListener::KeyUp(rptr<NativeWindowKeyInfo> info)
	{
		vl::presentation::NativeWindowKeyInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->KeyUp(_unwrapped_info);
	}
	
	void INativeWindowListener::SysKeyDown(rptr<NativeWindowKeyInfo> info)
	{
		vl::presentation::NativeWindowKeyInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->SysKeyDown(_unwrapped_info);
	}
	
	void INativeWindowListener::SysKeyUp(rptr<NativeWindowKeyInfo> info)
	{
		vl::presentation::NativeWindowKeyInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->SysKeyUp(_unwrapped_info);
	}
	
	void INativeWindowListener::Char(rptr<NativeWindowCharInfo> info)
	{
		vl::presentation::NativeWindowCharInfo const& _unwrapped_info = *__GacUIInternal<NativeWindowCharInfo>::GetInternalObject(info);
		__GacUIInternal<INativeWindowListener>::GetInternalObject(*this)->Char(_unwrapped_info);
	}
	

/***********************************************************************
GuiGraphicsHost
***********************************************************************/

	GuiGraphicsHost::GuiGraphicsHost(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsHost::~GuiGraphicsHost()
	{
	}
	
	void GuiGraphicsHost::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsHost::CreateRptr()
	{
		vl::presentation::elements::GuiGraphicsHost* _unwrapped_result = new vl::presentation::elements::GuiGraphicsHost();
		return __GacUIInternal<GuiGraphicsHost>::BuildRptr(_unwrapped_result);
	}
	
	void GuiGraphicsHost::Render()
	{
		__GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->Render();
	}
	
	bool GuiGraphicsHost::SetFocus(rptr<GuiGraphicsComposition> composition)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_composition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(composition);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->SetFocus(_unwrapped_composition);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsHost::SetCaretPoint(Point value, rptr<GuiGraphicsComposition> referenceComposition)
	{
		vl::presentation::Point _unwrapped_value = *__GacUIInternal<Point>::GetInternalObject(value);
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_referenceComposition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(referenceComposition);
		__GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->SetCaretPoint(_unwrapped_value, _unwrapped_referenceComposition);
	}
	
	rptr<INativeWindow> GuiGraphicsHost::GetNativeWindow()
	{
		vl::presentation::INativeWindow* _unwrapped_result = __GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->GetNativeWindow();
		rptr<INativeWindow> _wrapped_result = __GacUIInternal<INativeWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsHost::SetNativeWindow(rptr<INativeWindow> _nativeWindow)
	{
		vl::presentation::INativeWindow* _unwrapped__nativeWindow = __GacUIInternal<INativeWindow>::GetInternalObject(_nativeWindow);
		__GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->SetNativeWindow(_unwrapped__nativeWindow);
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsHost::GetMainComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->GetMainComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsHost::GetFocusedComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->GetFocusedComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Point GuiGraphicsHost::GetCaretPoint()
	{
		vl::presentation::Point _unwrapped_result = __GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->GetCaretPoint();
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsAnimationManager> GuiGraphicsHost::GetAnimationManager()
	{
		vl::presentation::elements::GuiGraphicsAnimationManager* _unwrapped_result = __GacUIInternal<GuiGraphicsHost>::GetInternalObject(*this)->GetAnimationManager();
		rptr<GuiGraphicsAnimationManager> _wrapped_result = __GacUIInternal<GuiGraphicsAnimationManager>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	unsigned __int64 GuiGraphicsHost::get_CaretInterval()
	{
		unsigned __int64 _wrapped_result = vl::presentation::elements::GuiGraphicsHost::CaretInterval;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiGraphicsComposition
***********************************************************************/

	GuiGraphicsComposition::GuiGraphicsComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsComposition::~GuiGraphicsComposition()
	{
	}
	
	void GuiGraphicsComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> GuiGraphicsComposition::Children()
	{
		vl::collections::IReadonlyList<vl::presentation::elements::GuiGraphicsComposition *,vl::presentation::elements::GuiGraphicsComposition *> const& _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->Children();
		rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> _wrapped_result = __GacUIInternal<IReadonlyList_of_GuiGraphicsComposition_raw_pointer>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiGraphicsComposition::AddChild(rptr<GuiGraphicsComposition> child)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_child = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(child);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->AddChild(_unwrapped_child);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsComposition::InsertChild(signed __int32 index, rptr<GuiGraphicsComposition> child)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_child = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(child);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->InsertChild(_unwrapped_index, _unwrapped_child);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsComposition::RemoveChild(rptr<GuiGraphicsComposition> child)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_child = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(child);
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->RemoveChild(_unwrapped_child);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiGraphicsComposition::MoveChild(rptr<GuiGraphicsComposition> child, signed __int32 newIndex)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_child = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(child);
		signed __int32 _unwrapped_newIndex = newIndex;
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->MoveChild(_unwrapped_child, _unwrapped_newIndex);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::Render(Size offset)
	{
		vl::presentation::Size _unwrapped_offset = *__GacUIInternal<Size>::GetInternalObject(offset);
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->Render(_unwrapped_offset);
	}
	
	bool GuiGraphicsComposition::HasEventReceiver()
	{
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->HasEventReceiver();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsComposition::FindComposition(Point location)
	{
		vl::presentation::Point _unwrapped_location = *__GacUIInternal<Point>::GetInternalObject(location);
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->FindComposition(_unwrapped_location);
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiGraphicsComposition::IsSizeAffectParent()
	{
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->IsSizeAffectParent();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsComposition::GetParent()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetParent();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<IGuiGraphicsElement> GuiGraphicsComposition::GetOwnedElement()
	{
		vl::Ptr<vl::presentation::elements::IGuiGraphicsElement> _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetOwnedElement();
		sptr<IGuiGraphicsElement> _wrapped_result = __GacUIInternal<IGuiGraphicsElement>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::SetOwnedElement(sptr<IGuiGraphicsElement> element)
	{
		vl::Ptr<vl::presentation::elements::IGuiGraphicsElement> _unwrapped_element = __GacUIInternal<IGuiGraphicsElement>::GetInternalObject(element);
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->SetOwnedElement(_unwrapped_element);
	}
	
	bool GuiGraphicsComposition::GetVisible()
	{
		bool _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::SetVisible(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->SetVisible(_unwrapped_value);
	}
	
	GuiGraphicsComposition :: MinSizeLimitation GuiGraphicsComposition::GetMinSizeLimitation()
	{
		vl::presentation::elements::GuiGraphicsComposition::MinSizeLimitation _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetMinSizeLimitation();
		GuiGraphicsComposition :: MinSizeLimitation _wrapped_result = (GuiGraphicsComposition :: MinSizeLimitation)_unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::SetMinSizeLimitation(GuiGraphicsComposition :: MinSizeLimitation value)
	{
		vl::presentation::elements::GuiGraphicsComposition::MinSizeLimitation _unwrapped_value = (vl::presentation::elements::GuiGraphicsComposition::MinSizeLimitation)value;
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->SetMinSizeLimitation(_unwrapped_value);
	}
	
	rptr<IGuiGraphicsRenderTarget> GuiGraphicsComposition::GetRenderTarget()
	{
		vl::presentation::elements::IGuiGraphicsRenderTarget* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetRenderTarget();
		rptr<IGuiGraphicsRenderTarget> _wrapped_result = __GacUIInternal<IGuiGraphicsRenderTarget>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value)
	{
		vl::presentation::elements::IGuiGraphicsRenderTarget* _unwrapped_value = __GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(value);
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->SetRenderTarget(_unwrapped_value);
	}
	
	rptr<GuiGraphicsEventReceiver> GuiGraphicsComposition::GetEventReceiver()
	{
		vl::presentation::elements::GuiGraphicsEventReceiver* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetEventReceiver();
		rptr<GuiGraphicsEventReceiver> _wrapped_result = __GacUIInternal<GuiGraphicsEventReceiver>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect GuiGraphicsComposition::GetGlobalBounds()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetGlobalBounds();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiControl> GuiGraphicsComposition::GetAssociatedControl()
	{
		vl::presentation::controls::GuiControl* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetAssociatedControl();
		rptr<GuiControl> _wrapped_result = __GacUIInternal<GuiControl>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsComposition::GetAssociatedHost()
	{
		vl::presentation::elements::GuiGraphicsHost* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetAssociatedHost();
		rptr<GuiGraphicsHost> _wrapped_result = __GacUIInternal<GuiGraphicsHost>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeCursor> GuiGraphicsComposition::GetAssociatedCursor()
	{
		vl::presentation::INativeCursor* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetAssociatedCursor();
		rptr<INativeCursor> _wrapped_result = __GacUIInternal<INativeCursor>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::SetAssociatedCursor(rptr<INativeCursor> cursor)
	{
		vl::presentation::INativeCursor* _unwrapped_cursor = __GacUIInternal<INativeCursor>::GetInternalObject(cursor);
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->SetAssociatedCursor(_unwrapped_cursor);
	}
	
	rptr<GuiControl> GuiGraphicsComposition::GetRelatedControl()
	{
		vl::presentation::controls::GuiControl* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetRelatedControl();
		rptr<GuiControl> _wrapped_result = __GacUIInternal<GuiControl>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsComposition::GetRelatedGraphicsHost()
	{
		vl::presentation::elements::GuiGraphicsHost* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetRelatedGraphicsHost();
		rptr<GuiGraphicsHost> _wrapped_result = __GacUIInternal<GuiGraphicsHost>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiControlHost> GuiGraphicsComposition::GetRelatedControlHost()
	{
		vl::presentation::controls::GuiControlHost* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetRelatedControlHost();
		rptr<GuiControlHost> _wrapped_result = __GacUIInternal<GuiControlHost>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeCursor> GuiGraphicsComposition::GetRelatedCursor()
	{
		vl::presentation::INativeCursor* _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetRelatedCursor();
		rptr<INativeCursor> _wrapped_result = __GacUIInternal<INativeCursor>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Margin GuiGraphicsComposition::GetMargin()
	{
		vl::presentation::Margin _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetMargin();
		Margin _wrapped_result = __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::SetMargin(Margin value)
	{
		vl::presentation::Margin _unwrapped_value = *__GacUIInternal<Margin>::GetInternalObject(value);
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->SetMargin(_unwrapped_value);
	}
	
	Margin GuiGraphicsComposition::GetInternalMargin()
	{
		vl::presentation::Margin _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetInternalMargin();
		Margin _wrapped_result = __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::SetInternalMargin(Margin value)
	{
		vl::presentation::Margin _unwrapped_value = *__GacUIInternal<Margin>::GetInternalObject(value);
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->SetInternalMargin(_unwrapped_value);
	}
	
	Size GuiGraphicsComposition::GetPreferredMinSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetPreferredMinSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiGraphicsComposition::SetPreferredMinSize(Size value)
	{
		vl::presentation::Size _unwrapped_value = *__GacUIInternal<Size>::GetInternalObject(value);
		__GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->SetPreferredMinSize(_unwrapped_value);
	}
	
	Rect GuiGraphicsComposition::GetClientArea()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetClientArea();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiGraphicsComposition::GetAffectionFromParent()
	{
		vl::presentation::elements::GuiGraphicsComposition::ParentSizeAffection _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetAffectionFromParent();
		GuiGraphicsComposition :: ParentSizeAffection _wrapped_result = (GuiGraphicsComposition :: ParentSizeAffection)_unwrapped_result;
		return _wrapped_result;
	}
	
	Size GuiGraphicsComposition::GetMinPreferredClientSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetMinPreferredClientSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect GuiGraphicsComposition::GetPreferredBounds()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetPreferredBounds();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect GuiGraphicsComposition::GetBounds()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(*this)->GetBounds();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiGraphicsSite
***********************************************************************/

	GuiGraphicsSite::GuiGraphicsSite(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsComposition(static_cast<__GacUIInternal<GuiGraphicsComposition>::InternalObjectType*>((__GacUIInternal<GuiGraphicsSite>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsSite::~GuiGraphicsSite()
	{
	}
	
	void GuiGraphicsSite::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiGraphicsComposition::ClearInternalObjectReference();
	}
	
	rptr<GuiGraphicsSite> GuiGraphicsSite::CreateRptr()
	{
		vl::presentation::elements::GuiGraphicsSite* _unwrapped_result = new vl::presentation::elements::GuiGraphicsSite();
		return __GacUIInternal<GuiGraphicsSite>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiBoundsComposition
***********************************************************************/

	GuiBoundsComposition::GuiBoundsComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiBoundsComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiBoundsComposition::~GuiBoundsComposition()
	{
	}
	
	void GuiBoundsComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiGraphicsSite::ClearInternalObjectReference();
	}
	
	rptr<GuiBoundsComposition> GuiBoundsComposition::CreateRptr()
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_result = new vl::presentation::elements::GuiBoundsComposition();
		return __GacUIInternal<GuiBoundsComposition>::BuildRptr(_unwrapped_result);
	}
	
	void GuiBoundsComposition::ClearAlignmentToParent()
	{
		__GacUIInternal<GuiBoundsComposition>::GetInternalObject(*this)->ClearAlignmentToParent();
	}
	
	bool GuiBoundsComposition::IsAlignedToParent()
	{
		bool _unwrapped_result = __GacUIInternal<GuiBoundsComposition>::GetInternalObject(*this)->IsAlignedToParent();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiBoundsComposition::SetBounds(Rect value)
	{
		vl::presentation::Rect _unwrapped_value = *__GacUIInternal<Rect>::GetInternalObject(value);
		__GacUIInternal<GuiBoundsComposition>::GetInternalObject(*this)->SetBounds(_unwrapped_value);
	}
	
	Margin GuiBoundsComposition::GetAlignmentToParent()
	{
		vl::presentation::Margin _unwrapped_result = __GacUIInternal<GuiBoundsComposition>::GetInternalObject(*this)->GetAlignmentToParent();
		Margin _wrapped_result = __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiBoundsComposition::SetAlignmentToParent(Margin value)
	{
		vl::presentation::Margin _unwrapped_value = *__GacUIInternal<Margin>::GetInternalObject(value);
		__GacUIInternal<GuiBoundsComposition>::GetInternalObject(*this)->SetAlignmentToParent(_unwrapped_value);
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiBoundsComposition::on_BoundsChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiBoundsComposition>::GetInternalObject(*this)->BoundsChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiCellComposition
***********************************************************************/

	GuiCellComposition::GuiCellComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiCellComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiCellComposition::~GuiCellComposition()
	{
	}
	
	void GuiCellComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiGraphicsSite::ClearInternalObjectReference();
	}
	
	rptr<GuiCellComposition> GuiCellComposition::CreateRptr()
	{
		vl::presentation::elements::GuiCellComposition* _unwrapped_result = new vl::presentation::elements::GuiCellComposition();
		return __GacUIInternal<GuiCellComposition>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiCellComposition::SetSite(signed __int32 _row, signed __int32 _column, signed __int32 _rowSpan, signed __int32 _columnSpan)
	{
		signed __int32 _unwrapped__row = _row;
		signed __int32 _unwrapped__column = _column;
		signed __int32 _unwrapped__rowSpan = _rowSpan;
		signed __int32 _unwrapped__columnSpan = _columnSpan;
		bool _unwrapped_result = __GacUIInternal<GuiCellComposition>::GetInternalObject(*this)->SetSite(_unwrapped__row, _unwrapped__column, _unwrapped__rowSpan, _unwrapped__columnSpan);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiTableComposition> GuiCellComposition::GetTableParent()
	{
		vl::presentation::elements::GuiTableComposition* _unwrapped_result = __GacUIInternal<GuiCellComposition>::GetInternalObject(*this)->GetTableParent();
		rptr<GuiTableComposition> _wrapped_result = __GacUIInternal<GuiTableComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiCellComposition::GetRow()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiCellComposition>::GetInternalObject(*this)->GetRow();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiCellComposition::GetRowSpan()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiCellComposition>::GetInternalObject(*this)->GetRowSpan();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiCellComposition::GetColumn()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiCellComposition>::GetInternalObject(*this)->GetColumn();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiCellComposition::GetColumnSpan()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiCellComposition>::GetInternalObject(*this)->GetColumnSpan();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiControl
***********************************************************************/

	GuiControl::GuiControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiControl::~GuiControl()
	{
	}
	
	void GuiControl::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiControl> GuiControl::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiControl* _unwrapped_result = new vl::presentation::controls::GuiControl(_unwrapped__styleController);
		return __GacUIInternal<GuiControl>::BuildRptr(_unwrapped_result);
	}
	
	rptr<GuiControl> GuiControl::GetChild(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::GuiControl* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetChild(_unwrapped_index);
		rptr<GuiControl> _wrapped_result = __GacUIInternal<GuiControl>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<IDescriptable> GuiControl::QueryService(const GacString& identifier)
	{
		vl::ObjectString<wchar_t> _unwrapped_identifier = identifier.Buffer();
		vl::presentation::IDescriptable* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->QueryService(_unwrapped_identifier);
		rptr<IDescriptable> _wrapped_result = __GacUIInternal<IDescriptable>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	GuiEventArgs GuiControl::GetNotifyEventArguments()
	{
		vl::presentation::elements::GuiEventArgs _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetNotifyEventArguments();
		GuiEventArgs _wrapped_result = __GacUIInternal<GuiEventArgs>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiControl :: IStyleController> GuiControl::GetStyleController()
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetStyleController();
		rptr<GuiControl :: IStyleController> _wrapped_result = __GacUIInternal<GuiControl :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiBoundsComposition> GuiControl::GetBoundsComposition()
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetBoundsComposition();
		rptr<GuiBoundsComposition> _wrapped_result = __GacUIInternal<GuiBoundsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::GetContainerComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetContainerComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::GetFocusableComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetFocusableComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEventReceiver> GuiControl::GetEventReceiver()
	{
		vl::presentation::elements::GuiGraphicsEventReceiver* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetEventReceiver();
		rptr<GuiGraphicsEventReceiver> _wrapped_result = __GacUIInternal<GuiGraphicsEventReceiver>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiControl> GuiControl::GetParent()
	{
		vl::presentation::controls::GuiControl* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetParent();
		rptr<GuiControl> _wrapped_result = __GacUIInternal<GuiControl>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiControl::GetChildrenCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetChildrenCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiControlHost> GuiControl::GetRelatedControlHost()
	{
		vl::presentation::controls::GuiControlHost* _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetRelatedControlHost();
		rptr<GuiControlHost> _wrapped_result = __GacUIInternal<GuiControlHost>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiControl::GetVisuallyEnabled()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetVisuallyEnabled();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiControl::GetEnabled()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetEnabled();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControl::SetEnabled(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiControl>::GetInternalObject(*this)->SetEnabled(_unwrapped_value);
	}
	
	bool GuiControl::GetVisible()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControl::SetVisible(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiControl>::GetInternalObject(*this)->SetVisible(_unwrapped_value);
	}
	
	const GacString& GuiControl::GetText()
	{
		vl::ObjectString<wchar_t> const& _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetText();
		const GacString& _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	void GuiControl::SetText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<GuiControl>::GetInternalObject(*this)->SetText(_unwrapped_value);
	}
	
	rptr<FontProperties> GuiControl::GetFont()
	{
		vl::presentation::FontProperties const& _unwrapped_result = __GacUIInternal<GuiControl>::GetInternalObject(*this)->GetFont();
		rptr<FontProperties> _wrapped_result = __GacUIInternal<FontProperties>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiControl::SetFont(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		__GacUIInternal<GuiControl>::GetInternalObject(*this)->SetFont(_unwrapped_value);
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControl::on_VisibleChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControl>::GetInternalObject(*this)->VisibleChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControl::on_EnabledChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControl>::GetInternalObject(*this)->EnabledChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControl::on_VisuallyEnabledChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControl>::GetInternalObject(*this)->VisuallyEnabledChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControl::on_TextChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControl>::GetInternalObject(*this)->TextChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControl::on_FontChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControl>::GetInternalObject(*this)->FontChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiControl :: IStyleController
***********************************************************************/

	GuiControl::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiControl::IStyleController::~IStyleController()
	{
	}
	
	void GuiControl::IStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiControl::IStyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_value = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(value);
		__GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(*this)->SetFocusableComposition(_unwrapped_value);
	}
	
	void GuiControl::IStyleController::SetText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(*this)->SetText(_unwrapped_value);
	}
	
	void GuiControl::IStyleController::SetFont(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		__GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(*this)->SetFont(_unwrapped_value);
	}
	
	void GuiControl::IStyleController::SetVisuallyEnabled(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(*this)->SetVisuallyEnabled(_unwrapped_value);
	}
	
	rptr<GuiBoundsComposition> GuiControl::IStyleController::GetBoundsComposition()
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_result = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(*this)->GetBoundsComposition();
		rptr<GuiBoundsComposition> _wrapped_result = __GacUIInternal<GuiBoundsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::IStyleController::GetContainerComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(*this)->GetContainerComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiControl :: IStyleProvider
***********************************************************************/

	GuiControl::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiControl :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiControl::IStyleProvider::~IStyleProvider()
	{
	}
	
	void GuiControl::IStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiControl::IStyleProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped_controller = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(controller);
		__GacUIInternal<GuiControl :: IStyleProvider>::GetInternalObject(*this)->AssociateStyleController(_unwrapped_controller);
	}
	
	void GuiControl::IStyleProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_value = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(value);
		__GacUIInternal<GuiControl :: IStyleProvider>::GetInternalObject(*this)->SetFocusableComposition(_unwrapped_value);
	}
	
	void GuiControl::IStyleProvider::SetText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<GuiControl :: IStyleProvider>::GetInternalObject(*this)->SetText(_unwrapped_value);
	}
	
	void GuiControl::IStyleProvider::SetFont(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		__GacUIInternal<GuiControl :: IStyleProvider>::GetInternalObject(*this)->SetFont(_unwrapped_value);
	}
	
	void GuiControl::IStyleProvider::SetVisuallyEnabled(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiControl :: IStyleProvider>::GetInternalObject(*this)->SetVisuallyEnabled(_unwrapped_value);
	}
	

/***********************************************************************
GuiButton
***********************************************************************/

	GuiButton::GuiButton(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiButton>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiButton::~GuiButton()
	{
	}
	
	void GuiButton::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::ClearInternalObjectReference();
	}
	
	rptr<GuiButton> GuiButton::CreateRptr(rptr<GuiButton :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiButton::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiButton :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiButton* _unwrapped_result = new vl::presentation::controls::GuiButton(_unwrapped__styleController);
		return __GacUIInternal<GuiButton>::BuildRptr(_unwrapped_result);
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiButton::on_Clicked()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiButton>::GetInternalObject(*this)->Clicked);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiButton :: IStyleController
***********************************************************************/

	GuiButton::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiButton :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiButton::IStyleController::~IStyleController()
	{
	}
	
	void GuiButton::IStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	void GuiButton::IStyleController::Transfer(GuiButton :: ControlState value)
	{
		vl::presentation::controls::GuiButton::ControlState _unwrapped_value = (vl::presentation::controls::GuiButton::ControlState)value;
		__GacUIInternal<GuiButton :: IStyleController>::GetInternalObject(*this)->Transfer(_unwrapped_value);
	}
	

/***********************************************************************
GuiControlHost
***********************************************************************/

	GuiControlHost::GuiControlHost(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiControlHost>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiControlHost::~GuiControlHost()
	{
	}
	
	void GuiControlHost::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::ClearInternalObjectReference();
	}
	
	rptr<GuiControlHost> GuiControlHost::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiControlHost* _unwrapped_result = new vl::presentation::controls::GuiControlHost(_unwrapped__styleController);
		return __GacUIInternal<GuiControlHost>::BuildRptr(_unwrapped_result);
	}
	
	void GuiControlHost::Render()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->Render();
	}
	
	void GuiControlHost::SetFocused()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetFocused();
	}
	
	void GuiControlHost::SetActivated()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetActivated();
	}
	
	bool GuiControlHost::AddComponent(rptr<GuiComponent> component)
	{
		vl::presentation::controls::GuiComponent* _unwrapped_component = __GacUIInternal<GuiComponent>::GetInternalObject(component);
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->AddComponent(_unwrapped_component);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiControlHost::RemoveComponent(rptr<GuiComponent> component)
	{
		vl::presentation::controls::GuiComponent* _unwrapped_component = __GacUIInternal<GuiComponent>::GetInternalObject(component);
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->RemoveComponent(_unwrapped_component);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiControlHost::ContainsComponent(rptr<GuiComponent> component)
	{
		vl::presentation::controls::GuiComponent* _unwrapped_component = __GacUIInternal<GuiComponent>::GetInternalObject(component);
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->ContainsComponent(_unwrapped_component);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::Show()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->Show();
	}
	
	void GuiControlHost::ShowDeactivated()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->ShowDeactivated();
	}
	
	void GuiControlHost::ShowRestored()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->ShowRestored();
	}
	
	void GuiControlHost::ShowMaximized()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->ShowMaximized();
	}
	
	void GuiControlHost::ShowMinimized()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->ShowMinimized();
	}
	
	void GuiControlHost::Hide()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->Hide();
	}
	
	void GuiControlHost::Close()
	{
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->Close();
	}
	
	rptr<GuiGraphicsHost> GuiControlHost::GetGraphicsHost()
	{
		vl::presentation::elements::GuiGraphicsHost* _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetGraphicsHost();
		rptr<GuiGraphicsHost> _wrapped_result = __GacUIInternal<GuiGraphicsHost>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiControlHost::GetMainComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetMainComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INativeWindow> GuiControlHost::GetNativeWindow()
	{
		vl::presentation::INativeWindow* _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetNativeWindow();
		rptr<INativeWindow> _wrapped_result = __GacUIInternal<INativeWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiControlHost::SetNativeWindow(rptr<INativeWindow> window)
	{
		vl::presentation::INativeWindow* _unwrapped_window = __GacUIInternal<INativeWindow>::GetInternalObject(window);
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetNativeWindow(_unwrapped_window);
	}
	
	bool GuiControlHost::GetFocused()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetFocused();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiControlHost::GetActivated()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetActivated();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiControlHost::GetShowInTaskBar()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetShowInTaskBar();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetShowInTaskBar(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetShowInTaskBar(_unwrapped_value);
	}
	
	bool GuiControlHost::GetEnabledActivate()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetEnabledActivate();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetEnabledActivate(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetEnabledActivate(_unwrapped_value);
	}
	
	bool GuiControlHost::GetMaximizedBox()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetMaximizedBox();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetMaximizedBox(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetMaximizedBox(_unwrapped_visible);
	}
	
	bool GuiControlHost::GetMinimizedBox()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetMinimizedBox();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetMinimizedBox(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetMinimizedBox(_unwrapped_visible);
	}
	
	bool GuiControlHost::GetBorder()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetBorder();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetBorder(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetBorder(_unwrapped_visible);
	}
	
	bool GuiControlHost::GetSizeBox()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetSizeBox();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetSizeBox(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetSizeBox(_unwrapped_visible);
	}
	
	bool GuiControlHost::GetIconVisible()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetIconVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetIconVisible(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetIconVisible(_unwrapped_visible);
	}
	
	bool GuiControlHost::GetTitleBar()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetTitleBar();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetTitleBar(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetTitleBar(_unwrapped_visible);
	}
	
	bool GuiControlHost::GetTopMost()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetTopMost();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiControlHost::SetTopMost(bool topmost)
	{
		bool _unwrapped_topmost = topmost;
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetTopMost(_unwrapped_topmost);
	}
	
	Size GuiControlHost::GetClientSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetClientSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiControlHost::SetClientSize(Size value)
	{
		vl::presentation::Size _unwrapped_value = *__GacUIInternal<Size>::GetInternalObject(value);
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetClientSize(_unwrapped_value);
	}
	
	Rect GuiControlHost::GetBounds()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetBounds();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiControlHost::SetBounds(Rect value)
	{
		vl::presentation::Rect _unwrapped_value = *__GacUIInternal<Rect>::GetInternalObject(value);
		__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->SetBounds(_unwrapped_value);
	}
	
	rptr<INativeScreen> GuiControlHost::GetRelatedScreen()
	{
		vl::presentation::INativeScreen* _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetRelatedScreen();
		rptr<INativeScreen> _wrapped_result = __GacUIInternal<INativeScreen>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiControlHost::GetOpening()
	{
		bool _unwrapped_result = __GacUIInternal<GuiControlHost>::GetInternalObject(*this)->GetOpening();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControlHost::on_WindowGotFocus()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->WindowGotFocus);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControlHost::on_WindowLostFocus()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->WindowLostFocus);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControlHost::on_WindowActivated()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->WindowActivated);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControlHost::on_WindowDeactivated()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->WindowDeactivated);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControlHost::on_WindowOpened()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->WindowOpened);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> GuiControlHost::on_WindowClosing()
	{
		rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>::BuildRptr(&__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->WindowClosing);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControlHost::on_WindowClosed()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->WindowClosed);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiControlHost::on_WindowDestroying()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiControlHost>::GetInternalObject(*this)->WindowDestroying);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiMenuBar
***********************************************************************/

	GuiMenuBar::GuiMenuBar(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiMenuBar>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMenuBar::~GuiMenuBar()
	{
	}
	
	void GuiMenuBar::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::ClearInternalObjectReference();
	}
	
	rptr<GuiMenuBar> GuiMenuBar::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiMenuBar* _unwrapped_result = new vl::presentation::controls::GuiMenuBar(_unwrapped__styleController);
		return __GacUIInternal<GuiMenuBar>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiMenuButton
***********************************************************************/

	GuiMenuButton::GuiMenuButton(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton(static_cast<__GacUIInternal<GuiButton>::InternalObjectType*>((__GacUIInternal<GuiMenuButton>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMenuButton::~GuiMenuButton()
	{
	}
	
	void GuiMenuButton::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiButton::ClearInternalObjectReference();
	}
	
	rptr<GuiMenuButton> GuiMenuButton::CreateRptr(rptr<GuiMenuButton :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiMenuButton::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiMenuButton :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiMenuButton* _unwrapped_result = new vl::presentation::controls::GuiMenuButton(_unwrapped__styleController);
		return __GacUIInternal<GuiMenuButton>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiMenuButton::IsSubMenuExists()
	{
		bool _unwrapped_result = __GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->IsSubMenuExists();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiMenuButton::CreateSubMenu(rptr<GuiControl :: IStyleController> subMenuStyleController)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped_subMenuStyleController = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(subMenuStyleController);
		__GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->CreateSubMenu(_unwrapped_subMenuStyleController);
	}
	
	void GuiMenuButton::DestroySubMenu()
	{
		__GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->DestroySubMenu();
	}
	
	rptr<GuiMenu> GuiMenuButton::GetSubMenu()
	{
		vl::presentation::controls::GuiMenu* _unwrapped_result = __GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->GetSubMenu();
		rptr<GuiMenu> _wrapped_result = __GacUIInternal<GuiMenu>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiMenuButton::GetSubMenuOpening()
	{
		bool _unwrapped_result = __GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->GetSubMenuOpening();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiMenuButton::SetSubMenuOpening(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->SetSubMenuOpening(_unwrapped_value);
	}
	
	Size GuiMenuButton::GetPreferredMenuClientSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->GetPreferredMenuClientSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiMenuButton::SetPreferredMenuClientSize(Size value)
	{
		vl::presentation::Size _unwrapped_value = *__GacUIInternal<Size>::GetInternalObject(value);
		__GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->SetPreferredMenuClientSize(_unwrapped_value);
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiMenuButton::on_SubMenuOpeningChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiMenuButton>::GetInternalObject(*this)->SubMenuOpeningChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiMenuButton :: IStyleController
***********************************************************************/

	GuiMenuButton::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton :: IStyleController(static_cast<__GacUIInternal<GuiButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiMenuButton :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMenuButton::IStyleController::~IStyleController()
	{
	}
	
	void GuiMenuButton::IStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiButton::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<GuiControl :: IStyleController> GuiMenuButton::IStyleController::CreateSubMenuStyleController()
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped_result = __GacUIInternal<GuiMenuButton :: IStyleController>::GetInternalObject(*this)->CreateSubMenuStyleController();
		rptr<GuiControl :: IStyleController> _wrapped_result = __GacUIInternal<GuiControl :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiMenuButton::IStyleController::SetSubMenuExisting(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiMenuButton :: IStyleController>::GetInternalObject(*this)->SetSubMenuExisting(_unwrapped_value);
	}
	
	void GuiMenuButton::IStyleController::SetSubMenuOpening(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiMenuButton :: IStyleController>::GetInternalObject(*this)->SetSubMenuOpening(_unwrapped_value);
	}
	

/***********************************************************************
GuiPartialViewComposition
***********************************************************************/

	GuiPartialViewComposition::GuiPartialViewComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiPartialViewComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiPartialViewComposition::~GuiPartialViewComposition()
	{
	}
	
	void GuiPartialViewComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiGraphicsSite::ClearInternalObjectReference();
	}
	
	rptr<GuiPartialViewComposition> GuiPartialViewComposition::CreateRptr()
	{
		vl::presentation::elements::GuiPartialViewComposition* _unwrapped_result = new vl::presentation::elements::GuiPartialViewComposition();
		return __GacUIInternal<GuiPartialViewComposition>::BuildRptr(_unwrapped_result);
	}
	
	double GuiPartialViewComposition::GetWidthRatio()
	{
		double _unwrapped_result = __GacUIInternal<GuiPartialViewComposition>::GetInternalObject(*this)->GetWidthRatio();
		double _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiPartialViewComposition::SetWidthRatio(double value)
	{
		double _unwrapped_value = value;
		__GacUIInternal<GuiPartialViewComposition>::GetInternalObject(*this)->SetWidthRatio(_unwrapped_value);
	}
	
	double GuiPartialViewComposition::GetWidthPageSize()
	{
		double _unwrapped_result = __GacUIInternal<GuiPartialViewComposition>::GetInternalObject(*this)->GetWidthPageSize();
		double _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiPartialViewComposition::SetWidthPageSize(double value)
	{
		double _unwrapped_value = value;
		__GacUIInternal<GuiPartialViewComposition>::GetInternalObject(*this)->SetWidthPageSize(_unwrapped_value);
	}
	
	double GuiPartialViewComposition::GetHeightRatio()
	{
		double _unwrapped_result = __GacUIInternal<GuiPartialViewComposition>::GetInternalObject(*this)->GetHeightRatio();
		double _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiPartialViewComposition::SetHeightRatio(double value)
	{
		double _unwrapped_value = value;
		__GacUIInternal<GuiPartialViewComposition>::GetInternalObject(*this)->SetHeightRatio(_unwrapped_value);
	}
	
	double GuiPartialViewComposition::GetHeightPageSize()
	{
		double _unwrapped_result = __GacUIInternal<GuiPartialViewComposition>::GetInternalObject(*this)->GetHeightPageSize();
		double _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiPartialViewComposition::SetHeightPageSize(double value)
	{
		double _unwrapped_value = value;
		__GacUIInternal<GuiPartialViewComposition>::GetInternalObject(*this)->SetHeightPageSize(_unwrapped_value);
	}
	

/***********************************************************************
GuiScroll
***********************************************************************/

	GuiScroll::GuiScroll(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiScroll>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScroll::~GuiScroll()
	{
	}
	
	void GuiScroll::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::ClearInternalObjectReference();
	}
	
	rptr<GuiScroll> GuiScroll::CreateRptr(rptr<GuiScroll :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiScroll::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiScroll :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiScroll* _unwrapped_result = new vl::presentation::controls::GuiScroll(_unwrapped__styleController);
		return __GacUIInternal<GuiScroll>::BuildRptr(_unwrapped_result);
	}
	
	signed __int32 GuiScroll::GetTotalSize()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiScroll>::GetInternalObject(*this)->GetTotalSize();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScroll::SetTotalSize(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll>::GetInternalObject(*this)->SetTotalSize(_unwrapped_value);
	}
	
	signed __int32 GuiScroll::GetPageSize()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiScroll>::GetInternalObject(*this)->GetPageSize();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScroll::SetPageSize(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll>::GetInternalObject(*this)->SetPageSize(_unwrapped_value);
	}
	
	signed __int32 GuiScroll::GetPosition()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiScroll>::GetInternalObject(*this)->GetPosition();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScroll::SetPosition(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll>::GetInternalObject(*this)->SetPosition(_unwrapped_value);
	}
	
	signed __int32 GuiScroll::GetSmallMove()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiScroll>::GetInternalObject(*this)->GetSmallMove();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScroll::SetSmallMove(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll>::GetInternalObject(*this)->SetSmallMove(_unwrapped_value);
	}
	
	signed __int32 GuiScroll::GetBigMove()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiScroll>::GetInternalObject(*this)->GetBigMove();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScroll::SetBigMove(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll>::GetInternalObject(*this)->SetBigMove(_unwrapped_value);
	}
	
	signed __int32 GuiScroll::GetMinPosition()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiScroll>::GetInternalObject(*this)->GetMinPosition();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiScroll::GetMaxPosition()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiScroll>::GetInternalObject(*this)->GetMaxPosition();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiScroll::on_TotalSizeChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiScroll>::GetInternalObject(*this)->TotalSizeChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiScroll::on_PageSizeChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiScroll>::GetInternalObject(*this)->PageSizeChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiScroll::on_PositionChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiScroll>::GetInternalObject(*this)->PositionChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiScroll::on_SmallMoveChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiScroll>::GetInternalObject(*this)->SmallMoveChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiScroll::on_BigMoveChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiScroll>::GetInternalObject(*this)->BigMoveChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiScroll :: ICommandExecutor
***********************************************************************/

	GuiScroll::ICommandExecutor::ICommandExecutor(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiScroll :: ICommandExecutor>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScroll::ICommandExecutor::~ICommandExecutor()
	{
	}
	
	void GuiScroll::ICommandExecutor::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiScroll::ICommandExecutor::SmallDecrease()
	{
		__GacUIInternal<GuiScroll :: ICommandExecutor>::GetInternalObject(*this)->SmallDecrease();
	}
	
	void GuiScroll::ICommandExecutor::SmallIncrease()
	{
		__GacUIInternal<GuiScroll :: ICommandExecutor>::GetInternalObject(*this)->SmallIncrease();
	}
	
	void GuiScroll::ICommandExecutor::BigDecrease()
	{
		__GacUIInternal<GuiScroll :: ICommandExecutor>::GetInternalObject(*this)->BigDecrease();
	}
	
	void GuiScroll::ICommandExecutor::BigIncrease()
	{
		__GacUIInternal<GuiScroll :: ICommandExecutor>::GetInternalObject(*this)->BigIncrease();
	}
	
	void GuiScroll::ICommandExecutor::SetTotalSize(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll :: ICommandExecutor>::GetInternalObject(*this)->SetTotalSize(_unwrapped_value);
	}
	
	void GuiScroll::ICommandExecutor::SetPageSize(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll :: ICommandExecutor>::GetInternalObject(*this)->SetPageSize(_unwrapped_value);
	}
	
	void GuiScroll::ICommandExecutor::SetPosition(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll :: ICommandExecutor>::GetInternalObject(*this)->SetPosition(_unwrapped_value);
	}
	

/***********************************************************************
GuiScroll :: IStyleController
***********************************************************************/

	GuiScroll::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiScroll :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScroll::IStyleController::~IStyleController()
	{
	}
	
	void GuiScroll::IStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	void GuiScroll::IStyleController::SetCommandExecutor(rptr<GuiScroll :: ICommandExecutor> value)
	{
		vl::presentation::controls::GuiScroll::ICommandExecutor* _unwrapped_value = __GacUIInternal<GuiScroll :: ICommandExecutor>::GetInternalObject(value);
		__GacUIInternal<GuiScroll :: IStyleController>::GetInternalObject(*this)->SetCommandExecutor(_unwrapped_value);
	}
	
	void GuiScroll::IStyleController::SetTotalSize(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll :: IStyleController>::GetInternalObject(*this)->SetTotalSize(_unwrapped_value);
	}
	
	void GuiScroll::IStyleController::SetPageSize(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll :: IStyleController>::GetInternalObject(*this)->SetPageSize(_unwrapped_value);
	}
	
	void GuiScroll::IStyleController::SetPosition(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiScroll :: IStyleController>::GetInternalObject(*this)->SetPosition(_unwrapped_value);
	}
	

/***********************************************************************
CommonScrollStyle
***********************************************************************/

	CommonScrollStyle::CommonScrollStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScroll :: IStyleController(static_cast<__GacUIInternal<GuiScroll :: IStyleController>::InternalObjectType*>((__GacUIInternal<CommonScrollStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	CommonScrollStyle::~CommonScrollStyle()
	{
	}
	
	void CommonScrollStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScroll::IStyleController::ClearInternalObjectReference();
	}
	

/***********************************************************************
CommonTrackStyle
***********************************************************************/

	CommonTrackStyle::CommonTrackStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScroll :: IStyleController(static_cast<__GacUIInternal<GuiScroll :: IStyleController>::InternalObjectType*>((__GacUIInternal<CommonTrackStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	CommonTrackStyle::~CommonTrackStyle()
	{
	}
	
	void CommonTrackStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScroll::IStyleController::ClearInternalObjectReference();
	}
	

/***********************************************************************
GuiScrollView
***********************************************************************/

	GuiScrollView::GuiScrollView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiScrollView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollView::~GuiScrollView()
	{
	}
	
	void GuiScrollView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::ClearInternalObjectReference();
	}
	
	void GuiScrollView::CalculateView()
	{
		__GacUIInternal<GuiScrollView>::GetInternalObject(*this)->CalculateView();
	}
	
	Size GuiScrollView::GetViewSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiScrollView>::GetInternalObject(*this)->GetViewSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect GuiScrollView::GetViewBounds()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiScrollView>::GetInternalObject(*this)->GetViewBounds();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiScroll> GuiScrollView::GetHorizontalScroll()
	{
		vl::presentation::controls::GuiScroll* _unwrapped_result = __GacUIInternal<GuiScrollView>::GetInternalObject(*this)->GetHorizontalScroll();
		rptr<GuiScroll> _wrapped_result = __GacUIInternal<GuiScroll>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiScroll> GuiScrollView::GetVerticalScroll()
	{
		vl::presentation::controls::GuiScroll* _unwrapped_result = __GacUIInternal<GuiScrollView>::GetInternalObject(*this)->GetVerticalScroll();
		rptr<GuiScroll> _wrapped_result = __GacUIInternal<GuiScroll>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiScrollView::GetHorizontalAlwaysVisible()
	{
		bool _unwrapped_result = __GacUIInternal<GuiScrollView>::GetInternalObject(*this)->GetHorizontalAlwaysVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScrollView::SetHorizontalAlwaysVisible(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiScrollView>::GetInternalObject(*this)->SetHorizontalAlwaysVisible(_unwrapped_value);
	}
	
	bool GuiScrollView::GetVerticalAlwaysVisible()
	{
		bool _unwrapped_result = __GacUIInternal<GuiScrollView>::GetInternalObject(*this)->GetVerticalAlwaysVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScrollView::SetVerticalAlwaysVisible(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiScrollView>::GetInternalObject(*this)->SetVerticalAlwaysVisible(_unwrapped_value);
	}
	

/***********************************************************************
GuiScrollView :: IStyleProvider
***********************************************************************/

	GuiScrollView::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleProvider(static_cast<__GacUIInternal<GuiControl :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiScrollView :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollView::IStyleProvider::~IStyleProvider()
	{
	}
	
	void GuiScrollView::IStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<GuiScroll :: IStyleController> GuiScrollView::IStyleProvider::CreateHorizontalScrollStyle()
	{
		vl::presentation::controls::GuiScroll::IStyleController* _unwrapped_result = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(*this)->CreateHorizontalScrollStyle();
		rptr<GuiScroll :: IStyleController> _wrapped_result = __GacUIInternal<GuiScroll :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiScroll :: IStyleController> GuiScrollView::IStyleProvider::CreateVerticalScrollStyle()
	{
		vl::presentation::controls::GuiScroll::IStyleController* _unwrapped_result = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(*this)->CreateVerticalScrollStyle();
		rptr<GuiScroll :: IStyleController> _wrapped_result = __GacUIInternal<GuiScroll :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiScrollView::IStyleProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_boundsComposition = __GacUIInternal<GuiBoundsComposition>::GetInternalObject(boundsComposition);
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(*this)->InstallBackground(_unwrapped_boundsComposition);
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiScrollView::IStyleProvider::GetDefaultScrollSize()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(*this)->GetDefaultScrollSize();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiScrollView :: StyleController
***********************************************************************/

	GuiScrollView::StyleController::StyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiScrollView :: StyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollView::StyleController::~StyleController()
	{
	}
	
	void GuiScrollView::StyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<GuiScrollView :: StyleController> GuiScrollView::StyleController::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::GuiScrollView::StyleController* _unwrapped_result = new vl::presentation::controls::GuiScrollView::StyleController(_unwrapped__styleProvider);
		return __GacUIInternal<GuiScrollView :: StyleController>::BuildRptr(_unwrapped_result);
	}
	
	void GuiScrollView::StyleController::AdjustView(Size fullSize)
	{
		vl::presentation::Size _unwrapped_fullSize = *__GacUIInternal<Size>::GetInternalObject(fullSize);
		__GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->AdjustView(_unwrapped_fullSize);
	}
	
	void GuiScrollView::StyleController::SetScrollView(rptr<GuiScrollView> _scrollView)
	{
		vl::presentation::controls::GuiScrollView* _unwrapped__scrollView = __GacUIInternal<GuiScrollView>::GetInternalObject(_scrollView);
		__GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->SetScrollView(_unwrapped__scrollView);
	}
	
	rptr<GuiScrollView :: IStyleProvider> GuiScrollView::StyleController::GetStyleProvider()
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped_result = __GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->GetStyleProvider();
		rptr<GuiScrollView :: IStyleProvider> _wrapped_result = __GacUIInternal<GuiScrollView :: IStyleProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiScroll> GuiScrollView::StyleController::GetHorizontalScroll()
	{
		vl::presentation::controls::GuiScroll* _unwrapped_result = __GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->GetHorizontalScroll();
		rptr<GuiScroll> _wrapped_result = __GacUIInternal<GuiScroll>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiScroll> GuiScrollView::StyleController::GetVerticalScroll()
	{
		vl::presentation::controls::GuiScroll* _unwrapped_result = __GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->GetVerticalScroll();
		rptr<GuiScroll> _wrapped_result = __GacUIInternal<GuiScroll>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiTableComposition> GuiScrollView::StyleController::GetInternalTableComposition()
	{
		vl::presentation::elements::GuiTableComposition* _unwrapped_result = __GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->GetInternalTableComposition();
		rptr<GuiTableComposition> _wrapped_result = __GacUIInternal<GuiTableComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiBoundsComposition> GuiScrollView::StyleController::GetInternalContainerComposition()
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_result = __GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->GetInternalContainerComposition();
		rptr<GuiBoundsComposition> _wrapped_result = __GacUIInternal<GuiBoundsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiScrollView::StyleController::GetHorizontalAlwaysVisible()
	{
		bool _unwrapped_result = __GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->GetHorizontalAlwaysVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScrollView::StyleController::SetHorizontalAlwaysVisible(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->SetHorizontalAlwaysVisible(_unwrapped_value);
	}
	
	bool GuiScrollView::StyleController::GetVerticalAlwaysVisible()
	{
		bool _unwrapped_result = __GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->GetVerticalAlwaysVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiScrollView::StyleController::SetVerticalAlwaysVisible(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiScrollView :: StyleController>::GetInternalObject(*this)->SetVerticalAlwaysVisible(_unwrapped_value);
	}
	

/***********************************************************************
GuiListControl
***********************************************************************/

	GuiListControl::GuiListControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView(static_cast<__GacUIInternal<GuiScrollView>::InternalObjectType*>((__GacUIInternal<GuiListControl>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::~GuiListControl()
	{
	}
	
	void GuiListControl::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScrollView::ClearInternalObjectReference();
	}
	
	rptr<GuiListControl> GuiListControl::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider, bool acceptFocus)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::GuiListControl::IItemProvider* _unwrapped__itemProvider = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(_itemProvider);
		bool _unwrapped_acceptFocus = acceptFocus;
		vl::presentation::controls::GuiListControl* _unwrapped_result = new vl::presentation::controls::GuiListControl(_unwrapped__styleProvider, _unwrapped__itemProvider, _unwrapped_acceptFocus);
		return __GacUIInternal<GuiListControl>::BuildRptr(_unwrapped_result);
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiListControl::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value)
	{
		vl::Ptr<vl::presentation::controls::GuiListControl::IItemStyleProvider> _unwrapped_value = __GacUIInternal<GuiListControl :: IItemStyleProvider>::GetInternalObject(value);
		vl::Ptr<vl::presentation::controls::GuiListControl::IItemStyleProvider> _unwrapped_result = __GacUIInternal<GuiListControl>::GetInternalObject(*this)->SetStyleProvider(_unwrapped_value);
		sptr<GuiListControl :: IItemStyleProvider> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleProvider>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<GuiListControl :: IItemArranger> GuiListControl::SetArranger(sptr<GuiListControl :: IItemArranger> value)
	{
		vl::Ptr<vl::presentation::controls::GuiListControl::IItemArranger> _unwrapped_value = __GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(value);
		vl::Ptr<vl::presentation::controls::GuiListControl::IItemArranger> _unwrapped_result = __GacUIInternal<GuiListControl>::GetInternalObject(*this)->SetArranger(_unwrapped_value);
		sptr<GuiListControl :: IItemArranger> _wrapped_result = __GacUIInternal<GuiListControl :: IItemArranger>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<GuiListControl :: IItemCoordinateTransformer> GuiListControl::SetCoordinateTransformer(sptr<GuiListControl :: IItemCoordinateTransformer> value)
	{
		vl::Ptr<vl::presentation::controls::GuiListControl::IItemCoordinateTransformer> _unwrapped_value = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(value);
		vl::Ptr<vl::presentation::controls::GuiListControl::IItemCoordinateTransformer> _unwrapped_result = __GacUIInternal<GuiListControl>::GetInternalObject(*this)->SetCoordinateTransformer(_unwrapped_value);
		sptr<GuiListControl :: IItemCoordinateTransformer> _wrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiListControl :: IItemProvider> GuiListControl::GetItemProvider()
	{
		vl::presentation::controls::GuiListControl::IItemProvider* _unwrapped_result = __GacUIInternal<GuiListControl>::GetInternalObject(*this)->GetItemProvider();
		rptr<GuiListControl :: IItemProvider> _wrapped_result = __GacUIInternal<GuiListControl :: IItemProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> GuiListControl::GetStyleProvider()
	{
		vl::presentation::controls::GuiListControl::IItemStyleProvider* _unwrapped_result = __GacUIInternal<GuiListControl>::GetInternalObject(*this)->GetStyleProvider();
		rptr<GuiListControl :: IItemStyleProvider> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiListControl :: IItemArranger> GuiListControl::GetArranger()
	{
		vl::presentation::controls::GuiListControl::IItemArranger* _unwrapped_result = __GacUIInternal<GuiListControl>::GetInternalObject(*this)->GetArranger();
		rptr<GuiListControl :: IItemArranger> _wrapped_result = __GacUIInternal<GuiListControl :: IItemArranger>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> GuiListControl::GetCoordinateTransformer()
	{
		vl::presentation::controls::GuiListControl::IItemCoordinateTransformer* _unwrapped_result = __GacUIInternal<GuiListControl>::GetInternalObject(*this)->GetCoordinateTransformer();
		rptr<GuiListControl :: IItemCoordinateTransformer> _wrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiListControl::on_StyleProviderChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiListControl>::GetInternalObject(*this)->StyleProviderChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiListControl::on_ArrangerChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiListControl>::GetInternalObject(*this)->ArrangerChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiListControl::on_CoordinateTransformerChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiListControl>::GetInternalObject(*this)->CoordinateTransformerChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiListControl :: IItemArrangerCallback
***********************************************************************/

	GuiListControl::IItemArrangerCallback::IItemArrangerCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemArrangerCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemArrangerCallback::~IItemArrangerCallback()
	{
	}
	
	void GuiListControl::IItemArrangerCallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemArrangerCallback::RequestItem(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_result = __GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(*this)->RequestItem(_unwrapped_itemIndex);
		rptr<GuiListControl :: IItemStyleController> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiListControl::IItemArrangerCallback::ReleaseItem(rptr<GuiListControl :: IItemStyleController> style)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_style = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(style);
		__GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(*this)->ReleaseItem(_unwrapped_style);
	}
	
	Size GuiListControl::IItemArrangerCallback::GetStylePreferredSize(rptr<GuiListControl :: IItemStyleController> style)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_style = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(style);
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(*this)->GetStylePreferredSize(_unwrapped_style);
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiListControl::IItemArrangerCallback::SetStyleAlignmentToParent(rptr<GuiListControl :: IItemStyleController> style, Margin margin)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_style = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(style);
		vl::presentation::Margin _unwrapped_margin = *__GacUIInternal<Margin>::GetInternalObject(margin);
		__GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(*this)->SetStyleAlignmentToParent(_unwrapped_style, _unwrapped_margin);
	}
	
	void GuiListControl::IItemArrangerCallback::SetStyleBounds(rptr<GuiListControl :: IItemStyleController> style, Rect bounds)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_style = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(style);
		vl::presentation::Rect _unwrapped_bounds = *__GacUIInternal<Rect>::GetInternalObject(bounds);
		__GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(*this)->SetStyleBounds(_unwrapped_style, _unwrapped_bounds);
	}
	
	void GuiListControl::IItemArrangerCallback::OnTotalSizeChanged()
	{
		__GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(*this)->OnTotalSizeChanged();
	}
	
	void GuiListControl::IItemArrangerCallback::SetViewLocation(Point value)
	{
		vl::presentation::Point _unwrapped_value = *__GacUIInternal<Point>::GetInternalObject(value);
		__GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(*this)->SetViewLocation(_unwrapped_value);
	}
	
	rptr<GuiGraphicsComposition> GuiListControl::IItemArrangerCallback::GetContainerComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(*this)->GetContainerComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiListControl :: IItemCoordinateTransformer
***********************************************************************/

	GuiListControl::IItemCoordinateTransformer::IItemCoordinateTransformer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemCoordinateTransformer::~IItemCoordinateTransformer()
	{
	}
	
	void GuiListControl::IItemCoordinateTransformer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	Size GuiListControl::IItemCoordinateTransformer::RealSizeToVirtualSize(Size size)
	{
		vl::presentation::Size _unwrapped_size = *__GacUIInternal<Size>::GetInternalObject(size);
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(*this)->RealSizeToVirtualSize(_unwrapped_size);
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Size GuiListControl::IItemCoordinateTransformer::VirtualSizeToRealSize(Size size)
	{
		vl::presentation::Size _unwrapped_size = *__GacUIInternal<Size>::GetInternalObject(size);
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(*this)->VirtualSizeToRealSize(_unwrapped_size);
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Point GuiListControl::IItemCoordinateTransformer::RealPointToVirtualPoint(Size realFullSize, Point point)
	{
		vl::presentation::Size _unwrapped_realFullSize = *__GacUIInternal<Size>::GetInternalObject(realFullSize);
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		vl::presentation::Point _unwrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(*this)->RealPointToVirtualPoint(_unwrapped_realFullSize, _unwrapped_point);
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Point GuiListControl::IItemCoordinateTransformer::VirtualPointToRealPoint(Size realFullSize, Point point)
	{
		vl::presentation::Size _unwrapped_realFullSize = *__GacUIInternal<Size>::GetInternalObject(realFullSize);
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		vl::presentation::Point _unwrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(*this)->VirtualPointToRealPoint(_unwrapped_realFullSize, _unwrapped_point);
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect GuiListControl::IItemCoordinateTransformer::RealRectToVirtualRect(Size realFullSize, Rect rect)
	{
		vl::presentation::Size _unwrapped_realFullSize = *__GacUIInternal<Size>::GetInternalObject(realFullSize);
		vl::presentation::Rect _unwrapped_rect = *__GacUIInternal<Rect>::GetInternalObject(rect);
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(*this)->RealRectToVirtualRect(_unwrapped_realFullSize, _unwrapped_rect);
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect GuiListControl::IItemCoordinateTransformer::VirtualRectToRealRect(Size realFullSize, Rect rect)
	{
		vl::presentation::Size _unwrapped_realFullSize = *__GacUIInternal<Size>::GetInternalObject(realFullSize);
		vl::presentation::Rect _unwrapped_rect = *__GacUIInternal<Rect>::GetInternalObject(rect);
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(*this)->VirtualRectToRealRect(_unwrapped_realFullSize, _unwrapped_rect);
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Margin GuiListControl::IItemCoordinateTransformer::RealMarginToVirtualMargin(Margin margin)
	{
		vl::presentation::Margin _unwrapped_margin = *__GacUIInternal<Margin>::GetInternalObject(margin);
		vl::presentation::Margin _unwrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(*this)->RealMarginToVirtualMargin(_unwrapped_margin);
		Margin _wrapped_result = __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Margin GuiListControl::IItemCoordinateTransformer::VirtualMarginToRealMargin(Margin margin)
	{
		vl::presentation::Margin _unwrapped_margin = *__GacUIInternal<Margin>::GetInternalObject(margin);
		vl::presentation::Margin _unwrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::GetInternalObject(*this)->VirtualMarginToRealMargin(_unwrapped_margin);
		Margin _wrapped_result = __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiListControl :: IItemPrimaryTextView
***********************************************************************/

	GuiListControl::IItemPrimaryTextView::IItemPrimaryTextView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemPrimaryTextView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemPrimaryTextView::~IItemPrimaryTextView()
	{
	}
	
	void GuiListControl::IItemPrimaryTextView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	GacString GuiListControl::IItemPrimaryTextView::GetPrimaryTextViewText(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<GuiListControl :: IItemPrimaryTextView>::GetInternalObject(*this)->GetPrimaryTextViewText(_unwrapped_itemIndex);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	bool GuiListControl::IItemPrimaryTextView::ContainsPrimaryText(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		bool _unwrapped_result = __GacUIInternal<GuiListControl :: IItemPrimaryTextView>::GetInternalObject(*this)->ContainsPrimaryText(_unwrapped_itemIndex);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	wchar_t const* GuiListControl::IItemPrimaryTextView::get_Identifier()
	{
		wchar_t const* _wrapped_result = vl::presentation::controls::GuiListControl::IItemPrimaryTextView::Identifier;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiListControl :: IItemProvider
***********************************************************************/

	GuiListControl::IItemProvider::IItemProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemProvider::~IItemProvider()
	{
	}
	
	void GuiListControl::IItemProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	bool GuiListControl::IItemProvider::AttachCallback(rptr<GuiListControl :: IItemProviderCallback> value)
	{
		vl::presentation::controls::GuiListControl::IItemProviderCallback* _unwrapped_value = __GacUIInternal<GuiListControl :: IItemProviderCallback>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(*this)->AttachCallback(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiListControl::IItemProvider::DetachCallback(rptr<GuiListControl :: IItemProviderCallback> value)
	{
		vl::presentation::controls::GuiListControl::IItemProviderCallback* _unwrapped_value = __GacUIInternal<GuiListControl :: IItemProviderCallback>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(*this)->DetachCallback(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiListControl::IItemProvider::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<IDescriptable> GuiListControl::IItemProvider::RequestView(const GacString& identifier)
	{
		vl::ObjectString<wchar_t> _unwrapped_identifier = identifier.Buffer();
		vl::presentation::IDescriptable* _unwrapped_result = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(*this)->RequestView(_unwrapped_identifier);
		rptr<IDescriptable> _wrapped_result = __GacUIInternal<IDescriptable>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiListControl::IItemProvider::ReleaseView(rptr<IDescriptable> view)
	{
		vl::presentation::IDescriptable* _unwrapped_view = __GacUIInternal<IDescriptable>::GetInternalObject(view);
		__GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(*this)->ReleaseView(_unwrapped_view);
	}
	

/***********************************************************************
GuiListControl :: IItemProviderCallback
***********************************************************************/

	GuiListControl::IItemProviderCallback::IItemProviderCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemProviderCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemProviderCallback::~IItemProviderCallback()
	{
	}
	
	void GuiListControl::IItemProviderCallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiListControl::IItemProviderCallback::OnAttached(rptr<GuiListControl :: IItemProvider> provider)
	{
		vl::presentation::controls::GuiListControl::IItemProvider* _unwrapped_provider = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(provider);
		__GacUIInternal<GuiListControl :: IItemProviderCallback>::GetInternalObject(*this)->OnAttached(_unwrapped_provider);
	}
	
	void GuiListControl::IItemProviderCallback::OnItemModified(signed __int32 start, signed __int32 count, signed __int32 newCount)
	{
		signed __int32 _unwrapped_start = start;
		signed __int32 _unwrapped_count = count;
		signed __int32 _unwrapped_newCount = newCount;
		__GacUIInternal<GuiListControl :: IItemProviderCallback>::GetInternalObject(*this)->OnItemModified(_unwrapped_start, _unwrapped_count, _unwrapped_newCount);
	}
	

/***********************************************************************
GuiListControl :: IItemArranger
***********************************************************************/

	GuiListControl::IItemArranger::IItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemProviderCallback(static_cast<__GacUIInternal<GuiListControl :: IItemProviderCallback>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemArranger::~IItemArranger()
	{
	}
	
	void GuiListControl::IItemArranger::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemProviderCallback::ClearInternalObjectReference();
	}
	
	void GuiListControl::IItemArranger::AttachListControl(rptr<GuiListControl> value)
	{
		vl::presentation::controls::GuiListControl* _unwrapped_value = __GacUIInternal<GuiListControl>::GetInternalObject(value);
		__GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(*this)->AttachListControl(_unwrapped_value);
	}
	
	void GuiListControl::IItemArranger::DetachListControl()
	{
		__GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(*this)->DetachListControl();
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemArranger::GetVisibleStyle(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_result = __GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(*this)->GetVisibleStyle(_unwrapped_itemIndex);
		rptr<GuiListControl :: IItemStyleController> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiListControl::IItemArranger::GetVisibleIndex(rptr<GuiListControl :: IItemStyleController> style)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_style = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(style);
		signed __int32 _unwrapped_result = __GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(*this)->GetVisibleIndex(_unwrapped_style);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiListControl::IItemArranger::OnViewChanged(Rect bounds)
	{
		vl::presentation::Rect _unwrapped_bounds = *__GacUIInternal<Rect>::GetInternalObject(bounds);
		__GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(*this)->OnViewChanged(_unwrapped_bounds);
	}
	
	rptr<GuiListControl :: IItemArrangerCallback> GuiListControl::IItemArranger::GetCallback()
	{
		vl::presentation::controls::GuiListControl::IItemArrangerCallback* _unwrapped_result = __GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(*this)->GetCallback();
		rptr<GuiListControl :: IItemArrangerCallback> _wrapped_result = __GacUIInternal<GuiListControl :: IItemArrangerCallback>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiListControl::IItemArranger::SetCallback(rptr<GuiListControl :: IItemArrangerCallback> value)
	{
		vl::presentation::controls::GuiListControl::IItemArrangerCallback* _unwrapped_value = __GacUIInternal<GuiListControl :: IItemArrangerCallback>::GetInternalObject(value);
		__GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(*this)->SetCallback(_unwrapped_value);
	}
	
	Size GuiListControl::IItemArranger::GetTotalSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<GuiListControl :: IItemArranger>::GetInternalObject(*this)->GetTotalSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiListControl :: IItemStyleController
***********************************************************************/

	GuiListControl::IItemStyleController::IItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemStyleController::~IItemStyleController()
	{
	}
	
	void GuiListControl::IItemStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	bool GuiListControl::IItemStyleController::IsCacheable()
	{
		bool _unwrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(*this)->IsCacheable();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiListControl::IItemStyleController::IsInstalled()
	{
		bool _unwrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(*this)->IsInstalled();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiListControl::IItemStyleController::OnInstalled()
	{
		__GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(*this)->OnInstalled();
	}
	
	void GuiListControl::IItemStyleController::OnUninstalled()
	{
		__GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(*this)->OnUninstalled();
	}
	
	rptr<GuiListControl :: IItemStyleProvider> GuiListControl::IItemStyleController::GetStyleProvider()
	{
		vl::presentation::controls::GuiListControl::IItemStyleProvider* _unwrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(*this)->GetStyleProvider();
		rptr<GuiListControl :: IItemStyleProvider> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiListControl::IItemStyleController::GetItemStyleId()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(*this)->GetItemStyleId();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiBoundsComposition> GuiListControl::IItemStyleController::GetBoundsComposition()
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(*this)->GetBoundsComposition();
		rptr<GuiBoundsComposition> _wrapped_result = __GacUIInternal<GuiBoundsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiListControl :: IItemStyleProvider
***********************************************************************/

	GuiListControl::IItemStyleProvider::IItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemStyleProvider::~IItemStyleProvider()
	{
	}
	
	void GuiListControl::IItemStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiListControl::IItemStyleProvider::AttachListControl(rptr<GuiListControl> value)
	{
		vl::presentation::controls::GuiListControl* _unwrapped_value = __GacUIInternal<GuiListControl>::GetInternalObject(value);
		__GacUIInternal<GuiListControl :: IItemStyleProvider>::GetInternalObject(*this)->AttachListControl(_unwrapped_value);
	}
	
	void GuiListControl::IItemStyleProvider::DetachListControl()
	{
		__GacUIInternal<GuiListControl :: IItemStyleProvider>::GetInternalObject(*this)->DetachListControl();
	}
	
	signed __int32 GuiListControl::IItemStyleProvider::GetItemStyleId(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		signed __int32 _unwrapped_result = __GacUIInternal<GuiListControl :: IItemStyleProvider>::GetInternalObject(*this)->GetItemStyleId(_unwrapped_itemIndex);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemStyleProvider::CreateItemStyle(signed __int32 styleId)
	{
		signed __int32 _unwrapped_styleId = styleId;
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_result = __GacUIInternal<GuiListControl :: IItemStyleProvider>::GetInternalObject(*this)->CreateItemStyle(_unwrapped_styleId);
		rptr<GuiListControl :: IItemStyleController> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiListControl::IItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_style = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(style);
		__GacUIInternal<GuiListControl :: IItemStyleProvider>::GetInternalObject(*this)->DestroyItemStyle(_unwrapped_style);
	}
	
	void GuiListControl::IItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_style = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(style);
		signed __int32 _unwrapped_itemIndex = itemIndex;
		__GacUIInternal<GuiListControl :: IItemStyleProvider>::GetInternalObject(*this)->Install(_unwrapped_style, _unwrapped_itemIndex);
	}
	

/***********************************************************************
AxisAlignedItemCoordinateTransformer
***********************************************************************/

	AxisAlignedItemCoordinateTransformer::AxisAlignedItemCoordinateTransformer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemCoordinateTransformer(static_cast<__GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::InternalObjectType*>((__GacUIInternal<AxisAlignedItemCoordinateTransformer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	AxisAlignedItemCoordinateTransformer::~AxisAlignedItemCoordinateTransformer()
	{
	}
	
	void AxisAlignedItemCoordinateTransformer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemCoordinateTransformer::ClearInternalObjectReference();
	}
	
	rptr<AxisAlignedItemCoordinateTransformer> AxisAlignedItemCoordinateTransformer::CreateRptr(AxisAlignedItemCoordinateTransformer :: Alignment _alignment)
	{
		vl::presentation::controls::list::AxisAlignedItemCoordinateTransformer::Alignment _unwrapped__alignment = (vl::presentation::controls::list::AxisAlignedItemCoordinateTransformer::Alignment)_alignment;
		vl::presentation::controls::list::AxisAlignedItemCoordinateTransformer* _unwrapped_result = new vl::presentation::controls::list::AxisAlignedItemCoordinateTransformer(_unwrapped__alignment);
		return __GacUIInternal<AxisAlignedItemCoordinateTransformer>::BuildRptr(_unwrapped_result);
	}
	
	AxisAlignedItemCoordinateTransformer :: Alignment AxisAlignedItemCoordinateTransformer::GetAlignment()
	{
		vl::presentation::controls::list::AxisAlignedItemCoordinateTransformer::Alignment _unwrapped_result = __GacUIInternal<AxisAlignedItemCoordinateTransformer>::GetInternalObject(*this)->GetAlignment();
		AxisAlignedItemCoordinateTransformer :: Alignment _wrapped_result = (AxisAlignedItemCoordinateTransformer :: Alignment)_unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
DefaultItemCoordinateTransformer
***********************************************************************/

	DefaultItemCoordinateTransformer::DefaultItemCoordinateTransformer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemCoordinateTransformer(static_cast<__GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::InternalObjectType*>((__GacUIInternal<DefaultItemCoordinateTransformer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	DefaultItemCoordinateTransformer::~DefaultItemCoordinateTransformer()
	{
	}
	
	void DefaultItemCoordinateTransformer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemCoordinateTransformer::ClearInternalObjectReference();
	}
	
	rptr<DefaultItemCoordinateTransformer> DefaultItemCoordinateTransformer::CreateRptr()
	{
		vl::presentation::controls::list::DefaultItemCoordinateTransformer* _unwrapped_result = new vl::presentation::controls::list::DefaultItemCoordinateTransformer();
		return __GacUIInternal<DefaultItemCoordinateTransformer>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiScrollContainer
***********************************************************************/

	GuiScrollContainer::GuiScrollContainer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView(static_cast<__GacUIInternal<GuiScrollView>::InternalObjectType*>((__GacUIInternal<GuiScrollContainer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollContainer::~GuiScrollContainer()
	{
	}
	
	void GuiScrollContainer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScrollView::ClearInternalObjectReference();
	}
	
	rptr<GuiScrollContainer> GuiScrollContainer::CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped_styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(styleProvider);
		vl::presentation::controls::GuiScrollContainer* _unwrapped_result = new vl::presentation::controls::GuiScrollContainer(_unwrapped_styleProvider);
		return __GacUIInternal<GuiScrollContainer>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiScrollContainer :: StyleController
***********************************************************************/

	GuiScrollContainer::StyleController::StyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: StyleController(static_cast<__GacUIInternal<GuiScrollView :: StyleController>::InternalObjectType*>((__GacUIInternal<GuiScrollContainer :: StyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollContainer::StyleController::~StyleController()
	{
	}
	
	void GuiScrollContainer::StyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScrollView::StyleController::ClearInternalObjectReference();
	}
	
	rptr<GuiScrollContainer :: StyleController> GuiScrollContainer::StyleController::CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped_styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(styleProvider);
		vl::presentation::controls::GuiScrollContainer::StyleController* _unwrapped_result = new vl::presentation::controls::GuiScrollContainer::StyleController(_unwrapped_styleProvider);
		return __GacUIInternal<GuiScrollContainer :: StyleController>::BuildRptr(_unwrapped_result);
	}
	
	void GuiScrollContainer::StyleController::MoveContainer(Point leftTop)
	{
		vl::presentation::Point _unwrapped_leftTop = *__GacUIInternal<Point>::GetInternalObject(leftTop);
		__GacUIInternal<GuiScrollContainer :: StyleController>::GetInternalObject(*this)->MoveContainer(_unwrapped_leftTop);
	}
	

/***********************************************************************
GuiSelectableButton
***********************************************************************/

	GuiSelectableButton::GuiSelectableButton(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton(static_cast<__GacUIInternal<GuiButton>::InternalObjectType*>((__GacUIInternal<GuiSelectableButton>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableButton::~GuiSelectableButton()
	{
	}
	
	void GuiSelectableButton::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiButton::ClearInternalObjectReference();
	}
	
	rptr<GuiSelectableButton> GuiSelectableButton::CreateRptr(rptr<GuiSelectableButton :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiSelectableButton::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiSelectableButton :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiSelectableButton* _unwrapped_result = new vl::presentation::controls::GuiSelectableButton(_unwrapped__styleController);
		return __GacUIInternal<GuiSelectableButton>::BuildRptr(_unwrapped_result);
	}
	
	rptr<GuiSelectableButton :: GroupController> GuiSelectableButton::GetGroupController()
	{
		vl::presentation::controls::GuiSelectableButton::GroupController* _unwrapped_result = __GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->GetGroupController();
		rptr<GuiSelectableButton :: GroupController> _wrapped_result = __GacUIInternal<GuiSelectableButton :: GroupController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiSelectableButton::SetGroupController(rptr<GuiSelectableButton :: GroupController> value)
	{
		vl::presentation::controls::GuiSelectableButton::GroupController* _unwrapped_value = __GacUIInternal<GuiSelectableButton :: GroupController>::GetInternalObject(value);
		__GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->SetGroupController(_unwrapped_value);
	}
	
	bool GuiSelectableButton::GetAutoSelection()
	{
		bool _unwrapped_result = __GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->GetAutoSelection();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSelectableButton::SetAutoSelection(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->SetAutoSelection(_unwrapped_value);
	}
	
	bool GuiSelectableButton::GetSelected()
	{
		bool _unwrapped_result = __GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->GetSelected();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSelectableButton::SetSelected(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->SetSelected(_unwrapped_value);
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiSelectableButton::on_GroupControllerChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->GroupControllerChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiSelectableButton::on_AutoSelectionChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->AutoSelectionChanged);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiSelectableButton::on_SelectedChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiSelectableButton>::GetInternalObject(*this)->SelectedChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSelectableButton :: GroupController
***********************************************************************/

	GuiSelectableButton::GroupController::GroupController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiComponent(static_cast<__GacUIInternal<GuiComponent>::InternalObjectType*>((__GacUIInternal<GuiSelectableButton :: GroupController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableButton::GroupController::~GroupController()
	{
	}
	
	void GuiSelectableButton::GroupController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiComponent::ClearInternalObjectReference();
	}
	
	void GuiSelectableButton::GroupController::Attach(rptr<GuiSelectableButton> button)
	{
		vl::presentation::controls::GuiSelectableButton* _unwrapped_button = __GacUIInternal<GuiSelectableButton>::GetInternalObject(button);
		__GacUIInternal<GuiSelectableButton :: GroupController>::GetInternalObject(*this)->Attach(_unwrapped_button);
	}
	
	void GuiSelectableButton::GroupController::Detach(rptr<GuiSelectableButton> button)
	{
		vl::presentation::controls::GuiSelectableButton* _unwrapped_button = __GacUIInternal<GuiSelectableButton>::GetInternalObject(button);
		__GacUIInternal<GuiSelectableButton :: GroupController>::GetInternalObject(*this)->Detach(_unwrapped_button);
	}
	
	void GuiSelectableButton::GroupController::OnSelectedChanged(rptr<GuiSelectableButton> button)
	{
		vl::presentation::controls::GuiSelectableButton* _unwrapped_button = __GacUIInternal<GuiSelectableButton>::GetInternalObject(button);
		__GacUIInternal<GuiSelectableButton :: GroupController>::GetInternalObject(*this)->OnSelectedChanged(_unwrapped_button);
	}
	

/***********************************************************************
GuiSelectableButton :: IStyleController
***********************************************************************/

	GuiSelectableButton::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton :: IStyleController(static_cast<__GacUIInternal<GuiButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableButton::IStyleController::~IStyleController()
	{
	}
	
	void GuiSelectableButton::IStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiButton::IStyleController::ClearInternalObjectReference();
	}
	
	void GuiSelectableButton::IStyleController::SetSelected(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSelectableButton :: IStyleController>::GetInternalObject(*this)->SetSelected(_unwrapped_value);
	}
	

/***********************************************************************
GuiSelectableButton :: MutexGroupController
***********************************************************************/

	GuiSelectableButton::MutexGroupController::MutexGroupController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: GroupController(static_cast<__GacUIInternal<GuiSelectableButton :: GroupController>::InternalObjectType*>((__GacUIInternal<GuiSelectableButton :: MutexGroupController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableButton::MutexGroupController::~MutexGroupController()
	{
	}
	
	void GuiSelectableButton::MutexGroupController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableButton::GroupController::ClearInternalObjectReference();
	}
	
	rptr<GuiSelectableButton :: MutexGroupController> GuiSelectableButton::MutexGroupController::CreateRptr()
	{
		vl::presentation::controls::GuiSelectableButton::MutexGroupController* _unwrapped_result = new vl::presentation::controls::GuiSelectableButton::MutexGroupController();
		return __GacUIInternal<GuiSelectableButton :: MutexGroupController>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiSelectableListControl
***********************************************************************/

	GuiSelectableListControl::GuiSelectableListControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl(static_cast<__GacUIInternal<GuiListControl>::InternalObjectType*>((__GacUIInternal<GuiSelectableListControl>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableListControl::~GuiSelectableListControl()
	{
	}
	
	void GuiSelectableListControl::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::ClearInternalObjectReference();
	}
	
	rptr<GuiSelectableListControl> GuiSelectableListControl::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::GuiListControl::IItemProvider* _unwrapped__itemProvider = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(_itemProvider);
		vl::presentation::controls::GuiSelectableListControl* _unwrapped_result = new vl::presentation::controls::GuiSelectableListControl(_unwrapped__styleProvider, _unwrapped__itemProvider);
		return __GacUIInternal<GuiSelectableListControl>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiSelectableListControl::GetSelected(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		bool _unwrapped_result = __GacUIInternal<GuiSelectableListControl>::GetInternalObject(*this)->GetSelected(_unwrapped_itemIndex);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSelectableListControl::SetSelected(signed __int32 itemIndex, bool value)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSelectableListControl>::GetInternalObject(*this)->SetSelected(_unwrapped_itemIndex, _unwrapped_value);
	}
	
	void GuiSelectableListControl::ClearSelection()
	{
		__GacUIInternal<GuiSelectableListControl>::GetInternalObject(*this)->ClearSelection();
	}
	
	bool GuiSelectableListControl::GetMultiSelect()
	{
		bool _unwrapped_result = __GacUIInternal<GuiSelectableListControl>::GetInternalObject(*this)->GetMultiSelect();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSelectableListControl::SetMultiSelect(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSelectableListControl>::GetInternalObject(*this)->SetMultiSelect(_unwrapped_value);
	}
	
	rptr<IReadonlyList_of_int> GuiSelectableListControl::GetSelectedItems()
	{
		vl::collections::IReadonlyList<int,int> const& _unwrapped_result = __GacUIInternal<GuiSelectableListControl>::GetInternalObject(*this)->GetSelectedItems();
		rptr<IReadonlyList_of_int> _wrapped_result = __GacUIInternal<IReadonlyList_of_int>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiSelectableListControl::on_SelectionChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiSelectableListControl>::GetInternalObject(*this)->SelectionChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSelectableListControl :: IItemStyleProvider
***********************************************************************/

	GuiSelectableListControl::IItemStyleProvider::IItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemStyleProvider(static_cast<__GacUIInternal<GuiListControl :: IItemStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableListControl::IItemStyleProvider::~IItemStyleProvider()
	{
	}
	
	void GuiSelectableListControl::IItemStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemStyleProvider::ClearInternalObjectReference();
	}
	
	void GuiSelectableListControl::IItemStyleProvider::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_style = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(style);
		bool _unwrapped_value = value;
		__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::GetInternalObject(*this)->SetStyleSelected(_unwrapped_style, _unwrapped_value);
	}
	

/***********************************************************************
GuiListViewBase
***********************************************************************/

	GuiListViewBase::GuiListViewBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl(static_cast<__GacUIInternal<GuiSelectableListControl>::InternalObjectType*>((__GacUIInternal<GuiListViewBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListViewBase::~GuiListViewBase()
	{
	}
	
	void GuiListViewBase::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableListControl::ClearInternalObjectReference();
	}
	
	rptr<GuiListViewBase> GuiListViewBase::CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider)
	{
		vl::presentation::controls::GuiListViewBase::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::GuiListControl::IItemProvider* _unwrapped__itemProvider = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(_itemProvider);
		vl::presentation::controls::GuiListViewBase* _unwrapped_result = new vl::presentation::controls::GuiListViewBase(_unwrapped__styleProvider, _unwrapped__itemProvider);
		return __GacUIInternal<GuiListViewBase>::BuildRptr(_unwrapped_result);
	}
	
	rptr<GuiListViewBase :: IStyleProvider> GuiListViewBase::GetListViewStyleProvider()
	{
		vl::presentation::controls::GuiListViewBase::IStyleProvider* _unwrapped_result = __GacUIInternal<GuiListViewBase>::GetInternalObject(*this)->GetListViewStyleProvider();
		rptr<GuiListViewBase :: IStyleProvider> _wrapped_result = __GacUIInternal<GuiListViewBase :: IStyleProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiListViewBase :: IStyleProvider
***********************************************************************/

	GuiListViewBase::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: IStyleProvider(static_cast<__GacUIInternal<GuiScrollView :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiListViewBase :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListViewBase::IStyleProvider::~IStyleProvider()
	{
	}
	
	void GuiListViewBase::IStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScrollView::IStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiListViewBase::IStyleProvider::CreateItemBackground()
	{
		vl::presentation::controls::GuiSelectableButton::IStyleController* _unwrapped_result = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(*this)->CreateItemBackground();
		rptr<GuiSelectableButton :: IStyleController> _wrapped_result = __GacUIInternal<GuiSelectableButton :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiListViewBase::IStyleProvider::CreateColumnStyle()
	{
		vl::presentation::controls::GuiSelectableButton::IStyleController* _unwrapped_result = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(*this)->CreateColumnStyle();
		rptr<GuiSelectableButton :: IStyleController> _wrapped_result = __GacUIInternal<GuiSelectableButton :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiListViewBase::IStyleProvider::GetPrimaryTextColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(*this)->GetPrimaryTextColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiListViewBase::IStyleProvider::GetSecondaryTextColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(*this)->GetSecondaryTextColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiListViewBase::IStyleProvider::GetItemSeparatorColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(*this)->GetItemSeparatorColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSideAlignedComposition
***********************************************************************/

	GuiSideAlignedComposition::GuiSideAlignedComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiSideAlignedComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSideAlignedComposition::~GuiSideAlignedComposition()
	{
	}
	
	void GuiSideAlignedComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiGraphicsSite::ClearInternalObjectReference();
	}
	
	rptr<GuiSideAlignedComposition> GuiSideAlignedComposition::CreateRptr()
	{
		vl::presentation::elements::GuiSideAlignedComposition* _unwrapped_result = new vl::presentation::elements::GuiSideAlignedComposition();
		return __GacUIInternal<GuiSideAlignedComposition>::BuildRptr(_unwrapped_result);
	}
	
	GuiSideAlignedComposition :: Direction GuiSideAlignedComposition::GetDirection()
	{
		vl::presentation::elements::GuiSideAlignedComposition::Direction _unwrapped_result = __GacUIInternal<GuiSideAlignedComposition>::GetInternalObject(*this)->GetDirection();
		GuiSideAlignedComposition :: Direction _wrapped_result = (GuiSideAlignedComposition :: Direction)_unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSideAlignedComposition::SetDirection(GuiSideAlignedComposition :: Direction value)
	{
		vl::presentation::elements::GuiSideAlignedComposition::Direction _unwrapped_value = (vl::presentation::elements::GuiSideAlignedComposition::Direction)value;
		__GacUIInternal<GuiSideAlignedComposition>::GetInternalObject(*this)->SetDirection(_unwrapped_value);
	}
	
	signed __int32 GuiSideAlignedComposition::GetMaxLength()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiSideAlignedComposition>::GetInternalObject(*this)->GetMaxLength();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSideAlignedComposition::SetMaxLength(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiSideAlignedComposition>::GetInternalObject(*this)->SetMaxLength(_unwrapped_value);
	}
	
	double GuiSideAlignedComposition::GetMaxRatio()
	{
		double _unwrapped_result = __GacUIInternal<GuiSideAlignedComposition>::GetInternalObject(*this)->GetMaxRatio();
		double _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiSideAlignedComposition::SetMaxRatio(double value)
	{
		double _unwrapped_value = value;
		__GacUIInternal<GuiSideAlignedComposition>::GetInternalObject(*this)->SetMaxRatio(_unwrapped_value);
	}
	

/***********************************************************************
GuiStackItemComposition
***********************************************************************/

	GuiStackItemComposition::GuiStackItemComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiStackItemComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiStackItemComposition::~GuiStackItemComposition()
	{
	}
	
	void GuiStackItemComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiGraphicsSite::ClearInternalObjectReference();
	}
	
	rptr<GuiStackItemComposition> GuiStackItemComposition::CreateRptr()
	{
		vl::presentation::elements::GuiStackItemComposition* _unwrapped_result = new vl::presentation::elements::GuiStackItemComposition();
		return __GacUIInternal<GuiStackItemComposition>::BuildRptr(_unwrapped_result);
	}
	
	void GuiStackItemComposition::SetBounds(Rect value)
	{
		vl::presentation::Rect _unwrapped_value = *__GacUIInternal<Rect>::GetInternalObject(value);
		__GacUIInternal<GuiStackItemComposition>::GetInternalObject(*this)->SetBounds(_unwrapped_value);
	}
	
	Margin GuiStackItemComposition::GetExtraMargin()
	{
		vl::presentation::Margin _unwrapped_result = __GacUIInternal<GuiStackItemComposition>::GetInternalObject(*this)->GetExtraMargin();
		Margin _wrapped_result = __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiStackItemComposition::SetExtraMargin(Margin value)
	{
		vl::presentation::Margin _unwrapped_value = *__GacUIInternal<Margin>::GetInternalObject(value);
		__GacUIInternal<GuiStackItemComposition>::GetInternalObject(*this)->SetExtraMargin(_unwrapped_value);
	}
	

/***********************************************************************
GuiTab
***********************************************************************/

	GuiTab::GuiTab(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiTab>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTab::~GuiTab()
	{
	}
	
	void GuiTab::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::ClearInternalObjectReference();
	}
	
	rptr<GuiTab> GuiTab::CreateRptr(rptr<GuiTab :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiTab::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiTab :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiTab* _unwrapped_result = new vl::presentation::controls::GuiTab(_unwrapped__styleController);
		return __GacUIInternal<GuiTab>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiTab::CreatePage(rptr<GuiTabPage> page, signed __int32 index)
	{
		vl::presentation::controls::GuiTabPage* _unwrapped_page = __GacUIInternal<GuiTabPage>::GetInternalObject(page);
		signed __int32 _unwrapped_index = index;
		bool _unwrapped_result = __GacUIInternal<GuiTab>::GetInternalObject(*this)->CreatePage(_unwrapped_page, _unwrapped_index);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiTabPage> GuiTab::CreatePage(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::GuiTabPage* _unwrapped_result = __GacUIInternal<GuiTab>::GetInternalObject(*this)->CreatePage(_unwrapped_index);
		rptr<GuiTabPage> _wrapped_result = __GacUIInternal<GuiTabPage>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiTab::RemovePage(rptr<GuiTabPage> value)
	{
		vl::presentation::controls::GuiTabPage* _unwrapped_value = __GacUIInternal<GuiTabPage>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<GuiTab>::GetInternalObject(*this)->RemovePage(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTab::MovePage(rptr<GuiTabPage> page, signed __int32 newIndex)
	{
		vl::presentation::controls::GuiTabPage* _unwrapped_page = __GacUIInternal<GuiTabPage>::GetInternalObject(page);
		signed __int32 _unwrapped_newIndex = newIndex;
		bool _unwrapped_result = __GacUIInternal<GuiTab>::GetInternalObject(*this)->MovePage(_unwrapped_page, _unwrapped_newIndex);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTab::SetSelectedPage(rptr<GuiTabPage> value)
	{
		vl::presentation::controls::GuiTabPage* _unwrapped_value = __GacUIInternal<GuiTabPage>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<GuiTab>::GetInternalObject(*this)->SetSelectedPage(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<IReadonlyList_of_GuiTabPage_raw_pointer> GuiTab::GetPages()
	{
		vl::collections::IReadonlyList<vl::presentation::controls::GuiTabPage *,vl::presentation::controls::GuiTabPage *> const& _unwrapped_result = __GacUIInternal<GuiTab>::GetInternalObject(*this)->GetPages();
		rptr<IReadonlyList_of_GuiTabPage_raw_pointer> _wrapped_result = __GacUIInternal<IReadonlyList_of_GuiTabPage_raw_pointer>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiTabPage> GuiTab::GetSelectedPage()
	{
		vl::presentation::controls::GuiTabPage* _unwrapped_result = __GacUIInternal<GuiTab>::GetInternalObject(*this)->GetSelectedPage();
		rptr<GuiTabPage> _wrapped_result = __GacUIInternal<GuiTabPage>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiTab::on_SelectedPageChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiTab>::GetInternalObject(*this)->SelectedPageChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiTab :: ICommandExecutor
***********************************************************************/

	GuiTab::ICommandExecutor::ICommandExecutor(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiTab :: ICommandExecutor>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTab::ICommandExecutor::~ICommandExecutor()
	{
	}
	
	void GuiTab::ICommandExecutor::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiTab::ICommandExecutor::ShowTab(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		__GacUIInternal<GuiTab :: ICommandExecutor>::GetInternalObject(*this)->ShowTab(_unwrapped_index);
	}
	

/***********************************************************************
GuiTab :: IStyleController
***********************************************************************/

	GuiTab::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiTab :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTab::IStyleController::~IStyleController()
	{
	}
	
	void GuiTab::IStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	void GuiTab::IStyleController::InsertTab(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		__GacUIInternal<GuiTab :: IStyleController>::GetInternalObject(*this)->InsertTab(_unwrapped_index);
	}
	
	void GuiTab::IStyleController::SetTabText(signed __int32 index, const GacString& value)
	{
		signed __int32 _unwrapped_index = index;
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<GuiTab :: IStyleController>::GetInternalObject(*this)->SetTabText(_unwrapped_index, _unwrapped_value);
	}
	
	void GuiTab::IStyleController::RemoveTab(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		__GacUIInternal<GuiTab :: IStyleController>::GetInternalObject(*this)->RemoveTab(_unwrapped_index);
	}
	
	void GuiTab::IStyleController::MoveTab(signed __int32 oldIndex, signed __int32 newIndex)
	{
		signed __int32 _unwrapped_oldIndex = oldIndex;
		signed __int32 _unwrapped_newIndex = newIndex;
		__GacUIInternal<GuiTab :: IStyleController>::GetInternalObject(*this)->MoveTab(_unwrapped_oldIndex, _unwrapped_newIndex);
	}
	
	rptr<GuiControl :: IStyleController> GuiTab::IStyleController::CreateTabPageStyleController()
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped_result = __GacUIInternal<GuiTab :: IStyleController>::GetInternalObject(*this)->CreateTabPageStyleController();
		rptr<GuiControl :: IStyleController> _wrapped_result = __GacUIInternal<GuiControl :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiTab::IStyleController::SetCommandExecutor(rptr<GuiTab :: ICommandExecutor> value)
	{
		vl::presentation::controls::GuiTab::ICommandExecutor* _unwrapped_value = __GacUIInternal<GuiTab :: ICommandExecutor>::GetInternalObject(value);
		__GacUIInternal<GuiTab :: IStyleController>::GetInternalObject(*this)->SetCommandExecutor(_unwrapped_value);
	}
	
	void GuiTab::IStyleController::SetSelectedTab(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		__GacUIInternal<GuiTab :: IStyleController>::GetInternalObject(*this)->SetSelectedTab(_unwrapped_index);
	}
	

/***********************************************************************
GuiTableComposition
***********************************************************************/

	GuiTableComposition::GuiTableComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiBoundsComposition(static_cast<__GacUIInternal<GuiBoundsComposition>::InternalObjectType*>((__GacUIInternal<GuiTableComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTableComposition::~GuiTableComposition()
	{
	}
	
	void GuiTableComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiBoundsComposition::ClearInternalObjectReference();
	}
	
	rptr<GuiTableComposition> GuiTableComposition::CreateRptr()
	{
		vl::presentation::elements::GuiTableComposition* _unwrapped_result = new vl::presentation::elements::GuiTableComposition();
		return __GacUIInternal<GuiTableComposition>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiTableComposition::SetRowsAndColumns(signed __int32 _rows, signed __int32 _columns)
	{
		signed __int32 _unwrapped__rows = _rows;
		signed __int32 _unwrapped__columns = _columns;
		bool _unwrapped_result = __GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->SetRowsAndColumns(_unwrapped__rows, _unwrapped__columns);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiCellComposition> GuiTableComposition::GetSitedCell(signed __int32 _row, signed __int32 _column)
	{
		signed __int32 _unwrapped__row = _row;
		signed __int32 _unwrapped__column = _column;
		vl::presentation::elements::GuiCellComposition* _unwrapped_result = __GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->GetSitedCell(_unwrapped__row, _unwrapped__column);
		rptr<GuiCellComposition> _wrapped_result = __GacUIInternal<GuiCellComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	GuiCellOption GuiTableComposition::GetRowOption(signed __int32 _row)
	{
		signed __int32 _unwrapped__row = _row;
		vl::presentation::elements::GuiCellOption _unwrapped_result = __GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->GetRowOption(_unwrapped__row);
		GuiCellOption _wrapped_result = __GacUIInternal<GuiCellOption>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiTableComposition::SetRowOption(signed __int32 _row, GuiCellOption option)
	{
		signed __int32 _unwrapped__row = _row;
		vl::presentation::elements::GuiCellOption _unwrapped_option = *__GacUIInternal<GuiCellOption>::GetInternalObject(option);
		__GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->SetRowOption(_unwrapped__row, _unwrapped_option);
	}
	
	GuiCellOption GuiTableComposition::GetColumnOption(signed __int32 _column)
	{
		signed __int32 _unwrapped__column = _column;
		vl::presentation::elements::GuiCellOption _unwrapped_result = __GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->GetColumnOption(_unwrapped__column);
		GuiCellOption _wrapped_result = __GacUIInternal<GuiCellOption>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiTableComposition::SetColumnOption(signed __int32 _column, GuiCellOption option)
	{
		signed __int32 _unwrapped__column = _column;
		vl::presentation::elements::GuiCellOption _unwrapped_option = *__GacUIInternal<GuiCellOption>::GetInternalObject(option);
		__GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->SetColumnOption(_unwrapped__column, _unwrapped_option);
	}
	
	void GuiTableComposition::UpdateCellBounds()
	{
		__GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->UpdateCellBounds();
	}
	
	signed __int32 GuiTableComposition::GetRows()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->GetRows();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiTableComposition::GetColumns()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->GetColumns();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiTableComposition::GetCellPadding()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->GetCellPadding();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiTableComposition::SetCellPadding(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->SetCellPadding(_unwrapped_value);
	}
	
	Rect GuiTableComposition::GetCellArea()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiTableComposition>::GetInternalObject(*this)->GetCellArea();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiWindow
***********************************************************************/

	GuiWindow::GuiWindow(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControlHost(static_cast<__GacUIInternal<GuiControlHost>::InternalObjectType*>((__GacUIInternal<GuiWindow>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiWindow::~GuiWindow()
	{
	}
	
	void GuiWindow::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControlHost::ClearInternalObjectReference();
	}
	
	rptr<GuiWindow> GuiWindow::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiWindow* _unwrapped_result = new vl::presentation::controls::GuiWindow(_unwrapped__styleController);
		return __GacUIInternal<GuiWindow>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiPopup
***********************************************************************/

	GuiPopup::GuiPopup(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiWindow(static_cast<__GacUIInternal<GuiWindow>::InternalObjectType*>((__GacUIInternal<GuiPopup>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiPopup::~GuiPopup()
	{
	}
	
	void GuiPopup::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiWindow::ClearInternalObjectReference();
	}
	
	rptr<GuiPopup> GuiPopup::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiPopup* _unwrapped_result = new vl::presentation::controls::GuiPopup(_unwrapped__styleController);
		return __GacUIInternal<GuiPopup>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiPopup::IsClippedByScreen(Point location)
	{
		vl::presentation::Point _unwrapped_location = *__GacUIInternal<Point>::GetInternalObject(location);
		bool _unwrapped_result = __GacUIInternal<GuiPopup>::GetInternalObject(*this)->IsClippedByScreen(_unwrapped_location);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiPopup::ShowPopup(rptr<GuiControl> control, bool preferredTopBottomSide)
	{
		vl::presentation::controls::GuiControl* _unwrapped_control = __GacUIInternal<GuiControl>::GetInternalObject(control);
		bool _unwrapped_preferredTopBottomSide = preferredTopBottomSide;
		__GacUIInternal<GuiPopup>::GetInternalObject(*this)->ShowPopup(_unwrapped_control, _unwrapped_preferredTopBottomSide);
	}
	
	void GuiPopup::ShowPopup(Point location)
	{
		vl::presentation::Point _unwrapped_location = *__GacUIInternal<Point>::GetInternalObject(location);
		__GacUIInternal<GuiPopup>::GetInternalObject(*this)->ShowPopup(_unwrapped_location);
	}
	

/***********************************************************************
GuiComboBoxBase
***********************************************************************/

	GuiComboBoxBase::GuiComboBoxBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton(static_cast<__GacUIInternal<GuiButton>::InternalObjectType*>((__GacUIInternal<GuiComboBoxBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiComboBoxBase::~GuiComboBoxBase()
	{
	}
	
	void GuiComboBoxBase::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiButton::ClearInternalObjectReference();
	}
	
	rptr<GuiComboBoxBase> GuiComboBoxBase::CreateRptr(rptr<GuiComboBoxBase :: IStyleController> _styleController)
	{
		vl::presentation::controls::GuiComboBoxBase::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiComboBoxBase :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiComboBoxBase* _unwrapped_result = new vl::presentation::controls::GuiComboBoxBase(_unwrapped__styleController);
		return __GacUIInternal<GuiComboBoxBase>::BuildRptr(_unwrapped_result);
	}
	
	void GuiComboBoxBase::ShowPopup()
	{
		__GacUIInternal<GuiComboBoxBase>::GetInternalObject(*this)->ShowPopup();
	}
	
	rptr<GuiPopup> GuiComboBoxBase::GetPopup()
	{
		vl::presentation::controls::GuiPopup* _unwrapped_result = __GacUIInternal<GuiComboBoxBase>::GetInternalObject(*this)->GetPopup();
		rptr<GuiPopup> _wrapped_result = __GacUIInternal<GuiPopup>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiComboBoxBase::on_PopupOpened()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiComboBoxBase>::GetInternalObject(*this)->PopupOpened);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiComboBoxBase::on_PopupClosed()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiComboBoxBase>::GetInternalObject(*this)->PopupClosed);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiComboBoxBase::on_ItemSelecting()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiComboBoxBase>::GetInternalObject(*this)->ItemSelecting);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiComboBoxBase::on_ItemSelected()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiComboBoxBase>::GetInternalObject(*this)->ItemSelected);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiComboBoxBase :: ICommandExecutor
***********************************************************************/

	GuiComboBoxBase::ICommandExecutor::ICommandExecutor(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiComboBoxBase :: ICommandExecutor>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiComboBoxBase::ICommandExecutor::~ICommandExecutor()
	{
	}
	
	void GuiComboBoxBase::ICommandExecutor::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiComboBoxBase::ICommandExecutor::ShowPopup()
	{
		__GacUIInternal<GuiComboBoxBase :: ICommandExecutor>::GetInternalObject(*this)->ShowPopup();
	}
	
	void GuiComboBoxBase::ICommandExecutor::SelectItem()
	{
		__GacUIInternal<GuiComboBoxBase :: ICommandExecutor>::GetInternalObject(*this)->SelectItem();
	}
	

/***********************************************************************
GuiComboBoxBase :: IStyleController
***********************************************************************/

	GuiComboBoxBase::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton :: IStyleController(static_cast<__GacUIInternal<GuiButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiComboBoxBase :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiComboBoxBase::IStyleController::~IStyleController()
	{
	}
	
	void GuiComboBoxBase::IStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiButton::IStyleController::ClearInternalObjectReference();
	}
	
	void GuiComboBoxBase::IStyleController::OnClicked()
	{
		__GacUIInternal<GuiComboBoxBase :: IStyleController>::GetInternalObject(*this)->OnClicked();
	}
	
	void GuiComboBoxBase::IStyleController::OnPopupOpened()
	{
		__GacUIInternal<GuiComboBoxBase :: IStyleController>::GetInternalObject(*this)->OnPopupOpened();
	}
	
	void GuiComboBoxBase::IStyleController::OnPopupClosed()
	{
		__GacUIInternal<GuiComboBoxBase :: IStyleController>::GetInternalObject(*this)->OnPopupClosed();
	}
	
	void GuiComboBoxBase::IStyleController::OnItemSelected()
	{
		__GacUIInternal<GuiComboBoxBase :: IStyleController>::GetInternalObject(*this)->OnItemSelected();
	}
	
	rptr<GuiControl :: IStyleController> GuiComboBoxBase::IStyleController::CreatePopupStyle()
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped_result = __GacUIInternal<GuiComboBoxBase :: IStyleController>::GetInternalObject(*this)->CreatePopupStyle();
		rptr<GuiControl :: IStyleController> _wrapped_result = __GacUIInternal<GuiControl :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiComboBoxBase::IStyleController::SetCommandExecutor(rptr<GuiComboBoxBase :: ICommandExecutor> value)
	{
		vl::presentation::controls::GuiComboBoxBase::ICommandExecutor* _unwrapped_value = __GacUIInternal<GuiComboBoxBase :: ICommandExecutor>::GetInternalObject(value);
		__GacUIInternal<GuiComboBoxBase :: IStyleController>::GetInternalObject(*this)->SetCommandExecutor(_unwrapped_value);
	}
	

/***********************************************************************
GuiComboBoxListControl
***********************************************************************/

	GuiComboBoxListControl::GuiComboBoxListControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiComboBoxBase(static_cast<__GacUIInternal<GuiComboBoxBase>::InternalObjectType*>((__GacUIInternal<GuiComboBoxListControl>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiComboBoxListControl::~GuiComboBoxListControl()
	{
	}
	
	void GuiComboBoxListControl::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiComboBoxBase::ClearInternalObjectReference();
	}
	
	rptr<GuiComboBoxListControl> GuiComboBoxListControl::CreateRptr(rptr<GuiComboBoxBase :: IStyleController> _styleController, rptr<GuiSelectableListControl> _containedListControl)
	{
		vl::presentation::controls::GuiComboBoxBase::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiComboBoxBase :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiSelectableListControl* _unwrapped__containedListControl = __GacUIInternal<GuiSelectableListControl>::GetInternalObject(_containedListControl);
		vl::presentation::controls::GuiComboBoxListControl* _unwrapped_result = new vl::presentation::controls::GuiComboBoxListControl(_unwrapped__styleController, _unwrapped__containedListControl);
		return __GacUIInternal<GuiComboBoxListControl>::BuildRptr(_unwrapped_result);
	}
	
	rptr<GuiSelectableListControl> GuiComboBoxListControl::GetContainedListControl()
	{
		vl::presentation::controls::GuiSelectableListControl* _unwrapped_result = __GacUIInternal<GuiComboBoxListControl>::GetInternalObject(*this)->GetContainedListControl();
		rptr<GuiSelectableListControl> _wrapped_result = __GacUIInternal<GuiSelectableListControl>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiComboBoxListControl::GetSelectedIndex()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiComboBoxListControl>::GetInternalObject(*this)->GetSelectedIndex();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiComboBoxListControl::SetSelectedIndex(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiComboBoxListControl>::GetInternalObject(*this)->SetSelectedIndex(_unwrapped_value);
	}
	
	rptr<GuiListControl :: IItemProvider> GuiComboBoxListControl::GetItemProvider()
	{
		vl::presentation::controls::GuiListControl::IItemProvider* _unwrapped_result = __GacUIInternal<GuiComboBoxListControl>::GetInternalObject(*this)->GetItemProvider();
		rptr<GuiListControl :: IItemProvider> _wrapped_result = __GacUIInternal<GuiListControl :: IItemProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiComboBoxListControl::on_SelectedIndexChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiComboBoxListControl>::GetInternalObject(*this)->SelectedIndexChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiMenu
***********************************************************************/

	GuiMenu::GuiMenu(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiPopup(static_cast<__GacUIInternal<GuiPopup>::InternalObjectType*>((__GacUIInternal<GuiMenu>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMenu::~GuiMenu()
	{
	}
	
	void GuiMenu::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiPopup::ClearInternalObjectReference();
	}
	
	rptr<GuiMenu> GuiMenu::CreateRptr(rptr<GuiControl :: IStyleController> _styleController, rptr<GuiControl> _owner)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped__styleController = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(_styleController);
		vl::presentation::controls::GuiControl* _unwrapped__owner = __GacUIInternal<GuiControl>::GetInternalObject(_owner);
		vl::presentation::controls::GuiMenu* _unwrapped_result = new vl::presentation::controls::GuiMenu(_unwrapped__styleController, _unwrapped__owner);
		return __GacUIInternal<GuiMenu>::BuildRptr(_unwrapped_result);
	}
	
	void GuiMenu::UpdateMenuService()
	{
		__GacUIInternal<GuiMenu>::GetInternalObject(*this)->UpdateMenuService();
	}
	

/***********************************************************************
GuiWindowComposition
***********************************************************************/

	GuiWindowComposition::GuiWindowComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiWindowComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiWindowComposition::~GuiWindowComposition()
	{
	}
	
	void GuiWindowComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiGraphicsSite::ClearInternalObjectReference();
	}
	
	rptr<GuiWindowComposition> GuiWindowComposition::CreateRptr()
	{
		vl::presentation::elements::GuiWindowComposition* _unwrapped_result = new vl::presentation::elements::GuiWindowComposition();
		return __GacUIInternal<GuiWindowComposition>::BuildRptr(_unwrapped_result);
	}
	
	rptr<INativeWindow> GuiWindowComposition::GetAttachedWindow()
	{
		vl::presentation::INativeWindow* _unwrapped_result = __GacUIInternal<GuiWindowComposition>::GetInternalObject(*this)->GetAttachedWindow();
		rptr<INativeWindow> _wrapped_result = __GacUIInternal<INativeWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiWindowComposition::SetAttachedWindow(rptr<INativeWindow> window)
	{
		vl::presentation::INativeWindow* _unwrapped_window = __GacUIInternal<INativeWindow>::GetInternalObject(window);
		__GacUIInternal<GuiWindowComposition>::GetInternalObject(*this)->SetAttachedWindow(_unwrapped_window);
	}
	

/***********************************************************************
INativeWindow
***********************************************************************/

	INativeWindow::INativeWindow(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeWindow::~INativeWindow()
	{
	}
	
	void INativeWindow::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	void INativeWindow::Show()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->Show();
	}
	
	void INativeWindow::ShowDeactivated()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->ShowDeactivated();
	}
	
	void INativeWindow::ShowRestored()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->ShowRestored();
	}
	
	void INativeWindow::ShowMaximized()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->ShowMaximized();
	}
	
	void INativeWindow::ShowMinimized()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->ShowMinimized();
	}
	
	void INativeWindow::Hide()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->Hide();
	}
	
	bool INativeWindow::IsVisible()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->IsVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::Enable()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->Enable();
	}
	
	void INativeWindow::Disable()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->Disable();
	}
	
	bool INativeWindow::IsEnabled()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->IsEnabled();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetFocus()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetFocus();
	}
	
	bool INativeWindow::IsFocused()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->IsFocused();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetActivate()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetActivate();
	}
	
	bool INativeWindow::IsActivated()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->IsActivated();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::ShowInTaskBar()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->ShowInTaskBar();
	}
	
	void INativeWindow::HideInTaskBar()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->HideInTaskBar();
	}
	
	bool INativeWindow::IsAppearedInTaskBar()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->IsAppearedInTaskBar();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::EnableActivate()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->EnableActivate();
	}
	
	void INativeWindow::DisableActivate()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->DisableActivate();
	}
	
	bool INativeWindow::IsEnabledActivate()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->IsEnabledActivate();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INativeWindow::RequireCapture()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->RequireCapture();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INativeWindow::ReleaseCapture()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->ReleaseCapture();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INativeWindow::InstallListener(rptr<INativeWindowListener> listener)
	{
		vl::presentation::INativeWindowListener* _unwrapped_listener = __GacUIInternal<INativeWindowListener>::GetInternalObject(listener);
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->InstallListener(_unwrapped_listener);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool INativeWindow::UninstallListener(rptr<INativeWindowListener> listener)
	{
		vl::presentation::INativeWindowListener* _unwrapped_listener = __GacUIInternal<INativeWindowListener>::GetInternalObject(listener);
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->UninstallListener(_unwrapped_listener);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::RedrawContent()
	{
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->RedrawContent();
	}
	
	Rect INativeWindow::GetBounds()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetBounds();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void INativeWindow::SetBounds(rptr<Rect> bounds)
	{
		vl::presentation::Rect const& _unwrapped_bounds = *__GacUIInternal<Rect>::GetInternalObject(bounds);
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetBounds(_unwrapped_bounds);
	}
	
	Size INativeWindow::GetClientSize()
	{
		vl::presentation::Size _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetClientSize();
		Size _wrapped_result = __GacUIInternal<Size>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void INativeWindow::SetClientSize(Size size)
	{
		vl::presentation::Size _unwrapped_size = *__GacUIInternal<Size>::GetInternalObject(size);
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetClientSize(_unwrapped_size);
	}
	
	Rect INativeWindow::GetClientBoundsInScreen()
	{
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetClientBoundsInScreen();
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString INativeWindow::GetTitle()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetTitle();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	void INativeWindow::SetTitle(GacString _title)
	{
		vl::ObjectString<wchar_t> _unwrapped__title = _title.Buffer();
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetTitle(_unwrapped__title);
	}
	
	rptr<INativeCursor> INativeWindow::GetWindowCursor()
	{
		vl::presentation::INativeCursor* _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetWindowCursor();
		rptr<INativeCursor> _wrapped_result = __GacUIInternal<INativeCursor>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void INativeWindow::SetWindowCursor(rptr<INativeCursor> _cursor)
	{
		vl::presentation::INativeCursor* _unwrapped__cursor = __GacUIInternal<INativeCursor>::GetInternalObject(_cursor);
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetWindowCursor(_unwrapped__cursor);
	}
	
	Point INativeWindow::GetCaretPoint()
	{
		vl::presentation::Point _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetCaretPoint();
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void INativeWindow::SetCaretPoint(Point point)
	{
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetCaretPoint(_unwrapped_point);
	}
	
	rptr<INativeWindow> INativeWindow::GetParent()
	{
		vl::presentation::INativeWindow* _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetParent();
		rptr<INativeWindow> _wrapped_result = __GacUIInternal<INativeWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void INativeWindow::SetParent(rptr<INativeWindow> parent)
	{
		vl::presentation::INativeWindow* _unwrapped_parent = __GacUIInternal<INativeWindow>::GetInternalObject(parent);
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetParent(_unwrapped_parent);
	}
	
	bool INativeWindow::GetAlwaysPassFocusToParent()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetAlwaysPassFocusToParent();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetAlwaysPassFocusToParent(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetAlwaysPassFocusToParent(_unwrapped_value);
	}
	
	bool INativeWindow::GetMaximizedBox()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetMaximizedBox();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetMaximizedBox(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetMaximizedBox(_unwrapped_visible);
	}
	
	bool INativeWindow::GetMinimizedBox()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetMinimizedBox();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetMinimizedBox(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetMinimizedBox(_unwrapped_visible);
	}
	
	bool INativeWindow::GetBorder()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetBorder();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetBorder(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetBorder(_unwrapped_visible);
	}
	
	bool INativeWindow::GetSizeBox()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetSizeBox();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetSizeBox(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetSizeBox(_unwrapped_visible);
	}
	
	bool INativeWindow::GetIconVisible()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetIconVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetIconVisible(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetIconVisible(_unwrapped_visible);
	}
	
	bool INativeWindow::GetTitleBar()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetTitleBar();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetTitleBar(bool visible)
	{
		bool _unwrapped_visible = visible;
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetTitleBar(_unwrapped_visible);
	}
	
	bool INativeWindow::GetTopMost()
	{
		bool _unwrapped_result = __GacUIInternal<INativeWindow>::GetInternalObject(*this)->GetTopMost();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void INativeWindow::SetTopMost(bool topmost)
	{
		bool _unwrapped_topmost = topmost;
		__GacUIInternal<INativeWindow>::GetInternalObject(*this)->SetTopMost(_unwrapped_topmost);
	}
	

/***********************************************************************
INodeItemStyleController
***********************************************************************/

	INodeItemStyleController::INodeItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemStyleController(static_cast<__GacUIInternal<GuiListControl :: IItemStyleController>::InternalObjectType*>((__GacUIInternal<INodeItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeItemStyleController::~INodeItemStyleController()
	{
	}
	
	void INodeItemStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemStyleController::ClearInternalObjectReference();
	}
	
	rptr<INodeItemStyleProvider> INodeItemStyleController::GetNodeStyleProvider()
	{
		vl::presentation::controls::tree::INodeItemStyleProvider* _unwrapped_result = __GacUIInternal<INodeItemStyleController>::GetInternalObject(*this)->GetNodeStyleProvider();
		rptr<INodeItemStyleProvider> _wrapped_result = __GacUIInternal<INodeItemStyleProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
INodeItemStyleProvider
***********************************************************************/

	INodeItemStyleProvider::INodeItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeItemStyleProvider::~INodeItemStyleProvider()
	{
	}
	
	void INodeItemStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void INodeItemStyleProvider::BindItemStyleProvider(rptr<GuiListControl :: IItemStyleProvider> styleProvider)
	{
		vl::presentation::controls::GuiListControl::IItemStyleProvider* _unwrapped_styleProvider = __GacUIInternal<GuiListControl :: IItemStyleProvider>::GetInternalObject(styleProvider);
		__GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->BindItemStyleProvider(_unwrapped_styleProvider);
	}
	
	void INodeItemStyleProvider::AttachListControl(rptr<GuiListControl> value)
	{
		vl::presentation::controls::GuiListControl* _unwrapped_value = __GacUIInternal<GuiListControl>::GetInternalObject(value);
		__GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->AttachListControl(_unwrapped_value);
	}
	
	void INodeItemStyleProvider::DetachListControl()
	{
		__GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->DetachListControl();
	}
	
	signed __int32 INodeItemStyleProvider::GetItemStyleId(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		signed __int32 _unwrapped_result = __GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->GetItemStyleId(_unwrapped_node);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<INodeItemStyleController> INodeItemStyleProvider::CreateItemStyle(signed __int32 styleId)
	{
		signed __int32 _unwrapped_styleId = styleId;
		vl::presentation::controls::tree::INodeItemStyleController* _unwrapped_result = __GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->CreateItemStyle(_unwrapped_styleId);
		rptr<INodeItemStyleController> _wrapped_result = __GacUIInternal<INodeItemStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void INodeItemStyleProvider::DestroyItemStyle(rptr<INodeItemStyleController> style)
	{
		vl::presentation::controls::tree::INodeItemStyleController* _unwrapped_style = __GacUIInternal<INodeItemStyleController>::GetInternalObject(style);
		__GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->DestroyItemStyle(_unwrapped_style);
	}
	
	void INodeItemStyleProvider::Install(rptr<INodeItemStyleController> style, rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeItemStyleController* _unwrapped_style = __GacUIInternal<INodeItemStyleController>::GetInternalObject(style);
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		__GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->Install(_unwrapped_style, _unwrapped_node);
	}
	
	void INodeItemStyleProvider::SetStyleSelected(rptr<INodeItemStyleController> style, bool value)
	{
		vl::presentation::controls::tree::INodeItemStyleController* _unwrapped_style = __GacUIInternal<INodeItemStyleController>::GetInternalObject(style);
		bool _unwrapped_value = value;
		__GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->SetStyleSelected(_unwrapped_style, _unwrapped_value);
	}
	
	rptr<GuiListControl :: IItemStyleProvider> INodeItemStyleProvider::GetBindedItemStyleProvider()
	{
		vl::presentation::controls::GuiListControl::IItemStyleProvider* _unwrapped_result = __GacUIInternal<INodeItemStyleProvider>::GetInternalObject(*this)->GetBindedItemStyleProvider();
		rptr<GuiListControl :: IItemStyleProvider> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
INodeItemView
***********************************************************************/

	INodeItemView::INodeItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemPrimaryTextView(static_cast<__GacUIInternal<GuiListControl :: IItemPrimaryTextView>::InternalObjectType*>((__GacUIInternal<INodeItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeItemView::~INodeItemView()
	{
	}
	
	void INodeItemView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemPrimaryTextView::ClearInternalObjectReference();
	}
	
	rptr<INodeProvider> INodeItemView::RequestNode(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::tree::INodeProvider* _unwrapped_result = __GacUIInternal<INodeItemView>::GetInternalObject(*this)->RequestNode(_unwrapped_index);
		rptr<INodeProvider> _wrapped_result = __GacUIInternal<INodeProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void INodeItemView::ReleaseNode(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		__GacUIInternal<INodeItemView>::GetInternalObject(*this)->ReleaseNode(_unwrapped_node);
	}
	
	signed __int32 INodeItemView::CalculateNodeVisibilityIndex(rptr<INodeProvider> node)
	{
		vl::presentation::controls::tree::INodeProvider* _unwrapped_node = __GacUIInternal<INodeProvider>::GetInternalObject(node);
		signed __int32 _unwrapped_result = __GacUIInternal<INodeItemView>::GetInternalObject(*this)->CalculateNodeVisibilityIndex(_unwrapped_node);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	wchar_t const* INodeItemView::get_Identifier()
	{
		wchar_t const* _wrapped_result = vl::presentation::controls::tree::INodeItemView::Identifier;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiVirtualTreeListControl
***********************************************************************/

	GuiVirtualTreeListControl::GuiVirtualTreeListControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl(static_cast<__GacUIInternal<GuiSelectableListControl>::InternalObjectType*>((__GacUIInternal<GuiVirtualTreeListControl>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiVirtualTreeListControl::~GuiVirtualTreeListControl()
	{
	}
	
	void GuiVirtualTreeListControl::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableListControl::ClearInternalObjectReference();
	}
	
	rptr<GuiVirtualTreeListControl> GuiVirtualTreeListControl::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<INodeRootProvider> _nodeRootProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::tree::INodeRootProvider* _unwrapped__nodeRootProvider = __GacUIInternal<INodeRootProvider>::GetInternalObject(_nodeRootProvider);
		vl::presentation::controls::GuiVirtualTreeListControl* _unwrapped_result = new vl::presentation::controls::GuiVirtualTreeListControl(_unwrapped__styleProvider, _unwrapped__nodeRootProvider);
		return __GacUIInternal<GuiVirtualTreeListControl>::BuildRptr(_unwrapped_result);
	}
	
	sptr<INodeItemStyleProvider> GuiVirtualTreeListControl::SetNodeStyleProvider(sptr<INodeItemStyleProvider> styleProvider)
	{
		vl::Ptr<vl::presentation::controls::tree::INodeItemStyleProvider> _unwrapped_styleProvider = __GacUIInternal<INodeItemStyleProvider>::GetInternalObject(styleProvider);
		vl::Ptr<vl::presentation::controls::tree::INodeItemStyleProvider> _unwrapped_result = __GacUIInternal<GuiVirtualTreeListControl>::GetInternalObject(*this)->SetNodeStyleProvider(_unwrapped_styleProvider);
		sptr<INodeItemStyleProvider> _wrapped_result = __GacUIInternal<INodeItemStyleProvider>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INodeItemView> GuiVirtualTreeListControl::GetNodeItemView()
	{
		vl::presentation::controls::tree::INodeItemView* _unwrapped_result = __GacUIInternal<GuiVirtualTreeListControl>::GetInternalObject(*this)->GetNodeItemView();
		rptr<INodeItemView> _wrapped_result = __GacUIInternal<INodeItemView>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INodeRootProvider> GuiVirtualTreeListControl::GetNodeRootProvider()
	{
		vl::presentation::controls::tree::INodeRootProvider* _unwrapped_result = __GacUIInternal<GuiVirtualTreeListControl>::GetInternalObject(*this)->GetNodeRootProvider();
		rptr<INodeRootProvider> _wrapped_result = __GacUIInternal<INodeRootProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<INodeItemStyleProvider> GuiVirtualTreeListControl::GetNodeStyleProvider()
	{
		vl::presentation::controls::tree::INodeItemStyleProvider* _unwrapped_result = __GacUIInternal<GuiVirtualTreeListControl>::GetInternalObject(*this)->GetNodeStyleProvider();
		rptr<INodeItemStyleProvider> _wrapped_result = __GacUIInternal<INodeItemStyleProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer
***********************************************************************/

	IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::~IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer()
	{
	}
	
	void IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Contains(rptr<GuiListControl :: IItemStyleController> item)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_item = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiListControl :: IItemStyleController> IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Get(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer>::GetInternalObject(*this)->Get(_unwrapped_index);
		rptr<GuiListControl :: IItemStyleController> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiListControl :: IItemStyleController> IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer>::GetInternalObject(*this)->operator[](_unwrapped_index);
		rptr<GuiListControl :: IItemStyleController> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::IndexOf(rptr<GuiListControl :: IItemStyleController> item)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_item = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
IReadonlyList_of_GuiStackItemComposition_raw_pointer
***********************************************************************/

	IReadonlyList_of_GuiStackItemComposition_raw_pointer::IReadonlyList_of_GuiStackItemComposition_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiStackItemComposition_raw_pointer::~IReadonlyList_of_GuiStackItemComposition_raw_pointer()
	{
	}
	
	void IReadonlyList_of_GuiStackItemComposition_raw_pointer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool IReadonlyList_of_GuiStackItemComposition_raw_pointer::Contains(rptr<GuiStackItemComposition> item)
	{
		vl::presentation::elements::GuiStackItemComposition* _unwrapped_item = __GacUIInternal<GuiStackItemComposition>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiStackItemComposition_raw_pointer>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiStackItemComposition_raw_pointer::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiStackItemComposition_raw_pointer>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiStackItemComposition> IReadonlyList_of_GuiStackItemComposition_raw_pointer::Get(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::GuiStackItemComposition* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiStackItemComposition_raw_pointer>::GetInternalObject(*this)->Get(_unwrapped_index);
		rptr<GuiStackItemComposition> _wrapped_result = __GacUIInternal<GuiStackItemComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiStackItemComposition> IReadonlyList_of_GuiStackItemComposition_raw_pointer::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::GuiStackItemComposition* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiStackItemComposition_raw_pointer>::GetInternalObject(*this)->operator[](_unwrapped_index);
		rptr<GuiStackItemComposition> _wrapped_result = __GacUIInternal<GuiStackItemComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiStackItemComposition_raw_pointer::IndexOf(rptr<GuiStackItemComposition> item)
	{
		vl::presentation::elements::GuiStackItemComposition* _unwrapped_item = __GacUIInternal<GuiStackItemComposition>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiStackItemComposition_raw_pointer>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiStackComposition
***********************************************************************/

	GuiStackComposition::GuiStackComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiBoundsComposition(static_cast<__GacUIInternal<GuiBoundsComposition>::InternalObjectType*>((__GacUIInternal<GuiStackComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiStackComposition::~GuiStackComposition()
	{
	}
	
	void GuiStackComposition::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiBoundsComposition::ClearInternalObjectReference();
	}
	
	rptr<GuiStackComposition> GuiStackComposition::CreateRptr()
	{
		vl::presentation::elements::GuiStackComposition* _unwrapped_result = new vl::presentation::elements::GuiStackComposition();
		return __GacUIInternal<GuiStackComposition>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiStackComposition::InsertStackItem(signed __int32 index, rptr<GuiStackItemComposition> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::GuiStackItemComposition* _unwrapped_item = __GacUIInternal<GuiStackItemComposition>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<GuiStackComposition>::GetInternalObject(*this)->InsertStackItem(_unwrapped_index, _unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> GuiStackComposition::GetStackItems()
	{
		vl::collections::IReadonlyList<vl::presentation::elements::GuiStackItemComposition *,vl::presentation::elements::GuiStackItemComposition *> const& _unwrapped_result = __GacUIInternal<GuiStackComposition>::GetInternalObject(*this)->GetStackItems();
		rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> _wrapped_result = __GacUIInternal<IReadonlyList_of_GuiStackItemComposition_raw_pointer>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GuiStackComposition :: Direction GuiStackComposition::GetDirection()
	{
		vl::presentation::elements::GuiStackComposition::Direction _unwrapped_result = __GacUIInternal<GuiStackComposition>::GetInternalObject(*this)->GetDirection();
		GuiStackComposition :: Direction _wrapped_result = (GuiStackComposition :: Direction)_unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiStackComposition::SetDirection(GuiStackComposition :: Direction value)
	{
		vl::presentation::elements::GuiStackComposition::Direction _unwrapped_value = (vl::presentation::elements::GuiStackComposition::Direction)value;
		__GacUIInternal<GuiStackComposition>::GetInternalObject(*this)->SetDirection(_unwrapped_value);
	}
	
	signed __int32 GuiStackComposition::GetPadding()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiStackComposition>::GetInternalObject(*this)->GetPadding();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiStackComposition::SetPadding(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<GuiStackComposition>::GetInternalObject(*this)->SetPadding(_unwrapped_value);
	}
	
	Margin GuiStackComposition::GetExtraMargin()
	{
		vl::presentation::Margin _unwrapped_result = __GacUIInternal<GuiStackComposition>::GetInternalObject(*this)->GetExtraMargin();
		Margin _wrapped_result = __GacUIInternal<Margin>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiStackComposition::SetExtraMargin(Margin value)
	{
		vl::presentation::Margin _unwrapped_value = *__GacUIInternal<Margin>::GetInternalObject(value);
		__GacUIInternal<GuiStackComposition>::GetInternalObject(*this)->SetExtraMargin(_unwrapped_value);
	}
	

/***********************************************************************
IReadonlyList_of_GuiWindow_raw_pointer
***********************************************************************/

	IReadonlyList_of_GuiWindow_raw_pointer::IReadonlyList_of_GuiWindow_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiWindow_raw_pointer::~IReadonlyList_of_GuiWindow_raw_pointer()
	{
	}
	
	void IReadonlyList_of_GuiWindow_raw_pointer::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	bool IReadonlyList_of_GuiWindow_raw_pointer::Contains(rptr<GuiWindow> item)
	{
		vl::presentation::controls::GuiWindow* _unwrapped_item = __GacUIInternal<GuiWindow>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiWindow_raw_pointer>::GetInternalObject(*this)->Contains(_unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiWindow_raw_pointer::Count()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiWindow_raw_pointer>::GetInternalObject(*this)->Count();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiWindow> IReadonlyList_of_GuiWindow_raw_pointer::Get(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::GuiWindow* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiWindow_raw_pointer>::GetInternalObject(*this)->Get(_unwrapped_index);
		rptr<GuiWindow> _wrapped_result = __GacUIInternal<GuiWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiWindow> IReadonlyList_of_GuiWindow_raw_pointer::operator[](signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::GuiWindow* _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiWindow_raw_pointer>::GetInternalObject(*this)->operator[](_unwrapped_index);
		rptr<GuiWindow> _wrapped_result = __GacUIInternal<GuiWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 IReadonlyList_of_GuiWindow_raw_pointer::IndexOf(rptr<GuiWindow> item)
	{
		vl::presentation::controls::GuiWindow* _unwrapped_item = __GacUIInternal<GuiWindow>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IReadonlyList_of_GuiWindow_raw_pointer>::GetInternalObject(*this)->IndexOf(_unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiApplication
***********************************************************************/

	GuiApplication::GuiApplication(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiApplication::~GuiApplication()
	{
	}
	
	void GuiApplication::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	void GuiApplication::Run(rptr<GuiWindow> _mainWindow)
	{
		vl::presentation::controls::GuiWindow* _unwrapped__mainWindow = __GacUIInternal<GuiWindow>::GetInternalObject(_mainWindow);
		__GacUIInternal<GuiApplication>::GetInternalObject(*this)->Run(_unwrapped__mainWindow);
	}
	
	rptr<GuiWindow> GuiApplication::GetWindow(Point location)
	{
		vl::presentation::Point _unwrapped_location = *__GacUIInternal<Point>::GetInternalObject(location);
		vl::presentation::controls::GuiWindow* _unwrapped_result = __GacUIInternal<GuiApplication>::GetInternalObject(*this)->GetWindow(_unwrapped_location);
		rptr<GuiWindow> _wrapped_result = __GacUIInternal<GuiWindow>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	bool GuiApplication::IsInMainThread()
	{
		bool _unwrapped_result = __GacUIInternal<GuiApplication>::GetInternalObject(*this)->IsInMainThread();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<IReadonlyList_of_GuiWindow_raw_pointer> GuiApplication::GetWindows()
	{
		vl::collections::IReadonlyList<vl::presentation::controls::GuiWindow *,vl::presentation::controls::GuiWindow *> const& _unwrapped_result = __GacUIInternal<GuiApplication>::GetInternalObject(*this)->GetWindows();
		rptr<IReadonlyList_of_GuiWindow_raw_pointer> _wrapped_result = __GacUIInternal<IReadonlyList_of_GuiWindow_raw_pointer>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
ItemProviderBase
***********************************************************************/

	ItemProviderBase::ItemProviderBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemProvider(static_cast<__GacUIInternal<GuiListControl :: IItemProvider>::InternalObjectType*>((__GacUIInternal<ItemProviderBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ItemProviderBase::~ItemProviderBase()
	{
	}
	
	void ItemProviderBase::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemProvider::ClearInternalObjectReference();
	}
	
	rptr<ItemProviderBase> ItemProviderBase::CreateRptr()
	{
		vl::presentation::controls::list::ItemProviderBase* _unwrapped_result = new vl::presentation::controls::list::ItemProviderBase();
		return __GacUIInternal<ItemProviderBase>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ItemStyleControllerBase
***********************************************************************/

	ItemStyleControllerBase::ItemStyleControllerBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemStyleController(static_cast<__GacUIInternal<GuiListControl :: IItemStyleController>::InternalObjectType*>((__GacUIInternal<ItemStyleControllerBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ItemStyleControllerBase::~ItemStyleControllerBase()
	{
	}
	
	void ItemStyleControllerBase::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemStyleController::ClearInternalObjectReference();
	}
	

/***********************************************************************
ListViewItemStyleProviderBase
***********************************************************************/

	ListViewItemStyleProviderBase::ListViewItemStyleProviderBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl :: IItemStyleProvider(static_cast<__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProviderBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProviderBase::~ListViewItemStyleProviderBase()
	{
	}
	
	void ListViewItemStyleProviderBase::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableListControl::IItemStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<ListViewItemStyleProviderBase> ListViewItemStyleProviderBase::CreateRptr()
	{
		vl::presentation::controls::list::ListViewItemStyleProviderBase* _unwrapped_result = new vl::presentation::controls::list::ListViewItemStyleProviderBase();
		return __GacUIInternal<ListViewItemStyleProviderBase>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ListViewItemStyleProviderBase :: ListViewItemStyleController
***********************************************************************/

	ListViewItemStyleProviderBase::ListViewItemStyleController::ListViewItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemStyleControllerBase(static_cast<__GacUIInternal<ItemStyleControllerBase>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProviderBase::ListViewItemStyleController::~ListViewItemStyleController()
	{
	}
	
	void ListViewItemStyleProviderBase::ListViewItemStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ItemStyleControllerBase::ClearInternalObjectReference();
	}
	
	rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> ListViewItemStyleProviderBase::ListViewItemStyleController::CreateRptr(rptr<ListViewItemStyleProviderBase> provider)
	{
		vl::presentation::controls::list::ListViewItemStyleProviderBase* _unwrapped_provider = __GacUIInternal<ListViewItemStyleProviderBase>::GetInternalObject(provider);
		vl::presentation::controls::list::ListViewItemStyleProviderBase::ListViewItemStyleController* _unwrapped_result = new vl::presentation::controls::list::ListViewItemStyleProviderBase::ListViewItemStyleController(_unwrapped_provider);
		return __GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>::BuildRptr(_unwrapped_result);
	}
	
	bool ListViewItemStyleProviderBase::ListViewItemStyleController::GetSelected()
	{
		bool _unwrapped_result = __GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>::GetInternalObject(*this)->GetSelected();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void ListViewItemStyleProviderBase::ListViewItemStyleController::SetSelected(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>::GetInternalObject(*this)->SetSelected(_unwrapped_value);
	}
	

/***********************************************************************
ListViewItemStyleProvider
***********************************************************************/

	ListViewItemStyleProvider::ListViewItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProviderBase(static_cast<__GacUIInternal<ListViewItemStyleProviderBase>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::~ListViewItemStyleProvider()
	{
	}
	
	void ListViewItemStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListViewItemStyleProviderBase::ClearInternalObjectReference();
	}
	
	rptr<ListViewItemStyleProvider> ListViewItemStyleProvider::CreateRptr(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> itemContentProvider)
	{
		vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemContentProvider* _unwrapped_itemContentProvider = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::GetInternalObject(itemContentProvider);
		vl::presentation::controls::list::ListViewItemStyleProvider* _unwrapped_result = new vl::presentation::controls::list::ListViewItemStyleProvider(_unwrapped_itemContentProvider);
		return __GacUIInternal<ListViewItemStyleProvider>::BuildRptr(_unwrapped_result);
	}
	
	bool ListViewItemStyleProvider::IsItemStyleAttachedToListView(rptr<GuiListControl :: IItemStyleController> itemStyle)
	{
		vl::presentation::controls::GuiListControl::IItemStyleController* _unwrapped_itemStyle = __GacUIInternal<GuiListControl :: IItemStyleController>::GetInternalObject(itemStyle);
		bool _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider>::GetInternalObject(*this)->IsItemStyleAttachedToListView(_unwrapped_itemStyle);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> ListViewItemStyleProvider::GetCreatedItemStyles()
	{
		vl::collections::IReadonlyList<vl::presentation::controls::GuiListControl::IItemStyleController *,vl::presentation::controls::GuiListControl::IItemStyleController *> const& _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider>::GetInternalObject(*this)->GetCreatedItemStyles();
		rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> _wrapped_result = __GacUIInternal<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemContent
***********************************************************************/

	ListViewItemStyleProvider::IListViewItemContent::IListViewItemContent(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::IListViewItemContent::~IListViewItemContent()
	{
	}
	
	void ListViewItemStyleProvider::IListViewItemContent::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void ListViewItemStyleProvider::IListViewItemContent::Install(rptr<GuiListViewBase :: IStyleProvider> styleProvider, rptr<ListViewItemStyleProvider :: IListViewItemView> view, signed __int32 itemIndex)
	{
		vl::presentation::controls::GuiListViewBase::IStyleProvider* _unwrapped_styleProvider = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(styleProvider);
		vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemView* _unwrapped_view = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(view);
		signed __int32 _unwrapped_itemIndex = itemIndex;
		__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>::GetInternalObject(*this)->Install(_unwrapped_styleProvider, _unwrapped_view, _unwrapped_itemIndex);
	}
	
	rptr<GuiBoundsComposition> ListViewItemStyleProvider::IListViewItemContent::GetContentComposition()
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>::GetInternalObject(*this)->GetContentComposition();
		rptr<GuiBoundsComposition> _wrapped_result = __GacUIInternal<GuiBoundsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiBoundsComposition> ListViewItemStyleProvider::IListViewItemContent::GetBackgroundDecorator()
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>::GetInternalObject(*this)->GetBackgroundDecorator();
		rptr<GuiBoundsComposition> _wrapped_result = __GacUIInternal<GuiBoundsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemContentProvider
***********************************************************************/

	ListViewItemStyleProvider::IListViewItemContentProvider::IListViewItemContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::IListViewItemContentProvider::~IListViewItemContentProvider()
	{
	}
	
	void ListViewItemStyleProvider::IListViewItemContentProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewItemStyleProvider::IListViewItemContentProvider::CreatePreferredCoordinateTransformer()
	{
		vl::presentation::controls::GuiListControl::IItemCoordinateTransformer* _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::GetInternalObject(*this)->CreatePreferredCoordinateTransformer();
		rptr<GuiListControl :: IItemCoordinateTransformer> _wrapped_result = __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewItemStyleProvider::IListViewItemContentProvider::CreatePreferredArranger()
	{
		vl::presentation::controls::GuiListControl::IItemArranger* _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::GetInternalObject(*this)->CreatePreferredArranger();
		rptr<GuiListControl :: IItemArranger> _wrapped_result = __GacUIInternal<GuiListControl :: IItemArranger>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewItemStyleProvider::IListViewItemContentProvider::CreateItemContent(rptr<FontProperties> font)
	{
		vl::presentation::FontProperties const& _unwrapped_font = *__GacUIInternal<FontProperties>::GetInternalObject(font);
		vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemContent* _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::GetInternalObject(*this)->CreateItemContent(_unwrapped_font);
		rptr<ListViewItemStyleProvider :: IListViewItemContent> _wrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void ListViewItemStyleProvider::IListViewItemContentProvider::AttachListControl(rptr<GuiListControl> value)
	{
		vl::presentation::controls::GuiListControl* _unwrapped_value = __GacUIInternal<GuiListControl>::GetInternalObject(value);
		__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::GetInternalObject(*this)->AttachListControl(_unwrapped_value);
	}
	
	void ListViewItemStyleProvider::IListViewItemContentProvider::DetachListControl()
	{
		__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::GetInternalObject(*this)->DetachListControl();
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemView
***********************************************************************/

	ListViewItemStyleProvider::IListViewItemView::IListViewItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemPrimaryTextView(static_cast<__GacUIInternal<GuiListControl :: IItemPrimaryTextView>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::IListViewItemView::~IListViewItemView()
	{
	}
	
	void ListViewItemStyleProvider::IListViewItemView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemPrimaryTextView::ClearInternalObjectReference();
	}
	
	sptr<GuiImageData> ListViewItemStyleProvider::IListViewItemView::GetSmallImage(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		vl::Ptr<vl::presentation::controls::GuiImageData> _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(*this)->GetSmallImage(_unwrapped_itemIndex);
		sptr<GuiImageData> _wrapped_result = __GacUIInternal<GuiImageData>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	sptr<GuiImageData> ListViewItemStyleProvider::IListViewItemView::GetLargeImage(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		vl::Ptr<vl::presentation::controls::GuiImageData> _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(*this)->GetLargeImage(_unwrapped_itemIndex);
		sptr<GuiImageData> _wrapped_result = __GacUIInternal<GuiImageData>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString ListViewItemStyleProvider::IListViewItemView::GetText(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(*this)->GetText(_unwrapped_itemIndex);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	GacString ListViewItemStyleProvider::IListViewItemView::GetSubItem(signed __int32 itemIndex, signed __int32 index)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		signed __int32 _unwrapped_index = index;
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(*this)->GetSubItem(_unwrapped_itemIndex, _unwrapped_index);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetDataColumn(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		signed __int32 _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(*this)->GetDataColumn(_unwrapped_index);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	GacString ListViewItemStyleProvider::IListViewItemView::GetColumnText(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(*this)->GetColumnText(_unwrapped_index);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetDataColumnCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(*this)->GetDataColumnCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetColumnCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(*this)->GetColumnCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	wchar_t const* ListViewItemStyleProvider::IListViewItemView::get_Identifier()
	{
		wchar_t const* _wrapped_result = vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemView::Identifier;
		return _wrapped_result;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: ListViewContentItemStyleController
***********************************************************************/

	ListViewItemStyleProvider::ListViewContentItemStyleController::ListViewContentItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProviderBase :: ListViewItemStyleController(static_cast<__GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider :: ListViewContentItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::ListViewContentItemStyleController::~ListViewContentItemStyleController()
	{
	}
	
	void ListViewItemStyleProvider::ListViewContentItemStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListViewItemStyleProviderBase::ListViewItemStyleController::ClearInternalObjectReference();
	}
	
	rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> ListViewItemStyleProvider::ListViewContentItemStyleController::CreateRptr(rptr<ListViewItemStyleProvider> provider)
	{
		vl::presentation::controls::list::ListViewItemStyleProvider* _unwrapped_provider = __GacUIInternal<ListViewItemStyleProvider>::GetInternalObject(provider);
		vl::presentation::controls::list::ListViewItemStyleProvider::ListViewContentItemStyleController* _unwrapped_result = new vl::presentation::controls::list::ListViewItemStyleProvider::ListViewContentItemStyleController(_unwrapped_provider);
		return __GacUIInternal<ListViewItemStyleProvider :: ListViewContentItemStyleController>::BuildRptr(_unwrapped_result);
	}
	
	void ListViewItemStyleProvider::ListViewContentItemStyleController::Install(rptr<ListViewItemStyleProvider :: IListViewItemView> view, signed __int32 itemIndex)
	{
		vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemView* _unwrapped_view = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::GetInternalObject(view);
		signed __int32 _unwrapped_itemIndex = itemIndex;
		__GacUIInternal<ListViewItemStyleProvider :: ListViewContentItemStyleController>::GetInternalObject(*this)->Install(_unwrapped_view, _unwrapped_itemIndex);
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewItemStyleProvider::ListViewContentItemStyleController::GetItemContent()
	{
		vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemContent* _unwrapped_result = __GacUIInternal<ListViewItemStyleProvider :: ListViewContentItemStyleController>::GetInternalObject(*this)->GetItemContent();
		rptr<ListViewItemStyleProvider :: IListViewItemContent> _wrapped_result = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiVirtualListView
***********************************************************************/

	GuiVirtualListView::GuiVirtualListView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListViewBase(static_cast<__GacUIInternal<GuiListViewBase>::InternalObjectType*>((__GacUIInternal<GuiVirtualListView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiVirtualListView::~GuiVirtualListView()
	{
	}
	
	void GuiVirtualListView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListViewBase::ClearInternalObjectReference();
	}
	
	rptr<GuiVirtualListView> GuiVirtualListView::CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider)
	{
		vl::presentation::controls::GuiListViewBase::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::GuiListControl::IItemProvider* _unwrapped__itemProvider = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(_itemProvider);
		vl::presentation::controls::GuiVirtualListView* _unwrapped_result = new vl::presentation::controls::GuiVirtualListView(_unwrapped__styleProvider, _unwrapped__itemProvider);
		return __GacUIInternal<GuiVirtualListView>::BuildRptr(_unwrapped_result);
	}
	
	void GuiVirtualListView::ChangeItemStyle(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> contentProvider)
	{
		vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemContentProvider* _unwrapped_contentProvider = __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::GetInternalObject(contentProvider);
		__GacUIInternal<GuiVirtualListView>::GetInternalObject(*this)->ChangeItemStyle(_unwrapped_contentProvider);
	}
	

/***********************************************************************
ListViewBigIconContentProvider
***********************************************************************/

	ListViewBigIconContentProvider::ListViewBigIconContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewBigIconContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewBigIconContentProvider::~ListViewBigIconContentProvider()
	{
	}
	
	void ListViewBigIconContentProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListViewItemStyleProvider::IListViewItemContentProvider::ClearInternalObjectReference();
	}
	
	rptr<ListViewBigIconContentProvider> ListViewBigIconContentProvider::CreateRptr(Size _iconSize)
	{
		vl::presentation::Size _unwrapped__iconSize = *__GacUIInternal<Size>::GetInternalObject(_iconSize);
		vl::presentation::controls::list::ListViewBigIconContentProvider* _unwrapped_result = new vl::presentation::controls::list::ListViewBigIconContentProvider(_unwrapped__iconSize);
		return __GacUIInternal<ListViewBigIconContentProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ListViewInformationContentProvider
***********************************************************************/

	ListViewInformationContentProvider::ListViewInformationContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewInformationContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewInformationContentProvider::~ListViewInformationContentProvider()
	{
	}
	
	void ListViewInformationContentProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListViewItemStyleProvider::IListViewItemContentProvider::ClearInternalObjectReference();
	}
	
	rptr<ListViewInformationContentProvider> ListViewInformationContentProvider::CreateRptr(Size _iconSize)
	{
		vl::presentation::Size _unwrapped__iconSize = *__GacUIInternal<Size>::GetInternalObject(_iconSize);
		vl::presentation::controls::list::ListViewInformationContentProvider* _unwrapped_result = new vl::presentation::controls::list::ListViewInformationContentProvider(_unwrapped__iconSize);
		return __GacUIInternal<ListViewInformationContentProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ListViewListContentProvider
***********************************************************************/

	ListViewListContentProvider::ListViewListContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewListContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewListContentProvider::~ListViewListContentProvider()
	{
	}
	
	void ListViewListContentProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListViewItemStyleProvider::IListViewItemContentProvider::ClearInternalObjectReference();
	}
	
	rptr<ListViewListContentProvider> ListViewListContentProvider::CreateRptr(Size _iconSize)
	{
		vl::presentation::Size _unwrapped__iconSize = *__GacUIInternal<Size>::GetInternalObject(_iconSize);
		vl::presentation::controls::list::ListViewListContentProvider* _unwrapped_result = new vl::presentation::controls::list::ListViewListContentProvider(_unwrapped__iconSize);
		return __GacUIInternal<ListViewListContentProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ListViewSmallIconContentProvider
***********************************************************************/

	ListViewSmallIconContentProvider::ListViewSmallIconContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewSmallIconContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewSmallIconContentProvider::~ListViewSmallIconContentProvider()
	{
	}
	
	void ListViewSmallIconContentProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListViewItemStyleProvider::IListViewItemContentProvider::ClearInternalObjectReference();
	}
	
	rptr<ListViewSmallIconContentProvider> ListViewSmallIconContentProvider::CreateRptr(Size _iconSize)
	{
		vl::presentation::Size _unwrapped__iconSize = *__GacUIInternal<Size>::GetInternalObject(_iconSize);
		vl::presentation::controls::list::ListViewSmallIconContentProvider* _unwrapped_result = new vl::presentation::controls::list::ListViewSmallIconContentProvider(_unwrapped__iconSize);
		return __GacUIInternal<ListViewSmallIconContentProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ListViewTileContentProvider
***********************************************************************/

	ListViewTileContentProvider::ListViewTileContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewTileContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewTileContentProvider::~ListViewTileContentProvider()
	{
	}
	
	void ListViewTileContentProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListViewItemStyleProvider::IListViewItemContentProvider::ClearInternalObjectReference();
	}
	
	rptr<ListViewTileContentProvider> ListViewTileContentProvider::CreateRptr(Size _iconSize)
	{
		vl::presentation::Size _unwrapped__iconSize = *__GacUIInternal<Size>::GetInternalObject(_iconSize);
		vl::presentation::controls::list::ListViewTileContentProvider* _unwrapped_result = new vl::presentation::controls::list::ListViewTileContentProvider(_unwrapped__iconSize);
		return __GacUIInternal<ListViewTileContentProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ListWrapperProvider_of_ListViewItem
***********************************************************************/

	ListWrapperProvider_of_ListViewItem::ListWrapperProvider_of_ListViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemProviderBase(static_cast<__GacUIInternal<ItemProviderBase>::InternalObjectType*>((__GacUIInternal<ListWrapperProvider_of_ListViewItem>::InternalObjectType*)__internal_object_reference_input))
	    ,IList_of_ListViewItem(static_cast<__GacUIInternal<IList_of_ListViewItem>::InternalObjectType*>((__GacUIInternal<ListWrapperProvider_of_ListViewItem>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListWrapperProvider_of_ListViewItem::~ListWrapperProvider_of_ListViewItem()
	{
	}
	
	void ListWrapperProvider_of_ListViewItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ItemProviderBase::ClearInternalObjectReference();
		IList_of_ListViewItem::ClearInternalObjectReference();
	}
	
	bool ListWrapperProvider_of_ListViewItem::NotifyUpdate(signed __int32 start, signed __int32 count)
	{
		signed __int32 _unwrapped_start = start;
		signed __int32 _unwrapped_count = count;
		bool _unwrapped_result = __GacUIInternal<ListWrapperProvider_of_ListViewItem>::GetInternalObject(*this)->NotifyUpdate(_unwrapped_start, _unwrapped_count);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
ListProvider_of_ListViewItem
***********************************************************************/

	ListProvider_of_ListViewItem::ListProvider_of_ListViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListWrapperProvider_of_ListViewItem(static_cast<__GacUIInternal<ListWrapperProvider_of_ListViewItem>::InternalObjectType*>((__GacUIInternal<ListProvider_of_ListViewItem>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListProvider_of_ListViewItem::~ListProvider_of_ListViewItem()
	{
	}
	
	void ListProvider_of_ListViewItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListWrapperProvider_of_ListViewItem::ClearInternalObjectReference();
	}
	
	rptr<ListProvider_of_ListViewItem> ListProvider_of_ListViewItem::CreateRptr()
	{
		vl::presentation::controls::list::ListProvider<vl::Ptr<vl::presentation::controls::list::ListViewItem> >* _unwrapped_result = new vl::presentation::controls::list::ListProvider<vl::Ptr<vl::presentation::controls::list::ListViewItem> >();
		return __GacUIInternal<ListProvider_of_ListViewItem>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
NodeItemProvider
***********************************************************************/

	NodeItemProvider::NodeItemProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemProviderBase(static_cast<__GacUIInternal<ItemProviderBase>::InternalObjectType*>((__GacUIInternal<NodeItemProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	NodeItemProvider::~NodeItemProvider()
	{
	}
	
	void NodeItemProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ItemProviderBase::ClearInternalObjectReference();
	}
	
	rptr<NodeItemProvider> NodeItemProvider::CreateRptr(rptr<INodeRootProvider> _root)
	{
		vl::presentation::controls::tree::INodeRootProvider* _unwrapped__root = __GacUIInternal<INodeRootProvider>::GetInternalObject(_root);
		vl::presentation::controls::tree::NodeItemProvider* _unwrapped_result = new vl::presentation::controls::tree::NodeItemProvider(_unwrapped__root);
		return __GacUIInternal<NodeItemProvider>::BuildRptr(_unwrapped_result);
	}
	
	sptr<INodeRootProvider> NodeItemProvider::GetRoot()
	{
		vl::Ptr<vl::presentation::controls::tree::INodeRootProvider> _unwrapped_result = __GacUIInternal<NodeItemProvider>::GetInternalObject(*this)->GetRoot();
		sptr<INodeRootProvider> _wrapped_result = __GacUIInternal<INodeRootProvider>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
NodeItemStyleProvider
***********************************************************************/

	NodeItemStyleProvider::NodeItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl :: IItemStyleProvider(static_cast<__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::InternalObjectType*>((__GacUIInternal<NodeItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	NodeItemStyleProvider::~NodeItemStyleProvider()
	{
	}
	
	void NodeItemStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableListControl::IItemStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<NodeItemStyleProvider> NodeItemStyleProvider::CreateRptr(sptr<INodeItemStyleProvider> provider)
	{
		vl::Ptr<vl::presentation::controls::tree::INodeItemStyleProvider> _unwrapped_provider = __GacUIInternal<INodeItemStyleProvider>::GetInternalObject(provider);
		vl::presentation::controls::tree::NodeItemStyleProvider* _unwrapped_result = new vl::presentation::controls::tree::NodeItemStyleProvider(_unwrapped_provider);
		return __GacUIInternal<NodeItemStyleProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
RangedItemArrangerBase
***********************************************************************/

	RangedItemArrangerBase::RangedItemArrangerBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemArranger(static_cast<__GacUIInternal<GuiListControl :: IItemArranger>::InternalObjectType*>((__GacUIInternal<RangedItemArrangerBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	RangedItemArrangerBase::~RangedItemArrangerBase()
	{
	}
	
	void RangedItemArrangerBase::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemArranger::ClearInternalObjectReference();
	}
	

/***********************************************************************
FixedHeightItemArranger
***********************************************************************/

	FixedHeightItemArranger::FixedHeightItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,RangedItemArrangerBase(static_cast<__GacUIInternal<RangedItemArrangerBase>::InternalObjectType*>((__GacUIInternal<FixedHeightItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	FixedHeightItemArranger::~FixedHeightItemArranger()
	{
	}
	
	void FixedHeightItemArranger::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		RangedItemArrangerBase::ClearInternalObjectReference();
	}
	
	rptr<FixedHeightItemArranger> FixedHeightItemArranger::CreateRptr()
	{
		vl::presentation::controls::list::FixedHeightItemArranger* _unwrapped_result = new vl::presentation::controls::list::FixedHeightItemArranger();
		return __GacUIInternal<FixedHeightItemArranger>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
FixedHeightMultiColumnItemArranger
***********************************************************************/

	FixedHeightMultiColumnItemArranger::FixedHeightMultiColumnItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,RangedItemArrangerBase(static_cast<__GacUIInternal<RangedItemArrangerBase>::InternalObjectType*>((__GacUIInternal<FixedHeightMultiColumnItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	FixedHeightMultiColumnItemArranger::~FixedHeightMultiColumnItemArranger()
	{
	}
	
	void FixedHeightMultiColumnItemArranger::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		RangedItemArrangerBase::ClearInternalObjectReference();
	}
	
	rptr<FixedHeightMultiColumnItemArranger> FixedHeightMultiColumnItemArranger::CreateRptr()
	{
		vl::presentation::controls::list::FixedHeightMultiColumnItemArranger* _unwrapped_result = new vl::presentation::controls::list::FixedHeightMultiColumnItemArranger();
		return __GacUIInternal<FixedHeightMultiColumnItemArranger>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
FixedSizeMultiColumnItemArranger
***********************************************************************/

	FixedSizeMultiColumnItemArranger::FixedSizeMultiColumnItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,RangedItemArrangerBase(static_cast<__GacUIInternal<RangedItemArrangerBase>::InternalObjectType*>((__GacUIInternal<FixedSizeMultiColumnItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	FixedSizeMultiColumnItemArranger::~FixedSizeMultiColumnItemArranger()
	{
	}
	
	void FixedSizeMultiColumnItemArranger::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		RangedItemArrangerBase::ClearInternalObjectReference();
	}
	
	rptr<FixedSizeMultiColumnItemArranger> FixedSizeMultiColumnItemArranger::CreateRptr()
	{
		vl::presentation::controls::list::FixedSizeMultiColumnItemArranger* _unwrapped_result = new vl::presentation::controls::list::FixedSizeMultiColumnItemArranger();
		return __GacUIInternal<FixedSizeMultiColumnItemArranger>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ListViewColumnItemArranger
***********************************************************************/

	ListViewColumnItemArranger::ListViewColumnItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,FixedHeightItemArranger(static_cast<__GacUIInternal<FixedHeightItemArranger>::InternalObjectType*>((__GacUIInternal<ListViewColumnItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewColumnItemArranger::~ListViewColumnItemArranger()
	{
	}
	
	void ListViewColumnItemArranger::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		FixedHeightItemArranger::ClearInternalObjectReference();
	}
	
	rptr<ListViewColumnItemArranger> ListViewColumnItemArranger::CreateRptr()
	{
		vl::presentation::controls::list::ListViewColumnItemArranger* _unwrapped_result = new vl::presentation::controls::list::ListViewColumnItemArranger();
		return __GacUIInternal<ListViewColumnItemArranger>::BuildRptr(_unwrapped_result);
	}
	
	signed __int32 ListViewColumnItemArranger::get_SplitterWidth()
	{
		signed __int32 _wrapped_result = vl::presentation::controls::list::ListViewColumnItemArranger::SplitterWidth;
		return _wrapped_result;
	}
	

/***********************************************************************
ListViewColumnItemArranger :: IColumnItemView
***********************************************************************/

	ListViewColumnItemArranger::IColumnItemView::IColumnItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewColumnItemArranger::IColumnItemView::~IColumnItemView()
	{
	}
	
	void ListViewColumnItemArranger::IColumnItemView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	bool ListViewColumnItemArranger::IColumnItemView::AttachCallback(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value)
	{
		vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemViewCallback* _unwrapped_value = __GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::GetInternalObject(*this)->AttachCallback(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool ListViewColumnItemArranger::IColumnItemView::DetachCallback(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value)
	{
		vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemViewCallback* _unwrapped_value = __GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::GetInternalObject(*this)->DetachCallback(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	GacString ListViewColumnItemArranger::IColumnItemView::GetColumnText(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::GetInternalObject(*this)->GetColumnText(_unwrapped_index);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	signed __int32 ListViewColumnItemArranger::IColumnItemView::GetColumnSize(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		signed __int32 _unwrapped_result = __GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::GetInternalObject(*this)->GetColumnSize(_unwrapped_index);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void ListViewColumnItemArranger::IColumnItemView::SetColumnSize(signed __int32 index, signed __int32 value)
	{
		signed __int32 _unwrapped_index = index;
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::GetInternalObject(*this)->SetColumnSize(_unwrapped_index, _unwrapped_value);
	}
	
	signed __int32 ListViewColumnItemArranger::IColumnItemView::GetColumnCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::GetInternalObject(*this)->GetColumnCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	wchar_t const* ListViewColumnItemArranger::IColumnItemView::get_Identifier()
	{
		wchar_t const* _wrapped_result = vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemView::Identifier;
		return _wrapped_result;
	}
	

/***********************************************************************
ListViewColumnItemArranger :: IColumnItemViewCallback
***********************************************************************/

	ListViewColumnItemArranger::IColumnItemViewCallback::IColumnItemViewCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewColumnItemArranger::IColumnItemViewCallback::~IColumnItemViewCallback()
	{
	}
	
	void ListViewColumnItemArranger::IColumnItemViewCallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void ListViewColumnItemArranger::IColumnItemViewCallback::OnColumnChanged()
	{
		__GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>::GetInternalObject(*this)->OnColumnChanged();
	}
	
	void ListViewColumnItemArranger::IColumnItemViewCallback::OnColumnSizeChanged(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		__GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>::GetInternalObject(*this)->OnColumnSizeChanged(_unwrapped_index);
	}
	

/***********************************************************************
ListViewDetailContentProvider
***********************************************************************/

	ListViewDetailContentProvider::ListViewDetailContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewDetailContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewDetailContentProvider::~ListViewDetailContentProvider()
	{
	}
	
	void ListViewDetailContentProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListViewItemStyleProvider::IListViewItemContentProvider::ClearInternalObjectReference();
	}
	
	rptr<ListViewDetailContentProvider> ListViewDetailContentProvider::CreateRptr(Size _iconSize)
	{
		vl::presentation::Size _unwrapped__iconSize = *__GacUIInternal<Size>::GetInternalObject(_iconSize);
		vl::presentation::controls::list::ListViewDetailContentProvider* _unwrapped_result = new vl::presentation::controls::list::ListViewDetailContentProvider(_unwrapped__iconSize);
		return __GacUIInternal<ListViewDetailContentProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
ListViewItemProvider
***********************************************************************/

	ListViewItemProvider::ListViewItemProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListProvider_of_ListViewItem(static_cast<__GacUIInternal<ListProvider_of_ListViewItem>::InternalObjectType*>((__GacUIInternal<ListViewItemProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemProvider::~ListViewItemProvider()
	{
	}
	
	void ListViewItemProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListProvider_of_ListViewItem::ClearInternalObjectReference();
	}
	
	rptr<ListViewItemProvider> ListViewItemProvider::CreateRptr()
	{
		vl::presentation::controls::list::ListViewItemProvider* _unwrapped_result = new vl::presentation::controls::list::ListViewItemProvider();
		return __GacUIInternal<ListViewItemProvider>::BuildRptr(_unwrapped_result);
	}
	
	void ListViewItemProvider::NotifyDataColumnsUpdated()
	{
		__GacUIInternal<ListViewItemProvider>::GetInternalObject(*this)->NotifyDataColumnsUpdated();
	}
	
	void ListViewItemProvider::NotifyColumnsUpdated()
	{
		__GacUIInternal<ListViewItemProvider>::GetInternalObject(*this)->NotifyColumnsUpdated();
	}
	
	rptr<IList_of_int> ListViewItemProvider::GetDataColumns()
	{
		vl::collections::IList<int,int>& _unwrapped_result = __GacUIInternal<ListViewItemProvider>::GetInternalObject(*this)->GetDataColumns();
		rptr<IList_of_int> _wrapped_result = __GacUIInternal<IList_of_int>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<IList_of_ListViewColumn> ListViewItemProvider::GetColumns()
	{
		vl::collections::IList<vl::Ptr<vl::presentation::controls::list::ListViewColumn>,vl::presentation::controls::list::ListViewColumn *>& _unwrapped_result = __GacUIInternal<ListViewItemProvider>::GetInternalObject(*this)->GetColumns();
		rptr<IList_of_ListViewColumn> _wrapped_result = __GacUIInternal<IList_of_ListViewColumn>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiListView
***********************************************************************/

	GuiListView::GuiListView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiVirtualListView(static_cast<__GacUIInternal<GuiVirtualListView>::InternalObjectType*>((__GacUIInternal<GuiListView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListView::~GuiListView()
	{
	}
	
	void GuiListView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiVirtualListView::ClearInternalObjectReference();
	}
	
	rptr<GuiListView> GuiListView::CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider)
	{
		vl::presentation::controls::GuiListViewBase::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiListViewBase :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::GuiListView* _unwrapped_result = new vl::presentation::controls::GuiListView(_unwrapped__styleProvider);
		return __GacUIInternal<GuiListView>::BuildRptr(_unwrapped_result);
	}
	
	rptr<ListViewItemProvider> GuiListView::GetItems()
	{
		vl::presentation::controls::list::ListViewItemProvider& _unwrapped_result = __GacUIInternal<GuiListView>::GetInternalObject(*this)->GetItems();
		rptr<ListViewItemProvider> _wrapped_result = __GacUIInternal<ListViewItemProvider>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
TextItem
***********************************************************************/

	TextItem::TextItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TextItem::~TextItem()
	{
		delete __GacUIInternal<TextItem>::GetInternalObject(*this);
	}
	
	void TextItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<TextItem> TextItem::CreateRptr(wchar_t const* _text, bool _checked)
	{
		wchar_t const* _unwrapped__text = _text;
		bool _unwrapped__checked = _checked;
		vl::presentation::controls::list::TextItem* _unwrapped_result = new vl::presentation::controls::list::TextItem(_unwrapped__text, _unwrapped__checked);
		return __GacUIInternal<TextItem>::BuildRptr(_unwrapped_result);
	}
	
	TextItem TextItem::Create(wchar_t const* _text, bool _checked)
	{
		wchar_t const* _unwrapped__text = _text;
		bool _unwrapped__checked = _checked;
		vl::presentation::controls::list::TextItem _unwrapped_result = vl::presentation::controls::list::TextItem(_unwrapped__text, _unwrapped__checked);
		return __GacUIInternal<TextItem>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<TextItem> TextItem::CreateRptr(const GacString& _text, bool _checked)
	{
		vl::ObjectString<wchar_t> _unwrapped__text = _text.Buffer();
		bool _unwrapped__checked = _checked;
		vl::presentation::controls::list::TextItem* _unwrapped_result = new vl::presentation::controls::list::TextItem(_unwrapped__text, _unwrapped__checked);
		return __GacUIInternal<TextItem>::BuildRptr(_unwrapped_result);
	}
	
	TextItem TextItem::Create(const GacString& _text, bool _checked)
	{
		vl::ObjectString<wchar_t> _unwrapped__text = _text.Buffer();
		bool _unwrapped__checked = _checked;
		vl::presentation::controls::list::TextItem _unwrapped_result = vl::presentation::controls::list::TextItem(_unwrapped__text, _unwrapped__checked);
		return __GacUIInternal<TextItem>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<TextItem> TextItem::CreateRptr(rptr<TextItem> item)
	{
		vl::presentation::controls::list::TextItem const& _unwrapped_item = *__GacUIInternal<TextItem>::GetInternalObject(item);
		vl::presentation::controls::list::TextItem* _unwrapped_result = new vl::presentation::controls::list::TextItem(_unwrapped_item);
		return __GacUIInternal<TextItem>::BuildRptr(_unwrapped_result);
	}
	
	TextItem TextItem::Create(rptr<TextItem> item)
	{
		vl::presentation::controls::list::TextItem const& _unwrapped_item = *__GacUIInternal<TextItem>::GetInternalObject(item);
		vl::presentation::controls::list::TextItem _unwrapped_result = vl::presentation::controls::list::TextItem(_unwrapped_item);
		return __GacUIInternal<TextItem>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<TextItem> TextItem::CreateRptr()
	{
		vl::presentation::controls::list::TextItem* _unwrapped_result = new vl::presentation::controls::list::TextItem();
		return __GacUIInternal<TextItem>::BuildRptr(_unwrapped_result);
	}
	
	TextItem TextItem::Create()
	{
		vl::presentation::controls::list::TextItem _unwrapped_result = vl::presentation::controls::list::TextItem();
		return __GacUIInternal<TextItem>::BuildCopy(&_unwrapped_result);
	}
	
	bool TextItem::operator==(rptr<TextItem> value)
	{
		vl::presentation::controls::list::TextItem const& _unwrapped_value = *__GacUIInternal<TextItem>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextItem>::GetInternalObject(*this)->operator==(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextItem::operator!=(rptr<TextItem> value)
	{
		vl::presentation::controls::list::TextItem const& _unwrapped_value = *__GacUIInternal<TextItem>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextItem>::GetInternalObject(*this)->operator!=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<TextItem> TextItem::operator=(rptr<TextItem> __that)
	{
		vl::presentation::controls::list::TextItem const& _unwrapped___that = *__GacUIInternal<TextItem>::GetInternalObject(__that);
		vl::presentation::controls::list::TextItem& _unwrapped_result = __GacUIInternal<TextItem>::GetInternalObject(*this)->operator=(_unwrapped___that);
		rptr<TextItem> _wrapped_result = __GacUIInternal<TextItem>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	const GacString& TextItem::GetText()
	{
		vl::ObjectString<wchar_t> const& _unwrapped_result = __GacUIInternal<TextItem>::GetInternalObject(*this)->GetText();
		const GacString& _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	bool TextItem::GetChecked()
	{
		bool _unwrapped_result = __GacUIInternal<TextItem>::GetInternalObject(*this)->GetChecked();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
IList_of_TextItem
***********************************************************************/

	IList_of_TextItem::IList_of_TextItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_TextItem::~IList_of_TextItem()
	{
	}
	
	void IList_of_TextItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	signed __int32 IList_of_TextItem::Insert(signed __int32 index, rptr<TextItem> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::list::TextItem const& _unwrapped_item = *__GacUIInternal<TextItem>::GetInternalObject(item);
		signed __int32 _unwrapped_result = __GacUIInternal<IList_of_TextItem>::GetInternalObject(*this)->Insert(_unwrapped_index, _unwrapped_item);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool IList_of_TextItem::Set(signed __int32 index, rptr<TextItem> item)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::controls::list::TextItem const& _unwrapped_item = *__GacUIInternal<TextItem>::GetInternalObject(item);
		bool _unwrapped_result = __GacUIInternal<IList_of_TextItem>::GetInternalObject(*this)->Set(_unwrapped_index, _unwrapped_item);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
ListWrapperProvider_of_TextItem
***********************************************************************/

	ListWrapperProvider_of_TextItem::ListWrapperProvider_of_TextItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemProviderBase(static_cast<__GacUIInternal<ItemProviderBase>::InternalObjectType*>((__GacUIInternal<ListWrapperProvider_of_TextItem>::InternalObjectType*)__internal_object_reference_input))
	    ,IList_of_TextItem(static_cast<__GacUIInternal<IList_of_TextItem>::InternalObjectType*>((__GacUIInternal<ListWrapperProvider_of_TextItem>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListWrapperProvider_of_TextItem::~ListWrapperProvider_of_TextItem()
	{
	}
	
	void ListWrapperProvider_of_TextItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ItemProviderBase::ClearInternalObjectReference();
		IList_of_TextItem::ClearInternalObjectReference();
	}
	
	bool ListWrapperProvider_of_TextItem::NotifyUpdate(signed __int32 start, signed __int32 count)
	{
		signed __int32 _unwrapped_start = start;
		signed __int32 _unwrapped_count = count;
		bool _unwrapped_result = __GacUIInternal<ListWrapperProvider_of_TextItem>::GetInternalObject(*this)->NotifyUpdate(_unwrapped_start, _unwrapped_count);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
ListProvider_of_TextItem
***********************************************************************/

	ListProvider_of_TextItem::ListProvider_of_TextItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListWrapperProvider_of_TextItem(static_cast<__GacUIInternal<ListWrapperProvider_of_TextItem>::InternalObjectType*>((__GacUIInternal<ListProvider_of_TextItem>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListProvider_of_TextItem::~ListProvider_of_TextItem()
	{
	}
	
	void ListProvider_of_TextItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListWrapperProvider_of_TextItem::ClearInternalObjectReference();
	}
	
	rptr<ListProvider_of_TextItem> ListProvider_of_TextItem::CreateRptr()
	{
		vl::presentation::controls::list::ListProvider<vl::presentation::controls::list::TextItem>* _unwrapped_result = new vl::presentation::controls::list::ListProvider<vl::presentation::controls::list::TextItem>();
		return __GacUIInternal<ListProvider_of_TextItem>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
TextItemStyleProvider
***********************************************************************/

	TextItemStyleProvider::TextItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl :: IItemStyleProvider(static_cast<__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::InternalObjectType*>((__GacUIInternal<TextItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemStyleProvider::~TextItemStyleProvider()
	{
	}
	
	void TextItemStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableListControl::IItemStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<TextItemStyleProvider> TextItemStyleProvider::CreateRptr(rptr<TextItemStyleProvider :: ITextItemStyleProvider> _textItemStyleProvider)
	{
		vl::presentation::controls::list::TextItemStyleProvider::ITextItemStyleProvider* _unwrapped__textItemStyleProvider = __GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::GetInternalObject(_textItemStyleProvider);
		vl::presentation::controls::list::TextItemStyleProvider* _unwrapped_result = new vl::presentation::controls::list::TextItemStyleProvider(_unwrapped__textItemStyleProvider);
		return __GacUIInternal<TextItemStyleProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
TextItemStyleProvider :: ITextItemStyleProvider
***********************************************************************/

	TextItemStyleProvider::ITextItemStyleProvider::ITextItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemStyleProvider::ITextItemStyleProvider::~ITextItemStyleProvider()
	{
	}
	
	void TextItemStyleProvider::ITextItemStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	rptr<GuiSelectableButton :: IStyleController> TextItemStyleProvider::ITextItemStyleProvider::CreateBackgroundStyleController()
	{
		vl::presentation::controls::GuiSelectableButton::IStyleController* _unwrapped_result = __GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::GetInternalObject(*this)->CreateBackgroundStyleController();
		rptr<GuiSelectableButton :: IStyleController> _wrapped_result = __GacUIInternal<GuiSelectableButton :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiSelectableButton :: IStyleController> TextItemStyleProvider::ITextItemStyleProvider::CreateBulletStyleController()
	{
		vl::presentation::controls::GuiSelectableButton::IStyleController* _unwrapped_result = __GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::GetInternalObject(*this)->CreateBulletStyleController();
		rptr<GuiSelectableButton :: IStyleController> _wrapped_result = __GacUIInternal<GuiSelectableButton :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
TextItemStyleProvider :: ITextItemView
***********************************************************************/

	TextItemStyleProvider::ITextItemView::ITextItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemPrimaryTextView(static_cast<__GacUIInternal<GuiListControl :: IItemPrimaryTextView>::InternalObjectType*>((__GacUIInternal<TextItemStyleProvider :: ITextItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemStyleProvider::ITextItemView::~ITextItemView()
	{
	}
	
	void TextItemStyleProvider::ITextItemView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiListControl::IItemPrimaryTextView::ClearInternalObjectReference();
	}
	
	GacString TextItemStyleProvider::ITextItemView::GetText(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<TextItemStyleProvider :: ITextItemView>::GetInternalObject(*this)->GetText(_unwrapped_itemIndex);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	bool TextItemStyleProvider::ITextItemView::GetChecked(signed __int32 itemIndex)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		bool _unwrapped_result = __GacUIInternal<TextItemStyleProvider :: ITextItemView>::GetInternalObject(*this)->GetChecked(_unwrapped_itemIndex);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void TextItemStyleProvider::ITextItemView::SetCheckedSilently(signed __int32 itemIndex, bool value)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		bool _unwrapped_value = value;
		__GacUIInternal<TextItemStyleProvider :: ITextItemView>::GetInternalObject(*this)->SetCheckedSilently(_unwrapped_itemIndex, _unwrapped_value);
	}
	
	wchar_t const* TextItemStyleProvider::ITextItemView::get_Identifier()
	{
		wchar_t const* _wrapped_result = vl::presentation::controls::list::TextItemStyleProvider::ITextItemView::Identifier;
		return _wrapped_result;
	}
	

/***********************************************************************
TextItemStyleProvider :: TextItemStyleController
***********************************************************************/

	TextItemStyleProvider::TextItemStyleController::TextItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemStyleControllerBase(static_cast<__GacUIInternal<ItemStyleControllerBase>::InternalObjectType*>((__GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemStyleProvider::TextItemStyleController::~TextItemStyleController()
	{
	}
	
	void TextItemStyleProvider::TextItemStyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ItemStyleControllerBase::ClearInternalObjectReference();
	}
	
	rptr<TextItemStyleProvider :: TextItemStyleController> TextItemStyleProvider::TextItemStyleController::CreateRptr(rptr<TextItemStyleProvider> provider)
	{
		vl::presentation::controls::list::TextItemStyleProvider* _unwrapped_provider = __GacUIInternal<TextItemStyleProvider>::GetInternalObject(provider);
		vl::presentation::controls::list::TextItemStyleProvider::TextItemStyleController* _unwrapped_result = new vl::presentation::controls::list::TextItemStyleProvider::TextItemStyleController(_unwrapped_provider);
		return __GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::BuildRptr(_unwrapped_result);
	}
	
	bool TextItemStyleProvider::TextItemStyleController::GetSelected()
	{
		bool _unwrapped_result = __GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::GetInternalObject(*this)->GetSelected();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void TextItemStyleProvider::TextItemStyleController::SetSelected(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::GetInternalObject(*this)->SetSelected(_unwrapped_value);
	}
	
	bool TextItemStyleProvider::TextItemStyleController::GetChecked()
	{
		bool _unwrapped_result = __GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::GetInternalObject(*this)->GetChecked();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void TextItemStyleProvider::TextItemStyleController::SetChecked(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::GetInternalObject(*this)->SetChecked(_unwrapped_value);
	}
	
	const GacString& TextItemStyleProvider::TextItemStyleController::GetText()
	{
		vl::ObjectString<wchar_t> const& _unwrapped_result = __GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::GetInternalObject(*this)->GetText();
		const GacString& _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	void TextItemStyleProvider::TextItemStyleController::SetText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::GetInternalObject(*this)->SetText(_unwrapped_value);
	}
	

/***********************************************************************
GuiVirtualTextList
***********************************************************************/

	GuiVirtualTextList::GuiVirtualTextList(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl(static_cast<__GacUIInternal<GuiSelectableListControl>::InternalObjectType*>((__GacUIInternal<GuiVirtualTextList>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiVirtualTextList::~GuiVirtualTextList()
	{
	}
	
	void GuiVirtualTextList::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableListControl::ClearInternalObjectReference();
	}
	
	rptr<GuiVirtualTextList> GuiVirtualTextList::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<TextItemStyleProvider :: ITextItemStyleProvider> _itemStyleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::list::TextItemStyleProvider::ITextItemStyleProvider* _unwrapped__itemStyleProvider = __GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::GetInternalObject(_itemStyleProvider);
		vl::presentation::controls::GuiListControl::IItemProvider* _unwrapped__itemProvider = __GacUIInternal<GuiListControl :: IItemProvider>::GetInternalObject(_itemProvider);
		vl::presentation::controls::GuiVirtualTextList* _unwrapped_result = new vl::presentation::controls::GuiVirtualTextList(_unwrapped__styleProvider, _unwrapped__itemStyleProvider, _unwrapped__itemProvider);
		return __GacUIInternal<GuiVirtualTextList>::BuildRptr(_unwrapped_result);
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiVirtualTextList::ChangeItemStyle(rptr<TextItemStyleProvider :: ITextItemStyleProvider> itemStyleProvider)
	{
		vl::presentation::controls::list::TextItemStyleProvider::ITextItemStyleProvider* _unwrapped_itemStyleProvider = __GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::GetInternalObject(itemStyleProvider);
		vl::Ptr<vl::presentation::controls::GuiListControl::IItemStyleProvider> _unwrapped_result = __GacUIInternal<GuiVirtualTextList>::GetInternalObject(*this)->ChangeItemStyle(_unwrapped_itemStyleProvider);
		sptr<GuiListControl :: IItemStyleProvider> _wrapped_result = __GacUIInternal<GuiListControl :: IItemStyleProvider>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
TextItemProvider
***********************************************************************/

	TextItemProvider::TextItemProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListProvider_of_TextItem(static_cast<__GacUIInternal<ListProvider_of_TextItem>::InternalObjectType*>((__GacUIInternal<TextItemProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemProvider::~TextItemProvider()
	{
	}
	
	void TextItemProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		ListProvider_of_TextItem::ClearInternalObjectReference();
	}
	
	rptr<TextItemProvider> TextItemProvider::CreateRptr()
	{
		vl::presentation::controls::list::TextItemProvider* _unwrapped_result = new vl::presentation::controls::list::TextItemProvider();
		return __GacUIInternal<TextItemProvider>::BuildRptr(_unwrapped_result);
	}
	
	void TextItemProvider::SetText(signed __int32 itemIndex, const GacString& value)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<TextItemProvider>::GetInternalObject(*this)->SetText(_unwrapped_itemIndex, _unwrapped_value);
	}
	
	void TextItemProvider::SetChecked(signed __int32 itemIndex, bool value)
	{
		signed __int32 _unwrapped_itemIndex = itemIndex;
		bool _unwrapped_value = value;
		__GacUIInternal<TextItemProvider>::GetInternalObject(*this)->SetChecked(_unwrapped_itemIndex, _unwrapped_value);
	}
	

/***********************************************************************
GuiTextList
***********************************************************************/

	GuiTextList::GuiTextList(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiVirtualTextList(static_cast<__GacUIInternal<GuiVirtualTextList>::InternalObjectType*>((__GacUIInternal<GuiTextList>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTextList::~GuiTextList()
	{
	}
	
	void GuiTextList::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiVirtualTextList::ClearInternalObjectReference();
	}
	
	rptr<GuiTextList> GuiTextList::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<TextItemStyleProvider :: ITextItemStyleProvider> _itemStyleProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::list::TextItemStyleProvider::ITextItemStyleProvider* _unwrapped__itemStyleProvider = __GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::GetInternalObject(_itemStyleProvider);
		vl::presentation::controls::GuiTextList* _unwrapped_result = new vl::presentation::controls::GuiTextList(_unwrapped__styleProvider, _unwrapped__itemStyleProvider);
		return __GacUIInternal<GuiTextList>::BuildRptr(_unwrapped_result);
	}
	
	rptr<TextItemProvider> GuiTextList::GetItems()
	{
		vl::presentation::controls::list::TextItemProvider& _unwrapped_result = __GacUIInternal<GuiTextList>::GetInternalObject(*this)->GetItems();
		rptr<TextItemProvider> _wrapped_result = __GacUIInternal<TextItemProvider>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
TextLine
***********************************************************************/

	TextLine::TextLine(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TextLine::~TextLine()
	{
		delete __GacUIInternal<TextLine>::GetInternalObject(*this);
	}
	
	void TextLine::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<TextLine> TextLine::CreateRptr()
	{
		vl::presentation::elements::text::TextLine* _unwrapped_result = new vl::presentation::elements::text::TextLine();
		return __GacUIInternal<TextLine>::BuildRptr(_unwrapped_result);
	}
	
	TextLine TextLine::Create()
	{
		vl::presentation::elements::text::TextLine _unwrapped_result = vl::presentation::elements::text::TextLine();
		return __GacUIInternal<TextLine>::BuildCopy(&_unwrapped_result);
	}
	
	bool TextLine::operator==(rptr<TextLine> value)
	{
		vl::presentation::elements::text::TextLine const& _unwrapped_value = *__GacUIInternal<TextLine>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->operator==(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextLine::operator!=(rptr<TextLine> value)
	{
		vl::presentation::elements::text::TextLine const& _unwrapped_value = *__GacUIInternal<TextLine>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->operator!=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void TextLine::Initialize()
	{
		__GacUIInternal<TextLine>::GetInternalObject(*this)->Initialize();
	}
	
	void TextLine::Finalize()
	{
		__GacUIInternal<TextLine>::GetInternalObject(*this)->Finalize();
	}
	
	bool TextLine::IsReady()
	{
		bool _unwrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->IsReady();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextLine::Modify(signed __int32 start, signed __int32 count, wchar_t const* input, signed __int32 inputCount)
	{
		signed __int32 _unwrapped_start = start;
		signed __int32 _unwrapped_count = count;
		wchar_t const* _unwrapped_input = input;
		signed __int32 _unwrapped_inputCount = inputCount;
		bool _unwrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->Modify(_unwrapped_start, _unwrapped_count, _unwrapped_input, _unwrapped_inputCount);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	TextLine TextLine::Split(signed __int32 index)
	{
		signed __int32 _unwrapped_index = index;
		vl::presentation::elements::text::TextLine _unwrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->Split(_unwrapped_index);
		TextLine _wrapped_result = __GacUIInternal<TextLine>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void TextLine::AppendAndFinalize(rptr<TextLine> line)
	{
		vl::presentation::elements::text::TextLine& _unwrapped_line = *__GacUIInternal<TextLine>::GetInternalObject(line);
		__GacUIInternal<TextLine>::GetInternalObject(*this)->AppendAndFinalize(_unwrapped_line);
	}
	
	signed __int32 TextLine::CalculateBufferLength(signed __int32 dataLength)
	{
		signed __int32 _unwrapped_dataLength = dataLength;
		signed __int32 _unwrapped_result = vl::presentation::elements::text::TextLine::CalculateBufferLength(_unwrapped_dataLength);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	wchar_t* TextLine::get_text()
	{
		wchar_t* _wrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->text;
		return _wrapped_result;
	}
	
	void TextLine::set_text(wchar_t* value)
	{
		wchar_t* _unwrapped_value = value;
		__GacUIInternal<TextLine>::GetInternalObject(*this)->text = _unwrapped_value;
	}
	
	rptr<CharAtt> TextLine::get_att()
	{
		rptr<CharAtt> _wrapped_result = __GacUIInternal<CharAtt>::BuildRptr(__GacUIInternal<TextLine>::GetInternalObject(*this)->att);
		return _wrapped_result;
	}
	
	void TextLine::set_att(rptr<CharAtt> value)
	{
		vl::presentation::elements::text::CharAtt* _unwrapped_value = __GacUIInternal<CharAtt>::GetInternalObject(value);
		__GacUIInternal<TextLine>::GetInternalObject(*this)->att = _unwrapped_value;
	}
	
	signed __int32 TextLine::get_availableOffsetCount()
	{
		signed __int32 _wrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->availableOffsetCount;
		return _wrapped_result;
	}
	
	void TextLine::set_availableOffsetCount(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<TextLine>::GetInternalObject(*this)->availableOffsetCount = _unwrapped_value;
	}
	
	signed __int32 TextLine::get_bufferLength()
	{
		signed __int32 _wrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->bufferLength;
		return _wrapped_result;
	}
	
	void TextLine::set_bufferLength(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<TextLine>::GetInternalObject(*this)->bufferLength = _unwrapped_value;
	}
	
	signed __int32 TextLine::get_dataLength()
	{
		signed __int32 _wrapped_result = __GacUIInternal<TextLine>::GetInternalObject(*this)->dataLength;
		return _wrapped_result;
	}
	
	void TextLine::set_dataLength(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<TextLine>::GetInternalObject(*this)->dataLength = _unwrapped_value;
	}
	
	signed __int32 TextLine::get_BlockSize()
	{
		signed __int32 _wrapped_result = vl::presentation::elements::text::TextLine::BlockSize;
		return _wrapped_result;
	}
	
	signed __int32 TextLine::get_MaxWidth()
	{
		signed __int32 _wrapped_result = vl::presentation::elements::text::TextLine::MaxWidth;
		return _wrapped_result;
	}
	

/***********************************************************************
TextPos
***********************************************************************/

	TextPos::TextPos(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TextPos::~TextPos()
	{
		delete __GacUIInternal<TextPos>::GetInternalObject(*this);
	}
	
	void TextPos::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<TextPos> TextPos::CreateRptr(signed __int32 _row, signed __int32 _column)
	{
		signed __int32 _unwrapped__row = _row;
		signed __int32 _unwrapped__column = _column;
		vl::presentation::TextPos* _unwrapped_result = new vl::presentation::TextPos(_unwrapped__row, _unwrapped__column);
		return __GacUIInternal<TextPos>::BuildRptr(_unwrapped_result);
	}
	
	TextPos TextPos::Create(signed __int32 _row, signed __int32 _column)
	{
		signed __int32 _unwrapped__row = _row;
		signed __int32 _unwrapped__column = _column;
		vl::presentation::TextPos _unwrapped_result = vl::presentation::TextPos(_unwrapped__row, _unwrapped__column);
		return __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<TextPos> TextPos::CreateRptr()
	{
		vl::presentation::TextPos* _unwrapped_result = new vl::presentation::TextPos();
		return __GacUIInternal<TextPos>::BuildRptr(_unwrapped_result);
	}
	
	TextPos TextPos::Create()
	{
		vl::presentation::TextPos _unwrapped_result = vl::presentation::TextPos();
		return __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
	}
	
	signed __int32 TextPos::Compare(rptr<TextPos> value)
	{
		vl::presentation::TextPos const& _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		signed __int32 _unwrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->Compare(_unwrapped_value);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextPos::operator==(rptr<TextPos> value)
	{
		vl::presentation::TextPos const& _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->operator==(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextPos::operator!=(rptr<TextPos> value)
	{
		vl::presentation::TextPos const& _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->operator!=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextPos::operator<(rptr<TextPos> value)
	{
		vl::presentation::TextPos const& _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->operator<(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextPos::operator<=(rptr<TextPos> value)
	{
		vl::presentation::TextPos const& _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->operator<=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextPos::operator>(rptr<TextPos> value)
	{
		vl::presentation::TextPos const& _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->operator>(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextPos::operator>=(rptr<TextPos> value)
	{
		vl::presentation::TextPos const& _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		bool _unwrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->operator>=(_unwrapped_value);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 TextPos::get_row()
	{
		signed __int32 _wrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->row;
		return _wrapped_result;
	}
	
	void TextPos::set_row(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<TextPos>::GetInternalObject(*this)->row = _unwrapped_value;
	}
	
	signed __int32 TextPos::get_column()
	{
		signed __int32 _wrapped_result = __GacUIInternal<TextPos>::GetInternalObject(*this)->column;
		return _wrapped_result;
	}
	
	void TextPos::set_column(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<TextPos>::GetInternalObject(*this)->column = _unwrapped_value;
	}
	

/***********************************************************************
GuiTextBoxCommonInterface
***********************************************************************/

	GuiTextBoxCommonInterface::GuiTextBoxCommonInterface(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiTextBoxCommonInterface::~GuiTextBoxCommonInterface()
	{
	}
	
	void GuiTextBoxCommonInterface::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiTextBoxCommonInterface> GuiTextBoxCommonInterface::CreateRptr()
	{
		vl::presentation::controls::GuiTextBoxCommonInterface* _unwrapped_result = new vl::presentation::controls::GuiTextBoxCommonInterface();
		return __GacUIInternal<GuiTextBoxCommonInterface>::BuildRptr(_unwrapped_result);
	}
	
	bool GuiTextBoxCommonInterface::CanCut()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->CanCut();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTextBoxCommonInterface::CanCopy()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->CanCopy();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTextBoxCommonInterface::CanPaste()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->CanPaste();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiTextBoxCommonInterface::SelectAll()
	{
		__GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->SelectAll();
	}
	
	bool GuiTextBoxCommonInterface::Cut()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->Cut();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTextBoxCommonInterface::Copy()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->Copy();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTextBoxCommonInterface::Paste()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->Paste();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	GacString GuiTextBoxCommonInterface::GetRowText(signed __int32 row)
	{
		signed __int32 _unwrapped_row = row;
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetRowText(_unwrapped_row);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	GacString GuiTextBoxCommonInterface::GetFragmentText(TextPos start, TextPos end)
	{
		vl::presentation::TextPos _unwrapped_start = *__GacUIInternal<TextPos>::GetInternalObject(start);
		vl::presentation::TextPos _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetFragmentText(_unwrapped_start, _unwrapped_end);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetRowWidth(signed __int32 row)
	{
		signed __int32 _unwrapped_row = row;
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetRowWidth(_unwrapped_row);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	TextPos GuiTextBoxCommonInterface::GetTextPosFromPoint(Point point)
	{
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetTextPosFromPoint(_unwrapped_point);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Point GuiTextBoxCommonInterface::GetPointFromTextPos(TextPos pos)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		vl::presentation::Point _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetPointFromTextPos(_unwrapped_pos);
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect GuiTextBoxCommonInterface::GetRectFromTextPos(TextPos pos)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetRectFromTextPos(_unwrapped_pos);
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos GuiTextBoxCommonInterface::GetNearestTextPos(Point point)
	{
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetNearestTextPos(_unwrapped_point);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiTextBoxCommonInterface::Select(TextPos begin, TextPos end)
	{
		vl::presentation::TextPos _unwrapped_begin = *__GacUIInternal<TextPos>::GetInternalObject(begin);
		vl::presentation::TextPos _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		__GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->Select(_unwrapped_begin, _unwrapped_end);
	}
	
	rptr<GuiGraphicsComposition> GuiTextBoxCommonInterface::GetTextComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetTextComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetRowHeight()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetRowHeight();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetMaxWidth()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetMaxWidth();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetMaxHeight()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetMaxHeight();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretBegin()
	{
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetCaretBegin();
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretEnd()
	{
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetCaretEnd();
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretSmall()
	{
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetCaretSmall();
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretLarge()
	{
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetCaretLarge();
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString GuiTextBoxCommonInterface::GetSelectionText()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->GetSelectionText();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	void GuiTextBoxCommonInterface::SetSelectionText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->SetSelectionText(_unwrapped_value);
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiTextBoxCommonInterface::on_SelectionChanged()
	{
		rptr<GuiGraphicsEvent_of_GuiEventArgs> _wrapped_result = __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>::BuildRptr(&__GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(*this)->SelectionChanged);
		return _wrapped_result;
	}
	

/***********************************************************************
TextLines
***********************************************************************/

	TextLines::TextLines(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TextLines::~TextLines()
	{
		delete __GacUIInternal<TextLines>::GetInternalObject(*this);
	}
	
	void TextLines::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<TextLines> TextLines::CreateRptr()
	{
		vl::presentation::elements::text::TextLines* _unwrapped_result = new vl::presentation::elements::text::TextLines();
		return __GacUIInternal<TextLines>::BuildRptr(_unwrapped_result);
	}
	
	TextLines TextLines::Create()
	{
		vl::presentation::elements::text::TextLines _unwrapped_result = vl::presentation::elements::text::TextLines();
		return __GacUIInternal<TextLines>::BuildCopy(&_unwrapped_result);
	}
	
	rptr<TextLine> TextLines::GetLine(signed __int32 row)
	{
		signed __int32 _unwrapped_row = row;
		vl::presentation::elements::text::TextLine& _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetLine(_unwrapped_row);
		rptr<TextLine> _wrapped_result = __GacUIInternal<TextLine>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString TextLines::GetText(TextPos start, TextPos end)
	{
		vl::presentation::TextPos _unwrapped_start = *__GacUIInternal<TextPos>::GetInternalObject(start);
		vl::presentation::TextPos _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetText(_unwrapped_start, _unwrapped_end);
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	bool TextLines::RemoveLines(signed __int32 start, signed __int32 count)
	{
		signed __int32 _unwrapped_start = start;
		signed __int32 _unwrapped_count = count;
		bool _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->RemoveLines(_unwrapped_start, _unwrapped_count);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool TextLines::IsAvailable(TextPos pos)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		bool _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->IsAvailable(_unwrapped_pos);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	TextPos TextLines::Normalize(TextPos pos)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->Normalize(_unwrapped_pos);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, const GacString& input)
	{
		vl::presentation::TextPos _unwrapped_start = *__GacUIInternal<TextPos>::GetInternalObject(start);
		vl::presentation::TextPos _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		vl::ObjectString<wchar_t> _unwrapped_input = input.Buffer();
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->Modify(_unwrapped_start, _unwrapped_end, _unwrapped_input);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t const* input)
	{
		vl::presentation::TextPos _unwrapped_start = *__GacUIInternal<TextPos>::GetInternalObject(start);
		vl::presentation::TextPos _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		wchar_t const* _unwrapped_input = input;
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->Modify(_unwrapped_start, _unwrapped_end, _unwrapped_input);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t const* input, signed __int32 inputCount)
	{
		vl::presentation::TextPos _unwrapped_start = *__GacUIInternal<TextPos>::GetInternalObject(start);
		vl::presentation::TextPos _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		wchar_t const* _unwrapped_input = input;
		signed __int32 _unwrapped_inputCount = inputCount;
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->Modify(_unwrapped_start, _unwrapped_end, _unwrapped_input, _unwrapped_inputCount);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t const** inputs, signed __int32* inputCounts, signed __int32 rows)
	{
		vl::presentation::TextPos _unwrapped_start = *__GacUIInternal<TextPos>::GetInternalObject(start);
		vl::presentation::TextPos _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		wchar_t const** _unwrapped_inputs = inputs;
		signed __int32* _unwrapped_inputCounts = inputCounts;
		signed __int32 _unwrapped_rows = rows;
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->Modify(_unwrapped_start, _unwrapped_end, _unwrapped_inputs, _unwrapped_inputCounts, _unwrapped_rows);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void TextLines::Clear()
	{
		__GacUIInternal<TextLines>::GetInternalObject(*this)->Clear();
	}
	
	void TextLines::ClearMeasurement()
	{
		__GacUIInternal<TextLines>::GetInternalObject(*this)->ClearMeasurement();
	}
	
	void TextLines::MeasureRow(signed __int32 row)
	{
		signed __int32 _unwrapped_row = row;
		__GacUIInternal<TextLines>::GetInternalObject(*this)->MeasureRow(_unwrapped_row);
	}
	
	signed __int32 TextLines::GetRowWidth(signed __int32 row)
	{
		signed __int32 _unwrapped_row = row;
		signed __int32 _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetRowWidth(_unwrapped_row);
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	TextPos TextLines::GetTextPosFromPoint(Point point)
	{
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetTextPosFromPoint(_unwrapped_point);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Point TextLines::GetPointFromTextPos(TextPos pos)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		vl::presentation::Point _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetPointFromTextPos(_unwrapped_pos);
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Rect TextLines::GetRectFromTextPos(TextPos pos)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		vl::presentation::Rect _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetRectFromTextPos(_unwrapped_pos);
		Rect _wrapped_result = __GacUIInternal<Rect>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<TextLines> TextLines::operator=(rptr<TextLines> value)
	{
		vl::presentation::elements::text::TextLines const& _unwrapped_value = *__GacUIInternal<TextLines>::GetInternalObject(value);
		vl::presentation::elements::text::TextLines& _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->operator=(_unwrapped_value);
		rptr<TextLines> _wrapped_result = __GacUIInternal<TextLines>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	signed __int32 TextLines::GetCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<CharMeasurer> TextLines::GetCharMeasurer()
	{
		vl::presentation::elements::text::CharMeasurer* _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetCharMeasurer();
		rptr<CharMeasurer> _wrapped_result = __GacUIInternal<CharMeasurer>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void TextLines::SetCharMeasurer(rptr<CharMeasurer> value)
	{
		vl::presentation::elements::text::CharMeasurer* _unwrapped_value = __GacUIInternal<CharMeasurer>::GetInternalObject(value);
		__GacUIInternal<TextLines>::GetInternalObject(*this)->SetCharMeasurer(_unwrapped_value);
	}
	
	rptr<IGuiGraphicsRenderTarget> TextLines::GetRenderTarget()
	{
		vl::presentation::elements::IGuiGraphicsRenderTarget* _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetRenderTarget();
		rptr<IGuiGraphicsRenderTarget> _wrapped_result = __GacUIInternal<IGuiGraphicsRenderTarget>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void TextLines::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value)
	{
		vl::presentation::elements::IGuiGraphicsRenderTarget* _unwrapped_value = __GacUIInternal<IGuiGraphicsRenderTarget>::GetInternalObject(value);
		__GacUIInternal<TextLines>::GetInternalObject(*this)->SetRenderTarget(_unwrapped_value);
	}
	
	GacString TextLines::GetText()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetText();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	void TextLines::SetText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<TextLines>::GetInternalObject(*this)->SetText(_unwrapped_value);
	}
	
	signed __int32 TextLines::GetTabSpaceCount()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetTabSpaceCount();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void TextLines::SetTabSpaceCount(signed __int32 value)
	{
		signed __int32 _unwrapped_value = value;
		__GacUIInternal<TextLines>::GetInternalObject(*this)->SetTabSpaceCount(_unwrapped_value);
	}
	
	signed __int32 TextLines::GetRowHeight()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetRowHeight();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 TextLines::GetMaxWidth()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetMaxWidth();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 TextLines::GetMaxHeight()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<TextLines>::GetInternalObject(*this)->GetMaxHeight();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiColorizedTextElement
***********************************************************************/

	GuiColorizedTextElement::GuiColorizedTextElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiColorizedTextElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiColorizedTextElement::~GuiColorizedTextElement()
	{
	}
	
	void GuiColorizedTextElement::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IGuiGraphicsElement::ClearInternalObjectReference();
	}
	
	rptr<GuiColorizedTextElement> GuiColorizedTextElement::Create()
	{
		vl::presentation::elements::GuiColorizedTextElement* _unwrapped_result = vl::presentation::elements::GuiColorizedTextElement::Create();
		rptr<GuiColorizedTextElement> _wrapped_result = __GacUIInternal<GuiColorizedTextElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<TextLines> GuiColorizedTextElement::GetLines()
	{
		vl::presentation::elements::text::TextLines& _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetLines();
		rptr<TextLines> _wrapped_result = __GacUIInternal<TextLines>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiColorizedTextElement :: ICallback> GuiColorizedTextElement::GetCallback()
	{
		vl::presentation::elements::GuiColorizedTextElement::ICallback* _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetCallback();
		rptr<GuiColorizedTextElement :: ICallback> _wrapped_result = __GacUIInternal<GuiColorizedTextElement :: ICallback>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetCallback(rptr<GuiColorizedTextElement :: ICallback> value)
	{
		vl::presentation::elements::GuiColorizedTextElement::ICallback* _unwrapped_value = __GacUIInternal<GuiColorizedTextElement :: ICallback>::GetInternalObject(value);
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetCallback(_unwrapped_value);
	}
	
	rptr<IReadonlyList_of_ColorEntry> GuiColorizedTextElement::GetColors()
	{
		vl::collections::IReadonlyList<vl::presentation::elements::text::ColorEntry,vl::presentation::elements::text::ColorEntry> const& _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetColors();
		rptr<IReadonlyList_of_ColorEntry> _wrapped_result = __GacUIInternal<IReadonlyList_of_ColorEntry>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetColors(rptr<Array_of_ColorEntry> value)
	{
		vl::collections::Array<vl::presentation::elements::text::ColorEntry,vl::presentation::elements::text::ColorEntry> const& _unwrapped_value = *__GacUIInternal<Array_of_ColorEntry>::GetInternalObject(value);
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetColors(_unwrapped_value);
	}
	
	rptr<FontProperties> GuiColorizedTextElement::GetFont()
	{
		vl::presentation::FontProperties const& _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetFont();
		rptr<FontProperties> _wrapped_result = __GacUIInternal<FontProperties>::BuildRptr(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetFont(rptr<FontProperties> value)
	{
		vl::presentation::FontProperties const& _unwrapped_value = *__GacUIInternal<FontProperties>::GetInternalObject(value);
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetFont(_unwrapped_value);
	}
	
	Point GuiColorizedTextElement::GetViewPosition()
	{
		vl::presentation::Point _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetViewPosition();
		Point _wrapped_result = __GacUIInternal<Point>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetViewPosition(Point value)
	{
		vl::presentation::Point _unwrapped_value = *__GacUIInternal<Point>::GetInternalObject(value);
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetViewPosition(_unwrapped_value);
	}
	
	bool GuiColorizedTextElement::GetVisuallyEnabled()
	{
		bool _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetVisuallyEnabled();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetVisuallyEnabled(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetVisuallyEnabled(_unwrapped_value);
	}
	
	bool GuiColorizedTextElement::GetFocused()
	{
		bool _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetFocused();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetFocused(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetFocused(_unwrapped_value);
	}
	
	TextPos GuiColorizedTextElement::GetCaretBegin()
	{
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetCaretBegin();
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetCaretBegin(TextPos value)
	{
		vl::presentation::TextPos _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetCaretBegin(_unwrapped_value);
	}
	
	TextPos GuiColorizedTextElement::GetCaretEnd()
	{
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetCaretEnd();
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetCaretEnd(TextPos value)
	{
		vl::presentation::TextPos _unwrapped_value = *__GacUIInternal<TextPos>::GetInternalObject(value);
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetCaretEnd(_unwrapped_value);
	}
	
	bool GuiColorizedTextElement::GetCaretVisible()
	{
		bool _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetCaretVisible();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetCaretVisible(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetCaretVisible(_unwrapped_value);
	}
	
	Color GuiColorizedTextElement::GetCaretColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->GetCaretColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiColorizedTextElement::SetCaretColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<GuiColorizedTextElement>::GetInternalObject(*this)->SetCaretColor(_unwrapped_value);
	}
	
	GacString GuiColorizedTextElement::GetElementTypeName()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = vl::presentation::elements::GuiColorizedTextElement::GetElementTypeName();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
GuiColorizedTextElement :: ICallback
***********************************************************************/

	GuiColorizedTextElement::ICallback::ICallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiColorizedTextElement :: ICallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiColorizedTextElement::ICallback::~ICallback()
	{
	}
	
	void GuiColorizedTextElement::ICallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	void GuiColorizedTextElement::ICallback::ColorChanged()
	{
		__GacUIInternal<GuiColorizedTextElement :: ICallback>::GetInternalObject(*this)->ColorChanged();
	}
	
	void GuiColorizedTextElement::ICallback::FontChanged()
	{
		__GacUIInternal<GuiColorizedTextElement :: ICallback>::GetInternalObject(*this)->FontChanged();
	}
	

/***********************************************************************
GuiTextElementOperator
***********************************************************************/

	GuiTextElementOperator::GuiTextElementOperator(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiTextElementOperator::~GuiTextElementOperator()
	{
	}
	
	void GuiTextElementOperator::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<GuiTextElementOperator> GuiTextElementOperator::CreateRptr()
	{
		vl::presentation::controls::GuiTextElementOperator* _unwrapped_result = new vl::presentation::controls::GuiTextElementOperator();
		return __GacUIInternal<GuiTextElementOperator>::BuildRptr(_unwrapped_result);
	}
	
	void GuiTextElementOperator::Install(rptr<GuiColorizedTextElement> _textElement, rptr<GuiGraphicsComposition> _textComposition, rptr<GuiControl> _textControl)
	{
		vl::presentation::elements::GuiColorizedTextElement* _unwrapped__textElement = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(_textElement);
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__textComposition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_textComposition);
		vl::presentation::controls::GuiControl* _unwrapped__textControl = __GacUIInternal<GuiControl>::GetInternalObject(_textControl);
		__GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->Install(_unwrapped__textElement, _unwrapped__textComposition, _unwrapped__textControl);
	}
	
	TextPos GuiTextElementOperator::GetNearestTextPos(Point point)
	{
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->GetNearestTextPos(_unwrapped_point);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiTextElementOperator::Select(TextPos begin, TextPos end)
	{
		vl::presentation::TextPos _unwrapped_begin = *__GacUIInternal<TextPos>::GetInternalObject(begin);
		vl::presentation::TextPos _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		__GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->Select(_unwrapped_begin, _unwrapped_end);
	}
	
	bool GuiTextElementOperator::CanCut()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->CanCut();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTextElementOperator::CanCopy()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->CanCopy();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTextElementOperator::CanPaste()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->CanPaste();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiTextElementOperator::SelectAll()
	{
		__GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->SelectAll();
	}
	
	bool GuiTextElementOperator::Cut()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->Cut();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTextElementOperator::Copy()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->Copy();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool GuiTextElementOperator::Paste()
	{
		bool _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->Paste();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	rptr<GuiTextElementOperator :: ICallback> GuiTextElementOperator::GetCallback()
	{
		vl::presentation::controls::GuiTextElementOperator::ICallback* _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->GetCallback();
		rptr<GuiTextElementOperator :: ICallback> _wrapped_result = __GacUIInternal<GuiTextElementOperator :: ICallback>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiTextElementOperator::SetCallback(rptr<GuiTextElementOperator :: ICallback> value)
	{
		vl::presentation::controls::GuiTextElementOperator::ICallback* _unwrapped_value = __GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(value);
		__GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->SetCallback(_unwrapped_value);
	}
	
	rptr<GuiTextBoxCommonInterface> GuiTextElementOperator::GetTextBoxCommonInterface()
	{
		vl::presentation::controls::GuiTextBoxCommonInterface* _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->GetTextBoxCommonInterface();
		rptr<GuiTextBoxCommonInterface> _wrapped_result = __GacUIInternal<GuiTextBoxCommonInterface>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiTextElementOperator::SetTextBoxCommonInterface(rptr<GuiTextBoxCommonInterface> value)
	{
		vl::presentation::controls::GuiTextBoxCommonInterface* _unwrapped_value = __GacUIInternal<GuiTextBoxCommonInterface>::GetInternalObject(value);
		__GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->SetTextBoxCommonInterface(_unwrapped_value);
	}
	
	rptr<GuiColorizedTextElement> GuiTextElementOperator::GetTextElement()
	{
		vl::presentation::elements::GuiColorizedTextElement* _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->GetTextElement();
		rptr<GuiColorizedTextElement> _wrapped_result = __GacUIInternal<GuiColorizedTextElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiTextElementOperator::GetTextComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->GetTextComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString GuiTextElementOperator::GetSelectionText()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->GetSelectionText();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	void GuiTextElementOperator::SetSelectionText(const GacString& value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<GuiTextElementOperator>::GetInternalObject(*this)->SetSelectionText(_unwrapped_value);
	}
	

/***********************************************************************
GuiTextElementOperator :: ICallback
***********************************************************************/

	GuiTextElementOperator::ICallback::ICallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiTextElementOperator :: ICallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTextElementOperator::ICallback::~ICallback()
	{
	}
	
	void GuiTextElementOperator::ICallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		IDescriptable::ClearInternalObjectReference();
	}
	
	TextPos GuiTextElementOperator::ICallback::GetLeftWord(TextPos pos)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(*this)->GetLeftWord(_unwrapped_pos);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	TextPos GuiTextElementOperator::ICallback::GetRightWord(TextPos pos)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		vl::presentation::TextPos _unwrapped_result = __GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(*this)->GetRightWord(_unwrapped_pos);
		TextPos _wrapped_result = __GacUIInternal<TextPos>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	void GuiTextElementOperator::ICallback::GetWord(TextPos pos, rptr<TextPos> begin, rptr<TextPos> end)
	{
		vl::presentation::TextPos _unwrapped_pos = *__GacUIInternal<TextPos>::GetInternalObject(pos);
		vl::presentation::TextPos& _unwrapped_begin = *__GacUIInternal<TextPos>::GetInternalObject(begin);
		vl::presentation::TextPos& _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		__GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(*this)->GetWord(_unwrapped_pos, _unwrapped_begin, _unwrapped_end);
	}
	
	bool GuiTextElementOperator::ICallback::BeforeModify(rptr<TextPos> start, rptr<TextPos> end, const GacString& originalText, GacString& inputText)
	{
		vl::presentation::TextPos& _unwrapped_start = *__GacUIInternal<TextPos>::GetInternalObject(start);
		vl::presentation::TextPos& _unwrapped_end = *__GacUIInternal<TextPos>::GetInternalObject(end);
		vl::ObjectString<wchar_t> _unwrapped_originalText = originalText.Buffer();
		vl::ObjectString<wchar_t> _unwrapped_inputText = inputText.Buffer();
		bool _unwrapped_result = __GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(*this)->BeforeModify(_unwrapped_start, _unwrapped_end, _unwrapped_originalText, _unwrapped_inputText);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void GuiTextElementOperator::ICallback::AfterModify(TextPos originalStart, TextPos originalEnd, const GacString& originalText, TextPos inputStart, TextPos inputEnd, const GacString& inputText)
	{
		vl::presentation::TextPos _unwrapped_originalStart = *__GacUIInternal<TextPos>::GetInternalObject(originalStart);
		vl::presentation::TextPos _unwrapped_originalEnd = *__GacUIInternal<TextPos>::GetInternalObject(originalEnd);
		vl::ObjectString<wchar_t> _unwrapped_originalText = originalText.Buffer();
		vl::presentation::TextPos _unwrapped_inputStart = *__GacUIInternal<TextPos>::GetInternalObject(inputStart);
		vl::presentation::TextPos _unwrapped_inputEnd = *__GacUIInternal<TextPos>::GetInternalObject(inputEnd);
		vl::ObjectString<wchar_t> _unwrapped_inputText = inputText.Buffer();
		__GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(*this)->AfterModify(_unwrapped_originalStart, _unwrapped_originalEnd, _unwrapped_originalText, _unwrapped_inputStart, _unwrapped_inputEnd, _unwrapped_inputText);
	}
	
	void GuiTextElementOperator::ICallback::ScrollToView(Point point)
	{
		vl::presentation::Point _unwrapped_point = *__GacUIInternal<Point>::GetInternalObject(point);
		__GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(*this)->ScrollToView(_unwrapped_point);
	}
	
	signed __int32 GuiTextElementOperator::ICallback::GetPageRows()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(*this)->GetPageRows();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	signed __int32 GuiTextElementOperator::ICallback::GetTextMargin()
	{
		signed __int32 _unwrapped_result = __GacUIInternal<GuiTextElementOperator :: ICallback>::GetInternalObject(*this)->GetTextMargin();
		signed __int32 _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiTextElementOperator :: DefaultCallback
***********************************************************************/

	GuiTextElementOperator::DefaultCallback::DefaultCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiTextElementOperator :: ICallback(static_cast<__GacUIInternal<GuiTextElementOperator :: ICallback>::InternalObjectType*>((__GacUIInternal<GuiTextElementOperator :: DefaultCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTextElementOperator::DefaultCallback::~DefaultCallback()
	{
	}
	
	void GuiTextElementOperator::DefaultCallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiTextElementOperator::ICallback::ClearInternalObjectReference();
	}
	
	rptr<GuiTextElementOperator :: DefaultCallback> GuiTextElementOperator::DefaultCallback::CreateRptr(rptr<GuiColorizedTextElement> _textElement, rptr<GuiGraphicsComposition> _textComposition)
	{
		vl::presentation::elements::GuiColorizedTextElement* _unwrapped__textElement = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(_textElement);
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped__textComposition = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(_textComposition);
		vl::presentation::controls::GuiTextElementOperator::DefaultCallback* _unwrapped_result = new vl::presentation::controls::GuiTextElementOperator::DefaultCallback(_unwrapped__textElement, _unwrapped__textComposition);
		return __GacUIInternal<GuiTextElementOperator :: DefaultCallback>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiMultilineTextBox
***********************************************************************/

	GuiMultilineTextBox::GuiMultilineTextBox(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView(static_cast<__GacUIInternal<GuiScrollView>::InternalObjectType*>((__GacUIInternal<GuiMultilineTextBox>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiTextBoxCommonInterface(static_cast<__GacUIInternal<GuiTextBoxCommonInterface>::InternalObjectType*>((__GacUIInternal<GuiMultilineTextBox>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMultilineTextBox::~GuiMultilineTextBox()
	{
	}
	
	void GuiMultilineTextBox::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScrollView::ClearInternalObjectReference();
		GuiTextBoxCommonInterface::ClearInternalObjectReference();
	}
	
	rptr<GuiMultilineTextBox> GuiMultilineTextBox::CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped_styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(styleProvider);
		vl::presentation::controls::GuiMultilineTextBox* _unwrapped_result = new vl::presentation::controls::GuiMultilineTextBox(_unwrapped_styleProvider);
		return __GacUIInternal<GuiMultilineTextBox>::BuildRptr(_unwrapped_result);
	}
	
	signed __int32 GuiMultilineTextBox::get_TextMargin()
	{
		signed __int32 _wrapped_result = vl::presentation::controls::GuiMultilineTextBox::TextMargin;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiMultilineTextBox :: StyleController
***********************************************************************/

	GuiMultilineTextBox::StyleController::StyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: StyleController(static_cast<__GacUIInternal<GuiScrollView :: StyleController>::InternalObjectType*>((__GacUIInternal<GuiMultilineTextBox :: StyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMultilineTextBox::StyleController::~StyleController()
	{
	}
	
	void GuiMultilineTextBox::StyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScrollView::StyleController::ClearInternalObjectReference();
	}
	
	rptr<GuiMultilineTextBox :: StyleController> GuiMultilineTextBox::StyleController::CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider)
	{
		vl::presentation::controls::GuiScrollView::IStyleProvider* _unwrapped_styleProvider = __GacUIInternal<GuiScrollView :: IStyleProvider>::GetInternalObject(styleProvider);
		vl::presentation::controls::GuiMultilineTextBox::StyleController* _unwrapped_result = new vl::presentation::controls::GuiMultilineTextBox::StyleController(_unwrapped_styleProvider);
		return __GacUIInternal<GuiMultilineTextBox :: StyleController>::BuildRptr(_unwrapped_result);
	}
	
	void GuiMultilineTextBox::StyleController::SetViewPosition(Point value)
	{
		vl::presentation::Point _unwrapped_value = *__GacUIInternal<Point>::GetInternalObject(value);
		__GacUIInternal<GuiMultilineTextBox :: StyleController>::GetInternalObject(*this)->SetViewPosition(_unwrapped_value);
	}
	
	rptr<GuiColorizedTextElement> GuiMultilineTextBox::StyleController::GetTextElement()
	{
		vl::presentation::elements::GuiColorizedTextElement* _unwrapped_result = __GacUIInternal<GuiMultilineTextBox :: StyleController>::GetInternalObject(*this)->GetTextElement();
		rptr<GuiColorizedTextElement> _wrapped_result = __GacUIInternal<GuiColorizedTextElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiMultilineTextBox::StyleController::GetTextComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiMultilineTextBox :: StyleController>::GetInternalObject(*this)->GetTextComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiTextElementOperator> GuiMultilineTextBox::StyleController::GetTextElementOperator()
	{
		vl::presentation::controls::GuiTextElementOperator* _unwrapped_result = __GacUIInternal<GuiMultilineTextBox :: StyleController>::GetInternalObject(*this)->GetTextElementOperator();
		rptr<GuiTextElementOperator> _wrapped_result = __GacUIInternal<GuiTextElementOperator>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	GacString GuiMultilineTextBox::StyleController::GetText()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<GuiMultilineTextBox :: StyleController>::GetInternalObject(*this)->GetText();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	

/***********************************************************************
GuiMultilineTextBox :: TextElementOperatorCallback
***********************************************************************/

	GuiMultilineTextBox::TextElementOperatorCallback::TextElementOperatorCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiTextElementOperator :: DefaultCallback(static_cast<__GacUIInternal<GuiTextElementOperator :: DefaultCallback>::InternalObjectType*>((__GacUIInternal<GuiMultilineTextBox :: TextElementOperatorCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMultilineTextBox::TextElementOperatorCallback::~TextElementOperatorCallback()
	{
	}
	
	void GuiMultilineTextBox::TextElementOperatorCallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiTextElementOperator::DefaultCallback::ClearInternalObjectReference();
	}
	
	rptr<GuiMultilineTextBox :: TextElementOperatorCallback> GuiMultilineTextBox::TextElementOperatorCallback::CreateRptr(rptr<GuiMultilineTextBox> _textControl)
	{
		vl::presentation::controls::GuiMultilineTextBox* _unwrapped__textControl = __GacUIInternal<GuiMultilineTextBox>::GetInternalObject(_textControl);
		vl::presentation::controls::GuiMultilineTextBox::TextElementOperatorCallback* _unwrapped_result = new vl::presentation::controls::GuiMultilineTextBox::TextElementOperatorCallback(_unwrapped__textControl);
		return __GacUIInternal<GuiMultilineTextBox :: TextElementOperatorCallback>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiSinglelineTextBox
***********************************************************************/

	GuiSinglelineTextBox::GuiSinglelineTextBox(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiTextBoxCommonInterface(static_cast<__GacUIInternal<GuiTextBoxCommonInterface>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSinglelineTextBox::~GuiSinglelineTextBox()
	{
	}
	
	void GuiSinglelineTextBox::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::ClearInternalObjectReference();
		GuiTextBoxCommonInterface::ClearInternalObjectReference();
	}
	
	rptr<GuiSinglelineTextBox> GuiSinglelineTextBox::CreateRptr(rptr<GuiSinglelineTextBox :: IStyleProvider> styleProvider)
	{
		vl::presentation::controls::GuiSinglelineTextBox::IStyleProvider* _unwrapped_styleProvider = __GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>::GetInternalObject(styleProvider);
		vl::presentation::controls::GuiSinglelineTextBox* _unwrapped_result = new vl::presentation::controls::GuiSinglelineTextBox(_unwrapped_styleProvider);
		return __GacUIInternal<GuiSinglelineTextBox>::BuildRptr(_unwrapped_result);
	}
	
	signed __int32 GuiSinglelineTextBox::get_TextMargin()
	{
		signed __int32 _wrapped_result = vl::presentation::controls::GuiSinglelineTextBox::TextMargin;
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: IStyleProvider
***********************************************************************/

	GuiSinglelineTextBox::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleProvider(static_cast<__GacUIInternal<GuiControl :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSinglelineTextBox::IStyleProvider::~IStyleProvider()
	{
	}
	
	void GuiSinglelineTextBox::IStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<GuiGraphicsComposition> GuiSinglelineTextBox::IStyleProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_boundsComposition = __GacUIInternal<GuiBoundsComposition>::GetInternalObject(boundsComposition);
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>::GetInternalObject(*this)->InstallBackground(_unwrapped_boundsComposition);
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: StyleController
***********************************************************************/

	GuiSinglelineTextBox::StyleController::StyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox :: StyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSinglelineTextBox::StyleController::~StyleController()
	{
	}
	
	void GuiSinglelineTextBox::StyleController::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<GuiSinglelineTextBox :: StyleController> GuiSinglelineTextBox::StyleController::CreateRptr(rptr<GuiSinglelineTextBox :: IStyleProvider> _styleProvider)
	{
		vl::presentation::controls::GuiSinglelineTextBox::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::GuiSinglelineTextBox::StyleController* _unwrapped_result = new vl::presentation::controls::GuiSinglelineTextBox::StyleController(_unwrapped__styleProvider);
		return __GacUIInternal<GuiSinglelineTextBox :: StyleController>::BuildRptr(_unwrapped_result);
	}
	
	void GuiSinglelineTextBox::StyleController::RearrangeTextElement()
	{
		__GacUIInternal<GuiSinglelineTextBox :: StyleController>::GetInternalObject(*this)->RearrangeTextElement();
	}
	
	void GuiSinglelineTextBox::StyleController::SetTextBox(rptr<GuiSinglelineTextBox> value)
	{
		vl::presentation::controls::GuiSinglelineTextBox* _unwrapped_value = __GacUIInternal<GuiSinglelineTextBox>::GetInternalObject(value);
		__GacUIInternal<GuiSinglelineTextBox :: StyleController>::GetInternalObject(*this)->SetTextBox(_unwrapped_value);
	}
	
	void GuiSinglelineTextBox::StyleController::SetViewPosition(Point value)
	{
		vl::presentation::Point _unwrapped_value = *__GacUIInternal<Point>::GetInternalObject(value);
		__GacUIInternal<GuiSinglelineTextBox :: StyleController>::GetInternalObject(*this)->SetViewPosition(_unwrapped_value);
	}
	
	GacString GuiSinglelineTextBox::StyleController::GetText()
	{
		vl::ObjectString<wchar_t> _unwrapped_result = __GacUIInternal<GuiSinglelineTextBox :: StyleController>::GetInternalObject(*this)->GetText();
		GacString _wrapped_result = _unwrapped_result.Buffer();
		return _wrapped_result;
	}
	
	rptr<GuiColorizedTextElement> GuiSinglelineTextBox::StyleController::GetTextElement()
	{
		vl::presentation::elements::GuiColorizedTextElement* _unwrapped_result = __GacUIInternal<GuiSinglelineTextBox :: StyleController>::GetInternalObject(*this)->GetTextElement();
		rptr<GuiColorizedTextElement> _wrapped_result = __GacUIInternal<GuiColorizedTextElement>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiGraphicsComposition> GuiSinglelineTextBox::StyleController::GetTextComposition()
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<GuiSinglelineTextBox :: StyleController>::GetInternalObject(*this)->GetTextComposition();
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiTextElementOperator> GuiSinglelineTextBox::StyleController::GetTextElementOperator()
	{
		vl::presentation::controls::GuiTextElementOperator* _unwrapped_result = __GacUIInternal<GuiSinglelineTextBox :: StyleController>::GetInternalObject(*this)->GetTextElementOperator();
		rptr<GuiTextElementOperator> _wrapped_result = __GacUIInternal<GuiTextElementOperator>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: TextElementOperatorCallback
***********************************************************************/

	GuiSinglelineTextBox::TextElementOperatorCallback::TextElementOperatorCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiTextElementOperator :: DefaultCallback(static_cast<__GacUIInternal<GuiTextElementOperator :: DefaultCallback>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox :: TextElementOperatorCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSinglelineTextBox::TextElementOperatorCallback::~TextElementOperatorCallback()
	{
	}
	
	void GuiSinglelineTextBox::TextElementOperatorCallback::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiTextElementOperator::DefaultCallback::ClearInternalObjectReference();
	}
	
	rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> GuiSinglelineTextBox::TextElementOperatorCallback::CreateRptr(rptr<GuiSinglelineTextBox> _textControl)
	{
		vl::presentation::controls::GuiSinglelineTextBox* _unwrapped__textControl = __GacUIInternal<GuiSinglelineTextBox>::GetInternalObject(_textControl);
		vl::presentation::controls::GuiSinglelineTextBox::TextElementOperatorCallback* _unwrapped_result = new vl::presentation::controls::GuiSinglelineTextBox::TextElementOperatorCallback(_unwrapped__textControl);
		return __GacUIInternal<GuiSinglelineTextBox :: TextElementOperatorCallback>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
TreeViewItem
***********************************************************************/

	TreeViewItem::TreeViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TreeViewItem::~TreeViewItem()
	{
	}
	
	void TreeViewItem::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<TreeViewItem> TreeViewItem::CreateRptr(sptr<GuiImageData> _image, const GacString& _text)
	{
		vl::Ptr<vl::presentation::controls::GuiImageData> _unwrapped__image = __GacUIInternal<GuiImageData>::GetInternalObject(_image);
		vl::ObjectString<wchar_t> _unwrapped__text = _text.Buffer();
		vl::presentation::controls::tree::TreeViewItem* _unwrapped_result = new vl::presentation::controls::tree::TreeViewItem(_unwrapped__image, _unwrapped__text);
		return __GacUIInternal<TreeViewItem>::BuildRptr(_unwrapped_result);
	}
	
	rptr<TreeViewItem> TreeViewItem::CreateRptr()
	{
		vl::presentation::controls::tree::TreeViewItem* _unwrapped_result = new vl::presentation::controls::tree::TreeViewItem();
		return __GacUIInternal<TreeViewItem>::BuildRptr(_unwrapped_result);
	}
	
	sptr<GuiImageData> TreeViewItem::get_image()
	{
		sptr<GuiImageData> _wrapped_result = __GacUIInternal<GuiImageData>::BuildSptr(__GacUIInternal<TreeViewItem>::GetInternalObject(*this)->image);
		return _wrapped_result;
	}
	
	void TreeViewItem::set_image(sptr<GuiImageData> value)
	{
		vl::Ptr<vl::presentation::controls::GuiImageData> _unwrapped_value = __GacUIInternal<GuiImageData>::GetInternalObject(value);
		__GacUIInternal<TreeViewItem>::GetInternalObject(*this)->image = _unwrapped_value;
	}
	
	GacString TreeViewItem::get_text()
	{
		GacString _wrapped_result = __GacUIInternal<TreeViewItem>::GetInternalObject(*this)->text.Buffer();
		return _wrapped_result;
	}
	
	void TreeViewItem::set_text(GacString value)
	{
		vl::ObjectString<wchar_t> _unwrapped_value = value.Buffer();
		__GacUIInternal<TreeViewItem>::GetInternalObject(*this)->text = _unwrapped_value;
	}
	

/***********************************************************************
TreeViewItemRootProvider
***********************************************************************/

	TreeViewItemRootProvider::TreeViewItemRootProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,MemoryNodeRootProvider(static_cast<__GacUIInternal<MemoryNodeRootProvider>::InternalObjectType*>((__GacUIInternal<TreeViewItemRootProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TreeViewItemRootProvider::~TreeViewItemRootProvider()
	{
	}
	
	void TreeViewItemRootProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		MemoryNodeRootProvider::ClearInternalObjectReference();
	}
	
	rptr<TreeViewItemRootProvider> TreeViewItemRootProvider::CreateRptr()
	{
		vl::presentation::controls::tree::TreeViewItemRootProvider* _unwrapped_result = new vl::presentation::controls::tree::TreeViewItemRootProvider();
		return __GacUIInternal<TreeViewItemRootProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
GuiTreeView
***********************************************************************/

	GuiTreeView::GuiTreeView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiVirtualTreeListControl(static_cast<__GacUIInternal<GuiVirtualTreeListControl>::InternalObjectType*>((__GacUIInternal<GuiTreeView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTreeView::~GuiTreeView()
	{
	}
	
	void GuiTreeView::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiVirtualTreeListControl::ClearInternalObjectReference();
	}
	
	rptr<GuiTreeView> GuiTreeView::CreateRptr(rptr<GuiTreeView :: IStyleProvider> _styleProvider, rptr<INodeRootProvider> _nodeRootProvider)
	{
		vl::presentation::controls::GuiTreeView::IStyleProvider* _unwrapped__styleProvider = __GacUIInternal<GuiTreeView :: IStyleProvider>::GetInternalObject(_styleProvider);
		vl::presentation::controls::tree::INodeRootProvider* _unwrapped__nodeRootProvider = __GacUIInternal<INodeRootProvider>::GetInternalObject(_nodeRootProvider);
		vl::presentation::controls::GuiTreeView* _unwrapped_result = new vl::presentation::controls::GuiTreeView(_unwrapped__styleProvider, _unwrapped__nodeRootProvider);
		return __GacUIInternal<GuiTreeView>::BuildRptr(_unwrapped_result);
	}
	
	sptr<TreeViewItemRootProvider> GuiTreeView::Nodes()
	{
		vl::Ptr<vl::presentation::controls::tree::TreeViewItemRootProvider> _unwrapped_result = __GacUIInternal<GuiTreeView>::GetInternalObject(*this)->Nodes();
		sptr<TreeViewItemRootProvider> _wrapped_result = __GacUIInternal<TreeViewItemRootProvider>::BuildSptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiTreeView :: IStyleProvider> GuiTreeView::GetTreeViewStyleProvider()
	{
		vl::presentation::controls::GuiTreeView::IStyleProvider* _unwrapped_result = __GacUIInternal<GuiTreeView>::GetInternalObject(*this)->GetTreeViewStyleProvider();
		rptr<GuiTreeView :: IStyleProvider> _wrapped_result = __GacUIInternal<GuiTreeView :: IStyleProvider>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
GuiTreeView :: IStyleProvider
***********************************************************************/

	GuiTreeView::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: IStyleProvider(static_cast<__GacUIInternal<GuiScrollView :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiTreeView :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTreeView::IStyleProvider::~IStyleProvider()
	{
	}
	
	void GuiTreeView::IStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScrollView::IStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiTreeView::IStyleProvider::CreateItemBackground()
	{
		vl::presentation::controls::GuiSelectableButton::IStyleController* _unwrapped_result = __GacUIInternal<GuiTreeView :: IStyleProvider>::GetInternalObject(*this)->CreateItemBackground();
		rptr<GuiSelectableButton :: IStyleController> _wrapped_result = __GacUIInternal<GuiSelectableButton :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiTreeView::IStyleProvider::CreateItemExpandingDecorator()
	{
		vl::presentation::controls::GuiSelectableButton::IStyleController* _unwrapped_result = __GacUIInternal<GuiTreeView :: IStyleProvider>::GetInternalObject(*this)->CreateItemExpandingDecorator();
		rptr<GuiSelectableButton :: IStyleController> _wrapped_result = __GacUIInternal<GuiSelectableButton :: IStyleController>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	Color GuiTreeView::IStyleProvider::GetTextColor()
	{
		vl::presentation::Color _unwrapped_result = __GacUIInternal<GuiTreeView :: IStyleProvider>::GetInternalObject(*this)->GetTextColor();
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	

/***********************************************************************
TreeViewNodeItemStyleProvider
***********************************************************************/

	TreeViewNodeItemStyleProvider::TreeViewNodeItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INodeItemStyleProvider(static_cast<__GacUIInternal<INodeItemStyleProvider>::InternalObjectType*>((__GacUIInternal<TreeViewNodeItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TreeViewNodeItemStyleProvider::~TreeViewNodeItemStyleProvider()
	{
	}
	
	void TreeViewNodeItemStyleProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		INodeItemStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<TreeViewNodeItemStyleProvider> TreeViewNodeItemStyleProvider::CreateRptr()
	{
		vl::presentation::controls::tree::TreeViewNodeItemStyleProvider* _unwrapped_result = new vl::presentation::controls::tree::TreeViewNodeItemStyleProvider();
		return __GacUIInternal<TreeViewNodeItemStyleProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7ButtonColors
***********************************************************************/

	Win7ButtonColors::Win7ButtonColors(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Win7ButtonColors::~Win7ButtonColors()
	{
		delete __GacUIInternal<Win7ButtonColors>::GetInternalObject(*this);
	}
	
	void Win7ButtonColors::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<Win7ButtonColors> Win7ButtonColors::CreateRptr()
	{
		vl::presentation::win7::Win7ButtonColors* _unwrapped_result = new vl::presentation::win7::Win7ButtonColors();
		return __GacUIInternal<Win7ButtonColors>::BuildRptr(_unwrapped_result);
	}
	
	Win7ButtonColors Win7ButtonColors::Create()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors();
		return __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
	}
	
	bool Win7ButtonColors::operator==(rptr<Win7ButtonColors> colors)
	{
		vl::presentation::win7::Win7ButtonColors const& _unwrapped_colors = *__GacUIInternal<Win7ButtonColors>::GetInternalObject(colors);
		bool _unwrapped_result = __GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->operator==(_unwrapped_colors);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	bool Win7ButtonColors::operator!=(rptr<Win7ButtonColors> colors)
	{
		vl::presentation::win7::Win7ButtonColors const& _unwrapped_colors = *__GacUIInternal<Win7ButtonColors>::GetInternalObject(colors);
		bool _unwrapped_result = __GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->operator!=(_unwrapped_colors);
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void Win7ButtonColors::SetAlphaWithoutText(unsigned __int8 a)
	{
		unsigned __int8 _unwrapped_a = a;
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->SetAlphaWithoutText(_unwrapped_a);
	}
	
	Win7ButtonColors Win7ButtonColors::Blend(rptr<Win7ButtonColors> c1, rptr<Win7ButtonColors> c2, signed __int32 ratio, signed __int32 total)
	{
		vl::presentation::win7::Win7ButtonColors const& _unwrapped_c1 = *__GacUIInternal<Win7ButtonColors>::GetInternalObject(c1);
		vl::presentation::win7::Win7ButtonColors const& _unwrapped_c2 = *__GacUIInternal<Win7ButtonColors>::GetInternalObject(c2);
		signed __int32 _unwrapped_ratio = ratio;
		signed __int32 _unwrapped_total = total;
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::Blend(_unwrapped_c1, _unwrapped_c2, _unwrapped_ratio, _unwrapped_total);
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonNormal()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ButtonNormal();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonActive()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ButtonActive();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonPressed()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ButtonPressed();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonDisabled()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ButtonDisabled();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemNormal()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ItemNormal();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemActive()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ItemActive();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemSelected()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ItemSelected();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemDisabled()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ItemDisabled();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedNormal(bool selected)
	{
		bool _unwrapped_selected = selected;
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::CheckedNormal(_unwrapped_selected);
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedActive(bool selected)
	{
		bool _unwrapped_selected = selected;
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::CheckedActive(_unwrapped_selected);
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedPressed(bool selected)
	{
		bool _unwrapped_selected = selected;
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::CheckedPressed(_unwrapped_selected);
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedDisabled(bool selected)
	{
		bool _unwrapped_selected = selected;
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::CheckedDisabled(_unwrapped_selected);
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonNormal()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ToolstripButtonNormal();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonActive()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ToolstripButtonActive();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonPressed()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ToolstripButtonPressed();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonDisabled()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::ToolstripButtonDisabled();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonNormal()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::MenuBarButtonNormal();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonActive()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::MenuBarButtonActive();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonPressed()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::MenuBarButtonPressed();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonDisabled()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::MenuBarButtonDisabled();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonNormal()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::MenuItemButtonNormal();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonNormalActive()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::MenuItemButtonNormalActive();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonDisabled()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::MenuItemButtonDisabled();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonDisabledActive()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::MenuItemButtonDisabledActive();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderNormal()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::TabPageHeaderNormal();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderActive()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::TabPageHeaderActive();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderSelected()
	{
		vl::presentation::win7::Win7ButtonColors _unwrapped_result = vl::presentation::win7::Win7ButtonColors::TabPageHeaderSelected();
		Win7ButtonColors _wrapped_result = __GacUIInternal<Win7ButtonColors>::BuildCopy(&_unwrapped_result);
		return _wrapped_result;
	}
	
	Color Win7ButtonColors::get_borderColor()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->borderColor);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_borderColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->borderColor = _unwrapped_value;
	}
	
	Color Win7ButtonColors::get_backgroundColor()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->backgroundColor);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_backgroundColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->backgroundColor = _unwrapped_value;
	}
	
	Color Win7ButtonColors::get_g1()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->g1);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_g1(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->g1 = _unwrapped_value;
	}
	
	Color Win7ButtonColors::get_g2()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->g2);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_g2(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->g2 = _unwrapped_value;
	}
	
	Color Win7ButtonColors::get_g3()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->g3);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_g3(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->g3 = _unwrapped_value;
	}
	
	Color Win7ButtonColors::get_g4()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->g4);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_g4(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->g4 = _unwrapped_value;
	}
	
	Color Win7ButtonColors::get_textColor()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->textColor);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_textColor(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->textColor = _unwrapped_value;
	}
	
	Color Win7ButtonColors::get_bulletLight()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->bulletLight);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_bulletLight(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->bulletLight = _unwrapped_value;
	}
	
	Color Win7ButtonColors::get_bulletDark()
	{
		Color _wrapped_result = __GacUIInternal<Color>::BuildCopy(&__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->bulletDark);
		return _wrapped_result;
	}
	
	void Win7ButtonColors::set_bulletDark(Color value)
	{
		vl::presentation::Color _unwrapped_value = *__GacUIInternal<Color>::GetInternalObject(value);
		__GacUIInternal<Win7ButtonColors>::GetInternalObject(*this)->bulletDark = _unwrapped_value;
	}
	

/***********************************************************************
Win7ButtonStyleBase
***********************************************************************/

	Win7ButtonStyleBase::Win7ButtonStyleBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ButtonStyleBase::~Win7ButtonStyleBase()
	{
	}
	
	void Win7ButtonStyleBase::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableButton::IStyleController::ClearInternalObjectReference();
	}
	
	bool Win7ButtonStyleBase::GetTransparentWhenInactive()
	{
		bool _unwrapped_result = __GacUIInternal<Win7ButtonStyleBase>::GetInternalObject(*this)->GetTransparentWhenInactive();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void Win7ButtonStyleBase::SetTransparentWhenInactive(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<Win7ButtonStyleBase>::GetInternalObject(*this)->SetTransparentWhenInactive(_unwrapped_value);
	}
	
	bool Win7ButtonStyleBase::GetTransparentWhenDisabled()
	{
		bool _unwrapped_result = __GacUIInternal<Win7ButtonStyleBase>::GetInternalObject(*this)->GetTransparentWhenDisabled();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void Win7ButtonStyleBase::SetTransparentWhenDisabled(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<Win7ButtonStyleBase>::GetInternalObject(*this)->SetTransparentWhenDisabled(_unwrapped_value);
	}
	
	bool Win7ButtonStyleBase::GetAutoSizeForText()
	{
		bool _unwrapped_result = __GacUIInternal<Win7ButtonStyleBase>::GetInternalObject(*this)->GetAutoSizeForText();
		bool _wrapped_result = _unwrapped_result;
		return _wrapped_result;
	}
	
	void Win7ButtonStyleBase::SetAutoSizeForText(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<Win7ButtonStyleBase>::GetInternalObject(*this)->SetAutoSizeForText(_unwrapped_value);
	}
	

/***********************************************************************
Win7ButtonStyle
***********************************************************************/

	Win7ButtonStyle::Win7ButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyleBase(static_cast<__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*>((__GacUIInternal<Win7ButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ButtonStyle::~Win7ButtonStyle()
	{
	}
	
	void Win7ButtonStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7ButtonStyleBase::ClearInternalObjectReference();
	}
	
	rptr<Win7ButtonStyle> Win7ButtonStyle::CreateRptr(bool verticalGradient)
	{
		bool _unwrapped_verticalGradient = verticalGradient;
		vl::presentation::win7::Win7ButtonStyle* _unwrapped_result = new vl::presentation::win7::Win7ButtonStyle(_unwrapped_verticalGradient);
		return __GacUIInternal<Win7ButtonStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7CheckBoxStyle
***********************************************************************/

	Win7CheckBoxStyle::Win7CheckBoxStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7CheckBoxStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7CheckBoxStyle::~Win7CheckBoxStyle()
	{
	}
	
	void Win7CheckBoxStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableButton::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7CheckBoxStyle> Win7CheckBoxStyle::CreateRptr(Win7CheckBoxStyle :: BulletStyle bulletStyle, bool backgroundVisible)
	{
		vl::presentation::win7::Win7CheckBoxStyle::BulletStyle _unwrapped_bulletStyle = (vl::presentation::win7::Win7CheckBoxStyle::BulletStyle)bulletStyle;
		bool _unwrapped_backgroundVisible = backgroundVisible;
		vl::presentation::win7::Win7CheckBoxStyle* _unwrapped_result = new vl::presentation::win7::Win7CheckBoxStyle(_unwrapped_bulletStyle, _unwrapped_backgroundVisible);
		return __GacUIInternal<Win7CheckBoxStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7DropDownComboBoxStyle
***********************************************************************/

	Win7DropDownComboBoxStyle::Win7DropDownComboBoxStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyle(static_cast<__GacUIInternal<Win7ButtonStyle>::InternalObjectType*>((__GacUIInternal<Win7DropDownComboBoxStyle>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiComboBoxBase :: IStyleController(static_cast<__GacUIInternal<GuiComboBoxBase :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7DropDownComboBoxStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7DropDownComboBoxStyle::~Win7DropDownComboBoxStyle()
	{
	}
	
	void Win7DropDownComboBoxStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7ButtonStyle::ClearInternalObjectReference();
		GuiComboBoxBase::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7DropDownComboBoxStyle> Win7DropDownComboBoxStyle::CreateRptr()
	{
		vl::presentation::win7::Win7DropDownComboBoxStyle* _unwrapped_result = new vl::presentation::win7::Win7DropDownComboBoxStyle();
		return __GacUIInternal<Win7DropDownComboBoxStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7EmptyStyle
***********************************************************************/

	Win7EmptyStyle::Win7EmptyStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7EmptyStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7EmptyStyle::~Win7EmptyStyle()
	{
	}
	
	void Win7EmptyStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7EmptyStyle> Win7EmptyStyle::CreateRptr(Color color)
	{
		vl::presentation::Color _unwrapped_color = *__GacUIInternal<Color>::GetInternalObject(color);
		vl::presentation::win7::Win7EmptyStyle* _unwrapped_result = new vl::presentation::win7::Win7EmptyStyle(_unwrapped_color);
		return __GacUIInternal<Win7EmptyStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7GroupBoxStyle
***********************************************************************/

	Win7GroupBoxStyle::Win7GroupBoxStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7GroupBoxStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7GroupBoxStyle::~Win7GroupBoxStyle()
	{
	}
	
	void Win7GroupBoxStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7GroupBoxStyle> Win7GroupBoxStyle::CreateRptr()
	{
		vl::presentation::win7::Win7GroupBoxStyle* _unwrapped_result = new vl::presentation::win7::Win7GroupBoxStyle();
		return __GacUIInternal<Win7GroupBoxStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7ListViewColumnDropDownStyle
***********************************************************************/

	Win7ListViewColumnDropDownStyle::Win7ListViewColumnDropDownStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7ListViewColumnDropDownStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ListViewColumnDropDownStyle::~Win7ListViewColumnDropDownStyle()
	{
	}
	
	void Win7ListViewColumnDropDownStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableButton::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7ListViewColumnDropDownStyle> Win7ListViewColumnDropDownStyle::CreateRptr()
	{
		vl::presentation::win7::Win7ListViewColumnDropDownStyle* _unwrapped_result = new vl::presentation::win7::Win7ListViewColumnDropDownStyle();
		return __GacUIInternal<Win7ListViewColumnDropDownStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7ListViewColumnHeaderStyle
***********************************************************************/

	Win7ListViewColumnHeaderStyle::Win7ListViewColumnHeaderStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7ListViewColumnHeaderStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ListViewColumnHeaderStyle::~Win7ListViewColumnHeaderStyle()
	{
	}
	
	void Win7ListViewColumnHeaderStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableButton::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7ListViewColumnHeaderStyle> Win7ListViewColumnHeaderStyle::CreateRptr()
	{
		vl::presentation::win7::Win7ListViewColumnHeaderStyle* _unwrapped_result = new vl::presentation::win7::Win7ListViewColumnHeaderStyle();
		return __GacUIInternal<Win7ListViewColumnHeaderStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7MenuBarButtonStyle
***********************************************************************/

	Win7MenuBarButtonStyle::Win7MenuBarButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiMenuButton :: IStyleController(static_cast<__GacUIInternal<GuiMenuButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuBarButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuBarButtonStyle::~Win7MenuBarButtonStyle()
	{
	}
	
	void Win7MenuBarButtonStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiMenuButton::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7MenuBarButtonStyle> Win7MenuBarButtonStyle::CreateRptr()
	{
		vl::presentation::win7::Win7MenuBarButtonStyle* _unwrapped_result = new vl::presentation::win7::Win7MenuBarButtonStyle();
		return __GacUIInternal<Win7MenuBarButtonStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7MenuBarStyle
***********************************************************************/

	Win7MenuBarStyle::Win7MenuBarStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuBarStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuBarStyle::~Win7MenuBarStyle()
	{
	}
	
	void Win7MenuBarStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7MenuBarStyle> Win7MenuBarStyle::CreateRptr()
	{
		vl::presentation::win7::Win7MenuBarStyle* _unwrapped_result = new vl::presentation::win7::Win7MenuBarStyle();
		return __GacUIInternal<Win7MenuBarStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7MenuItemButtonStyle
***********************************************************************/

	Win7MenuItemButtonStyle::Win7MenuItemButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiMenuButton :: IStyleController(static_cast<__GacUIInternal<GuiMenuButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuItemButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuItemButtonStyle::~Win7MenuItemButtonStyle()
	{
	}
	
	void Win7MenuItemButtonStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiMenuButton::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7MenuItemButtonStyle> Win7MenuItemButtonStyle::CreateRptr()
	{
		vl::presentation::win7::Win7MenuItemButtonStyle* _unwrapped_result = new vl::presentation::win7::Win7MenuItemButtonStyle();
		return __GacUIInternal<Win7MenuItemButtonStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7MenuSplitterStyle
***********************************************************************/

	Win7MenuSplitterStyle::Win7MenuSplitterStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuSplitterStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuSplitterStyle::~Win7MenuSplitterStyle()
	{
	}
	
	void Win7MenuSplitterStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7MenuSplitterStyle> Win7MenuSplitterStyle::CreateRptr()
	{
		vl::presentation::win7::Win7MenuSplitterStyle* _unwrapped_result = new vl::presentation::win7::Win7MenuSplitterStyle();
		return __GacUIInternal<Win7MenuSplitterStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7MenuStyle
***********************************************************************/

	Win7MenuStyle::Win7MenuStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuStyle::~Win7MenuStyle()
	{
	}
	
	void Win7MenuStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiControl::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7MenuStyle> Win7MenuStyle::CreateRptr()
	{
		vl::presentation::win7::Win7MenuStyle* _unwrapped_result = new vl::presentation::win7::Win7MenuStyle();
		return __GacUIInternal<Win7MenuStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7ScrollStyle
***********************************************************************/

	Win7ScrollStyle::Win7ScrollStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,CommonScrollStyle(static_cast<__GacUIInternal<CommonScrollStyle>::InternalObjectType*>((__GacUIInternal<Win7ScrollStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ScrollStyle::~Win7ScrollStyle()
	{
	}
	
	void Win7ScrollStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		CommonScrollStyle::ClearInternalObjectReference();
	}
	
	rptr<Win7ScrollStyle> Win7ScrollStyle::CreateRptr(CommonScrollStyle :: Direction _direction)
	{
		vl::presentation::common_styles::CommonScrollStyle::Direction _unwrapped__direction = (vl::presentation::common_styles::CommonScrollStyle::Direction)_direction;
		vl::presentation::win7::Win7ScrollStyle* _unwrapped_result = new vl::presentation::win7::Win7ScrollStyle(_unwrapped__direction);
		return __GacUIInternal<Win7ScrollStyle>::BuildRptr(_unwrapped_result);
	}
	
	signed __int32 Win7ScrollStyle::get_DefaultSize()
	{
		signed __int32 _wrapped_result = vl::presentation::win7::Win7ScrollStyle::DefaultSize;
		return _wrapped_result;
	}
	
	signed __int32 Win7ScrollStyle::get_ArrowSize()
	{
		signed __int32 _wrapped_result = vl::presentation::win7::Win7ScrollStyle::ArrowSize;
		return _wrapped_result;
	}
	

/***********************************************************************
Win7ScrollViewProvider
***********************************************************************/

	Win7ScrollViewProvider::Win7ScrollViewProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: IStyleProvider(static_cast<__GacUIInternal<GuiScrollView :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7ScrollViewProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ScrollViewProvider::~Win7ScrollViewProvider()
	{
	}
	
	void Win7ScrollViewProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiScrollView::IStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<Win7ScrollViewProvider> Win7ScrollViewProvider::CreateRptr()
	{
		vl::presentation::win7::Win7ScrollViewProvider* _unwrapped_result = new vl::presentation::win7::Win7ScrollViewProvider();
		return __GacUIInternal<Win7ScrollViewProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7MultilineTextBoxProvider
***********************************************************************/

	Win7MultilineTextBoxProvider::Win7MultilineTextBoxProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ScrollViewProvider(static_cast<__GacUIInternal<Win7ScrollViewProvider>::InternalObjectType*>((__GacUIInternal<Win7MultilineTextBoxProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MultilineTextBoxProvider::~Win7MultilineTextBoxProvider()
	{
	}
	
	void Win7MultilineTextBoxProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7ScrollViewProvider::ClearInternalObjectReference();
	}
	
	rptr<Win7MultilineTextBoxProvider> Win7MultilineTextBoxProvider::CreateRptr()
	{
		vl::presentation::win7::Win7MultilineTextBoxProvider* _unwrapped_result = new vl::presentation::win7::Win7MultilineTextBoxProvider();
		return __GacUIInternal<Win7MultilineTextBoxProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7ListViewProvider
***********************************************************************/

	Win7ListViewProvider::Win7ListViewProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7MultilineTextBoxProvider(static_cast<__GacUIInternal<Win7MultilineTextBoxProvider>::InternalObjectType*>((__GacUIInternal<Win7ListViewProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiListViewBase :: IStyleProvider(static_cast<__GacUIInternal<GuiListViewBase :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7ListViewProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ListViewProvider::~Win7ListViewProvider()
	{
	}
	
	void Win7ListViewProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7MultilineTextBoxProvider::ClearInternalObjectReference();
		GuiListViewBase::IStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<Win7ListViewProvider> Win7ListViewProvider::CreateRptr()
	{
		vl::presentation::win7::Win7ListViewProvider* _unwrapped_result = new vl::presentation::win7::Win7ListViewProvider();
		return __GacUIInternal<Win7ListViewProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7SelectableItemStyle
***********************************************************************/

	Win7SelectableItemStyle::Win7SelectableItemStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyleBase(static_cast<__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*>((__GacUIInternal<Win7SelectableItemStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7SelectableItemStyle::~Win7SelectableItemStyle()
	{
	}
	
	void Win7SelectableItemStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7ButtonStyleBase::ClearInternalObjectReference();
	}
	
	rptr<Win7SelectableItemStyle> Win7SelectableItemStyle::CreateRptr()
	{
		vl::presentation::win7::Win7SelectableItemStyle* _unwrapped_result = new vl::presentation::win7::Win7SelectableItemStyle();
		return __GacUIInternal<Win7SelectableItemStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7SinglelineTextBoxProvider
***********************************************************************/

	Win7SinglelineTextBoxProvider::Win7SinglelineTextBoxProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSinglelineTextBox :: IStyleProvider(static_cast<__GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7SinglelineTextBoxProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7SinglelineTextBoxProvider::~Win7SinglelineTextBoxProvider()
	{
	}
	
	void Win7SinglelineTextBoxProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSinglelineTextBox::IStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<Win7SinglelineTextBoxProvider> Win7SinglelineTextBoxProvider::CreateRptr()
	{
		vl::presentation::win7::Win7SinglelineTextBoxProvider* _unwrapped_result = new vl::presentation::win7::Win7SinglelineTextBoxProvider();
		return __GacUIInternal<Win7SinglelineTextBoxProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7TabPageHeaderStyle
***********************************************************************/

	Win7TabPageHeaderStyle::Win7TabPageHeaderStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyleBase(static_cast<__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*>((__GacUIInternal<Win7TabPageHeaderStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TabPageHeaderStyle::~Win7TabPageHeaderStyle()
	{
	}
	
	void Win7TabPageHeaderStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7ButtonStyleBase::ClearInternalObjectReference();
	}
	
	rptr<Win7TabPageHeaderStyle> Win7TabPageHeaderStyle::CreateRptr()
	{
		vl::presentation::win7::Win7TabPageHeaderStyle* _unwrapped_result = new vl::presentation::win7::Win7TabPageHeaderStyle();
		return __GacUIInternal<Win7TabPageHeaderStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7TabStyle
***********************************************************************/

	Win7TabStyle::Win7TabStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiTab :: IStyleController(static_cast<__GacUIInternal<GuiTab :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7TabStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TabStyle::~Win7TabStyle()
	{
	}
	
	void Win7TabStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiTab::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7TabStyle> Win7TabStyle::CreateRptr()
	{
		vl::presentation::win7::Win7TabStyle* _unwrapped_result = new vl::presentation::win7::Win7TabStyle();
		return __GacUIInternal<Win7TabStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7TextBoxBackground
***********************************************************************/

	Win7TextBoxBackground::Win7TextBoxBackground(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Win7TextBoxBackground::~Win7TextBoxBackground()
	{
	}
	
	void Win7TextBoxBackground::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
	}
	
	rptr<Win7TextBoxBackground> Win7TextBoxBackground::CreateRptr()
	{
		vl::presentation::win7::Win7TextBoxBackground* _unwrapped_result = new vl::presentation::win7::Win7TextBoxBackground();
		return __GacUIInternal<Win7TextBoxBackground>::BuildRptr(_unwrapped_result);
	}
	
	void Win7TextBoxBackground::AssociateStyleController(rptr<GuiControl :: IStyleController> controller)
	{
		vl::presentation::controls::GuiControl::IStyleController* _unwrapped_controller = __GacUIInternal<GuiControl :: IStyleController>::GetInternalObject(controller);
		__GacUIInternal<Win7TextBoxBackground>::GetInternalObject(*this)->AssociateStyleController(_unwrapped_controller);
	}
	
	rptr<GuiGraphicsComposition> Win7TextBoxBackground::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		vl::presentation::elements::GuiBoundsComposition* _unwrapped_boundsComposition = __GacUIInternal<GuiBoundsComposition>::GetInternalObject(boundsComposition);
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_result = __GacUIInternal<Win7TextBoxBackground>::GetInternalObject(*this)->InstallBackground(_unwrapped_boundsComposition);
		rptr<GuiGraphicsComposition> _wrapped_result = __GacUIInternal<GuiGraphicsComposition>::BuildRptr(_unwrapped_result);
		return _wrapped_result;
	}
	
	void Win7TextBoxBackground::InitializeTextElement(rptr<GuiColorizedTextElement> _textElement)
	{
		vl::presentation::elements::GuiColorizedTextElement* _unwrapped__textElement = __GacUIInternal<GuiColorizedTextElement>::GetInternalObject(_textElement);
		__GacUIInternal<Win7TextBoxBackground>::GetInternalObject(*this)->InitializeTextElement(_unwrapped__textElement);
	}
	
	void Win7TextBoxBackground::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		vl::presentation::elements::GuiGraphicsComposition* _unwrapped_value = __GacUIInternal<GuiGraphicsComposition>::GetInternalObject(value);
		__GacUIInternal<Win7TextBoxBackground>::GetInternalObject(*this)->SetFocusableComposition(_unwrapped_value);
	}
	
	void Win7TextBoxBackground::SetVisuallyEnabled(bool value)
	{
		bool _unwrapped_value = value;
		__GacUIInternal<Win7TextBoxBackground>::GetInternalObject(*this)->SetVisuallyEnabled(_unwrapped_value);
	}
	

/***********************************************************************
Win7TextListProvider
***********************************************************************/

	Win7TextListProvider::Win7TextListProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,TextItemStyleProvider :: ITextItemStyleProvider(static_cast<__GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7TextListProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TextListProvider::~Win7TextListProvider()
	{
	}
	
	void Win7TextListProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		TextItemStyleProvider::ITextItemStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<Win7TextListProvider> Win7TextListProvider::CreateRptr()
	{
		vl::presentation::win7::Win7TextListProvider* _unwrapped_result = new vl::presentation::win7::Win7TextListProvider();
		return __GacUIInternal<Win7TextListProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7CheckTextListProvider
***********************************************************************/

	Win7CheckTextListProvider::Win7CheckTextListProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7TextListProvider(static_cast<__GacUIInternal<Win7TextListProvider>::InternalObjectType*>((__GacUIInternal<Win7CheckTextListProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7CheckTextListProvider::~Win7CheckTextListProvider()
	{
	}
	
	void Win7CheckTextListProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7TextListProvider::ClearInternalObjectReference();
	}
	
	rptr<Win7CheckTextListProvider> Win7CheckTextListProvider::CreateRptr()
	{
		vl::presentation::win7::Win7CheckTextListProvider* _unwrapped_result = new vl::presentation::win7::Win7CheckTextListProvider();
		return __GacUIInternal<Win7CheckTextListProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7RadioTextListProvider
***********************************************************************/

	Win7RadioTextListProvider::Win7RadioTextListProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7TextListProvider(static_cast<__GacUIInternal<Win7TextListProvider>::InternalObjectType*>((__GacUIInternal<Win7RadioTextListProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7RadioTextListProvider::~Win7RadioTextListProvider()
	{
	}
	
	void Win7RadioTextListProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7TextListProvider::ClearInternalObjectReference();
	}
	
	rptr<Win7RadioTextListProvider> Win7RadioTextListProvider::CreateRptr()
	{
		vl::presentation::win7::Win7RadioTextListProvider* _unwrapped_result = new vl::presentation::win7::Win7RadioTextListProvider();
		return __GacUIInternal<Win7RadioTextListProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7ToolstripButtonStyle
***********************************************************************/

	Win7ToolstripButtonStyle::Win7ToolstripButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyleBase(static_cast<__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*>((__GacUIInternal<Win7ToolstripButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ToolstripButtonStyle::~Win7ToolstripButtonStyle()
	{
	}
	
	void Win7ToolstripButtonStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7ButtonStyleBase::ClearInternalObjectReference();
	}
	
	rptr<Win7ToolstripButtonStyle> Win7ToolstripButtonStyle::CreateRptr(bool transparent)
	{
		bool _unwrapped_transparent = transparent;
		vl::presentation::win7::Win7ToolstripButtonStyle* _unwrapped_result = new vl::presentation::win7::Win7ToolstripButtonStyle(_unwrapped_transparent);
		return __GacUIInternal<Win7ToolstripButtonStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7TrackStyle
***********************************************************************/

	Win7TrackStyle::Win7TrackStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,CommonTrackStyle(static_cast<__GacUIInternal<CommonTrackStyle>::InternalObjectType*>((__GacUIInternal<Win7TrackStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TrackStyle::~Win7TrackStyle()
	{
	}
	
	void Win7TrackStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		CommonTrackStyle::ClearInternalObjectReference();
	}
	
	rptr<Win7TrackStyle> Win7TrackStyle::CreateRptr(CommonTrackStyle :: Direction _direction)
	{
		vl::presentation::common_styles::CommonTrackStyle::Direction _unwrapped__direction = (vl::presentation::common_styles::CommonTrackStyle::Direction)_direction;
		vl::presentation::win7::Win7TrackStyle* _unwrapped_result = new vl::presentation::win7::Win7TrackStyle(_unwrapped__direction);
		return __GacUIInternal<Win7TrackStyle>::BuildRptr(_unwrapped_result);
	}
	
	signed __int32 Win7TrackStyle::get_TrackThickness()
	{
		signed __int32 _wrapped_result = vl::presentation::win7::Win7TrackStyle::TrackThickness;
		return _wrapped_result;
	}
	
	signed __int32 Win7TrackStyle::get_TrackPadding()
	{
		signed __int32 _wrapped_result = vl::presentation::win7::Win7TrackStyle::TrackPadding;
		return _wrapped_result;
	}
	
	signed __int32 Win7TrackStyle::get_HandleLong()
	{
		signed __int32 _wrapped_result = vl::presentation::win7::Win7TrackStyle::HandleLong;
		return _wrapped_result;
	}
	
	signed __int32 Win7TrackStyle::get_HandleShort()
	{
		signed __int32 _wrapped_result = vl::presentation::win7::Win7TrackStyle::HandleShort;
		return _wrapped_result;
	}
	

/***********************************************************************
Win7TreeViewExpandingButtonStyle
***********************************************************************/

	Win7TreeViewExpandingButtonStyle::Win7TreeViewExpandingButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7TreeViewExpandingButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TreeViewExpandingButtonStyle::~Win7TreeViewExpandingButtonStyle()
	{
	}
	
	void Win7TreeViewExpandingButtonStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		GuiSelectableButton::IStyleController::ClearInternalObjectReference();
	}
	
	rptr<Win7TreeViewExpandingButtonStyle> Win7TreeViewExpandingButtonStyle::CreateRptr()
	{
		vl::presentation::win7::Win7TreeViewExpandingButtonStyle* _unwrapped_result = new vl::presentation::win7::Win7TreeViewExpandingButtonStyle();
		return __GacUIInternal<Win7TreeViewExpandingButtonStyle>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7TreeViewProvider
***********************************************************************/

	Win7TreeViewProvider::Win7TreeViewProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7MultilineTextBoxProvider(static_cast<__GacUIInternal<Win7MultilineTextBoxProvider>::InternalObjectType*>((__GacUIInternal<Win7TreeViewProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiTreeView :: IStyleProvider(static_cast<__GacUIInternal<GuiTreeView :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7TreeViewProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TreeViewProvider::~Win7TreeViewProvider()
	{
	}
	
	void Win7TreeViewProvider::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7MultilineTextBoxProvider::ClearInternalObjectReference();
		GuiTreeView::IStyleProvider::ClearInternalObjectReference();
	}
	
	rptr<Win7TreeViewProvider> Win7TreeViewProvider::CreateRptr()
	{
		vl::presentation::win7::Win7TreeViewProvider* _unwrapped_result = new vl::presentation::win7::Win7TreeViewProvider();
		return __GacUIInternal<Win7TreeViewProvider>::BuildRptr(_unwrapped_result);
	}
	

/***********************************************************************
Win7WindowStyle
***********************************************************************/

	Win7WindowStyle::Win7WindowStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7EmptyStyle(static_cast<__GacUIInternal<Win7EmptyStyle>::InternalObjectType*>((__GacUIInternal<Win7WindowStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7WindowStyle::~Win7WindowStyle()
	{
	}
	
	void Win7WindowStyle::ClearInternalObjectReference()
	{
		__internal_object_reference = 0;
		Win7EmptyStyle::ClearInternalObjectReference();
	}
	
	rptr<Win7WindowStyle> Win7WindowStyle::CreateRptr()
	{
		vl::presentation::win7::Win7WindowStyle* _unwrapped_result = new vl::presentation::win7::Win7WindowStyle();
		return __GacUIInternal<Win7WindowStyle>::BuildRptr(_unwrapped_result);
	}
	
}
