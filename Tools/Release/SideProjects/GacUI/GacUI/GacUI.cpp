/***********************************************************************
DO NOT MODIFY!!!
THIS FILE IS GENERATED BY _TranslateXMLtoCode.exe

Developer: 陈梓瀚(vczh)
***********************************************************************/

#include "GacUI.h"
#include "..\..\..\..\..\Candidate\GUI\GUI\GacUI.h"

namespace gacui_cpp_1_0
{
	template<typename T>
	class __GacUIInternal{};

/***********************************************************************
CharAtt
***********************************************************************/

	template<>
	class __GacUIInternal<CharAtt>
	{
	public:
		typedef CharAtt WrappedObjectType;
		typedef vl::presentation::elements::text::CharAtt InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	CharAtt::CharAtt(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	CharAtt::~CharAtt()
	{
		delete __GacUIInternal<CharAtt>::GetInternalObject(*this);
	}
	
	unsigned __int32 CharAtt::get_rightOffset()
	{
		throw 0;
	}
	
	void CharAtt::set_rightOffset(unsigned __int32 value)
	{
		throw 0;
	}
	unsigned __int32 CharAtt::get_colorIndex()
	{
		throw 0;
	}
	
	void CharAtt::set_colorIndex(unsigned __int32 value)
	{
		throw 0;
	}

/***********************************************************************
Color
***********************************************************************/

	template<>
	class __GacUIInternal<Color>
	{
	public:
		typedef Color WrappedObjectType;
		typedef vl::presentation::Color InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Color::Color(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Color::~Color()
	{
		delete __GacUIInternal<Color>::GetInternalObject(*this);
	}
	
	rptr<Color> Color::CreateRptr(unsigned __int8 _r, unsigned __int8 _g, unsigned __int8 _b, unsigned __int8 _a)
	{
		throw 0;
	}
	
	Color Color::Create(unsigned __int8 _r, unsigned __int8 _g, unsigned __int8 _b, unsigned __int8 _a)
	{
		throw 0;
	}
	
	rptr<Color> Color::CreateRptr()
	{
		throw 0;
	}
	
	Color Color::Create()
	{
		throw 0;
	}
	
	signed __int32 Color::Compare(Color color)
	{
		throw 0;
	}
	
	bool Color::operator==(Color color)
	{
		throw 0;
	}
	
	bool Color::operator!=(Color color)
	{
		throw 0;
	}
	
	bool Color::operator<(Color color)
	{
		throw 0;
	}
	
	bool Color::operator<=(Color value)
	{
		throw 0;
	}
	
	bool Color::operator>(Color color)
	{
		throw 0;
	}
	
	bool Color::operator>=(Color value)
	{
		throw 0;
	}
	
	unsigned __int8 Color::get_r()
	{
		throw 0;
	}
	
	void Color::set_r(unsigned __int8 value)
	{
		throw 0;
	}
	unsigned __int8 Color::get_g()
	{
		throw 0;
	}
	
	void Color::set_g(unsigned __int8 value)
	{
		throw 0;
	}
	unsigned __int8 Color::get_b()
	{
		throw 0;
	}
	
	void Color::set_b(unsigned __int8 value)
	{
		throw 0;
	}
	unsigned __int8 Color::get_a()
	{
		throw 0;
	}
	
	void Color::set_a(unsigned __int8 value)
	{
		throw 0;
	}
	unsigned __int32 Color::get_value()
	{
		throw 0;
	}
	
	void Color::set_value(unsigned __int32 value)
	{
		throw 0;
	}

/***********************************************************************
ColorItem
***********************************************************************/

	template<>
	class __GacUIInternal<ColorItem>
	{
	public:
		typedef ColorItem WrappedObjectType;
		typedef vl::presentation::elements::text::ColorItem InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ColorItem::ColorItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	ColorItem::~ColorItem()
	{
		delete __GacUIInternal<ColorItem>::GetInternalObject(*this);
	}
	
	rptr<ColorItem> ColorItem::CreateRptr()
	{
		throw 0;
	}
	
	ColorItem ColorItem::Create()
	{
		throw 0;
	}
	
	Color ColorItem::get_text()
	{
		throw 0;
	}
	
	void ColorItem::set_text(Color value)
	{
		throw 0;
	}
	Color ColorItem::get_background()
	{
		throw 0;
	}
	
	void ColorItem::set_background(Color value)
	{
		throw 0;
	}

/***********************************************************************
ColorEntry
***********************************************************************/

	template<>
	class __GacUIInternal<ColorEntry>
	{
	public:
		typedef ColorEntry WrappedObjectType;
		typedef vl::presentation::elements::text::ColorEntry InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ColorEntry::ColorEntry(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	ColorEntry::~ColorEntry()
	{
		delete __GacUIInternal<ColorEntry>::GetInternalObject(*this);
	}
	
	rptr<ColorEntry> ColorEntry::CreateRptr()
	{
		throw 0;
	}
	
	ColorEntry ColorEntry::Create()
	{
		throw 0;
	}
	
	bool ColorEntry::operator==(const ColorEntry& value)
	{
		throw 0;
	}
	
	bool ColorEntry::operator!=(const ColorEntry& value)
	{
		throw 0;
	}
	
	ColorItem ColorEntry::get_normal()
	{
		throw 0;
	}
	
	void ColorEntry::set_normal(ColorItem value)
	{
		throw 0;
	}
	ColorItem ColorEntry::get_selectedFocused()
	{
		throw 0;
	}
	
	void ColorEntry::set_selectedFocused(ColorItem value)
	{
		throw 0;
	}
	ColorItem ColorEntry::get_selectedUnfocused()
	{
		throw 0;
	}
	
	void ColorEntry::set_selectedUnfocused(ColorItem value)
	{
		throw 0;
	}

/***********************************************************************
Array_of_ColorEntry
***********************************************************************/

	template<>
	class __GacUIInternal<Array_of_ColorEntry>
	{
	public:
		typedef Array_of_ColorEntry WrappedObjectType;
		typedef vl::collections::Array<vl::presentation::elements::text::ColorEntry,vl::presentation::elements::text::ColorEntry> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Array_of_ColorEntry::Array_of_ColorEntry(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Array_of_ColorEntry::~Array_of_ColorEntry()
	{
	}
	
	rptr<Array_of_ColorEntry> Array_of_ColorEntry::CreateRptr(signed __int32 size)
	{
		throw 0;
	}
	
	bool Array_of_ColorEntry::Contains(const ColorEntry& item)
	{
		throw 0;
	}
	
	signed __int32 Array_of_ColorEntry::Count()
	{
		throw 0;
	}
	
	const ColorEntry& Array_of_ColorEntry::Get(signed __int32 index)
	{
		throw 0;
	}
	
	ColorEntry& Array_of_ColorEntry::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 Array_of_ColorEntry::IndexOf(const ColorEntry& item)
	{
		throw 0;
	}
	
	void Array_of_ColorEntry::Set(signed __int32 index, const ColorEntry& item)
	{
		throw 0;
	}
	
	void Array_of_ColorEntry::Resize(signed __int32 size)
	{
		throw 0;
	}
	
	rptr<Array_of_ColorEntry> Array_of_ColorEntry::operator=(rptr<Array_of_ColorEntry> value)
	{
		throw 0;
	}
	

/***********************************************************************
DescriptableObject
***********************************************************************/

	template<>
	class __GacUIInternal<DescriptableObject>
	{
	public:
		typedef DescriptableObject WrappedObjectType;
		typedef vl::presentation::DescriptableObject InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	DescriptableObject::DescriptableObject(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	DescriptableObject::~DescriptableObject()
	{
		delete __GacUIInternal<DescriptableObject>::GetInternalObject(*this);
	}
	
	rptr<DescriptableObject> DescriptableObject::CreateRptr()
	{
		throw 0;
	}
	
	DescriptableObject DescriptableObject::Create()
	{
		throw 0;
	}
	
	DescriptableObject& DescriptableObject::operator=(const DescriptableObject& value)
	{
		throw 0;
	}
	

/***********************************************************************
FontProperties
***********************************************************************/

	template<>
	class __GacUIInternal<FontProperties>
	{
	public:
		typedef FontProperties WrappedObjectType;
		typedef vl::presentation::FontProperties InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	FontProperties::FontProperties(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	FontProperties::~FontProperties()
	{
		delete __GacUIInternal<FontProperties>::GetInternalObject(*this);
	}
	
	rptr<FontProperties> FontProperties::CreateRptr(const FontProperties& __that)
	{
		throw 0;
	}
	
	FontProperties FontProperties::Create(const FontProperties& __that)
	{
		throw 0;
	}
	
	rptr<FontProperties> FontProperties::CreateRptr()
	{
		throw 0;
	}
	
	FontProperties FontProperties::Create()
	{
		throw 0;
	}
	
	signed __int32 FontProperties::Compare(const FontProperties& value)
	{
		throw 0;
	}
	
	bool FontProperties::operator==(const FontProperties& value)
	{
		throw 0;
	}
	
	bool FontProperties::operator!=(const FontProperties& value)
	{
		throw 0;
	}
	
	bool FontProperties::operator<(const FontProperties& value)
	{
		throw 0;
	}
	
	bool FontProperties::operator<=(const FontProperties& value)
	{
		throw 0;
	}
	
	bool FontProperties::operator>(const FontProperties& value)
	{
		throw 0;
	}
	
	bool FontProperties::operator>=(const FontProperties& value)
	{
		throw 0;
	}
	
	FontProperties& FontProperties::operator=(const FontProperties& __that)
	{
		throw 0;
	}
	
	GacString FontProperties::get_fontFamily()
	{
		throw 0;
	}
	
	void FontProperties::set_fontFamily(GacString value)
	{
		throw 0;
	}
	signed __int32 FontProperties::get_size()
	{
		throw 0;
	}
	
	void FontProperties::set_size(signed __int32 value)
	{
		throw 0;
	}
	bool FontProperties::get_bold()
	{
		throw 0;
	}
	
	void FontProperties::set_bold(bool value)
	{
		throw 0;
	}
	bool FontProperties::get_italic()
	{
		throw 0;
	}
	
	void FontProperties::set_italic(bool value)
	{
		throw 0;
	}
	bool FontProperties::get_underline()
	{
		throw 0;
	}
	
	void FontProperties::set_underline(bool value)
	{
		throw 0;
	}
	bool FontProperties::get_strikeline()
	{
		throw 0;
	}
	
	void FontProperties::set_strikeline(bool value)
	{
		throw 0;
	}
	bool FontProperties::get_antialias()
	{
		throw 0;
	}
	
	void FontProperties::set_antialias(bool value)
	{
		throw 0;
	}

/***********************************************************************
GuiCellOption
***********************************************************************/

	template<>
	class __GacUIInternal<GuiCellOption>
	{
	public:
		typedef GuiCellOption WrappedObjectType;
		typedef vl::presentation::elements::GuiCellOption InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiCellOption::GuiCellOption(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiCellOption::~GuiCellOption()
	{
		delete __GacUIInternal<GuiCellOption>::GetInternalObject(*this);
	}
	
	rptr<GuiCellOption> GuiCellOption::CreateRptr()
	{
		throw 0;
	}
	
	GuiCellOption GuiCellOption::Create()
	{
		throw 0;
	}
	
	bool GuiCellOption::operator==(const GuiCellOption& value)
	{
		throw 0;
	}
	
	bool GuiCellOption::operator!=(const GuiCellOption& value)
	{
		throw 0;
	}
	
	GuiCellOption GuiCellOption::AbsoluteOption(signed __int32 value)
	{
		throw 0;
	}
	
	GuiCellOption GuiCellOption::PercentageOption(double value)
	{
		throw 0;
	}
	
	GuiCellOption GuiCellOption::MinSizeOption()
	{
		throw 0;
	}
	
	GuiCellOption :: ComposeType GuiCellOption::get_composeType()
	{
		throw 0;
	}
	
	void GuiCellOption::set_composeType(GuiCellOption :: ComposeType value)
	{
		throw 0;
	}
	signed __int32 GuiCellOption::get_absolute()
	{
		throw 0;
	}
	
	void GuiCellOption::set_absolute(signed __int32 value)
	{
		throw 0;
	}
	double GuiCellOption::get_percentage()
	{
		throw 0;
	}
	
	void GuiCellOption::set_percentage(double value)
	{
		throw 0;
	}

/***********************************************************************
GuiComponent
***********************************************************************/

	template<>
	class __GacUIInternal<GuiComponent>
	{
	public:
		typedef GuiComponent WrappedObjectType;
		typedef vl::presentation::controls::GuiComponent InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiComponent::GuiComponent(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiComponent::~GuiComponent()
	{
	}
	
	rptr<GuiComponent> GuiComponent::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiComponent> GuiComponent::operator=(rptr<GuiComponent> value)
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiComponent::GetControlHost()
	{
		throw 0;
	}
	

/***********************************************************************
GuiEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiEventArgs>
	{
	public:
		typedef GuiEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiEventArgs::GuiEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiEventArgs::~GuiEventArgs()
	{
		delete __GacUIInternal<GuiEventArgs>::GetInternalObject(*this);
	}
	
	rptr<GuiEventArgs> GuiEventArgs::CreateRptr()
	{
		throw 0;
	}
	
	GuiEventArgs GuiEventArgs::Create()
	{
		throw 0;
	}
	
	rptr<GuiEventArgs> GuiEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	GuiEventArgs GuiEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiEventArgs::get_compositionSource()
	{
		throw 0;
	}
	
	void GuiEventArgs::set_compositionSource(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	rptr<GuiGraphicsComposition> GuiEventArgs::get_eventSource()
	{
		throw 0;
	}
	
	void GuiEventArgs::set_eventSource(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	bool GuiEventArgs::get_handled()
	{
		throw 0;
	}
	
	void GuiEventArgs::set_handled(bool value)
	{
		throw 0;
	}

/***********************************************************************
GuiImageData
***********************************************************************/

	template<>
	class __GacUIInternal<GuiImageData>
	{
	public:
		typedef GuiImageData WrappedObjectType;
		typedef vl::presentation::controls::GuiImageData InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiImageData::GuiImageData(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiImageData::~GuiImageData()
	{
		delete __GacUIInternal<GuiImageData>::GetInternalObject(*this);
	}
	
	rptr<GuiImageData> GuiImageData::CreateRptr(sptr<INativeImage> _image, signed __int32 _frameIndex)
	{
		throw 0;
	}
	
	GuiImageData GuiImageData::Create(sptr<INativeImage> _image, signed __int32 _frameIndex)
	{
		throw 0;
	}
	
	rptr<GuiImageData> GuiImageData::CreateRptr()
	{
		throw 0;
	}
	
	GuiImageData GuiImageData::Create()
	{
		throw 0;
	}
	
	GuiImageData& GuiImageData::operator=(const GuiImageData& value)
	{
		throw 0;
	}
	
	sptr<INativeImage> GuiImageData::GetImage()
	{
		throw 0;
	}
	
	signed __int32 GuiImageData::GetFrameIndex()
	{
		throw 0;
	}
	

/***********************************************************************
GuiRequestEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiRequestEventArgs>
	{
	public:
		typedef GuiRequestEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiRequestEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiRequestEventArgs::GuiRequestEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiEventArgs(static_cast<__GacUIInternal<GuiEventArgs>::InternalObjectType*>((__GacUIInternal<GuiRequestEventArgs>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiRequestEventArgs::~GuiRequestEventArgs()
	{
		delete __GacUIInternal<GuiRequestEventArgs>::GetInternalObject(*this);
	}
	
	rptr<GuiRequestEventArgs> GuiRequestEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	GuiRequestEventArgs GuiRequestEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	rptr<GuiRequestEventArgs> GuiRequestEventArgs::CreateRptr()
	{
		throw 0;
	}
	
	GuiRequestEventArgs GuiRequestEventArgs::Create()
	{
		throw 0;
	}
	
	bool GuiRequestEventArgs::get_cancel()
	{
		throw 0;
	}
	
	void GuiRequestEventArgs::set_cancel(bool value)
	{
		throw 0;
	}

/***********************************************************************
IDescriptable
***********************************************************************/

	template<>
	class __GacUIInternal<IDescriptable>
	{
	public:
		typedef IDescriptable WrappedObjectType;
		typedef vl::presentation::IDescriptable InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IDescriptable::IDescriptable(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,DescriptableObject(static_cast<__GacUIInternal<DescriptableObject>::InternalObjectType*>((__GacUIInternal<IDescriptable>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	IDescriptable::~IDescriptable()
	{
	}
	
	rptr<IDescriptable> IDescriptable::CreateRptr()
	{
		throw 0;
	}
	
	rptr<IDescriptable> IDescriptable::operator=(rptr<IDescriptable> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiEventArgs::GuiGraphicsEvent_of_GuiEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiEventArgs::~GuiGraphicsEvent_of_GuiEventArgs()
	{
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEvent_of_GuiEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::Execute(GuiEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEvent_of_GuiEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiEventArgs> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiEventArgs::GetAssociatedComposition()
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiEventArgs :: IHandler
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> GuiGraphicsEvent_of_GuiEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiRequestEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiRequestEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiRequestEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiRequestEventArgs::GuiGraphicsEvent_of_GuiRequestEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiRequestEventArgs::~GuiGraphicsEvent_of_GuiRequestEventArgs()
	{
	}
	
	rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> GuiGraphicsEvent_of_GuiRequestEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiRequestEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiRequestEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::Execute(GuiRequestEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> GuiGraphicsEvent_of_GuiRequestEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiRequestEventArgs::GetAssociatedComposition()
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiRequestEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiRequestEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTabPage
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTabPage>
	{
	public:
		typedef GuiTabPage WrappedObjectType;
		typedef vl::presentation::controls::GuiTabPage InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTabPage::GuiTabPage(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiTabPage::~GuiTabPage()
	{
	}
	
	rptr<GuiTabPage> GuiTabPage::operator=(rptr<GuiTabPage> value)
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiTabPage::GetContainer()
	{
		throw 0;
	}
	
	rptr<GuiTab> GuiTabPage::GetOwnerTab()
	{
		throw 0;
	}
	
	const GacString& GuiTabPage::GetText()
	{
		throw 0;
	}
	
	void GuiTabPage::SetText(const GacString& value)
	{
		throw 0;
	}
	
	bool GuiTabPage::GetSelected()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiTabPage::on_TextChanged()
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsAnimation
***********************************************************************/

	template<>
	class __GacUIInternal<IGuiGraphicsAnimation>
	{
	public:
		typedef IGuiGraphicsAnimation WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsAnimation InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IGuiGraphicsAnimation::IGuiGraphicsAnimation(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<IGuiGraphicsAnimation>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	IGuiGraphicsAnimation::~IGuiGraphicsAnimation()
	{
	}
	
	void IGuiGraphicsAnimation::Play(signed __int32 currentPosition, signed __int32 totalLength)
	{
		throw 0;
	}
	
	void IGuiGraphicsAnimation::Stop()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsAnimation> IGuiGraphicsAnimation::operator=(rptr<IGuiGraphicsAnimation> value)
	{
		throw 0;
	}
	
	signed __int32 IGuiGraphicsAnimation::GetTotalLength()
	{
		throw 0;
	}
	
	signed __int32 IGuiGraphicsAnimation::GetCurrentPosition()
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsAnimationManager
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsAnimationManager>
	{
	public:
		typedef GuiGraphicsAnimationManager WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsAnimationManager InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsAnimationManager::GuiGraphicsAnimationManager(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsAnimationManager::~GuiGraphicsAnimationManager()
	{
	}
	
	rptr<GuiGraphicsAnimationManager> GuiGraphicsAnimationManager::CreateRptr()
	{
		throw 0;
	}
	
	void GuiGraphicsAnimationManager::AddAnimation(sptr<IGuiGraphicsAnimation> animation)
	{
		throw 0;
	}
	
	bool GuiGraphicsAnimationManager::HasAnimation()
	{
		throw 0;
	}
	
	void GuiGraphicsAnimationManager::Play()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsAnimationManager> GuiGraphicsAnimationManager::operator=(rptr<GuiGraphicsAnimationManager> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTimeBasedAnimation
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTimeBasedAnimation>
	{
	public:
		typedef GuiTimeBasedAnimation WrappedObjectType;
		typedef vl::presentation::elements::GuiTimeBasedAnimation InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTimeBasedAnimation::GuiTimeBasedAnimation(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsAnimation(static_cast<__GacUIInternal<IGuiGraphicsAnimation>::InternalObjectType*>((__GacUIInternal<GuiTimeBasedAnimation>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTimeBasedAnimation::~GuiTimeBasedAnimation()
	{
	}
	
	rptr<GuiTimeBasedAnimation> GuiTimeBasedAnimation::CreateRptr(signed __int32 totalMilliseconds)
	{
		throw 0;
	}
	
	void GuiTimeBasedAnimation::Restart(signed __int32 totalMilliseconds)
	{
		throw 0;
	}
	
	signed __int32 GuiTimeBasedAnimation::GetTotalLength()
	{
		throw 0;
	}
	
	signed __int32 GuiTimeBasedAnimation::GetCurrentPosition()
	{
		throw 0;
	}
	
	rptr<GuiTimeBasedAnimation> GuiTimeBasedAnimation::operator=(rptr<GuiTimeBasedAnimation> value)
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsElementFactory
***********************************************************************/

	template<>
	class __GacUIInternal<IGuiGraphicsElementFactory>
	{
	public:
		typedef IGuiGraphicsElementFactory WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsElementFactory InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IGuiGraphicsElementFactory::IGuiGraphicsElementFactory(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IGuiGraphicsElementFactory::~IGuiGraphicsElementFactory()
	{
	}
	
	rptr<IGuiGraphicsElement> IGuiGraphicsElementFactory::Create()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsElementFactory> IGuiGraphicsElementFactory::operator=(rptr<IGuiGraphicsElementFactory> value)
	{
		throw 0;
	}
	
	GacString IGuiGraphicsElementFactory::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsElement
***********************************************************************/

	template<>
	class __GacUIInternal<IGuiGraphicsElement>
	{
	public:
		typedef IGuiGraphicsElement WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IGuiGraphicsElement::IGuiGraphicsElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	IGuiGraphicsElement::~IGuiGraphicsElement()
	{
	}
	
	rptr<IGuiGraphicsElement> IGuiGraphicsElement::operator=(rptr<IGuiGraphicsElement> value)
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsElementFactory> IGuiGraphicsElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> IGuiGraphicsElement::GetRenderer()
	{
		throw 0;
	}
	

/***********************************************************************
Gui3DBorderElement
***********************************************************************/

	template<>
	class __GacUIInternal<Gui3DBorderElement>
	{
	public:
		typedef Gui3DBorderElement WrappedObjectType;
		typedef vl::presentation::elements::Gui3DBorderElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Gui3DBorderElement::Gui3DBorderElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<Gui3DBorderElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Gui3DBorderElement::~Gui3DBorderElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> Gui3DBorderElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> Gui3DBorderElement::GetRenderer()
	{
		throw 0;
	}
	
	void Gui3DBorderElement::SetColors(Color value1, Color value2)
	{
		throw 0;
	}
	
	rptr<Gui3DBorderElement> Gui3DBorderElement::operator=(rptr<Gui3DBorderElement> value)
	{
		throw 0;
	}
	
	rptr<Gui3DBorderElement> Gui3DBorderElement::Create()
	{
		throw 0;
	}
	
	Color Gui3DBorderElement::GetColor1()
	{
		throw 0;
	}
	
	Color Gui3DBorderElement::GetColor2()
	{
		throw 0;
	}
	
	GacString Gui3DBorderElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
Gui3DSplitterElement
***********************************************************************/

	template<>
	class __GacUIInternal<Gui3DSplitterElement>
	{
	public:
		typedef Gui3DSplitterElement WrappedObjectType;
		typedef vl::presentation::elements::Gui3DSplitterElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Gui3DSplitterElement::Gui3DSplitterElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<Gui3DSplitterElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Gui3DSplitterElement::~Gui3DSplitterElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> Gui3DSplitterElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> Gui3DSplitterElement::GetRenderer()
	{
		throw 0;
	}
	
	void Gui3DSplitterElement::SetColors(Color value1, Color value2)
	{
		throw 0;
	}
	
	rptr<Gui3DSplitterElement> Gui3DSplitterElement::operator=(rptr<Gui3DSplitterElement> value)
	{
		throw 0;
	}
	
	rptr<Gui3DSplitterElement> Gui3DSplitterElement::Create()
	{
		throw 0;
	}
	
	Color Gui3DSplitterElement::GetColor1()
	{
		throw 0;
	}
	
	Color Gui3DSplitterElement::GetColor2()
	{
		throw 0;
	}
	
	Gui3DSplitterElement :: Direction Gui3DSplitterElement::GetDirection()
	{
		throw 0;
	}
	
	void Gui3DSplitterElement::SetDirection(Gui3DSplitterElement :: Direction value)
	{
		throw 0;
	}
	
	GacString Gui3DSplitterElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
GuiGradientBackgroundElement
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGradientBackgroundElement>
	{
	public:
		typedef GuiGradientBackgroundElement WrappedObjectType;
		typedef vl::presentation::elements::GuiGradientBackgroundElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGradientBackgroundElement::GuiGradientBackgroundElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiGradientBackgroundElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGradientBackgroundElement::~GuiGradientBackgroundElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> GuiGradientBackgroundElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiGradientBackgroundElement::GetRenderer()
	{
		throw 0;
	}
	
	void GuiGradientBackgroundElement::SetColors(Color value1, Color value2)
	{
		throw 0;
	}
	
	rptr<GuiGradientBackgroundElement> GuiGradientBackgroundElement::operator=(rptr<GuiGradientBackgroundElement> value)
	{
		throw 0;
	}
	
	rptr<GuiGradientBackgroundElement> GuiGradientBackgroundElement::Create()
	{
		throw 0;
	}
	
	Color GuiGradientBackgroundElement::GetColor1()
	{
		throw 0;
	}
	
	Color GuiGradientBackgroundElement::GetColor2()
	{
		throw 0;
	}
	
	GuiGradientBackgroundElement :: Direction GuiGradientBackgroundElement::GetDirection()
	{
		throw 0;
	}
	
	void GuiGradientBackgroundElement::SetDirection(GuiGradientBackgroundElement :: Direction value)
	{
		throw 0;
	}
	
	ElementShape :: Type GuiGradientBackgroundElement::GetShape()
	{
		throw 0;
	}
	
	void GuiGradientBackgroundElement::SetShape(ElementShape :: Type value)
	{
		throw 0;
	}
	
	GacString GuiGradientBackgroundElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
GuiImageFrameElement
***********************************************************************/

	template<>
	class __GacUIInternal<GuiImageFrameElement>
	{
	public:
		typedef GuiImageFrameElement WrappedObjectType;
		typedef vl::presentation::elements::GuiImageFrameElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiImageFrameElement::GuiImageFrameElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiImageFrameElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiImageFrameElement::~GuiImageFrameElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> GuiImageFrameElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiImageFrameElement::GetRenderer()
	{
		throw 0;
	}
	
	void GuiImageFrameElement::SetImage(sptr<INativeImage> _image, signed __int32 _frameIndex)
	{
		throw 0;
	}
	
	void GuiImageFrameElement::SetAlignments(Alignment :: Type horizontal, Alignment :: Type vertical)
	{
		throw 0;
	}
	
	rptr<GuiImageFrameElement> GuiImageFrameElement::operator=(rptr<GuiImageFrameElement> value)
	{
		throw 0;
	}
	
	rptr<GuiImageFrameElement> GuiImageFrameElement::Create()
	{
		throw 0;
	}
	
	sptr<INativeImage> GuiImageFrameElement::GetImage()
	{
		throw 0;
	}
	
	signed __int32 GuiImageFrameElement::GetFrameIndex()
	{
		throw 0;
	}
	
	Alignment :: Type GuiImageFrameElement::GetHorizontalAlignment()
	{
		throw 0;
	}
	
	Alignment :: Type GuiImageFrameElement::GetVerticalAlignment()
	{
		throw 0;
	}
	
	bool GuiImageFrameElement::GetStretch()
	{
		throw 0;
	}
	
	void GuiImageFrameElement::SetStretch(bool value)
	{
		throw 0;
	}
	
	GacString GuiImageFrameElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
GuiRoundBorderElement
***********************************************************************/

	template<>
	class __GacUIInternal<GuiRoundBorderElement>
	{
	public:
		typedef GuiRoundBorderElement WrappedObjectType;
		typedef vl::presentation::elements::GuiRoundBorderElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiRoundBorderElement::GuiRoundBorderElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiRoundBorderElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiRoundBorderElement::~GuiRoundBorderElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> GuiRoundBorderElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiRoundBorderElement::GetRenderer()
	{
		throw 0;
	}
	
	rptr<GuiRoundBorderElement> GuiRoundBorderElement::operator=(rptr<GuiRoundBorderElement> value)
	{
		throw 0;
	}
	
	rptr<GuiRoundBorderElement> GuiRoundBorderElement::Create()
	{
		throw 0;
	}
	
	Color GuiRoundBorderElement::GetColor()
	{
		throw 0;
	}
	
	void GuiRoundBorderElement::SetColor(Color value)
	{
		throw 0;
	}
	
	signed __int32 GuiRoundBorderElement::GetRadius()
	{
		throw 0;
	}
	
	void GuiRoundBorderElement::SetRadius(signed __int32 value)
	{
		throw 0;
	}
	
	GacString GuiRoundBorderElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
GuiSolidBackgroundElement
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSolidBackgroundElement>
	{
	public:
		typedef GuiSolidBackgroundElement WrappedObjectType;
		typedef vl::presentation::elements::GuiSolidBackgroundElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSolidBackgroundElement::GuiSolidBackgroundElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiSolidBackgroundElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSolidBackgroundElement::~GuiSolidBackgroundElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> GuiSolidBackgroundElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiSolidBackgroundElement::GetRenderer()
	{
		throw 0;
	}
	
	rptr<GuiSolidBackgroundElement> GuiSolidBackgroundElement::operator=(rptr<GuiSolidBackgroundElement> value)
	{
		throw 0;
	}
	
	rptr<GuiSolidBackgroundElement> GuiSolidBackgroundElement::Create()
	{
		throw 0;
	}
	
	Color GuiSolidBackgroundElement::GetColor()
	{
		throw 0;
	}
	
	void GuiSolidBackgroundElement::SetColor(Color value)
	{
		throw 0;
	}
	
	ElementShape :: Type GuiSolidBackgroundElement::GetShape()
	{
		throw 0;
	}
	
	void GuiSolidBackgroundElement::SetShape(ElementShape :: Type value)
	{
		throw 0;
	}
	
	GacString GuiSolidBackgroundElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
GuiSolidBorderElement
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSolidBorderElement>
	{
	public:
		typedef GuiSolidBorderElement WrappedObjectType;
		typedef vl::presentation::elements::GuiSolidBorderElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSolidBorderElement::GuiSolidBorderElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiSolidBorderElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSolidBorderElement::~GuiSolidBorderElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> GuiSolidBorderElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiSolidBorderElement::GetRenderer()
	{
		throw 0;
	}
	
	rptr<GuiSolidBorderElement> GuiSolidBorderElement::operator=(rptr<GuiSolidBorderElement> value)
	{
		throw 0;
	}
	
	rptr<GuiSolidBorderElement> GuiSolidBorderElement::Create()
	{
		throw 0;
	}
	
	Color GuiSolidBorderElement::GetColor()
	{
		throw 0;
	}
	
	void GuiSolidBorderElement::SetColor(Color value)
	{
		throw 0;
	}
	
	ElementShape :: Type GuiSolidBorderElement::GetShape()
	{
		throw 0;
	}
	
	void GuiSolidBorderElement::SetShape(ElementShape :: Type value)
	{
		throw 0;
	}
	
	GacString GuiSolidBorderElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
GuiSolidLabelElement
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSolidLabelElement>
	{
	public:
		typedef GuiSolidLabelElement WrappedObjectType;
		typedef vl::presentation::elements::GuiSolidLabelElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSolidLabelElement::GuiSolidLabelElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiSolidLabelElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSolidLabelElement::~GuiSolidLabelElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> GuiSolidLabelElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiSolidLabelElement::GetRenderer()
	{
		throw 0;
	}
	
	void GuiSolidLabelElement::SetAlignments(Alignment :: Type horizontal, Alignment :: Type vertical)
	{
		throw 0;
	}
	
	rptr<GuiSolidLabelElement> GuiSolidLabelElement::operator=(rptr<GuiSolidLabelElement> value)
	{
		throw 0;
	}
	
	rptr<GuiSolidLabelElement> GuiSolidLabelElement::Create()
	{
		throw 0;
	}
	
	Color GuiSolidLabelElement::GetColor()
	{
		throw 0;
	}
	
	void GuiSolidLabelElement::SetColor(Color value)
	{
		throw 0;
	}
	
	const FontProperties& GuiSolidLabelElement::GetFont()
	{
		throw 0;
	}
	
	void GuiSolidLabelElement::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	const GacString& GuiSolidLabelElement::GetText()
	{
		throw 0;
	}
	
	void GuiSolidLabelElement::SetText(const GacString& value)
	{
		throw 0;
	}
	
	Alignment :: Type GuiSolidLabelElement::GetHorizontalAlignment()
	{
		throw 0;
	}
	
	Alignment :: Type GuiSolidLabelElement::GetVerticalAlignment()
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetWrapLine()
	{
		throw 0;
	}
	
	void GuiSolidLabelElement::SetWrapLine(bool value)
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetEllipse()
	{
		throw 0;
	}
	
	void GuiSolidLabelElement::SetEllipse(bool value)
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetMultiline()
	{
		throw 0;
	}
	
	void GuiSolidLabelElement::SetMultiline(bool value)
	{
		throw 0;
	}
	
	GacString GuiSolidLabelElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsRendererFactory
***********************************************************************/

	template<>
	class __GacUIInternal<IGuiGraphicsRendererFactory>
	{
	public:
		typedef IGuiGraphicsRendererFactory WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsRendererFactory InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IGuiGraphicsRendererFactory::IGuiGraphicsRendererFactory(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IGuiGraphicsRendererFactory::~IGuiGraphicsRendererFactory()
	{
	}
	
	rptr<IGuiGraphicsRenderer> IGuiGraphicsRendererFactory::Create()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRendererFactory> IGuiGraphicsRendererFactory::operator=(rptr<IGuiGraphicsRendererFactory> value)
	{
		throw 0;
	}
	

/***********************************************************************
IGuiMenuService
***********************************************************************/

	template<>
	class __GacUIInternal<IGuiMenuService>
	{
	public:
		typedef IGuiMenuService WrappedObjectType;
		typedef vl::presentation::controls::IGuiMenuService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IGuiMenuService::IGuiMenuService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<IGuiMenuService>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	IGuiMenuService::~IGuiMenuService()
	{
	}
	
	bool IGuiMenuService::IsActiveState()
	{
		throw 0;
	}
	
	void IGuiMenuService::MenuItemExecuted()
	{
		throw 0;
	}
	
	void IGuiMenuService::MenuOpened(rptr<GuiMenu> menu)
	{
		throw 0;
	}
	
	void IGuiMenuService::MenuClosed(rptr<GuiMenu> menu)
	{
		throw 0;
	}
	
	rptr<IGuiMenuService> IGuiMenuService::operator=(rptr<IGuiMenuService> value)
	{
		throw 0;
	}
	
	rptr<IGuiMenuService> IGuiMenuService::GetParent()
	{
		throw 0;
	}
	
	IGuiMenuService :: Direction IGuiMenuService::GetPreferredDirection()
	{
		throw 0;
	}
	
	rptr<GuiMenu> IGuiMenuService::GetOpeningMenu()
	{
		throw 0;
	}
	
	wchar_t* IGuiMenuService::get_Identifier()
	{
		throw 0;
	}
	
	void IGuiMenuService::set_Identifier(wchar_t* value)
	{
		throw 0;
	}

/***********************************************************************
IList_of_int
***********************************************************************/

	template<>
	class __GacUIInternal<IList_of_int>
	{
	public:
		typedef IList_of_int WrappedObjectType;
		typedef vl::collections::IList<int,int> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IList_of_int::IList_of_int(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_int::~IList_of_int()
	{
	}
	
	signed __int32 IList_of_int::Insert(signed __int32 index, signed __int32 item)
	{
		throw 0;
	}
	
	bool IList_of_int::Set(signed __int32 index, signed __int32 item)
	{
		throw 0;
	}
	
	rptr<IList_of_int> IList_of_int::operator=(rptr<IList_of_int> value)
	{
		throw 0;
	}
	

/***********************************************************************
IList_of_MemoryNodeProvider
***********************************************************************/

	template<>
	class __GacUIInternal<IList_of_MemoryNodeProvider>
	{
	public:
		typedef IList_of_MemoryNodeProvider WrappedObjectType;
		typedef vl::collections::IList<vl::Ptr<vl::presentation::controls::tree::MemoryNodeProvider>,vl::presentation::controls::tree::MemoryNodeProvider *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IList_of_MemoryNodeProvider::IList_of_MemoryNodeProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_MemoryNodeProvider::~IList_of_MemoryNodeProvider()
	{
	}
	
	signed __int32 IList_of_MemoryNodeProvider::Insert(signed __int32 index, sptr<MemoryNodeProvider> item)
	{
		throw 0;
	}
	
	bool IList_of_MemoryNodeProvider::Set(signed __int32 index, sptr<MemoryNodeProvider> item)
	{
		throw 0;
	}
	
	rptr<IList_of_MemoryNodeProvider> IList_of_MemoryNodeProvider::operator=(rptr<IList_of_MemoryNodeProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
INativeAsyncService
***********************************************************************/

	template<>
	class __GacUIInternal<INativeAsyncService>
	{
	public:
		typedef INativeAsyncService WrappedObjectType;
		typedef vl::presentation::INativeAsyncService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeAsyncService::INativeAsyncService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeAsyncService::~INativeAsyncService()
	{
	}
	
	bool INativeAsyncService::IsInMainThread()
	{
		throw 0;
	}
	
	rptr<INativeAsyncService> INativeAsyncService::operator=(rptr<INativeAsyncService> value)
	{
		throw 0;
	}
	

/***********************************************************************
INativeClipboardService
***********************************************************************/

	template<>
	class __GacUIInternal<INativeClipboardService>
	{
	public:
		typedef INativeClipboardService WrappedObjectType;
		typedef vl::presentation::INativeClipboardService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeClipboardService::INativeClipboardService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeClipboardService::~INativeClipboardService()
	{
	}
	
	bool INativeClipboardService::ContainsText()
	{
		throw 0;
	}
	
	bool INativeClipboardService::SetText(const GacString& value)
	{
		throw 0;
	}
	
	rptr<INativeClipboardService> INativeClipboardService::operator=(rptr<INativeClipboardService> value)
	{
		throw 0;
	}
	
	GacString INativeClipboardService::GetText()
	{
		throw 0;
	}
	

/***********************************************************************
INativeCursor
***********************************************************************/

	template<>
	class __GacUIInternal<INativeCursor>
	{
	public:
		typedef INativeCursor WrappedObjectType;
		typedef vl::presentation::INativeCursor InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeCursor::INativeCursor(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeCursor::~INativeCursor()
	{
	}
	
	bool INativeCursor::IsSystemCursor()
	{
		throw 0;
	}
	
	rptr<INativeCursor> INativeCursor::operator=(rptr<INativeCursor> value)
	{
		throw 0;
	}
	
	INativeCursor :: SystemCursorType INativeCursor::GetSystemCursorType()
	{
		throw 0;
	}
	

/***********************************************************************
INativeImageFrameCache
***********************************************************************/

	template<>
	class __GacUIInternal<INativeImageFrameCache>
	{
	public:
		typedef INativeImageFrameCache WrappedObjectType;
		typedef vl::presentation::INativeImageFrameCache InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeImageFrameCache::INativeImageFrameCache(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeImageFrameCache::~INativeImageFrameCache()
	{
	}
	
	void INativeImageFrameCache::OnAttach(rptr<INativeImageFrame> frame)
	{
		throw 0;
	}
	
	void INativeImageFrameCache::OnDetach(rptr<INativeImageFrame> frame)
	{
		throw 0;
	}
	
	rptr<INativeImageFrameCache> INativeImageFrameCache::operator=(rptr<INativeImageFrameCache> value)
	{
		throw 0;
	}
	

/***********************************************************************
INativeImageService
***********************************************************************/

	template<>
	class __GacUIInternal<INativeImageService>
	{
	public:
		typedef INativeImageService WrappedObjectType;
		typedef vl::presentation::INativeImageService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeImageService::INativeImageService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeImageService::~INativeImageService()
	{
	}
	
	sptr<INativeImage> INativeImageService::CreateImageFromFile(const GacString& path)
	{
		throw 0;
	}
	
	rptr<INativeImageService> INativeImageService::operator=(rptr<INativeImageService> value)
	{
		throw 0;
	}
	

/***********************************************************************
INativeImage
***********************************************************************/

	template<>
	class __GacUIInternal<INativeImage>
	{
	public:
		typedef INativeImage WrappedObjectType;
		typedef vl::presentation::INativeImage InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeImage::INativeImage(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeImage::~INativeImage()
	{
	}
	
	rptr<INativeImageFrame> INativeImage::GetFrame(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<INativeImage> INativeImage::operator=(rptr<INativeImage> value)
	{
		throw 0;
	}
	
	rptr<INativeImageService> INativeImage::GetImageService()
	{
		throw 0;
	}
	
	INativeImage :: FormatType INativeImage::GetFormat()
	{
		throw 0;
	}
	
	signed __int32 INativeImage::GetFrameCount()
	{
		throw 0;
	}
	

/***********************************************************************
INativeInputService
***********************************************************************/

	template<>
	class __GacUIInternal<INativeInputService>
	{
	public:
		typedef INativeInputService WrappedObjectType;
		typedef vl::presentation::INativeInputService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeInputService::INativeInputService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeInputService::~INativeInputService()
	{
	}
	
	void INativeInputService::StartHookMouse()
	{
		throw 0;
	}
	
	void INativeInputService::StopHookMouse()
	{
		throw 0;
	}
	
	bool INativeInputService::IsHookingMouse()
	{
		throw 0;
	}
	
	void INativeInputService::StartTimer()
	{
		throw 0;
	}
	
	void INativeInputService::StopTimer()
	{
		throw 0;
	}
	
	bool INativeInputService::IsTimerEnabled()
	{
		throw 0;
	}
	
	bool INativeInputService::IsKeyPressing(signed __int32 code)
	{
		throw 0;
	}
	
	bool INativeInputService::IsKeyToggled(signed __int32 code)
	{
		throw 0;
	}
	
	rptr<INativeInputService> INativeInputService::operator=(rptr<INativeInputService> value)
	{
		throw 0;
	}
	

/***********************************************************************
INativeResourceService
***********************************************************************/

	template<>
	class __GacUIInternal<INativeResourceService>
	{
	public:
		typedef INativeResourceService WrappedObjectType;
		typedef vl::presentation::INativeResourceService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeResourceService::INativeResourceService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeResourceService::~INativeResourceService()
	{
	}
	
	rptr<INativeCursor> INativeResourceService::GetSystemCursor(INativeCursor :: SystemCursorType type)
	{
		throw 0;
	}
	
	rptr<INativeResourceService> INativeResourceService::operator=(rptr<INativeResourceService> value)
	{
		throw 0;
	}
	
	rptr<INativeCursor> INativeResourceService::GetDefaultSystemCursor()
	{
		throw 0;
	}
	
	FontProperties INativeResourceService::GetDefaultFont()
	{
		throw 0;
	}
	
	void INativeResourceService::SetDefaultFont(const FontProperties& value)
	{
		throw 0;
	}
	

/***********************************************************************
INodeItemPrimaryTextView
***********************************************************************/

	template<>
	class __GacUIInternal<INodeItemPrimaryTextView>
	{
	public:
		typedef INodeItemPrimaryTextView WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeItemPrimaryTextView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INodeItemPrimaryTextView::INodeItemPrimaryTextView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeItemPrimaryTextView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeItemPrimaryTextView::~INodeItemPrimaryTextView()
	{
	}
	
	GacString INodeItemPrimaryTextView::GetPrimaryTextViewText(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	rptr<INodeItemPrimaryTextView> INodeItemPrimaryTextView::operator=(rptr<INodeItemPrimaryTextView> value)
	{
		throw 0;
	}
	
	wchar_t* INodeItemPrimaryTextView::get_Identifier()
	{
		throw 0;
	}
	
	void INodeItemPrimaryTextView::set_Identifier(wchar_t* value)
	{
		throw 0;
	}

/***********************************************************************
INodeProvider
***********************************************************************/

	template<>
	class __GacUIInternal<INodeProvider>
	{
	public:
		typedef INodeProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INodeProvider::INodeProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeProvider::~INodeProvider()
	{
	}
	
	signed __int32 INodeProvider::CalculateTotalVisibleNodes()
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeProvider::RequestChild(signed __int32 index)
	{
		throw 0;
	}
	
	void INodeProvider::ReleaseChild(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeProvider::operator=(rptr<INodeProvider> value)
	{
		throw 0;
	}
	
	bool INodeProvider::GetExpanding()
	{
		throw 0;
	}
	
	void INodeProvider::SetExpanding(bool value)
	{
		throw 0;
	}
	
	signed __int32 INodeProvider::GetChildCount()
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeProvider::GetParent()
	{
		throw 0;
	}
	

/***********************************************************************
INodeProviderCallback
***********************************************************************/

	template<>
	class __GacUIInternal<INodeProviderCallback>
	{
	public:
		typedef INodeProviderCallback WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeProviderCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INodeProviderCallback::INodeProviderCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeProviderCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeProviderCallback::~INodeProviderCallback()
	{
	}
	
	void INodeProviderCallback::OnAttached(rptr<INodeRootProvider> provider)
	{
		throw 0;
	}
	
	void INodeProviderCallback::OnBeforeItemModified(rptr<INodeProvider> parentNode, signed __int32 start, signed __int32 count, signed __int32 newCount)
	{
		throw 0;
	}
	
	void INodeProviderCallback::OnAfterItemModified(rptr<INodeProvider> parentNode, signed __int32 start, signed __int32 count, signed __int32 newCount)
	{
		throw 0;
	}
	
	void INodeProviderCallback::OnItemExpanded(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	void INodeProviderCallback::OnItemCollapsed(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	rptr<INodeProviderCallback> INodeProviderCallback::operator=(rptr<INodeProviderCallback> value)
	{
		throw 0;
	}
	

/***********************************************************************
INodeRootProvider
***********************************************************************/

	template<>
	class __GacUIInternal<INodeRootProvider>
	{
	public:
		typedef INodeRootProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeRootProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INodeRootProvider::INodeRootProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeRootProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeRootProvider::~INodeRootProvider()
	{
	}
	
	bool INodeRootProvider::CanGetNodeByVisibleIndex()
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeRootProvider::GetNodeByVisibleIndex(signed __int32 index)
	{
		throw 0;
	}
	
	bool INodeRootProvider::AttachCallback(rptr<INodeProviderCallback> value)
	{
		throw 0;
	}
	
	bool INodeRootProvider::DetachCallback(rptr<INodeProviderCallback> value)
	{
		throw 0;
	}
	
	rptr<IDescriptable> INodeRootProvider::RequestView(const GacString& identifier)
	{
		throw 0;
	}
	
	void INodeRootProvider::ReleaseView(rptr<IDescriptable> view)
	{
		throw 0;
	}
	
	rptr<INodeRootProvider> INodeRootProvider::operator=(rptr<INodeRootProvider> value)
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeRootProvider::GetRootNode()
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_ColorEntry
***********************************************************************/

	template<>
	class __GacUIInternal<IReadonlyList_of_ColorEntry>
	{
	public:
		typedef IReadonlyList_of_ColorEntry WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::elements::text::ColorEntry,vl::presentation::elements::text::ColorEntry> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IReadonlyList_of_ColorEntry::IReadonlyList_of_ColorEntry(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_ColorEntry::~IReadonlyList_of_ColorEntry()
	{
	}
	
	bool IReadonlyList_of_ColorEntry::Contains(const ColorEntry& item)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_ColorEntry::Count()
	{
		throw 0;
	}
	
	const ColorEntry& IReadonlyList_of_ColorEntry::Get(signed __int32 index)
	{
		throw 0;
	}
	
	const ColorEntry& IReadonlyList_of_ColorEntry::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_ColorEntry::IndexOf(const ColorEntry& item)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_ColorEntry> IReadonlyList_of_ColorEntry::operator=(rptr<IReadonlyList_of_ColorEntry> value)
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiGraphicsComposition_raw_pointer
***********************************************************************/

	template<>
	class __GacUIInternal<IReadonlyList_of_GuiGraphicsComposition_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiGraphicsComposition_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::elements::GuiGraphicsComposition *,vl::presentation::elements::GuiGraphicsComposition *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IReadonlyList_of_GuiGraphicsComposition_raw_pointer::IReadonlyList_of_GuiGraphicsComposition_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiGraphicsComposition_raw_pointer::~IReadonlyList_of_GuiGraphicsComposition_raw_pointer()
	{
	}
	
	bool IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Contains(rptr<GuiGraphicsComposition> item)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Count()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Get(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> IReadonlyList_of_GuiGraphicsComposition_raw_pointer::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiGraphicsComposition_raw_pointer::IndexOf(rptr<GuiGraphicsComposition> item)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> IReadonlyList_of_GuiGraphicsComposition_raw_pointer::operator=(rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> value)
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiTabPage_raw_pointer
***********************************************************************/

	template<>
	class __GacUIInternal<IReadonlyList_of_GuiTabPage_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiTabPage_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::controls::GuiTabPage *,vl::presentation::controls::GuiTabPage *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IReadonlyList_of_GuiTabPage_raw_pointer::IReadonlyList_of_GuiTabPage_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiTabPage_raw_pointer::~IReadonlyList_of_GuiTabPage_raw_pointer()
	{
	}
	
	bool IReadonlyList_of_GuiTabPage_raw_pointer::Contains(rptr<GuiTabPage> item)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiTabPage_raw_pointer::Count()
	{
		throw 0;
	}
	
	rptr<GuiTabPage> IReadonlyList_of_GuiTabPage_raw_pointer::Get(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<GuiTabPage> IReadonlyList_of_GuiTabPage_raw_pointer::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiTabPage_raw_pointer::IndexOf(rptr<GuiTabPage> item)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiTabPage_raw_pointer> IReadonlyList_of_GuiTabPage_raw_pointer::operator=(rptr<IReadonlyList_of_GuiTabPage_raw_pointer> value)
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_int
***********************************************************************/

	template<>
	class __GacUIInternal<IReadonlyList_of_int>
	{
	public:
		typedef IReadonlyList_of_int WrappedObjectType;
		typedef vl::collections::IReadonlyList<int,int> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IReadonlyList_of_int::IReadonlyList_of_int(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_int::~IReadonlyList_of_int()
	{
	}
	
	bool IReadonlyList_of_int::Contains(signed __int32 item)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_int::Count()
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_int::Get(signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_int::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_int::IndexOf(signed __int32 item)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_int> IReadonlyList_of_int::operator=(rptr<IReadonlyList_of_int> value)
	{
		throw 0;
	}
	

/***********************************************************************
ITreeViewItemView
***********************************************************************/

	template<>
	class __GacUIInternal<ITreeViewItemView>
	{
	public:
		typedef ITreeViewItemView WrappedObjectType;
		typedef vl::presentation::controls::tree::ITreeViewItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ITreeViewItemView::ITreeViewItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INodeItemPrimaryTextView(static_cast<__GacUIInternal<INodeItemPrimaryTextView>::InternalObjectType*>((__GacUIInternal<ITreeViewItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ITreeViewItemView::~ITreeViewItemView()
	{
	}
	
	sptr<GuiImageData> ITreeViewItemView::GetNodeImage(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	GacString ITreeViewItemView::GetNodeText(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	rptr<ITreeViewItemView> ITreeViewItemView::operator=(rptr<ITreeViewItemView> value)
	{
		throw 0;
	}
	
	wchar_t* ITreeViewItemView::get_Identifier()
	{
		throw 0;
	}
	
	void ITreeViewItemView::set_Identifier(wchar_t* value)
	{
		throw 0;
	}

/***********************************************************************
List_of_ObjectString_of_wchar_t
***********************************************************************/

	template<>
	class __GacUIInternal<List_of_ObjectString_of_wchar_t>
	{
	public:
		typedef List_of_ObjectString_of_wchar_t WrappedObjectType;
		typedef vl::collections::List<vl::ObjectString<wchar_t>,vl::ObjectString<wchar_t> > InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	List_of_ObjectString_of_wchar_t::List_of_ObjectString_of_wchar_t(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	List_of_ObjectString_of_wchar_t::~List_of_ObjectString_of_wchar_t()
	{
	}
	
	rptr<List_of_ObjectString_of_wchar_t> List_of_ObjectString_of_wchar_t::CreateRptr()
	{
		throw 0;
	}
	
	bool List_of_ObjectString_of_wchar_t::Contains(const GacString& item)
	{
		throw 0;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::IndexOf(const GacString& item)
	{
		throw 0;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::Add(const GacString& item)
	{
		throw 0;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::Insert(signed __int32 index, const GacString& item)
	{
		throw 0;
	}
	
	bool List_of_ObjectString_of_wchar_t::Remove(const GacString& item)
	{
		throw 0;
	}
	
	bool List_of_ObjectString_of_wchar_t::Set(signed __int32 index, const GacString& item)
	{
		throw 0;
	}
	
	GacString& List_of_ObjectString_of_wchar_t::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	rptr<List_of_ObjectString_of_wchar_t> List_of_ObjectString_of_wchar_t::operator=(rptr<List_of_ObjectString_of_wchar_t> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewColumn
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewColumn>
	{
	public:
		typedef ListViewColumn WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewColumn InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewColumn::ListViewColumn(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	ListViewColumn::~ListViewColumn()
	{
		delete __GacUIInternal<ListViewColumn>::GetInternalObject(*this);
	}
	
	rptr<ListViewColumn> ListViewColumn::CreateRptr(const GacString& _text, signed __int32 _size)
	{
		throw 0;
	}
	
	ListViewColumn ListViewColumn::Create(const GacString& _text, signed __int32 _size)
	{
		throw 0;
	}
	
	ListViewColumn& ListViewColumn::operator=(const ListViewColumn& value)
	{
		throw 0;
	}
	
	GacString ListViewColumn::get_text()
	{
		throw 0;
	}
	
	void ListViewColumn::set_text(GacString value)
	{
		throw 0;
	}
	signed __int32 ListViewColumn::get_size()
	{
		throw 0;
	}
	
	void ListViewColumn::set_size(signed __int32 value)
	{
		throw 0;
	}

/***********************************************************************
IList_of_ListViewColumn
***********************************************************************/

	template<>
	class __GacUIInternal<IList_of_ListViewColumn>
	{
	public:
		typedef IList_of_ListViewColumn WrappedObjectType;
		typedef vl::collections::IList<vl::Ptr<vl::presentation::controls::list::ListViewColumn>,vl::presentation::controls::list::ListViewColumn *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IList_of_ListViewColumn::IList_of_ListViewColumn(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_ListViewColumn::~IList_of_ListViewColumn()
	{
	}
	
	signed __int32 IList_of_ListViewColumn::Insert(signed __int32 index, sptr<ListViewColumn> item)
	{
		throw 0;
	}
	
	bool IList_of_ListViewColumn::Set(signed __int32 index, sptr<ListViewColumn> item)
	{
		throw 0;
	}
	
	rptr<IList_of_ListViewColumn> IList_of_ListViewColumn::operator=(rptr<IList_of_ListViewColumn> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItem
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItem>
	{
	public:
		typedef ListViewItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItem InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItem::ListViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	ListViewItem::~ListViewItem()
	{
		delete __GacUIInternal<ListViewItem>::GetInternalObject(*this);
	}
	
	ListViewItem& ListViewItem::operator=(const ListViewItem& value)
	{
		throw 0;
	}
	
	sptr<GuiImageData> ListViewItem::get_smallImage()
	{
		throw 0;
	}
	
	void ListViewItem::set_smallImage(sptr<GuiImageData> value)
	{
		throw 0;
	}
	sptr<GuiImageData> ListViewItem::get_largeImage()
	{
		throw 0;
	}
	
	void ListViewItem::set_largeImage(sptr<GuiImageData> value)
	{
		throw 0;
	}
	GacString ListViewItem::get_text()
	{
		throw 0;
	}
	
	void ListViewItem::set_text(GacString value)
	{
		throw 0;
	}
	List_of_ObjectString_of_wchar_t ListViewItem::get_subItems()
	{
		throw 0;
	}
	
	void ListViewItem::set_subItems(List_of_ObjectString_of_wchar_t value)
	{
		throw 0;
	}

/***********************************************************************
IList_of_ListViewItem
***********************************************************************/

	template<>
	class __GacUIInternal<IList_of_ListViewItem>
	{
	public:
		typedef IList_of_ListViewItem WrappedObjectType;
		typedef vl::collections::IList<vl::Ptr<vl::presentation::controls::list::ListViewItem>,vl::presentation::controls::list::ListViewItem *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IList_of_ListViewItem::IList_of_ListViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_ListViewItem::~IList_of_ListViewItem()
	{
	}
	
	signed __int32 IList_of_ListViewItem::Insert(signed __int32 index, sptr<ListViewItem> item)
	{
		throw 0;
	}
	
	bool IList_of_ListViewItem::Set(signed __int32 index, sptr<ListViewItem> item)
	{
		throw 0;
	}
	
	rptr<IList_of_ListViewItem> IList_of_ListViewItem::operator=(rptr<IList_of_ListViewItem> value)
	{
		throw 0;
	}
	

/***********************************************************************
Margin
***********************************************************************/

	template<>
	class __GacUIInternal<Margin>
	{
	public:
		typedef Margin WrappedObjectType;
		typedef vl::presentation::Margin InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Margin::Margin(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Margin::~Margin()
	{
		delete __GacUIInternal<Margin>::GetInternalObject(*this);
	}
	
	rptr<Margin> Margin::CreateRptr(signed __int32 _left, signed __int32 _top, signed __int32 _right, signed __int32 _bottom)
	{
		throw 0;
	}
	
	Margin Margin::Create(signed __int32 _left, signed __int32 _top, signed __int32 _right, signed __int32 _bottom)
	{
		throw 0;
	}
	
	rptr<Margin> Margin::CreateRptr()
	{
		throw 0;
	}
	
	Margin Margin::Create()
	{
		throw 0;
	}
	
	bool Margin::operator==(Margin margin)
	{
		throw 0;
	}
	
	bool Margin::operator!=(Margin margin)
	{
		throw 0;
	}
	
	signed __int32 Margin::get_left()
	{
		throw 0;
	}
	
	void Margin::set_left(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 Margin::get_top()
	{
		throw 0;
	}
	
	void Margin::set_top(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 Margin::get_right()
	{
		throw 0;
	}
	
	void Margin::set_right(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 Margin::get_bottom()
	{
		throw 0;
	}
	
	void Margin::set_bottom(signed __int32 value)
	{
		throw 0;
	}

/***********************************************************************
MemoryNodeProvider
***********************************************************************/

	template<>
	class __GacUIInternal<MemoryNodeProvider>
	{
	public:
		typedef MemoryNodeProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::MemoryNodeProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	MemoryNodeProvider::MemoryNodeProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IList_of_MemoryNodeProvider(static_cast<__GacUIInternal<IList_of_MemoryNodeProvider>::InternalObjectType*>((__GacUIInternal<MemoryNodeProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,INodeProvider(static_cast<__GacUIInternal<INodeProvider>::InternalObjectType*>((__GacUIInternal<MemoryNodeProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	MemoryNodeProvider::~MemoryNodeProvider()
	{
	}
	
	rptr<MemoryNodeProvider> MemoryNodeProvider::CreateRptr(sptr<DescriptableObject> _data)
	{
		throw 0;
	}
	
	rptr<MemoryNodeProvider> MemoryNodeProvider::CreateRptr()
	{
		throw 0;
	}
	
	void MemoryNodeProvider::NotifyDataModified()
	{
		throw 0;
	}
	
	rptr<IList_of_MemoryNodeProvider> MemoryNodeProvider::Children()
	{
		throw 0;
	}
	
	bool MemoryNodeProvider::GetExpanding()
	{
		throw 0;
	}
	
	void MemoryNodeProvider::SetExpanding(bool value)
	{
		throw 0;
	}
	
	signed __int32 MemoryNodeProvider::CalculateTotalVisibleNodes()
	{
		throw 0;
	}
	
	signed __int32 MemoryNodeProvider::GetChildCount()
	{
		throw 0;
	}
	
	rptr<INodeProvider> MemoryNodeProvider::GetParent()
	{
		throw 0;
	}
	
	rptr<INodeProvider> MemoryNodeProvider::RequestChild(signed __int32 index)
	{
		throw 0;
	}
	
	void MemoryNodeProvider::ReleaseChild(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	rptr<MemoryNodeProvider> MemoryNodeProvider::operator=(rptr<MemoryNodeProvider> value)
	{
		throw 0;
	}
	
	sptr<DescriptableObject> MemoryNodeProvider::GetData()
	{
		throw 0;
	}
	
	void MemoryNodeProvider::SetData(sptr<DescriptableObject> value)
	{
		throw 0;
	}
	

/***********************************************************************
NativeWindowCharInfo
***********************************************************************/

	template<>
	class __GacUIInternal<NativeWindowCharInfo>
	{
	public:
		typedef NativeWindowCharInfo WrappedObjectType;
		typedef vl::presentation::NativeWindowCharInfo InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	NativeWindowCharInfo::NativeWindowCharInfo(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	NativeWindowCharInfo::~NativeWindowCharInfo()
	{
		delete __GacUIInternal<NativeWindowCharInfo>::GetInternalObject(*this);
	}
	
	wchar_t NativeWindowCharInfo::get_code()
	{
		throw 0;
	}
	
	void NativeWindowCharInfo::set_code(wchar_t value)
	{
		throw 0;
	}
	bool NativeWindowCharInfo::get_ctrl()
	{
		throw 0;
	}
	
	void NativeWindowCharInfo::set_ctrl(bool value)
	{
		throw 0;
	}
	bool NativeWindowCharInfo::get_shift()
	{
		throw 0;
	}
	
	void NativeWindowCharInfo::set_shift(bool value)
	{
		throw 0;
	}
	bool NativeWindowCharInfo::get_alt()
	{
		throw 0;
	}
	
	void NativeWindowCharInfo::set_alt(bool value)
	{
		throw 0;
	}
	bool NativeWindowCharInfo::get_capslock()
	{
		throw 0;
	}
	
	void NativeWindowCharInfo::set_capslock(bool value)
	{
		throw 0;
	}

/***********************************************************************
GuiCharEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiCharEventArgs>
	{
	public:
		typedef GuiCharEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiCharEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiCharEventArgs::GuiCharEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiEventArgs(static_cast<__GacUIInternal<GuiEventArgs>::InternalObjectType*>((__GacUIInternal<GuiCharEventArgs>::InternalObjectType*)__internal_object_reference_input))
	    ,NativeWindowCharInfo(static_cast<__GacUIInternal<NativeWindowCharInfo>::InternalObjectType*>((__GacUIInternal<GuiCharEventArgs>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiCharEventArgs::~GuiCharEventArgs()
	{
		delete __GacUIInternal<GuiCharEventArgs>::GetInternalObject(*this);
	}
	
	rptr<GuiCharEventArgs> GuiCharEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	GuiCharEventArgs GuiCharEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	rptr<GuiCharEventArgs> GuiCharEventArgs::CreateRptr()
	{
		throw 0;
	}
	
	GuiCharEventArgs GuiCharEventArgs::Create()
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiCharEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiCharEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiCharEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiCharEventArgs::GuiGraphicsEvent_of_GuiCharEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiCharEventArgs::~GuiGraphicsEvent_of_GuiCharEventArgs()
	{
	}
	
	rptr<GuiGraphicsEvent_of_GuiCharEventArgs> GuiGraphicsEvent_of_GuiCharEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiCharEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiCharEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::Execute(GuiCharEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiCharEventArgs> GuiGraphicsEvent_of_GuiCharEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiCharEventArgs> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiCharEventArgs::GetAssociatedComposition()
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiCharEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiCharEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> value)
	{
		throw 0;
	}
	

/***********************************************************************
NativeWindowKeyInfo
***********************************************************************/

	template<>
	class __GacUIInternal<NativeWindowKeyInfo>
	{
	public:
		typedef NativeWindowKeyInfo WrappedObjectType;
		typedef vl::presentation::NativeWindowKeyInfo InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	NativeWindowKeyInfo::NativeWindowKeyInfo(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	NativeWindowKeyInfo::~NativeWindowKeyInfo()
	{
		delete __GacUIInternal<NativeWindowKeyInfo>::GetInternalObject(*this);
	}
	
	signed __int32 NativeWindowKeyInfo::get_code()
	{
		throw 0;
	}
	
	void NativeWindowKeyInfo::set_code(signed __int32 value)
	{
		throw 0;
	}
	bool NativeWindowKeyInfo::get_ctrl()
	{
		throw 0;
	}
	
	void NativeWindowKeyInfo::set_ctrl(bool value)
	{
		throw 0;
	}
	bool NativeWindowKeyInfo::get_shift()
	{
		throw 0;
	}
	
	void NativeWindowKeyInfo::set_shift(bool value)
	{
		throw 0;
	}
	bool NativeWindowKeyInfo::get_alt()
	{
		throw 0;
	}
	
	void NativeWindowKeyInfo::set_alt(bool value)
	{
		throw 0;
	}
	bool NativeWindowKeyInfo::get_capslock()
	{
		throw 0;
	}
	
	void NativeWindowKeyInfo::set_capslock(bool value)
	{
		throw 0;
	}

/***********************************************************************
GuiKeyEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiKeyEventArgs>
	{
	public:
		typedef GuiKeyEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiKeyEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiKeyEventArgs::GuiKeyEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiEventArgs(static_cast<__GacUIInternal<GuiEventArgs>::InternalObjectType*>((__GacUIInternal<GuiKeyEventArgs>::InternalObjectType*)__internal_object_reference_input))
	    ,NativeWindowKeyInfo(static_cast<__GacUIInternal<NativeWindowKeyInfo>::InternalObjectType*>((__GacUIInternal<GuiKeyEventArgs>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiKeyEventArgs::~GuiKeyEventArgs()
	{
		delete __GacUIInternal<GuiKeyEventArgs>::GetInternalObject(*this);
	}
	
	rptr<GuiKeyEventArgs> GuiKeyEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	GuiKeyEventArgs GuiKeyEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	rptr<GuiKeyEventArgs> GuiKeyEventArgs::CreateRptr()
	{
		throw 0;
	}
	
	GuiKeyEventArgs GuiKeyEventArgs::Create()
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiKeyEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiKeyEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiKeyEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiKeyEventArgs::GuiGraphicsEvent_of_GuiKeyEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs::~GuiGraphicsEvent_of_GuiKeyEventArgs()
	{
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEvent_of_GuiKeyEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiKeyEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiKeyEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::Execute(GuiKeyEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEvent_of_GuiKeyEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiKeyEventArgs::GetAssociatedComposition()
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiKeyEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiKeyEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> value)
	{
		throw 0;
	}
	

/***********************************************************************
NativeWindowMouseInfo
***********************************************************************/

	template<>
	class __GacUIInternal<NativeWindowMouseInfo>
	{
	public:
		typedef NativeWindowMouseInfo WrappedObjectType;
		typedef vl::presentation::NativeWindowMouseInfo InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	NativeWindowMouseInfo::NativeWindowMouseInfo(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	NativeWindowMouseInfo::~NativeWindowMouseInfo()
	{
		delete __GacUIInternal<NativeWindowMouseInfo>::GetInternalObject(*this);
	}
	
	bool NativeWindowMouseInfo::get_ctrl()
	{
		throw 0;
	}
	
	void NativeWindowMouseInfo::set_ctrl(bool value)
	{
		throw 0;
	}
	bool NativeWindowMouseInfo::get_shift()
	{
		throw 0;
	}
	
	void NativeWindowMouseInfo::set_shift(bool value)
	{
		throw 0;
	}
	bool NativeWindowMouseInfo::get_left()
	{
		throw 0;
	}
	
	void NativeWindowMouseInfo::set_left(bool value)
	{
		throw 0;
	}
	bool NativeWindowMouseInfo::get_middle()
	{
		throw 0;
	}
	
	void NativeWindowMouseInfo::set_middle(bool value)
	{
		throw 0;
	}
	bool NativeWindowMouseInfo::get_right()
	{
		throw 0;
	}
	
	void NativeWindowMouseInfo::set_right(bool value)
	{
		throw 0;
	}
	signed __int32 NativeWindowMouseInfo::get_x()
	{
		throw 0;
	}
	
	void NativeWindowMouseInfo::set_x(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 NativeWindowMouseInfo::get_y()
	{
		throw 0;
	}
	
	void NativeWindowMouseInfo::set_y(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 NativeWindowMouseInfo::get_wheel()
	{
		throw 0;
	}
	
	void NativeWindowMouseInfo::set_wheel(signed __int32 value)
	{
		throw 0;
	}

/***********************************************************************
GuiMouseEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiMouseEventArgs>
	{
	public:
		typedef GuiMouseEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiMouseEventArgs InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiMouseEventArgs::GuiMouseEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiEventArgs(static_cast<__GacUIInternal<GuiEventArgs>::InternalObjectType*>((__GacUIInternal<GuiMouseEventArgs>::InternalObjectType*)__internal_object_reference_input))
	    ,NativeWindowMouseInfo(static_cast<__GacUIInternal<NativeWindowMouseInfo>::InternalObjectType*>((__GacUIInternal<GuiMouseEventArgs>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMouseEventArgs::~GuiMouseEventArgs()
	{
		delete __GacUIInternal<GuiMouseEventArgs>::GetInternalObject(*this);
	}
	
	rptr<GuiMouseEventArgs> GuiMouseEventArgs::CreateRptr(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	GuiMouseEventArgs GuiMouseEventArgs::Create(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	rptr<GuiMouseEventArgs> GuiMouseEventArgs::CreateRptr()
	{
		throw 0;
	}
	
	GuiMouseEventArgs GuiMouseEventArgs::Create()
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiMouseEventArgs
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiMouseEventArgs WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiMouseEventArgs> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiMouseEventArgs::GuiGraphicsEvent_of_GuiMouseEventArgs(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs::~GuiGraphicsEvent_of_GuiMouseEventArgs()
	{
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEvent_of_GuiMouseEventArgs::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiMouseEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiMouseEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> handler)
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::Execute(GuiMouseEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEvent_of_GuiMouseEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiMouseEventArgs::GetAssociatedComposition()
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler>
	{
	public:
		typedef GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEvent<vl::presentation::elements::GuiMouseEventArgs>::IHandler InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::IHandler(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::~IHandler()
	{
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiMouseEventArgs& argument)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEventReceiver
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsEventReceiver>
	{
	public:
		typedef GuiGraphicsEventReceiver WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsEventReceiver InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsEventReceiver::GuiGraphicsEventReceiver(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsEventReceiver::~GuiGraphicsEventReceiver()
	{
	}
	
	rptr<GuiGraphicsEventReceiver> GuiGraphicsEventReceiver::CreateRptr(rptr<GuiGraphicsComposition> _sender)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEventReceiver> GuiGraphicsEventReceiver::operator=(rptr<GuiGraphicsEventReceiver> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEventReceiver::GetAssociatedComposition()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_leftButtonDown()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_leftButtonUp()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_leftButtonDoubleClick()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_middleButtonDown()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_middleButtonUp()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_middleButtonDoubleClick()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_rightButtonDown()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_rightButtonUp()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_rightButtonDoubleClick()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_horizontalWheel()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_verticalWheel()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::on_mouseMove()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::on_mouseEnter()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::on_mouseLeave()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::on_previewKey()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::on_keyDown()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::on_keyUp()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::on_systemKeyDown()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::on_systemKeyUp()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiCharEventArgs GuiGraphicsEventReceiver::on_previewCharInput()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiCharEventArgs GuiGraphicsEventReceiver::on_charInput()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::on_gotFocus()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::on_lostFocus()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::on_caretNotify()
	{
		throw 0;
	}
	

/***********************************************************************
NodeRootProviderBase
***********************************************************************/

	template<>
	class __GacUIInternal<NodeRootProviderBase>
	{
	public:
		typedef NodeRootProviderBase WrappedObjectType;
		typedef vl::presentation::controls::tree::NodeRootProviderBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	NodeRootProviderBase::NodeRootProviderBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INodeRootProvider(static_cast<__GacUIInternal<INodeRootProvider>::InternalObjectType*>((__GacUIInternal<NodeRootProviderBase>::InternalObjectType*)__internal_object_reference_input))
	    ,INodeProviderCallback(static_cast<__GacUIInternal<INodeProviderCallback>::InternalObjectType*>((__GacUIInternal<NodeRootProviderBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	NodeRootProviderBase::~NodeRootProviderBase()
	{
	}
	
	rptr<NodeRootProviderBase> NodeRootProviderBase::CreateRptr()
	{
		throw 0;
	}
	
	bool NodeRootProviderBase::CanGetNodeByVisibleIndex()
	{
		throw 0;
	}
	
	rptr<INodeProvider> NodeRootProviderBase::GetNodeByVisibleIndex(signed __int32 index)
	{
		throw 0;
	}
	
	bool NodeRootProviderBase::AttachCallback(rptr<INodeProviderCallback> value)
	{
		throw 0;
	}
	
	bool NodeRootProviderBase::DetachCallback(rptr<INodeProviderCallback> value)
	{
		throw 0;
	}
	
	rptr<IDescriptable> NodeRootProviderBase::RequestView(const GacString& identifier)
	{
		throw 0;
	}
	
	void NodeRootProviderBase::ReleaseView(rptr<IDescriptable> view)
	{
		throw 0;
	}
	
	rptr<NodeRootProviderBase> NodeRootProviderBase::operator=(rptr<NodeRootProviderBase> value)
	{
		throw 0;
	}
	

/***********************************************************************
MemoryNodeRootProvider
***********************************************************************/

	template<>
	class __GacUIInternal<MemoryNodeRootProvider>
	{
	public:
		typedef MemoryNodeRootProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::MemoryNodeRootProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	MemoryNodeRootProvider::MemoryNodeRootProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,MemoryNodeProvider(static_cast<__GacUIInternal<MemoryNodeProvider>::InternalObjectType*>((__GacUIInternal<MemoryNodeRootProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,NodeRootProviderBase(static_cast<__GacUIInternal<NodeRootProviderBase>::InternalObjectType*>((__GacUIInternal<MemoryNodeRootProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	MemoryNodeRootProvider::~MemoryNodeRootProvider()
	{
	}
	
	rptr<MemoryNodeRootProvider> MemoryNodeRootProvider::CreateRptr()
	{
		throw 0;
	}
	
	rptr<INodeProvider> MemoryNodeRootProvider::GetRootNode()
	{
		throw 0;
	}
	
	rptr<MemoryNodeRootProvider> MemoryNodeRootProvider::operator=(rptr<MemoryNodeRootProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Point
***********************************************************************/

	template<>
	class __GacUIInternal<Point>
	{
	public:
		typedef Point WrappedObjectType;
		typedef vl::presentation::Point InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Point::Point(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Point::~Point()
	{
		delete __GacUIInternal<Point>::GetInternalObject(*this);
	}
	
	rptr<Point> Point::CreateRptr(signed __int32 _x, signed __int32 _y)
	{
		throw 0;
	}
	
	Point Point::Create(signed __int32 _x, signed __int32 _y)
	{
		throw 0;
	}
	
	rptr<Point> Point::CreateRptr()
	{
		throw 0;
	}
	
	Point Point::Create()
	{
		throw 0;
	}
	
	bool Point::operator==(Point point)
	{
		throw 0;
	}
	
	bool Point::operator!=(Point point)
	{
		throw 0;
	}
	
	signed __int32 Point::get_x()
	{
		throw 0;
	}
	
	void Point::set_x(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 Point::get_y()
	{
		throw 0;
	}
	
	void Point::set_y(signed __int32 value)
	{
		throw 0;
	}

/***********************************************************************
INativeControllerListener
***********************************************************************/

	template<>
	class __GacUIInternal<INativeControllerListener>
	{
	public:
		typedef INativeControllerListener WrappedObjectType;
		typedef vl::presentation::INativeControllerListener InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeControllerListener::INativeControllerListener(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeControllerListener::~INativeControllerListener()
	{
	}
	
	rptr<INativeControllerListener> INativeControllerListener::CreateRptr()
	{
		throw 0;
	}
	
	void INativeControllerListener::LeftButtonDown(Point position)
	{
		throw 0;
	}
	
	void INativeControllerListener::LeftButtonUp(Point position)
	{
		throw 0;
	}
	
	void INativeControllerListener::RightButtonDown(Point position)
	{
		throw 0;
	}
	
	void INativeControllerListener::RightButtonUp(Point position)
	{
		throw 0;
	}
	
	void INativeControllerListener::MouseMoving(Point position)
	{
		throw 0;
	}
	
	void INativeControllerListener::GlobalTimer()
	{
		throw 0;
	}
	
	void INativeControllerListener::ClipboardUpdated()
	{
		throw 0;
	}
	
	void INativeControllerListener::NativeWindowCreated(rptr<INativeWindow> window)
	{
		throw 0;
	}
	
	void INativeControllerListener::NativeWindowDestroying(rptr<INativeWindow> window)
	{
		throw 0;
	}
	
	rptr<INativeControllerListener> INativeControllerListener::operator=(rptr<INativeControllerListener> value)
	{
		throw 0;
	}
	

/***********************************************************************
INativeCallbackService
***********************************************************************/

	template<>
	class __GacUIInternal<INativeCallbackService>
	{
	public:
		typedef INativeCallbackService WrappedObjectType;
		typedef vl::presentation::INativeCallbackService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeCallbackService::INativeCallbackService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeCallbackService::~INativeCallbackService()
	{
	}
	
	bool INativeCallbackService::InstallListener(rptr<INativeControllerListener> listener)
	{
		throw 0;
	}
	
	bool INativeCallbackService::UninstallListener(rptr<INativeControllerListener> listener)
	{
		throw 0;
	}
	
	rptr<INativeCallbackService> INativeCallbackService::operator=(rptr<INativeCallbackService> value)
	{
		throw 0;
	}
	

/***********************************************************************
INativeWindowService
***********************************************************************/

	template<>
	class __GacUIInternal<INativeWindowService>
	{
	public:
		typedef INativeWindowService WrappedObjectType;
		typedef vl::presentation::INativeWindowService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeWindowService::INativeWindowService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeWindowService::~INativeWindowService()
	{
	}
	
	rptr<INativeWindow> INativeWindowService::CreateNativeWindow()
	{
		throw 0;
	}
	
	void INativeWindowService::DestroyNativeWindow(rptr<INativeWindow> window)
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindowService::GetWindow(Point location)
	{
		throw 0;
	}
	
	void INativeWindowService::Run(rptr<INativeWindow> window)
	{
		throw 0;
	}
	
	rptr<INativeWindowService> INativeWindowService::operator=(rptr<INativeWindowService> value)
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindowService::GetMainWindow()
	{
		throw 0;
	}
	

/***********************************************************************
Size
***********************************************************************/

	template<>
	class __GacUIInternal<Size>
	{
	public:
		typedef Size WrappedObjectType;
		typedef vl::presentation::Size InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Size::Size(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Size::~Size()
	{
		delete __GacUIInternal<Size>::GetInternalObject(*this);
	}
	
	rptr<Size> Size::CreateRptr(signed __int32 _x, signed __int32 _y)
	{
		throw 0;
	}
	
	Size Size::Create(signed __int32 _x, signed __int32 _y)
	{
		throw 0;
	}
	
	rptr<Size> Size::CreateRptr()
	{
		throw 0;
	}
	
	Size Size::Create()
	{
		throw 0;
	}
	
	bool Size::operator==(Size size)
	{
		throw 0;
	}
	
	bool Size::operator!=(Size size)
	{
		throw 0;
	}
	
	signed __int32 Size::get_x()
	{
		throw 0;
	}
	
	void Size::set_x(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 Size::get_y()
	{
		throw 0;
	}
	
	void Size::set_y(signed __int32 value)
	{
		throw 0;
	}

/***********************************************************************
GuiPolygonElement
***********************************************************************/

	template<>
	class __GacUIInternal<GuiPolygonElement>
	{
	public:
		typedef GuiPolygonElement WrappedObjectType;
		typedef vl::presentation::elements::GuiPolygonElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiPolygonElement::GuiPolygonElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiPolygonElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiPolygonElement::~GuiPolygonElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> GuiPolygonElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiPolygonElement::GetRenderer()
	{
		throw 0;
	}
	
	void GuiPolygonElement::SetPoints(Point* p, signed __int32 count)
	{
		throw 0;
	}
	
	rptr<GuiPolygonElement> GuiPolygonElement::operator=(rptr<GuiPolygonElement> value)
	{
		throw 0;
	}
	
	rptr<GuiPolygonElement> GuiPolygonElement::Create()
	{
		throw 0;
	}
	
	Size GuiPolygonElement::GetSize()
	{
		throw 0;
	}
	
	void GuiPolygonElement::SetSize(Size value)
	{
		throw 0;
	}
	
	Point* GuiPolygonElement::GetPoints()
	{
		throw 0;
	}
	
	signed __int32 GuiPolygonElement::GetPointCount()
	{
		throw 0;
	}
	
	Color GuiPolygonElement::GetBorderColor()
	{
		throw 0;
	}
	
	void GuiPolygonElement::SetBorderColor(Color value)
	{
		throw 0;
	}
	
	Color GuiPolygonElement::GetBackgroundColor()
	{
		throw 0;
	}
	
	void GuiPolygonElement::SetBackgroundColor(Color value)
	{
		throw 0;
	}
	
	GacString GuiPolygonElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
INativeImageFrame
***********************************************************************/

	template<>
	class __GacUIInternal<INativeImageFrame>
	{
	public:
		typedef INativeImageFrame WrappedObjectType;
		typedef vl::presentation::INativeImageFrame InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeImageFrame::INativeImageFrame(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeImageFrame::~INativeImageFrame()
	{
	}
	
	bool INativeImageFrame::SetCache(void* key, sptr<INativeImageFrameCache> cache)
	{
		throw 0;
	}
	
	sptr<INativeImageFrameCache> INativeImageFrame::GetCache(void* key)
	{
		throw 0;
	}
	
	sptr<INativeImageFrameCache> INativeImageFrame::RemoveCache(void* key)
	{
		throw 0;
	}
	
	rptr<INativeImageFrame> INativeImageFrame::operator=(rptr<INativeImageFrame> value)
	{
		throw 0;
	}
	
	rptr<INativeImage> INativeImageFrame::GetImage()
	{
		throw 0;
	}
	
	Size INativeImageFrame::GetSize()
	{
		throw 0;
	}
	

/***********************************************************************
Rect
***********************************************************************/

	template<>
	class __GacUIInternal<Rect>
	{
	public:
		typedef Rect WrappedObjectType;
		typedef vl::presentation::Rect InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Rect::Rect(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Rect::~Rect()
	{
		delete __GacUIInternal<Rect>::GetInternalObject(*this);
	}
	
	rptr<Rect> Rect::CreateRptr(Point p, Size s)
	{
		throw 0;
	}
	
	Rect Rect::Create(Point p, Size s)
	{
		throw 0;
	}
	
	rptr<Rect> Rect::CreateRptr(signed __int32 _x1, signed __int32 _y1, signed __int32 _x2, signed __int32 _y2)
	{
		throw 0;
	}
	
	Rect Rect::Create(signed __int32 _x1, signed __int32 _y1, signed __int32 _x2, signed __int32 _y2)
	{
		throw 0;
	}
	
	rptr<Rect> Rect::CreateRptr()
	{
		throw 0;
	}
	
	Rect Rect::Create()
	{
		throw 0;
	}
	
	bool Rect::operator==(Rect rect)
	{
		throw 0;
	}
	
	bool Rect::operator!=(Rect rect)
	{
		throw 0;
	}
	
	Point Rect::LeftTop()
	{
		throw 0;
	}
	
	Point Rect::RightBottom()
	{
		throw 0;
	}
	
	signed __int32 Rect::Left()
	{
		throw 0;
	}
	
	signed __int32 Rect::Right()
	{
		throw 0;
	}
	
	signed __int32 Rect::Width()
	{
		throw 0;
	}
	
	signed __int32 Rect::Top()
	{
		throw 0;
	}
	
	signed __int32 Rect::Bottom()
	{
		throw 0;
	}
	
	signed __int32 Rect::Height()
	{
		throw 0;
	}
	
	void Rect::Expand(Size s)
	{
		throw 0;
	}
	
	void Rect::Expand(signed __int32 x, signed __int32 y)
	{
		throw 0;
	}
	
	void Rect::Move(Size s)
	{
		throw 0;
	}
	
	void Rect::Move(signed __int32 x, signed __int32 y)
	{
		throw 0;
	}
	
	bool Rect::Contains(Point p)
	{
		throw 0;
	}
	
	Size Rect::GetSize()
	{
		throw 0;
	}
	
	signed __int32 Rect::get_x1()
	{
		throw 0;
	}
	
	void Rect::set_x1(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 Rect::get_y1()
	{
		throw 0;
	}
	
	void Rect::set_y1(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 Rect::get_x2()
	{
		throw 0;
	}
	
	void Rect::set_x2(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 Rect::get_y2()
	{
		throw 0;
	}
	
	void Rect::set_y2(signed __int32 value)
	{
		throw 0;
	}

/***********************************************************************
IGuiGraphicsRenderTarget
***********************************************************************/

	template<>
	class __GacUIInternal<IGuiGraphicsRenderTarget>
	{
	public:
		typedef IGuiGraphicsRenderTarget WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsRenderTarget InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IGuiGraphicsRenderTarget::IGuiGraphicsRenderTarget(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IGuiGraphicsRenderTarget::~IGuiGraphicsRenderTarget()
	{
	}
	
	void IGuiGraphicsRenderTarget::StartRendering()
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderTarget::StopRendering()
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderTarget::PushClipper(Rect clipper)
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderTarget::PopClipper()
	{
		throw 0;
	}
	
	bool IGuiGraphicsRenderTarget::IsClipperCoverWholeTarget()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> IGuiGraphicsRenderTarget::operator=(rptr<IGuiGraphicsRenderTarget> value)
	{
		throw 0;
	}
	
	Rect IGuiGraphicsRenderTarget::GetClipper()
	{
		throw 0;
	}
	

/***********************************************************************
CharMeasurer
***********************************************************************/

	template<>
	class __GacUIInternal<CharMeasurer>
	{
	public:
		typedef CharMeasurer WrappedObjectType;
		typedef vl::presentation::elements::text::CharMeasurer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	CharMeasurer::CharMeasurer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<CharMeasurer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	CharMeasurer::~CharMeasurer()
	{
	}
	
	signed __int32 CharMeasurer::MeasureWidth(wchar_t character)
	{
		throw 0;
	}
	
	rptr<CharMeasurer> CharMeasurer::operator=(rptr<CharMeasurer> value)
	{
		throw 0;
	}
	
	void CharMeasurer::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value)
	{
		throw 0;
	}
	
	signed __int32 CharMeasurer::GetRowHeight()
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsResourceManager
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsResourceManager>
	{
	public:
		typedef GuiGraphicsResourceManager WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsResourceManager InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsResourceManager::GuiGraphicsResourceManager(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsResourceManager::~GuiGraphicsResourceManager()
	{
	}
	
	bool GuiGraphicsResourceManager::RegisterElementFactory(rptr<IGuiGraphicsElementFactory> factory)
	{
		throw 0;
	}
	
	bool GuiGraphicsResourceManager::RegisterRendererFactory(const GacString& elementTypeName, rptr<IGuiGraphicsRendererFactory> factory)
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsElementFactory> GuiGraphicsResourceManager::GetElementFactory(const GacString& elementTypeName)
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRendererFactory> GuiGraphicsResourceManager::GetRendererFactory(const GacString& elementTypeName)
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> GuiGraphicsResourceManager::GetRenderTarget(rptr<INativeWindow> window)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsResourceManager> GuiGraphicsResourceManager::operator=(rptr<GuiGraphicsResourceManager> value)
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsRenderer
***********************************************************************/

	template<>
	class __GacUIInternal<IGuiGraphicsRenderer>
	{
	public:
		typedef IGuiGraphicsRenderer WrappedObjectType;
		typedef vl::presentation::elements::IGuiGraphicsRenderer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IGuiGraphicsRenderer::IGuiGraphicsRenderer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IGuiGraphicsRenderer::~IGuiGraphicsRenderer()
	{
	}
	
	void IGuiGraphicsRenderer::Initialize(rptr<IGuiGraphicsElement> _element)
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderer::Finalize()
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderer::Render(Rect bounds)
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderer::OnElementStateChanged()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> IGuiGraphicsRenderer::operator=(rptr<IGuiGraphicsRenderer> value)
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderer::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> _renderTarget)
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRendererFactory> IGuiGraphicsRenderer::GetFactory()
	{
		throw 0;
	}
	
	Size IGuiGraphicsRenderer::GetMinSize()
	{
		throw 0;
	}
	

/***********************************************************************
INativeScreen
***********************************************************************/

	template<>
	class __GacUIInternal<INativeScreen>
	{
	public:
		typedef INativeScreen WrappedObjectType;
		typedef vl::presentation::INativeScreen InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeScreen::INativeScreen(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeScreen::~INativeScreen()
	{
	}
	
	bool INativeScreen::IsPrimary()
	{
		throw 0;
	}
	
	rptr<INativeScreen> INativeScreen::operator=(rptr<INativeScreen> value)
	{
		throw 0;
	}
	
	Rect INativeScreen::GetBounds()
	{
		throw 0;
	}
	
	Rect INativeScreen::GetClientBounds()
	{
		throw 0;
	}
	
	GacString INativeScreen::GetName()
	{
		throw 0;
	}
	

/***********************************************************************
INativeScreenService
***********************************************************************/

	template<>
	class __GacUIInternal<INativeScreenService>
	{
	public:
		typedef INativeScreenService WrappedObjectType;
		typedef vl::presentation::INativeScreenService InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeScreenService::INativeScreenService(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeScreenService::~INativeScreenService()
	{
	}
	
	rptr<INativeScreen> INativeScreenService::GetScreen(rptr<INativeWindow> window)
	{
		throw 0;
	}
	
	rptr<INativeScreen> INativeScreenService::GetScreen(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<INativeScreenService> INativeScreenService::operator=(rptr<INativeScreenService> value)
	{
		throw 0;
	}
	
	signed __int32 INativeScreenService::GetScreenCount()
	{
		throw 0;
	}
	

/***********************************************************************
INativeController
***********************************************************************/

	template<>
	class __GacUIInternal<INativeController>
	{
	public:
		typedef INativeController WrappedObjectType;
		typedef vl::presentation::INativeController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeController::INativeController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeController::~INativeController()
	{
	}
	
	rptr<INativeCallbackService> INativeController::CallbackService()
	{
		throw 0;
	}
	
	rptr<INativeResourceService> INativeController::ResourceService()
	{
		throw 0;
	}
	
	rptr<INativeAsyncService> INativeController::AsyncService()
	{
		throw 0;
	}
	
	rptr<INativeClipboardService> INativeController::ClipboardService()
	{
		throw 0;
	}
	
	rptr<INativeImageService> INativeController::ImageService()
	{
		throw 0;
	}
	
	rptr<INativeScreenService> INativeController::ScreenService()
	{
		throw 0;
	}
	
	rptr<INativeWindowService> INativeController::WindowService()
	{
		throw 0;
	}
	
	rptr<INativeInputService> INativeController::InputService()
	{
		throw 0;
	}
	
	rptr<INativeController> INativeController::operator=(rptr<INativeController> value)
	{
		throw 0;
	}
	

/***********************************************************************
INativeWindowListener
***********************************************************************/

	template<>
	class __GacUIInternal<INativeWindowListener>
	{
	public:
		typedef INativeWindowListener WrappedObjectType;
		typedef vl::presentation::INativeWindowListener InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeWindowListener::INativeWindowListener(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeWindowListener::~INativeWindowListener()
	{
	}
	
	rptr<INativeWindowListener> INativeWindowListener::CreateRptr()
	{
		throw 0;
	}
	
	void INativeWindowListener::Moving(Rect& bounds, bool fixSizeOnly)
	{
		throw 0;
	}
	
	void INativeWindowListener::Moved()
	{
		throw 0;
	}
	
	void INativeWindowListener::Enabled()
	{
		throw 0;
	}
	
	void INativeWindowListener::Disabled()
	{
		throw 0;
	}
	
	void INativeWindowListener::GotFocus()
	{
		throw 0;
	}
	
	void INativeWindowListener::LostFocus()
	{
		throw 0;
	}
	
	void INativeWindowListener::Activated()
	{
		throw 0;
	}
	
	void INativeWindowListener::Deactivated()
	{
		throw 0;
	}
	
	void INativeWindowListener::Opened()
	{
		throw 0;
	}
	
	void INativeWindowListener::Closing(bool& cancel)
	{
		throw 0;
	}
	
	void INativeWindowListener::Closed()
	{
		throw 0;
	}
	
	void INativeWindowListener::Paint()
	{
		throw 0;
	}
	
	void INativeWindowListener::Destroying()
	{
		throw 0;
	}
	
	void INativeWindowListener::Destroyed()
	{
		throw 0;
	}
	
	void INativeWindowListener::LeftButtonDown(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::LeftButtonUp(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::LeftButtonDoubleClick(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::RightButtonDown(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::RightButtonUp(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::RightButtonDoubleClick(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::MiddleButtonDown(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::MiddleButtonUp(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::MiddleButtonDoubleClick(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::HorizontalWheel(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::VerticalWheel(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::MouseMoving(const NativeWindowMouseInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::MouseEntered()
	{
		throw 0;
	}
	
	void INativeWindowListener::MouseLeaved()
	{
		throw 0;
	}
	
	void INativeWindowListener::KeyDown(const NativeWindowKeyInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::KeyUp(const NativeWindowKeyInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::SysKeyDown(const NativeWindowKeyInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::SysKeyUp(const NativeWindowKeyInfo& info)
	{
		throw 0;
	}
	
	void INativeWindowListener::Char(const NativeWindowCharInfo& info)
	{
		throw 0;
	}
	
	rptr<INativeWindowListener> INativeWindowListener::operator=(rptr<INativeWindowListener> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsHost
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsHost>
	{
	public:
		typedef GuiGraphicsHost WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsHost InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsHost::GuiGraphicsHost(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INativeWindowListener(static_cast<__GacUIInternal<INativeWindowListener>::InternalObjectType*>((__GacUIInternal<GuiGraphicsHost>::InternalObjectType*)__internal_object_reference_input))
	    ,INativeControllerListener(static_cast<__GacUIInternal<INativeControllerListener>::InternalObjectType*>((__GacUIInternal<GuiGraphicsHost>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsHost::~GuiGraphicsHost()
	{
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsHost::CreateRptr()
	{
		throw 0;
	}
	
	void GuiGraphicsHost::Render()
	{
		throw 0;
	}
	
	bool GuiGraphicsHost::SetFocus(rptr<GuiGraphicsComposition> composition)
	{
		throw 0;
	}
	
	void GuiGraphicsHost::SetCaretPoint(Point value, rptr<GuiGraphicsComposition> referenceComposition)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsHost::operator=(rptr<GuiGraphicsHost> value)
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiGraphicsHost::GetNativeWindow()
	{
		throw 0;
	}
	
	void GuiGraphicsHost::SetNativeWindow(rptr<INativeWindow> _nativeWindow)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsHost::GetMainComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsHost::GetFocusedComposition()
	{
		throw 0;
	}
	
	Point GuiGraphicsHost::GetCaretPoint()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsAnimationManager> GuiGraphicsHost::GetAnimationManager()
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsComposition>
	{
	public:
		typedef GuiGraphicsComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsComposition::GuiGraphicsComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiGraphicsComposition::~GuiGraphicsComposition()
	{
	}
	
	rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> GuiGraphicsComposition::Children()
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::AddChild(rptr<GuiGraphicsComposition> child)
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::InsertChild(signed __int32 index, rptr<GuiGraphicsComposition> child)
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::RemoveChild(rptr<GuiGraphicsComposition> child)
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::MoveChild(rptr<GuiGraphicsComposition> child, signed __int32 newIndex)
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::Render(Size offset)
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::HasEventReceiver()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsComposition::FindComposition(Point location)
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::IsSizeAffectParent()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsComposition::operator=(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsComposition::GetParent()
	{
		throw 0;
	}
	
	sptr<IGuiGraphicsElement> GuiGraphicsComposition::GetOwnedElement()
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::SetOwnedElement(sptr<IGuiGraphicsElement> element)
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::GetVisible()
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::SetVisible(bool value)
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: MinSizeLimitation GuiGraphicsComposition::GetMinSizeLimitation()
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::SetMinSizeLimitation(GuiGraphicsComposition :: MinSizeLimitation value)
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> GuiGraphicsComposition::GetRenderTarget()
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEventReceiver> GuiGraphicsComposition::GetEventReceiver()
	{
		throw 0;
	}
	
	Rect GuiGraphicsComposition::GetGlobalBounds()
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiGraphicsComposition::GetAssociatedControl()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsComposition::GetAssociatedHost()
	{
		throw 0;
	}
	
	rptr<INativeCursor> GuiGraphicsComposition::GetAssociatedCursor()
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::SetAssociatedCursor(rptr<INativeCursor> cursor)
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiGraphicsComposition::GetRelatedControl()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsComposition::GetRelatedGraphicsHost()
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiGraphicsComposition::GetRelatedControlHost()
	{
		throw 0;
	}
	
	rptr<INativeCursor> GuiGraphicsComposition::GetRelatedCursor()
	{
		throw 0;
	}
	
	Margin GuiGraphicsComposition::GetMargin()
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::SetMargin(Margin value)
	{
		throw 0;
	}
	
	Margin GuiGraphicsComposition::GetInternalMargin()
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::SetInternalMargin(Margin value)
	{
		throw 0;
	}
	
	Size GuiGraphicsComposition::GetPreferredMinSize()
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::SetPreferredMinSize(Size value)
	{
		throw 0;
	}
	
	Rect GuiGraphicsComposition::GetClientArea()
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiGraphicsComposition::GetAffectionFromParent()
	{
		throw 0;
	}
	
	Size GuiGraphicsComposition::GetMinPreferredClientSize()
	{
		throw 0;
	}
	
	Rect GuiGraphicsComposition::GetPreferredBounds()
	{
		throw 0;
	}
	
	Rect GuiGraphicsComposition::GetBounds()
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsSite
***********************************************************************/

	template<>
	class __GacUIInternal<GuiGraphicsSite>
	{
	public:
		typedef GuiGraphicsSite WrappedObjectType;
		typedef vl::presentation::elements::GuiGraphicsSite InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiGraphicsSite::GuiGraphicsSite(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsComposition(static_cast<__GacUIInternal<GuiGraphicsComposition>::InternalObjectType*>((__GacUIInternal<GuiGraphicsSite>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiGraphicsSite::~GuiGraphicsSite()
	{
	}
	
	rptr<GuiGraphicsSite> GuiGraphicsSite::CreateRptr()
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiGraphicsSite::GetAffectionFromParent()
	{
		throw 0;
	}
	
	bool GuiGraphicsSite::IsSizeAffectParent()
	{
		throw 0;
	}
	
	Size GuiGraphicsSite::GetMinPreferredClientSize()
	{
		throw 0;
	}
	
	Rect GuiGraphicsSite::GetPreferredBounds()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsSite> GuiGraphicsSite::operator=(rptr<GuiGraphicsSite> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiBoundsComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiBoundsComposition>
	{
	public:
		typedef GuiBoundsComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiBoundsComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiBoundsComposition::GuiBoundsComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiBoundsComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiBoundsComposition::~GuiBoundsComposition()
	{
	}
	
	rptr<GuiBoundsComposition> GuiBoundsComposition::CreateRptr()
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiBoundsComposition::GetAffectionFromParent()
	{
		throw 0;
	}
	
	Rect GuiBoundsComposition::GetPreferredBounds()
	{
		throw 0;
	}
	
	Rect GuiBoundsComposition::GetBounds()
	{
		throw 0;
	}
	
	void GuiBoundsComposition::ClearAlignmentToParent()
	{
		throw 0;
	}
	
	bool GuiBoundsComposition::IsAlignedToParent()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiBoundsComposition::operator=(rptr<GuiBoundsComposition> value)
	{
		throw 0;
	}
	
	void GuiBoundsComposition::SetBounds(Rect value)
	{
		throw 0;
	}
	
	Margin GuiBoundsComposition::GetAlignmentToParent()
	{
		throw 0;
	}
	
	void GuiBoundsComposition::SetAlignmentToParent(Margin value)
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiBoundsComposition::on_BoundsChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiCellComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiCellComposition>
	{
	public:
		typedef GuiCellComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiCellComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiCellComposition::GuiCellComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiCellComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiCellComposition::~GuiCellComposition()
	{
	}
	
	rptr<GuiCellComposition> GuiCellComposition::CreateRptr()
	{
		throw 0;
	}
	
	bool GuiCellComposition::SetSite(signed __int32 _row, signed __int32 _column, signed __int32 _rowSpan, signed __int32 _columnSpan)
	{
		throw 0;
	}
	
	Rect GuiCellComposition::GetBounds()
	{
		throw 0;
	}
	
	rptr<GuiCellComposition> GuiCellComposition::operator=(rptr<GuiCellComposition> value)
	{
		throw 0;
	}
	
	rptr<GuiTableComposition> GuiCellComposition::GetTableParent()
	{
		throw 0;
	}
	
	signed __int32 GuiCellComposition::GetRow()
	{
		throw 0;
	}
	
	signed __int32 GuiCellComposition::GetRowSpan()
	{
		throw 0;
	}
	
	signed __int32 GuiCellComposition::GetColumn()
	{
		throw 0;
	}
	
	signed __int32 GuiCellComposition::GetColumnSpan()
	{
		throw 0;
	}
	

/***********************************************************************
GuiControl
***********************************************************************/

	template<>
	class __GacUIInternal<GuiControl>
	{
	public:
		typedef GuiControl WrappedObjectType;
		typedef vl::presentation::controls::GuiControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiControl::GuiControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiControl::~GuiControl()
	{
	}
	
	rptr<GuiControl> GuiControl::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiControl::GetChild(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<IDescriptable> GuiControl::QueryService(const GacString& identifier)
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiControl::operator=(rptr<GuiControl> value)
	{
		throw 0;
	}
	
	GuiEventArgs GuiControl::GetNotifyEventArguments()
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> GuiControl::GetStyleController()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiControl::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::GetContainerComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::GetFocusableComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEventReceiver> GuiControl::GetEventReceiver()
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiControl::GetParent()
	{
		throw 0;
	}
	
	signed __int32 GuiControl::GetChildrenCount()
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiControl::GetRelatedControlHost()
	{
		throw 0;
	}
	
	bool GuiControl::GetVisuallyEnabled()
	{
		throw 0;
	}
	
	bool GuiControl::GetEnabled()
	{
		throw 0;
	}
	
	void GuiControl::SetEnabled(bool value)
	{
		throw 0;
	}
	
	bool GuiControl::GetVisible()
	{
		throw 0;
	}
	
	void GuiControl::SetVisible(bool value)
	{
		throw 0;
	}
	
	const GacString& GuiControl::GetText()
	{
		throw 0;
	}
	
	void GuiControl::SetText(const GacString& value)
	{
		throw 0;
	}
	
	const FontProperties& GuiControl::GetFont()
	{
		throw 0;
	}
	
	void GuiControl::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::on_VisibleChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::on_EnabledChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::on_VisuallyEnabledChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::on_TextChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::on_FontChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiControl :: IStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiControl :: IStyleController>
	{
	public:
		typedef GuiControl :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiControl::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiControl::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiControl::IStyleController::~IStyleController()
	{
	}
	
	rptr<GuiControl :: IStyleController> GuiControl::IStyleController::operator=(rptr<GuiControl :: IStyleController> value)
	{
		throw 0;
	}
	
	void GuiControl::IStyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void GuiControl::IStyleController::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void GuiControl::IStyleController::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void GuiControl::IStyleController::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiControl::IStyleController::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::IStyleController::GetContainerComposition()
	{
		throw 0;
	}
	

/***********************************************************************
GuiControl :: IStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<GuiControl :: IStyleProvider>
	{
	public:
		typedef GuiControl :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiControl::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiControl::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiControl :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiControl::IStyleProvider::~IStyleProvider()
	{
	}
	
	void GuiControl::IStyleProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller)
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleProvider> GuiControl::IStyleProvider::operator=(rptr<GuiControl :: IStyleProvider> value)
	{
		throw 0;
	}
	
	void GuiControl::IStyleProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void GuiControl::IStyleProvider::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void GuiControl::IStyleProvider::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void GuiControl::IStyleProvider::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiButton
***********************************************************************/

	template<>
	class __GacUIInternal<GuiButton>
	{
	public:
		typedef GuiButton WrappedObjectType;
		typedef vl::presentation::controls::GuiButton InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiButton::GuiButton(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiButton>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiButton::~GuiButton()
	{
	}
	
	rptr<GuiButton> GuiButton::CreateRptr(rptr<GuiButton :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	rptr<GuiButton> GuiButton::operator=(rptr<GuiButton> value)
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiButton::on_Clicked()
	{
		throw 0;
	}
	

/***********************************************************************
GuiButton :: IStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiButton :: IStyleController>
	{
	public:
		typedef GuiButton :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiButton::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiButton::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiButton :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiButton::IStyleController::~IStyleController()
	{
	}
	
	void GuiButton::IStyleController::Transfer(GuiButton :: ControlState value)
	{
		throw 0;
	}
	
	rptr<GuiButton :: IStyleController> GuiButton::IStyleController::operator=(rptr<GuiButton :: IStyleController> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiControlHost
***********************************************************************/

	template<>
	class __GacUIInternal<GuiControlHost>
	{
	public:
		typedef GuiControlHost WrappedObjectType;
		typedef vl::presentation::controls::GuiControlHost InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiControlHost::GuiControlHost(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiControlHost>::InternalObjectType*)__internal_object_reference_input))
	    ,INativeWindowListener(static_cast<__GacUIInternal<INativeWindowListener>::InternalObjectType*>((__GacUIInternal<GuiControlHost>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiControlHost::~GuiControlHost()
	{
	}
	
	rptr<GuiControlHost> GuiControlHost::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	void GuiControlHost::Render()
	{
		throw 0;
	}
	
	bool GuiControlHost::GetEnabled()
	{
		throw 0;
	}
	
	void GuiControlHost::SetEnabled(bool value)
	{
		throw 0;
	}
	
	void GuiControlHost::SetFocused()
	{
		throw 0;
	}
	
	void GuiControlHost::SetActivated()
	{
		throw 0;
	}
	
	bool GuiControlHost::AddComponent(rptr<GuiComponent> component)
	{
		throw 0;
	}
	
	bool GuiControlHost::RemoveComponent(rptr<GuiComponent> component)
	{
		throw 0;
	}
	
	bool GuiControlHost::ContainsComponent(rptr<GuiComponent> component)
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiControlHost::GetRelatedControlHost()
	{
		throw 0;
	}
	
	const GacString& GuiControlHost::GetText()
	{
		throw 0;
	}
	
	void GuiControlHost::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void GuiControlHost::Show()
	{
		throw 0;
	}
	
	void GuiControlHost::ShowDeactivated()
	{
		throw 0;
	}
	
	void GuiControlHost::ShowRestored()
	{
		throw 0;
	}
	
	void GuiControlHost::ShowMaximized()
	{
		throw 0;
	}
	
	void GuiControlHost::ShowMinimized()
	{
		throw 0;
	}
	
	void GuiControlHost::Hide()
	{
		throw 0;
	}
	
	void GuiControlHost::Close()
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiControlHost::operator=(rptr<GuiControlHost> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsHost> GuiControlHost::GetGraphicsHost()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiControlHost::GetMainComposition()
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiControlHost::GetNativeWindow()
	{
		throw 0;
	}
	
	void GuiControlHost::SetNativeWindow(rptr<INativeWindow> window)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetFocused()
	{
		throw 0;
	}
	
	bool GuiControlHost::GetActivated()
	{
		throw 0;
	}
	
	bool GuiControlHost::GetShowInTaskBar()
	{
		throw 0;
	}
	
	void GuiControlHost::SetShowInTaskBar(bool value)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetEnabledActivate()
	{
		throw 0;
	}
	
	void GuiControlHost::SetEnabledActivate(bool value)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetMaximizedBox()
	{
		throw 0;
	}
	
	void GuiControlHost::SetMaximizedBox(bool visible)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetMinimizedBox()
	{
		throw 0;
	}
	
	void GuiControlHost::SetMinimizedBox(bool visible)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetBorder()
	{
		throw 0;
	}
	
	void GuiControlHost::SetBorder(bool visible)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetSizeBox()
	{
		throw 0;
	}
	
	void GuiControlHost::SetSizeBox(bool visible)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetIconVisible()
	{
		throw 0;
	}
	
	void GuiControlHost::SetIconVisible(bool visible)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetTitleBar()
	{
		throw 0;
	}
	
	void GuiControlHost::SetTitleBar(bool visible)
	{
		throw 0;
	}
	
	bool GuiControlHost::GetTopMost()
	{
		throw 0;
	}
	
	void GuiControlHost::SetTopMost(bool topmost)
	{
		throw 0;
	}
	
	Size GuiControlHost::GetClientSize()
	{
		throw 0;
	}
	
	void GuiControlHost::SetClientSize(Size value)
	{
		throw 0;
	}
	
	Rect GuiControlHost::GetBounds()
	{
		throw 0;
	}
	
	void GuiControlHost::SetBounds(Rect value)
	{
		throw 0;
	}
	
	rptr<INativeScreen> GuiControlHost::GetRelatedScreen()
	{
		throw 0;
	}
	
	bool GuiControlHost::GetOpening()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::on_WindowGotFocus()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::on_WindowLostFocus()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::on_WindowActivated()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::on_WindowDeactivated()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::on_WindowOpened()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiRequestEventArgs GuiControlHost::on_WindowClosing()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::on_WindowClosed()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::on_WindowDestroying()
	{
		throw 0;
	}
	

/***********************************************************************
GuiMenuBar
***********************************************************************/

	template<>
	class __GacUIInternal<GuiMenuBar>
	{
	public:
		typedef GuiMenuBar WrappedObjectType;
		typedef vl::presentation::controls::GuiMenuBar InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiMenuBar::GuiMenuBar(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiMenuBar>::InternalObjectType*)__internal_object_reference_input))
	    ,IGuiMenuService(static_cast<__GacUIInternal<IGuiMenuService>::InternalObjectType*>((__GacUIInternal<GuiMenuBar>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMenuBar::~GuiMenuBar()
	{
	}
	
	rptr<GuiMenuBar> GuiMenuBar::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	rptr<IDescriptable> GuiMenuBar::QueryService(const GacString& identifier)
	{
		throw 0;
	}
	
	rptr<GuiMenuBar> GuiMenuBar::operator=(rptr<GuiMenuBar> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiMenuButton
***********************************************************************/

	template<>
	class __GacUIInternal<GuiMenuButton>
	{
	public:
		typedef GuiMenuButton WrappedObjectType;
		typedef vl::presentation::controls::GuiMenuButton InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiMenuButton::GuiMenuButton(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton(static_cast<__GacUIInternal<GuiButton>::InternalObjectType*>((__GacUIInternal<GuiMenuButton>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMenuButton::~GuiMenuButton()
	{
	}
	
	rptr<GuiMenuButton> GuiMenuButton::CreateRptr(rptr<GuiMenuButton :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	bool GuiMenuButton::IsSubMenuExists()
	{
		throw 0;
	}
	
	void GuiMenuButton::CreateSubMenu(rptr<GuiControl :: IStyleController> subMenuStyleController)
	{
		throw 0;
	}
	
	void GuiMenuButton::DestroySubMenu()
	{
		throw 0;
	}
	
	rptr<GuiMenuButton> GuiMenuButton::operator=(rptr<GuiMenuButton> value)
	{
		throw 0;
	}
	
	rptr<GuiMenu> GuiMenuButton::GetSubMenu()
	{
		throw 0;
	}
	
	bool GuiMenuButton::GetSubMenuOpening()
	{
		throw 0;
	}
	
	void GuiMenuButton::SetSubMenuOpening(bool value)
	{
		throw 0;
	}
	
	Size GuiMenuButton::GetPreferredMenuClientSize()
	{
		throw 0;
	}
	
	void GuiMenuButton::SetPreferredMenuClientSize(Size value)
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiMenuButton::on_SubMenuOpeningChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiMenuButton :: IStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiMenuButton :: IStyleController>
	{
	public:
		typedef GuiMenuButton :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiMenuButton::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiMenuButton::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton :: IStyleController(static_cast<__GacUIInternal<GuiButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiMenuButton :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMenuButton::IStyleController::~IStyleController()
	{
	}
	
	rptr<GuiControl :: IStyleController> GuiMenuButton::IStyleController::CreateSubMenuStyleController()
	{
		throw 0;
	}
	
	rptr<GuiMenuButton :: IStyleController> GuiMenuButton::IStyleController::operator=(rptr<GuiMenuButton :: IStyleController> value)
	{
		throw 0;
	}
	
	void GuiMenuButton::IStyleController::SetSubMenuExisting(bool value)
	{
		throw 0;
	}
	
	void GuiMenuButton::IStyleController::SetSubMenuOpening(bool value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiPartialViewComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiPartialViewComposition>
	{
	public:
		typedef GuiPartialViewComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiPartialViewComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiPartialViewComposition::GuiPartialViewComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiPartialViewComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiPartialViewComposition::~GuiPartialViewComposition()
	{
	}
	
	rptr<GuiPartialViewComposition> GuiPartialViewComposition::CreateRptr()
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiPartialViewComposition::GetAffectionFromParent()
	{
		throw 0;
	}
	
	bool GuiPartialViewComposition::IsSizeAffectParent()
	{
		throw 0;
	}
	
	Rect GuiPartialViewComposition::GetBounds()
	{
		throw 0;
	}
	
	rptr<GuiPartialViewComposition> GuiPartialViewComposition::operator=(rptr<GuiPartialViewComposition> value)
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetWidthRatio()
	{
		throw 0;
	}
	
	void GuiPartialViewComposition::SetWidthRatio(double value)
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetWidthPageSize()
	{
		throw 0;
	}
	
	void GuiPartialViewComposition::SetWidthPageSize(double value)
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetHeightRatio()
	{
		throw 0;
	}
	
	void GuiPartialViewComposition::SetHeightRatio(double value)
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetHeightPageSize()
	{
		throw 0;
	}
	
	void GuiPartialViewComposition::SetHeightPageSize(double value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiScroll
***********************************************************************/

	template<>
	class __GacUIInternal<GuiScroll>
	{
	public:
		typedef GuiScroll WrappedObjectType;
		typedef vl::presentation::controls::GuiScroll InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiScroll::GuiScroll(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiScroll>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScroll::~GuiScroll()
	{
	}
	
	rptr<GuiScroll> GuiScroll::CreateRptr(rptr<GuiScroll :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScroll::operator=(rptr<GuiScroll> value)
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetTotalSize()
	{
		throw 0;
	}
	
	void GuiScroll::SetTotalSize(signed __int32 value)
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetPageSize()
	{
		throw 0;
	}
	
	void GuiScroll::SetPageSize(signed __int32 value)
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetPosition()
	{
		throw 0;
	}
	
	void GuiScroll::SetPosition(signed __int32 value)
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetSmallMove()
	{
		throw 0;
	}
	
	void GuiScroll::SetSmallMove(signed __int32 value)
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetBigMove()
	{
		throw 0;
	}
	
	void GuiScroll::SetBigMove(signed __int32 value)
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetMinPosition()
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetMaxPosition()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::on_TotalSizeChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::on_PageSizeChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::on_PositionChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::on_SmallMoveChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::on_BigMoveChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiScroll :: ICommandExecutor
***********************************************************************/

	template<>
	class __GacUIInternal<GuiScroll :: ICommandExecutor>
	{
	public:
		typedef GuiScroll :: ICommandExecutor WrappedObjectType;
		typedef vl::presentation::controls::GuiScroll::ICommandExecutor InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiScroll::ICommandExecutor::ICommandExecutor(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiScroll :: ICommandExecutor>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScroll::ICommandExecutor::~ICommandExecutor()
	{
	}
	
	void GuiScroll::ICommandExecutor::SmallDecrease()
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::SmallIncrease()
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::BigDecrease()
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::BigIncrease()
	{
		throw 0;
	}
	
	rptr<GuiScroll :: ICommandExecutor> GuiScroll::ICommandExecutor::operator=(rptr<GuiScroll :: ICommandExecutor> value)
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::SetTotalSize(signed __int32 value)
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::SetPageSize(signed __int32 value)
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::SetPosition(signed __int32 value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiScroll :: IStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiScroll :: IStyleController>
	{
	public:
		typedef GuiScroll :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiScroll::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiScroll::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiScroll :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScroll::IStyleController::~IStyleController()
	{
	}
	
	rptr<GuiScroll :: IStyleController> GuiScroll::IStyleController::operator=(rptr<GuiScroll :: IStyleController> value)
	{
		throw 0;
	}
	
	void GuiScroll::IStyleController::SetCommandExecutor(rptr<GuiScroll :: ICommandExecutor> value)
	{
		throw 0;
	}
	
	void GuiScroll::IStyleController::SetTotalSize(signed __int32 value)
	{
		throw 0;
	}
	
	void GuiScroll::IStyleController::SetPageSize(signed __int32 value)
	{
		throw 0;
	}
	
	void GuiScroll::IStyleController::SetPosition(signed __int32 value)
	{
		throw 0;
	}
	

/***********************************************************************
CommonScrollStyle
***********************************************************************/

	template<>
	class __GacUIInternal<CommonScrollStyle>
	{
	public:
		typedef CommonScrollStyle WrappedObjectType;
		typedef vl::presentation::common_styles::CommonScrollStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	CommonScrollStyle::CommonScrollStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScroll :: IStyleController(static_cast<__GacUIInternal<GuiScroll :: IStyleController>::InternalObjectType*>((__GacUIInternal<CommonScrollStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	CommonScrollStyle::~CommonScrollStyle()
	{
	}
	
	rptr<GuiBoundsComposition> CommonScrollStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> CommonScrollStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetCommandExecutor(rptr<GuiScroll :: ICommandExecutor> value)
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetTotalSize(signed __int32 value)
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetPageSize(signed __int32 value)
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetPosition(signed __int32 value)
	{
		throw 0;
	}
	
	rptr<CommonScrollStyle> CommonScrollStyle::operator=(rptr<CommonScrollStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
CommonTrackStyle
***********************************************************************/

	template<>
	class __GacUIInternal<CommonTrackStyle>
	{
	public:
		typedef CommonTrackStyle WrappedObjectType;
		typedef vl::presentation::common_styles::CommonTrackStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	CommonTrackStyle::CommonTrackStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScroll :: IStyleController(static_cast<__GacUIInternal<GuiScroll :: IStyleController>::InternalObjectType*>((__GacUIInternal<CommonTrackStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	CommonTrackStyle::~CommonTrackStyle()
	{
	}
	
	rptr<GuiBoundsComposition> CommonTrackStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> CommonTrackStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetCommandExecutor(rptr<GuiScroll :: ICommandExecutor> value)
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetTotalSize(signed __int32 value)
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetPageSize(signed __int32 value)
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetPosition(signed __int32 value)
	{
		throw 0;
	}
	
	rptr<CommonTrackStyle> CommonTrackStyle::operator=(rptr<CommonTrackStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollView
***********************************************************************/

	template<>
	class __GacUIInternal<GuiScrollView>
	{
	public:
		typedef GuiScrollView WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiScrollView::GuiScrollView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiScrollView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollView::~GuiScrollView()
	{
	}
	
	void GuiScrollView::CalculateView()
	{
		throw 0;
	}
	
	rptr<GuiScrollView> GuiScrollView::operator=(rptr<GuiScrollView> value)
	{
		throw 0;
	}
	
	Size GuiScrollView::GetViewSize()
	{
		throw 0;
	}
	
	Rect GuiScrollView::GetViewBounds()
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScrollView::GetHorizontalScroll()
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScrollView::GetVerticalScroll()
	{
		throw 0;
	}
	
	bool GuiScrollView::GetHorizontalAlwaysVisible()
	{
		throw 0;
	}
	
	void GuiScrollView::SetHorizontalAlwaysVisible(bool value)
	{
		throw 0;
	}
	
	bool GuiScrollView::GetVerticalAlwaysVisible()
	{
		throw 0;
	}
	
	void GuiScrollView::SetVerticalAlwaysVisible(bool value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollView :: IStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<GuiScrollView :: IStyleProvider>
	{
	public:
		typedef GuiScrollView :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollView::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiScrollView::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleProvider(static_cast<__GacUIInternal<GuiControl :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiScrollView :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollView::IStyleProvider::~IStyleProvider()
	{
	}
	
	rptr<GuiScroll :: IStyleController> GuiScrollView::IStyleProvider::CreateHorizontalScrollStyle()
	{
		throw 0;
	}
	
	rptr<GuiScroll :: IStyleController> GuiScrollView::IStyleProvider::CreateVerticalScrollStyle()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiScrollView::IStyleProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		throw 0;
	}
	
	rptr<GuiScrollView :: IStyleProvider> GuiScrollView::IStyleProvider::operator=(rptr<GuiScrollView :: IStyleProvider> value)
	{
		throw 0;
	}
	
	signed __int32 GuiScrollView::IStyleProvider::GetDefaultScrollSize()
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollView :: StyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiScrollView :: StyleController>
	{
	public:
		typedef GuiScrollView :: StyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollView::StyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiScrollView::StyleController::StyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiScrollView :: StyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollView::StyleController::~StyleController()
	{
	}
	
	rptr<GuiScrollView :: StyleController> GuiScrollView::StyleController::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider)
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::AdjustView(Size fullSize)
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiScrollView::StyleController::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiScrollView::StyleController::GetContainerComposition()
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiScrollView :: StyleController> GuiScrollView::StyleController::operator=(rptr<GuiScrollView :: StyleController> value)
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetScrollView(rptr<GuiScrollView> _scrollView)
	{
		throw 0;
	}
	
	rptr<GuiScrollView :: IStyleProvider> GuiScrollView::StyleController::GetStyleProvider()
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScrollView::StyleController::GetHorizontalScroll()
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScrollView::StyleController::GetVerticalScroll()
	{
		throw 0;
	}
	
	rptr<GuiTableComposition> GuiScrollView::StyleController::GetInternalTableComposition()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiScrollView::StyleController::GetInternalContainerComposition()
	{
		throw 0;
	}
	
	bool GuiScrollView::StyleController::GetHorizontalAlwaysVisible()
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetHorizontalAlwaysVisible(bool value)
	{
		throw 0;
	}
	
	bool GuiScrollView::StyleController::GetVerticalAlwaysVisible()
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetVerticalAlwaysVisible(bool value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl>
	{
	public:
		typedef GuiListControl WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::GuiListControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView(static_cast<__GacUIInternal<GuiScrollView>::InternalObjectType*>((__GacUIInternal<GuiListControl>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::~GuiListControl()
	{
	}
	
	rptr<GuiListControl> GuiListControl::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider, bool acceptFocus)
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiListControl::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value)
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemArranger> GuiListControl::SetArranger(sptr<GuiListControl :: IItemArranger> value)
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemCoordinateTransformer> GuiListControl::SetCoordinateTransformer(sptr<GuiListControl :: IItemCoordinateTransformer> value)
	{
		throw 0;
	}
	
	rptr<GuiListControl> GuiListControl::operator=(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemProvider> GuiListControl::GetItemProvider()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> GuiListControl::GetStyleProvider()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> GuiListControl::GetArranger()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> GuiListControl::GetCoordinateTransformer()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiListControl::on_StyleProviderChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiListControl::on_ArrangerChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiListControl::on_CoordinateTransformerChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemArrangerCallback
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl :: IItemArrangerCallback>
	{
	public:
		typedef GuiListControl :: IItemArrangerCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemArrangerCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::IItemArrangerCallback::IItemArrangerCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemArrangerCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemArrangerCallback::~IItemArrangerCallback()
	{
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemArrangerCallback::RequestItem(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::ReleaseItem(rptr<GuiListControl :: IItemStyleController> style)
	{
		throw 0;
	}
	
	Size GuiListControl::IItemArrangerCallback::GetStylePreferredSize(rptr<GuiListControl :: IItemStyleController> style)
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::SetStyleAlignmentToParent(rptr<GuiListControl :: IItemStyleController> style, Margin margin)
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::SetStyleBounds(rptr<GuiListControl :: IItemStyleController> style, Rect bounds)
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::OnTotalSizeChanged()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArrangerCallback> GuiListControl::IItemArrangerCallback::operator=(rptr<GuiListControl :: IItemArrangerCallback> value)
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::SetViewLocation(Point value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiListControl::IItemArrangerCallback::GetContainerComposition()
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemCoordinateTransformer
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl :: IItemCoordinateTransformer>
	{
	public:
		typedef GuiListControl :: IItemCoordinateTransformer WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemCoordinateTransformer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::IItemCoordinateTransformer::IItemCoordinateTransformer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemCoordinateTransformer::~IItemCoordinateTransformer()
	{
	}
	
	Size GuiListControl::IItemCoordinateTransformer::RealSizeToVirtualSize(Size size)
	{
		throw 0;
	}
	
	Size GuiListControl::IItemCoordinateTransformer::VirtualSizeToRealSize(Size size)
	{
		throw 0;
	}
	
	Point GuiListControl::IItemCoordinateTransformer::RealPointToVirtualPoint(Size realFullSize, Point point)
	{
		throw 0;
	}
	
	Point GuiListControl::IItemCoordinateTransformer::VirtualPointToRealPoint(Size realFullSize, Point point)
	{
		throw 0;
	}
	
	Rect GuiListControl::IItemCoordinateTransformer::RealRectToVirtualRect(Size realFullSize, Rect rect)
	{
		throw 0;
	}
	
	Rect GuiListControl::IItemCoordinateTransformer::VirtualRectToRealRect(Size realFullSize, Rect rect)
	{
		throw 0;
	}
	
	Margin GuiListControl::IItemCoordinateTransformer::RealMarginToVirtualMargin(Margin margin)
	{
		throw 0;
	}
	
	Margin GuiListControl::IItemCoordinateTransformer::VirtualMarginToRealMargin(Margin margin)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> GuiListControl::IItemCoordinateTransformer::operator=(rptr<GuiListControl :: IItemCoordinateTransformer> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemPrimaryTextView
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl :: IItemPrimaryTextView>
	{
	public:
		typedef GuiListControl :: IItemPrimaryTextView WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemPrimaryTextView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::IItemPrimaryTextView::IItemPrimaryTextView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemPrimaryTextView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemPrimaryTextView::~IItemPrimaryTextView()
	{
	}
	
	GacString GuiListControl::IItemPrimaryTextView::GetPrimaryTextViewText(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	bool GuiListControl::IItemPrimaryTextView::ContainsPrimaryText(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemPrimaryTextView> GuiListControl::IItemPrimaryTextView::operator=(rptr<GuiListControl :: IItemPrimaryTextView> value)
	{
		throw 0;
	}
	
	wchar_t* GuiListControl::IItemPrimaryTextView::get_Identifier()
	{
		throw 0;
	}
	
	void GuiListControl::IItemPrimaryTextView::set_Identifier(wchar_t* value)
	{
		throw 0;
	}

/***********************************************************************
GuiListControl :: IItemProvider
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl :: IItemProvider>
	{
	public:
		typedef GuiListControl :: IItemProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::IItemProvider::IItemProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemProvider::~IItemProvider()
	{
	}
	
	bool GuiListControl::IItemProvider::AttachCallback(rptr<GuiListControl :: IItemProviderCallback> value)
	{
		throw 0;
	}
	
	bool GuiListControl::IItemProvider::DetachCallback(rptr<GuiListControl :: IItemProviderCallback> value)
	{
		throw 0;
	}
	
	signed __int32 GuiListControl::IItemProvider::Count()
	{
		throw 0;
	}
	
	rptr<IDescriptable> GuiListControl::IItemProvider::RequestView(const GacString& identifier)
	{
		throw 0;
	}
	
	void GuiListControl::IItemProvider::ReleaseView(rptr<IDescriptable> view)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemProvider> GuiListControl::IItemProvider::operator=(rptr<GuiListControl :: IItemProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemProviderCallback
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl :: IItemProviderCallback>
	{
	public:
		typedef GuiListControl :: IItemProviderCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemProviderCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::IItemProviderCallback::IItemProviderCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemProviderCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemProviderCallback::~IItemProviderCallback()
	{
	}
	
	void GuiListControl::IItemProviderCallback::OnAttached(rptr<GuiListControl :: IItemProvider> provider)
	{
		throw 0;
	}
	
	void GuiListControl::IItemProviderCallback::OnItemModified(signed __int32 start, signed __int32 count, signed __int32 newCount)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemProviderCallback> GuiListControl::IItemProviderCallback::operator=(rptr<GuiListControl :: IItemProviderCallback> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemArranger
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl :: IItemArranger>
	{
	public:
		typedef GuiListControl :: IItemArranger WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::IItemArranger::IItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemProviderCallback(static_cast<__GacUIInternal<GuiListControl :: IItemProviderCallback>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemArranger::~IItemArranger()
	{
	}
	
	void GuiListControl::IItemArranger::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void GuiListControl::IItemArranger::DetachListControl()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemArranger::GetVisibleStyle(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	signed __int32 GuiListControl::IItemArranger::GetVisibleIndex(rptr<GuiListControl :: IItemStyleController> style)
	{
		throw 0;
	}
	
	void GuiListControl::IItemArranger::OnViewChanged(Rect bounds)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> GuiListControl::IItemArranger::operator=(rptr<GuiListControl :: IItemArranger> value)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArrangerCallback> GuiListControl::IItemArranger::GetCallback()
	{
		throw 0;
	}
	
	void GuiListControl::IItemArranger::SetCallback(rptr<GuiListControl :: IItemArrangerCallback> value)
	{
		throw 0;
	}
	
	Size GuiListControl::IItemArranger::GetTotalSize()
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl :: IItemStyleController>
	{
	public:
		typedef GuiListControl :: IItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::IItemStyleController::IItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemStyleController::~IItemStyleController()
	{
	}
	
	bool GuiListControl::IItemStyleController::IsCacheable()
	{
		throw 0;
	}
	
	bool GuiListControl::IItemStyleController::IsInstalled()
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleController::OnInstalled()
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleController::OnUninstalled()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemStyleController::operator=(rptr<GuiListControl :: IItemStyleController> value)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> GuiListControl::IItemStyleController::GetStyleProvider()
	{
		throw 0;
	}
	
	signed __int32 GuiListControl::IItemStyleController::GetItemStyleId()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiListControl::IItemStyleController::GetBoundsComposition()
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListControl :: IItemStyleProvider>
	{
	public:
		typedef GuiListControl :: IItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiListControl::IItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListControl::IItemStyleProvider::IItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiListControl :: IItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListControl::IItemStyleProvider::~IItemStyleProvider()
	{
	}
	
	void GuiListControl::IItemStyleProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleProvider::DetachListControl()
	{
		throw 0;
	}
	
	signed __int32 GuiListControl::IItemStyleProvider::GetItemStyleId(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemStyleProvider::CreateItemStyle(signed __int32 styleId)
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style)
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> GuiListControl::IItemStyleProvider::operator=(rptr<GuiListControl :: IItemStyleProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
AxisAlignedItemCoordinateTransformer
***********************************************************************/

	template<>
	class __GacUIInternal<AxisAlignedItemCoordinateTransformer>
	{
	public:
		typedef AxisAlignedItemCoordinateTransformer WrappedObjectType;
		typedef vl::presentation::controls::list::AxisAlignedItemCoordinateTransformer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	AxisAlignedItemCoordinateTransformer::AxisAlignedItemCoordinateTransformer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemCoordinateTransformer(static_cast<__GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::InternalObjectType*>((__GacUIInternal<AxisAlignedItemCoordinateTransformer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	AxisAlignedItemCoordinateTransformer::~AxisAlignedItemCoordinateTransformer()
	{
	}
	
	rptr<AxisAlignedItemCoordinateTransformer> AxisAlignedItemCoordinateTransformer::CreateRptr(AxisAlignedItemCoordinateTransformer :: Alignment _alignment)
	{
		throw 0;
	}
	
	Size AxisAlignedItemCoordinateTransformer::RealSizeToVirtualSize(Size size)
	{
		throw 0;
	}
	
	Size AxisAlignedItemCoordinateTransformer::VirtualSizeToRealSize(Size size)
	{
		throw 0;
	}
	
	Point AxisAlignedItemCoordinateTransformer::RealPointToVirtualPoint(Size realFullSize, Point point)
	{
		throw 0;
	}
	
	Point AxisAlignedItemCoordinateTransformer::VirtualPointToRealPoint(Size realFullSize, Point point)
	{
		throw 0;
	}
	
	Rect AxisAlignedItemCoordinateTransformer::RealRectToVirtualRect(Size realFullSize, Rect rect)
	{
		throw 0;
	}
	
	Rect AxisAlignedItemCoordinateTransformer::VirtualRectToRealRect(Size realFullSize, Rect rect)
	{
		throw 0;
	}
	
	Margin AxisAlignedItemCoordinateTransformer::RealMarginToVirtualMargin(Margin margin)
	{
		throw 0;
	}
	
	Margin AxisAlignedItemCoordinateTransformer::VirtualMarginToRealMargin(Margin margin)
	{
		throw 0;
	}
	
	rptr<AxisAlignedItemCoordinateTransformer> AxisAlignedItemCoordinateTransformer::operator=(rptr<AxisAlignedItemCoordinateTransformer> value)
	{
		throw 0;
	}
	
	AxisAlignedItemCoordinateTransformer :: Alignment AxisAlignedItemCoordinateTransformer::GetAlignment()
	{
		throw 0;
	}
	

/***********************************************************************
DefaultItemCoordinateTransformer
***********************************************************************/

	template<>
	class __GacUIInternal<DefaultItemCoordinateTransformer>
	{
	public:
		typedef DefaultItemCoordinateTransformer WrappedObjectType;
		typedef vl::presentation::controls::list::DefaultItemCoordinateTransformer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	DefaultItemCoordinateTransformer::DefaultItemCoordinateTransformer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemCoordinateTransformer(static_cast<__GacUIInternal<GuiListControl :: IItemCoordinateTransformer>::InternalObjectType*>((__GacUIInternal<DefaultItemCoordinateTransformer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	DefaultItemCoordinateTransformer::~DefaultItemCoordinateTransformer()
	{
	}
	
	rptr<DefaultItemCoordinateTransformer> DefaultItemCoordinateTransformer::CreateRptr()
	{
		throw 0;
	}
	
	Size DefaultItemCoordinateTransformer::RealSizeToVirtualSize(Size size)
	{
		throw 0;
	}
	
	Size DefaultItemCoordinateTransformer::VirtualSizeToRealSize(Size size)
	{
		throw 0;
	}
	
	Point DefaultItemCoordinateTransformer::RealPointToVirtualPoint(Size realFullSize, Point point)
	{
		throw 0;
	}
	
	Point DefaultItemCoordinateTransformer::VirtualPointToRealPoint(Size realFullSize, Point point)
	{
		throw 0;
	}
	
	Rect DefaultItemCoordinateTransformer::RealRectToVirtualRect(Size realFullSize, Rect rect)
	{
		throw 0;
	}
	
	Rect DefaultItemCoordinateTransformer::VirtualRectToRealRect(Size realFullSize, Rect rect)
	{
		throw 0;
	}
	
	Margin DefaultItemCoordinateTransformer::RealMarginToVirtualMargin(Margin margin)
	{
		throw 0;
	}
	
	Margin DefaultItemCoordinateTransformer::VirtualMarginToRealMargin(Margin margin)
	{
		throw 0;
	}
	
	rptr<DefaultItemCoordinateTransformer> DefaultItemCoordinateTransformer::operator=(rptr<DefaultItemCoordinateTransformer> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollContainer
***********************************************************************/

	template<>
	class __GacUIInternal<GuiScrollContainer>
	{
	public:
		typedef GuiScrollContainer WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollContainer InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiScrollContainer::GuiScrollContainer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView(static_cast<__GacUIInternal<GuiScrollView>::InternalObjectType*>((__GacUIInternal<GuiScrollContainer>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollContainer::~GuiScrollContainer()
	{
	}
	
	rptr<GuiScrollContainer> GuiScrollContainer::CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider)
	{
		throw 0;
	}
	
	rptr<GuiScrollContainer> GuiScrollContainer::operator=(rptr<GuiScrollContainer> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollContainer :: StyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiScrollContainer :: StyleController>
	{
	public:
		typedef GuiScrollContainer :: StyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiScrollContainer::StyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiScrollContainer::StyleController::StyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: StyleController(static_cast<__GacUIInternal<GuiScrollView :: StyleController>::InternalObjectType*>((__GacUIInternal<GuiScrollContainer :: StyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiScrollContainer::StyleController::~StyleController()
	{
	}
	
	rptr<GuiScrollContainer :: StyleController> GuiScrollContainer::StyleController::CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiScrollContainer::StyleController::GetContainerComposition()
	{
		throw 0;
	}
	
	void GuiScrollContainer::StyleController::MoveContainer(Point leftTop)
	{
		throw 0;
	}
	
	rptr<GuiScrollContainer :: StyleController> GuiScrollContainer::StyleController::operator=(rptr<GuiScrollContainer :: StyleController> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableButton
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSelectableButton>
	{
	public:
		typedef GuiSelectableButton WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableButton InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSelectableButton::GuiSelectableButton(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton(static_cast<__GacUIInternal<GuiButton>::InternalObjectType*>((__GacUIInternal<GuiSelectableButton>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableButton::~GuiSelectableButton()
	{
	}
	
	rptr<GuiSelectableButton> GuiSelectableButton::CreateRptr(rptr<GuiSelectableButton :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton> GuiSelectableButton::operator=(rptr<GuiSelectableButton> value)
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: GroupController> GuiSelectableButton::GetGroupController()
	{
		throw 0;
	}
	
	void GuiSelectableButton::SetGroupController(rptr<GuiSelectableButton :: GroupController> value)
	{
		throw 0;
	}
	
	bool GuiSelectableButton::GetAutoSelection()
	{
		throw 0;
	}
	
	void GuiSelectableButton::SetAutoSelection(bool value)
	{
		throw 0;
	}
	
	bool GuiSelectableButton::GetSelected()
	{
		throw 0;
	}
	
	void GuiSelectableButton::SetSelected(bool value)
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiSelectableButton::on_GroupControllerChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiSelectableButton::on_AutoSelectionChanged()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiSelectableButton::on_SelectedChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableButton :: GroupController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSelectableButton :: GroupController>
	{
	public:
		typedef GuiSelectableButton :: GroupController WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableButton::GroupController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSelectableButton::GroupController::GroupController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiComponent(static_cast<__GacUIInternal<GuiComponent>::InternalObjectType*>((__GacUIInternal<GuiSelectableButton :: GroupController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableButton::GroupController::~GroupController()
	{
	}
	
	void GuiSelectableButton::GroupController::Attach(rptr<GuiSelectableButton> button)
	{
		throw 0;
	}
	
	void GuiSelectableButton::GroupController::Detach(rptr<GuiSelectableButton> button)
	{
		throw 0;
	}
	
	void GuiSelectableButton::GroupController::OnSelectedChanged(rptr<GuiSelectableButton> button)
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: GroupController> GuiSelectableButton::GroupController::operator=(rptr<GuiSelectableButton :: GroupController> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableButton :: IStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSelectableButton :: IStyleController>
	{
	public:
		typedef GuiSelectableButton :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableButton::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSelectableButton::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton :: IStyleController(static_cast<__GacUIInternal<GuiButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableButton::IStyleController::~IStyleController()
	{
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiSelectableButton::IStyleController::operator=(rptr<GuiSelectableButton :: IStyleController> value)
	{
		throw 0;
	}
	
	void GuiSelectableButton::IStyleController::SetSelected(bool value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableButton :: MutexGroupController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSelectableButton :: MutexGroupController>
	{
	public:
		typedef GuiSelectableButton :: MutexGroupController WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableButton::MutexGroupController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSelectableButton::MutexGroupController::MutexGroupController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: GroupController(static_cast<__GacUIInternal<GuiSelectableButton :: GroupController>::InternalObjectType*>((__GacUIInternal<GuiSelectableButton :: MutexGroupController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableButton::MutexGroupController::~MutexGroupController()
	{
	}
	
	rptr<GuiSelectableButton :: MutexGroupController> GuiSelectableButton::MutexGroupController::CreateRptr()
	{
		throw 0;
	}
	
	void GuiSelectableButton::MutexGroupController::OnSelectedChanged(rptr<GuiSelectableButton> button)
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: MutexGroupController> GuiSelectableButton::MutexGroupController::operator=(rptr<GuiSelectableButton :: MutexGroupController> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableListControl
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSelectableListControl>
	{
	public:
		typedef GuiSelectableListControl WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableListControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSelectableListControl::GuiSelectableListControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl(static_cast<__GacUIInternal<GuiListControl>::InternalObjectType*>((__GacUIInternal<GuiSelectableListControl>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableListControl::~GuiSelectableListControl()
	{
	}
	
	rptr<GuiSelectableListControl> GuiSelectableListControl::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider)
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiSelectableListControl::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value)
	{
		throw 0;
	}
	
	bool GuiSelectableListControl::GetSelected(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	void GuiSelectableListControl::SetSelected(signed __int32 itemIndex, bool value)
	{
		throw 0;
	}
	
	void GuiSelectableListControl::ClearSelection()
	{
		throw 0;
	}
	
	rptr<GuiSelectableListControl> GuiSelectableListControl::operator=(rptr<GuiSelectableListControl> value)
	{
		throw 0;
	}
	
	bool GuiSelectableListControl::GetMultiSelect()
	{
		throw 0;
	}
	
	void GuiSelectableListControl::SetMultiSelect(bool value)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_int> GuiSelectableListControl::GetSelectedItems()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiSelectableListControl::on_SelectionChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableListControl :: IItemStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>
	{
	public:
		typedef GuiSelectableListControl :: IItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiSelectableListControl::IItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSelectableListControl::IItemStyleProvider::IItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemStyleProvider(static_cast<__GacUIInternal<GuiListControl :: IItemStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSelectableListControl::IItemStyleProvider::~IItemStyleProvider()
	{
	}
	
	void GuiSelectableListControl::IItemStyleProvider::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value)
	{
		throw 0;
	}
	
	rptr<GuiSelectableListControl :: IItemStyleProvider> GuiSelectableListControl::IItemStyleProvider::operator=(rptr<GuiSelectableListControl :: IItemStyleProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiListViewBase
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListViewBase>
	{
	public:
		typedef GuiListViewBase WrappedObjectType;
		typedef vl::presentation::controls::GuiListViewBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListViewBase::GuiListViewBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl(static_cast<__GacUIInternal<GuiSelectableListControl>::InternalObjectType*>((__GacUIInternal<GuiListViewBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListViewBase::~GuiListViewBase()
	{
	}
	
	rptr<GuiListViewBase> GuiListViewBase::CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider)
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiListViewBase::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value)
	{
		throw 0;
	}
	
	rptr<GuiListViewBase> GuiListViewBase::operator=(rptr<GuiListViewBase> value)
	{
		throw 0;
	}
	
	rptr<GuiListViewBase :: IStyleProvider> GuiListViewBase::GetListViewStyleProvider()
	{
		throw 0;
	}
	

/***********************************************************************
GuiListViewBase :: IStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListViewBase :: IStyleProvider>
	{
	public:
		typedef GuiListViewBase :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiListViewBase::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListViewBase::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: IStyleProvider(static_cast<__GacUIInternal<GuiScrollView :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiListViewBase :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListViewBase::IStyleProvider::~IStyleProvider()
	{
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiListViewBase::IStyleProvider::CreateItemBackground()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiListViewBase::IStyleProvider::CreateColumnStyle()
	{
		throw 0;
	}
	
	rptr<GuiListViewBase :: IStyleProvider> GuiListViewBase::IStyleProvider::operator=(rptr<GuiListViewBase :: IStyleProvider> value)
	{
		throw 0;
	}
	
	Color GuiListViewBase::IStyleProvider::GetPrimaryTextColor()
	{
		throw 0;
	}
	
	Color GuiListViewBase::IStyleProvider::GetSecondaryTextColor()
	{
		throw 0;
	}
	
	Color GuiListViewBase::IStyleProvider::GetItemSeparatorColor()
	{
		throw 0;
	}
	

/***********************************************************************
GuiSideAlignedComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSideAlignedComposition>
	{
	public:
		typedef GuiSideAlignedComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiSideAlignedComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSideAlignedComposition::GuiSideAlignedComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiSideAlignedComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSideAlignedComposition::~GuiSideAlignedComposition()
	{
	}
	
	rptr<GuiSideAlignedComposition> GuiSideAlignedComposition::CreateRptr()
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiSideAlignedComposition::GetAffectionFromParent()
	{
		throw 0;
	}
	
	bool GuiSideAlignedComposition::IsSizeAffectParent()
	{
		throw 0;
	}
	
	Rect GuiSideAlignedComposition::GetBounds()
	{
		throw 0;
	}
	
	rptr<GuiSideAlignedComposition> GuiSideAlignedComposition::operator=(rptr<GuiSideAlignedComposition> value)
	{
		throw 0;
	}
	
	GuiSideAlignedComposition :: Direction GuiSideAlignedComposition::GetDirection()
	{
		throw 0;
	}
	
	void GuiSideAlignedComposition::SetDirection(GuiSideAlignedComposition :: Direction value)
	{
		throw 0;
	}
	
	signed __int32 GuiSideAlignedComposition::GetMaxLength()
	{
		throw 0;
	}
	
	void GuiSideAlignedComposition::SetMaxLength(signed __int32 value)
	{
		throw 0;
	}
	
	double GuiSideAlignedComposition::GetMaxRatio()
	{
		throw 0;
	}
	
	void GuiSideAlignedComposition::SetMaxRatio(double value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiStackItemComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiStackItemComposition>
	{
	public:
		typedef GuiStackItemComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiStackItemComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiStackItemComposition::GuiStackItemComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiStackItemComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiStackItemComposition::~GuiStackItemComposition()
	{
	}
	
	rptr<GuiStackItemComposition> GuiStackItemComposition::CreateRptr()
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiStackItemComposition::GetAffectionFromParent()
	{
		throw 0;
	}
	
	bool GuiStackItemComposition::IsSizeAffectParent()
	{
		throw 0;
	}
	
	Rect GuiStackItemComposition::GetBounds()
	{
		throw 0;
	}
	
	rptr<GuiStackItemComposition> GuiStackItemComposition::operator=(rptr<GuiStackItemComposition> value)
	{
		throw 0;
	}
	
	void GuiStackItemComposition::SetBounds(Rect value)
	{
		throw 0;
	}
	
	Margin GuiStackItemComposition::GetExtraMargin()
	{
		throw 0;
	}
	
	void GuiStackItemComposition::SetExtraMargin(Margin value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTab
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTab>
	{
	public:
		typedef GuiTab WrappedObjectType;
		typedef vl::presentation::controls::GuiTab InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTab::GuiTab(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiTab>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTab::~GuiTab()
	{
	}
	
	rptr<GuiTab> GuiTab::CreateRptr(rptr<GuiTab :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	bool GuiTab::CreatePage(rptr<GuiTabPage> page, signed __int32 index)
	{
		throw 0;
	}
	
	rptr<GuiTabPage> GuiTab::CreatePage(signed __int32 index)
	{
		throw 0;
	}
	
	bool GuiTab::RemovePage(rptr<GuiTabPage> value)
	{
		throw 0;
	}
	
	bool GuiTab::MovePage(rptr<GuiTabPage> page, signed __int32 newIndex)
	{
		throw 0;
	}
	
	bool GuiTab::SetSelectedPage(rptr<GuiTabPage> value)
	{
		throw 0;
	}
	
	rptr<GuiTab> GuiTab::operator=(rptr<GuiTab> value)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiTabPage_raw_pointer> GuiTab::GetPages()
	{
		throw 0;
	}
	
	rptr<GuiTabPage> GuiTab::GetSelectedPage()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiTab::on_SelectedPageChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiTab :: ICommandExecutor
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTab :: ICommandExecutor>
	{
	public:
		typedef GuiTab :: ICommandExecutor WrappedObjectType;
		typedef vl::presentation::controls::GuiTab::ICommandExecutor InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTab::ICommandExecutor::ICommandExecutor(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiTab :: ICommandExecutor>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTab::ICommandExecutor::~ICommandExecutor()
	{
	}
	
	void GuiTab::ICommandExecutor::ShowTab(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<GuiTab :: ICommandExecutor> GuiTab::ICommandExecutor::operator=(rptr<GuiTab :: ICommandExecutor> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTab :: IStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTab :: IStyleController>
	{
	public:
		typedef GuiTab :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiTab::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTab::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiTab :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTab::IStyleController::~IStyleController()
	{
	}
	
	void GuiTab::IStyleController::InsertTab(signed __int32 index)
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::SetTabText(signed __int32 index, const GacString& value)
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::RemoveTab(signed __int32 index)
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::MoveTab(signed __int32 oldIndex, signed __int32 newIndex)
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> GuiTab::IStyleController::CreateTabPageStyleController()
	{
		throw 0;
	}
	
	rptr<GuiTab :: IStyleController> GuiTab::IStyleController::operator=(rptr<GuiTab :: IStyleController> value)
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::SetCommandExecutor(rptr<GuiTab :: ICommandExecutor> value)
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::SetSelectedTab(signed __int32 index)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTableComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTableComposition>
	{
	public:
		typedef GuiTableComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiTableComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTableComposition::GuiTableComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiBoundsComposition(static_cast<__GacUIInternal<GuiBoundsComposition>::InternalObjectType*>((__GacUIInternal<GuiTableComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTableComposition::~GuiTableComposition()
	{
	}
	
	rptr<GuiTableComposition> GuiTableComposition::CreateRptr()
	{
		throw 0;
	}
	
	bool GuiTableComposition::SetRowsAndColumns(signed __int32 _rows, signed __int32 _columns)
	{
		throw 0;
	}
	
	rptr<GuiCellComposition> GuiTableComposition::GetSitedCell(signed __int32 _row, signed __int32 _column)
	{
		throw 0;
	}
	
	GuiCellOption GuiTableComposition::GetRowOption(signed __int32 _row)
	{
		throw 0;
	}
	
	void GuiTableComposition::SetRowOption(signed __int32 _row, GuiCellOption option)
	{
		throw 0;
	}
	
	GuiCellOption GuiTableComposition::GetColumnOption(signed __int32 _column)
	{
		throw 0;
	}
	
	void GuiTableComposition::SetColumnOption(signed __int32 _column, GuiCellOption option)
	{
		throw 0;
	}
	
	void GuiTableComposition::UpdateCellBounds()
	{
		throw 0;
	}
	
	Size GuiTableComposition::GetMinPreferredClientSize()
	{
		throw 0;
	}
	
	Rect GuiTableComposition::GetBounds()
	{
		throw 0;
	}
	
	rptr<GuiTableComposition> GuiTableComposition::operator=(rptr<GuiTableComposition> value)
	{
		throw 0;
	}
	
	signed __int32 GuiTableComposition::GetRows()
	{
		throw 0;
	}
	
	signed __int32 GuiTableComposition::GetColumns()
	{
		throw 0;
	}
	
	signed __int32 GuiTableComposition::GetCellPadding()
	{
		throw 0;
	}
	
	void GuiTableComposition::SetCellPadding(signed __int32 value)
	{
		throw 0;
	}
	
	Rect GuiTableComposition::GetCellArea()
	{
		throw 0;
	}
	

/***********************************************************************
GuiWindow
***********************************************************************/

	template<>
	class __GacUIInternal<GuiWindow>
	{
	public:
		typedef GuiWindow WrappedObjectType;
		typedef vl::presentation::controls::GuiWindow InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiWindow::GuiWindow(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControlHost(static_cast<__GacUIInternal<GuiControlHost>::InternalObjectType*>((__GacUIInternal<GuiWindow>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiWindow::~GuiWindow()
	{
	}
	
	rptr<GuiWindow> GuiWindow::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	rptr<GuiWindow> GuiWindow::operator=(rptr<GuiWindow> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiPopup
***********************************************************************/

	template<>
	class __GacUIInternal<GuiPopup>
	{
	public:
		typedef GuiPopup WrappedObjectType;
		typedef vl::presentation::controls::GuiPopup InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiPopup::GuiPopup(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiWindow(static_cast<__GacUIInternal<GuiWindow>::InternalObjectType*>((__GacUIInternal<GuiPopup>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiPopup::~GuiPopup()
	{
	}
	
	rptr<GuiPopup> GuiPopup::CreateRptr(rptr<GuiControl :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	bool GuiPopup::IsClippedByScreen(Point location)
	{
		throw 0;
	}
	
	void GuiPopup::ShowPopup(rptr<GuiControl> control, bool preferredTopBottomSide)
	{
		throw 0;
	}
	
	void GuiPopup::ShowPopup(Point location)
	{
		throw 0;
	}
	
	rptr<GuiPopup> GuiPopup::operator=(rptr<GuiPopup> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiComboBoxBase
***********************************************************************/

	template<>
	class __GacUIInternal<GuiComboBoxBase>
	{
	public:
		typedef GuiComboBoxBase WrappedObjectType;
		typedef vl::presentation::controls::GuiComboBoxBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiComboBoxBase::GuiComboBoxBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton(static_cast<__GacUIInternal<GuiButton>::InternalObjectType*>((__GacUIInternal<GuiComboBoxBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiComboBoxBase::~GuiComboBoxBase()
	{
	}
	
	rptr<GuiComboBoxBase> GuiComboBoxBase::CreateRptr(rptr<GuiComboBoxBase :: IStyleController> _styleController)
	{
		throw 0;
	}
	
	void GuiComboBoxBase::ShowPopup()
	{
		throw 0;
	}
	
	rptr<GuiComboBoxBase> GuiComboBoxBase::operator=(rptr<GuiComboBoxBase> value)
	{
		throw 0;
	}
	
	rptr<GuiPopup> GuiComboBoxBase::GetPopup()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxBase::on_PopupOpened()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxBase::on_PopupClosed()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxBase::on_ItemSelecting()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxBase::on_ItemSelected()
	{
		throw 0;
	}
	

/***********************************************************************
GuiComboBoxBase :: ICommandExecutor
***********************************************************************/

	template<>
	class __GacUIInternal<GuiComboBoxBase :: ICommandExecutor>
	{
	public:
		typedef GuiComboBoxBase :: ICommandExecutor WrappedObjectType;
		typedef vl::presentation::controls::GuiComboBoxBase::ICommandExecutor InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiComboBoxBase::ICommandExecutor::ICommandExecutor(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiComboBoxBase :: ICommandExecutor>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiComboBoxBase::ICommandExecutor::~ICommandExecutor()
	{
	}
	
	void GuiComboBoxBase::ICommandExecutor::ShowPopup()
	{
		throw 0;
	}
	
	void GuiComboBoxBase::ICommandExecutor::SelectItem()
	{
		throw 0;
	}
	
	rptr<GuiComboBoxBase :: ICommandExecutor> GuiComboBoxBase::ICommandExecutor::operator=(rptr<GuiComboBoxBase :: ICommandExecutor> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiComboBoxBase :: IStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiComboBoxBase :: IStyleController>
	{
	public:
		typedef GuiComboBoxBase :: IStyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiComboBoxBase::IStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiComboBoxBase::IStyleController::IStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiButton :: IStyleController(static_cast<__GacUIInternal<GuiButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiComboBoxBase :: IStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiComboBoxBase::IStyleController::~IStyleController()
	{
	}
	
	void GuiComboBoxBase::IStyleController::OnClicked()
	{
		throw 0;
	}
	
	void GuiComboBoxBase::IStyleController::OnPopupOpened()
	{
		throw 0;
	}
	
	void GuiComboBoxBase::IStyleController::OnPopupClosed()
	{
		throw 0;
	}
	
	void GuiComboBoxBase::IStyleController::OnItemSelected()
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> GuiComboBoxBase::IStyleController::CreatePopupStyle()
	{
		throw 0;
	}
	
	rptr<GuiComboBoxBase :: IStyleController> GuiComboBoxBase::IStyleController::operator=(rptr<GuiComboBoxBase :: IStyleController> value)
	{
		throw 0;
	}
	
	void GuiComboBoxBase::IStyleController::SetCommandExecutor(rptr<GuiComboBoxBase :: ICommandExecutor> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiComboBoxListControl
***********************************************************************/

	template<>
	class __GacUIInternal<GuiComboBoxListControl>
	{
	public:
		typedef GuiComboBoxListControl WrappedObjectType;
		typedef vl::presentation::controls::GuiComboBoxListControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiComboBoxListControl::GuiComboBoxListControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiComboBoxBase(static_cast<__GacUIInternal<GuiComboBoxBase>::InternalObjectType*>((__GacUIInternal<GuiComboBoxListControl>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiComboBoxListControl::~GuiComboBoxListControl()
	{
	}
	
	rptr<GuiComboBoxListControl> GuiComboBoxListControl::CreateRptr(rptr<GuiComboBoxBase :: IStyleController> _styleController, rptr<GuiSelectableListControl> _containedListControl)
	{
		throw 0;
	}
	
	void GuiComboBoxListControl::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	rptr<GuiComboBoxListControl> GuiComboBoxListControl::operator=(rptr<GuiComboBoxListControl> value)
	{
		throw 0;
	}
	
	rptr<GuiSelectableListControl> GuiComboBoxListControl::GetContainedListControl()
	{
		throw 0;
	}
	
	signed __int32 GuiComboBoxListControl::GetSelectedIndex()
	{
		throw 0;
	}
	
	void GuiComboBoxListControl::SetSelectedIndex(signed __int32 value)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemProvider> GuiComboBoxListControl::GetItemProvider()
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxListControl::on_SelectedIndexChanged()
	{
		throw 0;
	}
	

/***********************************************************************
GuiMenu
***********************************************************************/

	template<>
	class __GacUIInternal<GuiMenu>
	{
	public:
		typedef GuiMenu WrappedObjectType;
		typedef vl::presentation::controls::GuiMenu InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiMenu::GuiMenu(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiPopup(static_cast<__GacUIInternal<GuiPopup>::InternalObjectType*>((__GacUIInternal<GuiMenu>::InternalObjectType*)__internal_object_reference_input))
	    ,IGuiMenuService(static_cast<__GacUIInternal<IGuiMenuService>::InternalObjectType*>((__GacUIInternal<GuiMenu>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMenu::~GuiMenu()
	{
	}
	
	rptr<GuiMenu> GuiMenu::CreateRptr(rptr<GuiControl :: IStyleController> _styleController, rptr<GuiControl> _owner)
	{
		throw 0;
	}
	
	void GuiMenu::UpdateMenuService()
	{
		throw 0;
	}
	
	rptr<IDescriptable> GuiMenu::QueryService(const GacString& identifier)
	{
		throw 0;
	}
	
	rptr<GuiMenu> GuiMenu::operator=(rptr<GuiMenu> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiWindowComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiWindowComposition>
	{
	public:
		typedef GuiWindowComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiWindowComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiWindowComposition::GuiWindowComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiGraphicsSite(static_cast<__GacUIInternal<GuiGraphicsSite>::InternalObjectType*>((__GacUIInternal<GuiWindowComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiWindowComposition::~GuiWindowComposition()
	{
	}
	
	rptr<GuiWindowComposition> GuiWindowComposition::CreateRptr()
	{
		throw 0;
	}
	
	Rect GuiWindowComposition::GetBounds()
	{
		throw 0;
	}
	
	void GuiWindowComposition::SetMargin(Margin value)
	{
		throw 0;
	}
	
	rptr<GuiWindowComposition> GuiWindowComposition::operator=(rptr<GuiWindowComposition> value)
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiWindowComposition::GetAttachedWindow()
	{
		throw 0;
	}
	
	void GuiWindowComposition::SetAttachedWindow(rptr<INativeWindow> window)
	{
		throw 0;
	}
	

/***********************************************************************
INativeWindow
***********************************************************************/

	template<>
	class __GacUIInternal<INativeWindow>
	{
	public:
		typedef INativeWindow WrappedObjectType;
		typedef vl::presentation::INativeWindow InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INativeWindow::INativeWindow(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	INativeWindow::~INativeWindow()
	{
	}
	
	void INativeWindow::Show()
	{
		throw 0;
	}
	
	void INativeWindow::ShowDeactivated()
	{
		throw 0;
	}
	
	void INativeWindow::ShowRestored()
	{
		throw 0;
	}
	
	void INativeWindow::ShowMaximized()
	{
		throw 0;
	}
	
	void INativeWindow::ShowMinimized()
	{
		throw 0;
	}
	
	void INativeWindow::Hide()
	{
		throw 0;
	}
	
	bool INativeWindow::IsVisible()
	{
		throw 0;
	}
	
	void INativeWindow::Enable()
	{
		throw 0;
	}
	
	void INativeWindow::Disable()
	{
		throw 0;
	}
	
	bool INativeWindow::IsEnabled()
	{
		throw 0;
	}
	
	void INativeWindow::SetFocus()
	{
		throw 0;
	}
	
	bool INativeWindow::IsFocused()
	{
		throw 0;
	}
	
	void INativeWindow::SetActivate()
	{
		throw 0;
	}
	
	bool INativeWindow::IsActivated()
	{
		throw 0;
	}
	
	void INativeWindow::ShowInTaskBar()
	{
		throw 0;
	}
	
	void INativeWindow::HideInTaskBar()
	{
		throw 0;
	}
	
	bool INativeWindow::IsAppearedInTaskBar()
	{
		throw 0;
	}
	
	void INativeWindow::EnableActivate()
	{
		throw 0;
	}
	
	void INativeWindow::DisableActivate()
	{
		throw 0;
	}
	
	bool INativeWindow::IsEnabledActivate()
	{
		throw 0;
	}
	
	bool INativeWindow::RequireCapture()
	{
		throw 0;
	}
	
	bool INativeWindow::ReleaseCapture()
	{
		throw 0;
	}
	
	bool INativeWindow::InstallListener(rptr<INativeWindowListener> listener)
	{
		throw 0;
	}
	
	bool INativeWindow::UninstallListener(rptr<INativeWindowListener> listener)
	{
		throw 0;
	}
	
	void INativeWindow::RedrawContent()
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindow::operator=(rptr<INativeWindow> value)
	{
		throw 0;
	}
	
	Rect INativeWindow::GetBounds()
	{
		throw 0;
	}
	
	void INativeWindow::SetBounds(const Rect& bounds)
	{
		throw 0;
	}
	
	Size INativeWindow::GetClientSize()
	{
		throw 0;
	}
	
	void INativeWindow::SetClientSize(Size size)
	{
		throw 0;
	}
	
	Rect INativeWindow::GetClientBoundsInScreen()
	{
		throw 0;
	}
	
	GacString INativeWindow::GetTitle()
	{
		throw 0;
	}
	
	void INativeWindow::SetTitle(GacString _title)
	{
		throw 0;
	}
	
	rptr<INativeCursor> INativeWindow::GetWindowCursor()
	{
		throw 0;
	}
	
	void INativeWindow::SetWindowCursor(rptr<INativeCursor> _cursor)
	{
		throw 0;
	}
	
	Point INativeWindow::GetCaretPoint()
	{
		throw 0;
	}
	
	void INativeWindow::SetCaretPoint(Point point)
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindow::GetParent()
	{
		throw 0;
	}
	
	void INativeWindow::SetParent(rptr<INativeWindow> parent)
	{
		throw 0;
	}
	
	bool INativeWindow::GetAlwaysPassFocusToParent()
	{
		throw 0;
	}
	
	void INativeWindow::SetAlwaysPassFocusToParent(bool value)
	{
		throw 0;
	}
	
	bool INativeWindow::GetMaximizedBox()
	{
		throw 0;
	}
	
	void INativeWindow::SetMaximizedBox(bool visible)
	{
		throw 0;
	}
	
	bool INativeWindow::GetMinimizedBox()
	{
		throw 0;
	}
	
	void INativeWindow::SetMinimizedBox(bool visible)
	{
		throw 0;
	}
	
	bool INativeWindow::GetBorder()
	{
		throw 0;
	}
	
	void INativeWindow::SetBorder(bool visible)
	{
		throw 0;
	}
	
	bool INativeWindow::GetSizeBox()
	{
		throw 0;
	}
	
	void INativeWindow::SetSizeBox(bool visible)
	{
		throw 0;
	}
	
	bool INativeWindow::GetIconVisible()
	{
		throw 0;
	}
	
	void INativeWindow::SetIconVisible(bool visible)
	{
		throw 0;
	}
	
	bool INativeWindow::GetTitleBar()
	{
		throw 0;
	}
	
	void INativeWindow::SetTitleBar(bool visible)
	{
		throw 0;
	}
	
	bool INativeWindow::GetTopMost()
	{
		throw 0;
	}
	
	void INativeWindow::SetTopMost(bool topmost)
	{
		throw 0;
	}
	

/***********************************************************************
INodeItemStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<INodeItemStyleController>
	{
	public:
		typedef INodeItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INodeItemStyleController::INodeItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemStyleController(static_cast<__GacUIInternal<GuiListControl :: IItemStyleController>::InternalObjectType*>((__GacUIInternal<INodeItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeItemStyleController::~INodeItemStyleController()
	{
	}
	
	rptr<INodeItemStyleController> INodeItemStyleController::operator=(rptr<INodeItemStyleController> value)
	{
		throw 0;
	}
	
	rptr<INodeItemStyleProvider> INodeItemStyleController::GetNodeStyleProvider()
	{
		throw 0;
	}
	

/***********************************************************************
INodeItemStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<INodeItemStyleProvider>
	{
	public:
		typedef INodeItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INodeItemStyleProvider::INodeItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<INodeItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeItemStyleProvider::~INodeItemStyleProvider()
	{
	}
	
	void INodeItemStyleProvider::BindItemStyleProvider(rptr<GuiListControl :: IItemStyleProvider> styleProvider)
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::DetachListControl()
	{
		throw 0;
	}
	
	signed __int32 INodeItemStyleProvider::GetItemStyleId(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	rptr<INodeItemStyleController> INodeItemStyleProvider::CreateItemStyle(signed __int32 styleId)
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::DestroyItemStyle(rptr<INodeItemStyleController> style)
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::Install(rptr<INodeItemStyleController> style, rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::SetStyleSelected(rptr<INodeItemStyleController> style, bool value)
	{
		throw 0;
	}
	
	rptr<INodeItemStyleProvider> INodeItemStyleProvider::operator=(rptr<INodeItemStyleProvider> value)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> INodeItemStyleProvider::GetBindedItemStyleProvider()
	{
		throw 0;
	}
	

/***********************************************************************
INodeItemView
***********************************************************************/

	template<>
	class __GacUIInternal<INodeItemView>
	{
	public:
		typedef INodeItemView WrappedObjectType;
		typedef vl::presentation::controls::tree::INodeItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	INodeItemView::INodeItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemPrimaryTextView(static_cast<__GacUIInternal<GuiListControl :: IItemPrimaryTextView>::InternalObjectType*>((__GacUIInternal<INodeItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	INodeItemView::~INodeItemView()
	{
	}
	
	rptr<INodeProvider> INodeItemView::RequestNode(signed __int32 index)
	{
		throw 0;
	}
	
	void INodeItemView::ReleaseNode(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	signed __int32 INodeItemView::CalculateNodeVisibilityIndex(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	rptr<INodeItemView> INodeItemView::operator=(rptr<INodeItemView> value)
	{
		throw 0;
	}
	
	wchar_t* INodeItemView::get_Identifier()
	{
		throw 0;
	}
	
	void INodeItemView::set_Identifier(wchar_t* value)
	{
		throw 0;
	}

/***********************************************************************
GuiVirtualTreeListControl
***********************************************************************/

	template<>
	class __GacUIInternal<GuiVirtualTreeListControl>
	{
	public:
		typedef GuiVirtualTreeListControl WrappedObjectType;
		typedef vl::presentation::controls::GuiVirtualTreeListControl InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiVirtualTreeListControl::GuiVirtualTreeListControl(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl(static_cast<__GacUIInternal<GuiSelectableListControl>::InternalObjectType*>((__GacUIInternal<GuiVirtualTreeListControl>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiVirtualTreeListControl::~GuiVirtualTreeListControl()
	{
	}
	
	rptr<GuiVirtualTreeListControl> GuiVirtualTreeListControl::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<INodeRootProvider> _nodeRootProvider)
	{
		throw 0;
	}
	
	sptr<INodeItemStyleProvider> GuiVirtualTreeListControl::SetNodeStyleProvider(sptr<INodeItemStyleProvider> styleProvider)
	{
		throw 0;
	}
	
	rptr<GuiVirtualTreeListControl> GuiVirtualTreeListControl::operator=(rptr<GuiVirtualTreeListControl> value)
	{
		throw 0;
	}
	
	rptr<INodeItemView> GuiVirtualTreeListControl::GetNodeItemView()
	{
		throw 0;
	}
	
	rptr<INodeRootProvider> GuiVirtualTreeListControl::GetNodeRootProvider()
	{
		throw 0;
	}
	
	rptr<INodeItemStyleProvider> GuiVirtualTreeListControl::GetNodeStyleProvider()
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer
***********************************************************************/

	template<>
	class __GacUIInternal<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::controls::GuiListControl::IItemStyleController *,vl::presentation::controls::GuiListControl::IItemStyleController *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::~IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer()
	{
	}
	
	bool IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Contains(rptr<GuiListControl :: IItemStyleController> item)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Count()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Get(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::IndexOf(rptr<GuiListControl :: IItemStyleController> item)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::operator=(rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> value)
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiStackItemComposition_raw_pointer
***********************************************************************/

	template<>
	class __GacUIInternal<IReadonlyList_of_GuiStackItemComposition_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiStackItemComposition_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::elements::GuiStackItemComposition *,vl::presentation::elements::GuiStackItemComposition *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IReadonlyList_of_GuiStackItemComposition_raw_pointer::IReadonlyList_of_GuiStackItemComposition_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiStackItemComposition_raw_pointer::~IReadonlyList_of_GuiStackItemComposition_raw_pointer()
	{
	}
	
	bool IReadonlyList_of_GuiStackItemComposition_raw_pointer::Contains(rptr<GuiStackItemComposition> item)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiStackItemComposition_raw_pointer::Count()
	{
		throw 0;
	}
	
	rptr<GuiStackItemComposition> IReadonlyList_of_GuiStackItemComposition_raw_pointer::Get(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<GuiStackItemComposition> IReadonlyList_of_GuiStackItemComposition_raw_pointer::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiStackItemComposition_raw_pointer::IndexOf(rptr<GuiStackItemComposition> item)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> IReadonlyList_of_GuiStackItemComposition_raw_pointer::operator=(rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiStackComposition
***********************************************************************/

	template<>
	class __GacUIInternal<GuiStackComposition>
	{
	public:
		typedef GuiStackComposition WrappedObjectType;
		typedef vl::presentation::elements::GuiStackComposition InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiStackComposition::GuiStackComposition(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiBoundsComposition(static_cast<__GacUIInternal<GuiBoundsComposition>::InternalObjectType*>((__GacUIInternal<GuiStackComposition>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiStackComposition::~GuiStackComposition()
	{
	}
	
	rptr<GuiStackComposition> GuiStackComposition::CreateRptr()
	{
		throw 0;
	}
	
	bool GuiStackComposition::InsertStackItem(signed __int32 index, rptr<GuiStackItemComposition> item)
	{
		throw 0;
	}
	
	Size GuiStackComposition::GetMinPreferredClientSize()
	{
		throw 0;
	}
	
	Rect GuiStackComposition::GetBounds()
	{
		throw 0;
	}
	
	rptr<GuiStackComposition> GuiStackComposition::operator=(rptr<GuiStackComposition> value)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> GuiStackComposition::GetStackItems()
	{
		throw 0;
	}
	
	GuiStackComposition :: Direction GuiStackComposition::GetDirection()
	{
		throw 0;
	}
	
	void GuiStackComposition::SetDirection(GuiStackComposition :: Direction value)
	{
		throw 0;
	}
	
	signed __int32 GuiStackComposition::GetPadding()
	{
		throw 0;
	}
	
	void GuiStackComposition::SetPadding(signed __int32 value)
	{
		throw 0;
	}
	
	Margin GuiStackComposition::GetExtraMargin()
	{
		throw 0;
	}
	
	void GuiStackComposition::SetExtraMargin(Margin value)
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiWindow_raw_pointer
***********************************************************************/

	template<>
	class __GacUIInternal<IReadonlyList_of_GuiWindow_raw_pointer>
	{
	public:
		typedef IReadonlyList_of_GuiWindow_raw_pointer WrappedObjectType;
		typedef vl::collections::IReadonlyList<vl::presentation::controls::GuiWindow *,vl::presentation::controls::GuiWindow *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IReadonlyList_of_GuiWindow_raw_pointer::IReadonlyList_of_GuiWindow_raw_pointer(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IReadonlyList_of_GuiWindow_raw_pointer::~IReadonlyList_of_GuiWindow_raw_pointer()
	{
	}
	
	bool IReadonlyList_of_GuiWindow_raw_pointer::Contains(rptr<GuiWindow> item)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiWindow_raw_pointer::Count()
	{
		throw 0;
	}
	
	rptr<GuiWindow> IReadonlyList_of_GuiWindow_raw_pointer::Get(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<GuiWindow> IReadonlyList_of_GuiWindow_raw_pointer::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiWindow_raw_pointer::IndexOf(rptr<GuiWindow> item)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiWindow_raw_pointer> IReadonlyList_of_GuiWindow_raw_pointer::operator=(rptr<IReadonlyList_of_GuiWindow_raw_pointer> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiApplication
***********************************************************************/

	template<>
	class __GacUIInternal<GuiApplication>
	{
	public:
		typedef GuiApplication WrappedObjectType;
		typedef vl::presentation::controls::GuiApplication InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiApplication::GuiApplication(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INativeControllerListener(static_cast<__GacUIInternal<INativeControllerListener>::InternalObjectType*>((__GacUIInternal<GuiApplication>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiApplication::~GuiApplication()
	{
	}
	
	void GuiApplication::Run(rptr<GuiWindow> _mainWindow)
	{
		throw 0;
	}
	
	rptr<GuiWindow> GuiApplication::GetWindow(Point location)
	{
		throw 0;
	}
	
	bool GuiApplication::IsInMainThread()
	{
		throw 0;
	}
	
	rptr<GuiApplication> GuiApplication::operator=(rptr<GuiApplication> value)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiWindow_raw_pointer> GuiApplication::GetWindows()
	{
		throw 0;
	}
	

/***********************************************************************
ItemProviderBase
***********************************************************************/

	template<>
	class __GacUIInternal<ItemProviderBase>
	{
	public:
		typedef ItemProviderBase WrappedObjectType;
		typedef vl::presentation::controls::list::ItemProviderBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ItemProviderBase::ItemProviderBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemProvider(static_cast<__GacUIInternal<GuiListControl :: IItemProvider>::InternalObjectType*>((__GacUIInternal<ItemProviderBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ItemProviderBase::~ItemProviderBase()
	{
	}
	
	rptr<ItemProviderBase> ItemProviderBase::CreateRptr()
	{
		throw 0;
	}
	
	bool ItemProviderBase::AttachCallback(rptr<GuiListControl :: IItemProviderCallback> value)
	{
		throw 0;
	}
	
	bool ItemProviderBase::DetachCallback(rptr<GuiListControl :: IItemProviderCallback> value)
	{
		throw 0;
	}
	
	rptr<ItemProviderBase> ItemProviderBase::operator=(rptr<ItemProviderBase> value)
	{
		throw 0;
	}
	

/***********************************************************************
ItemStyleControllerBase
***********************************************************************/

	template<>
	class __GacUIInternal<ItemStyleControllerBase>
	{
	public:
		typedef ItemStyleControllerBase WrappedObjectType;
		typedef vl::presentation::controls::list::ItemStyleControllerBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ItemStyleControllerBase::ItemStyleControllerBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemStyleController(static_cast<__GacUIInternal<GuiListControl :: IItemStyleController>::InternalObjectType*>((__GacUIInternal<ItemStyleControllerBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ItemStyleControllerBase::~ItemStyleControllerBase()
	{
	}
	
	rptr<GuiListControl :: IItemStyleProvider> ItemStyleControllerBase::GetStyleProvider()
	{
		throw 0;
	}
	
	signed __int32 ItemStyleControllerBase::GetItemStyleId()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> ItemStyleControllerBase::GetBoundsComposition()
	{
		throw 0;
	}
	
	bool ItemStyleControllerBase::IsCacheable()
	{
		throw 0;
	}
	
	bool ItemStyleControllerBase::IsInstalled()
	{
		throw 0;
	}
	
	void ItemStyleControllerBase::OnInstalled()
	{
		throw 0;
	}
	
	void ItemStyleControllerBase::OnUninstalled()
	{
		throw 0;
	}
	
	rptr<ItemStyleControllerBase> ItemStyleControllerBase::operator=(rptr<ItemStyleControllerBase> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProviderBase
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItemStyleProviderBase>
	{
	public:
		typedef ListViewItemStyleProviderBase WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProviderBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItemStyleProviderBase::ListViewItemStyleProviderBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl :: IItemStyleProvider(static_cast<__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProviderBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProviderBase::~ListViewItemStyleProviderBase()
	{
	}
	
	rptr<ListViewItemStyleProviderBase> ListViewItemStyleProviderBase::CreateRptr()
	{
		throw 0;
	}
	
	void ListViewItemStyleProviderBase::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewItemStyleProviderBase::DetachListControl()
	{
		throw 0;
	}
	
	signed __int32 ListViewItemStyleProviderBase::GetItemStyleId(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	void ListViewItemStyleProviderBase::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value)
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProviderBase> ListViewItemStyleProviderBase::operator=(rptr<ListViewItemStyleProviderBase> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProviderBase :: ListViewItemStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>
	{
	public:
		typedef ListViewItemStyleProviderBase :: ListViewItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProviderBase::ListViewItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItemStyleProviderBase::ListViewItemStyleController::ListViewItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemStyleControllerBase(static_cast<__GacUIInternal<ItemStyleControllerBase>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProviderBase::ListViewItemStyleController::~ListViewItemStyleController()
	{
	}
	
	rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> ListViewItemStyleProviderBase::ListViewItemStyleController::CreateRptr(rptr<ListViewItemStyleProviderBase> provider)
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> ListViewItemStyleProviderBase::ListViewItemStyleController::operator=(rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> value)
	{
		throw 0;
	}
	
	bool ListViewItemStyleProviderBase::ListViewItemStyleController::GetSelected()
	{
		throw 0;
	}
	
	void ListViewItemStyleProviderBase::ListViewItemStyleController::SetSelected(bool value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItemStyleProvider>
	{
	public:
		typedef ListViewItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItemStyleProvider::ListViewItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProviderBase(static_cast<__GacUIInternal<ListViewItemStyleProviderBase>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::~ListViewItemStyleProvider()
	{
	}
	
	rptr<ListViewItemStyleProvider> ListViewItemStyleProvider::CreateRptr(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> itemContentProvider)
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::DetachListControl()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> ListViewItemStyleProvider::CreateItemStyle(signed __int32 styleId)
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style)
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex)
	{
		throw 0;
	}
	
	bool ListViewItemStyleProvider::IsItemStyleAttachedToListView(rptr<GuiListControl :: IItemStyleController> itemStyle)
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider> ListViewItemStyleProvider::operator=(rptr<ListViewItemStyleProvider> value)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> ListViewItemStyleProvider::GetCreatedItemStyles()
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemContent
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>
	{
	public:
		typedef ListViewItemStyleProvider :: IListViewItemContent WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemContent InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItemStyleProvider::IListViewItemContent::IListViewItemContent(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContent>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::IListViewItemContent::~IListViewItemContent()
	{
	}
	
	void ListViewItemStyleProvider::IListViewItemContent::Install(rptr<GuiListViewBase :: IStyleProvider> styleProvider, rptr<ListViewItemStyleProvider :: IListViewItemView> view, signed __int32 itemIndex)
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewItemStyleProvider::IListViewItemContent::operator=(rptr<ListViewItemStyleProvider :: IListViewItemContent> value)
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> ListViewItemStyleProvider::IListViewItemContent::GetContentComposition()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> ListViewItemStyleProvider::IListViewItemContent::GetBackgroundDecorator()
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemContentProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>
	{
	public:
		typedef ListViewItemStyleProvider :: IListViewItemContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItemStyleProvider::IListViewItemContentProvider::IListViewItemContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::IListViewItemContentProvider::~IListViewItemContentProvider()
	{
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewItemStyleProvider::IListViewItemContentProvider::CreatePreferredCoordinateTransformer()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewItemStyleProvider::IListViewItemContentProvider::CreatePreferredArranger()
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewItemStyleProvider::IListViewItemContentProvider::CreateItemContent(const FontProperties& font)
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::IListViewItemContentProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::IListViewItemContentProvider::DetachListControl()
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> ListViewItemStyleProvider::IListViewItemContentProvider::operator=(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemView
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>
	{
	public:
		typedef ListViewItemStyleProvider :: IListViewItemView WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider::IListViewItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItemStyleProvider::IListViewItemView::IListViewItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemPrimaryTextView(static_cast<__GacUIInternal<GuiListControl :: IItemPrimaryTextView>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::IListViewItemView::~IListViewItemView()
	{
	}
	
	sptr<GuiImageData> ListViewItemStyleProvider::IListViewItemView::GetSmallImage(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	sptr<GuiImageData> ListViewItemStyleProvider::IListViewItemView::GetLargeImage(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	GacString ListViewItemStyleProvider::IListViewItemView::GetText(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	GacString ListViewItemStyleProvider::IListViewItemView::GetSubItem(signed __int32 itemIndex, signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetDataColumn(signed __int32 index)
	{
		throw 0;
	}
	
	GacString ListViewItemStyleProvider::IListViewItemView::GetColumnText(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemView> ListViewItemStyleProvider::IListViewItemView::operator=(rptr<ListViewItemStyleProvider :: IListViewItemView> value)
	{
		throw 0;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetDataColumnCount()
	{
		throw 0;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetColumnCount()
	{
		throw 0;
	}
	
	wchar_t* ListViewItemStyleProvider::IListViewItemView::get_Identifier()
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::IListViewItemView::set_Identifier(wchar_t* value)
	{
		throw 0;
	}

/***********************************************************************
ListViewItemStyleProvider :: ListViewContentItemStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItemStyleProvider :: ListViewContentItemStyleController>
	{
	public:
		typedef ListViewItemStyleProvider :: ListViewContentItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemStyleProvider::ListViewContentItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItemStyleProvider::ListViewContentItemStyleController::ListViewContentItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProviderBase :: ListViewItemStyleController(static_cast<__GacUIInternal<ListViewItemStyleProviderBase :: ListViewItemStyleController>::InternalObjectType*>((__GacUIInternal<ListViewItemStyleProvider :: ListViewContentItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemStyleProvider::ListViewContentItemStyleController::~ListViewContentItemStyleController()
	{
	}
	
	rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> ListViewItemStyleProvider::ListViewContentItemStyleController::CreateRptr(rptr<ListViewItemStyleProvider> provider)
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::ListViewContentItemStyleController::Install(rptr<ListViewItemStyleProvider :: IListViewItemView> view, signed __int32 itemIndex)
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> ListViewItemStyleProvider::ListViewContentItemStyleController::operator=(rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> value)
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewItemStyleProvider::ListViewContentItemStyleController::GetItemContent()
	{
		throw 0;
	}
	

/***********************************************************************
GuiVirtualListView
***********************************************************************/

	template<>
	class __GacUIInternal<GuiVirtualListView>
	{
	public:
		typedef GuiVirtualListView WrappedObjectType;
		typedef vl::presentation::controls::GuiVirtualListView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiVirtualListView::GuiVirtualListView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListViewBase(static_cast<__GacUIInternal<GuiListViewBase>::InternalObjectType*>((__GacUIInternal<GuiVirtualListView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiVirtualListView::~GuiVirtualListView()
	{
	}
	
	rptr<GuiVirtualListView> GuiVirtualListView::CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider)
	{
		throw 0;
	}
	
	void GuiVirtualListView::ChangeItemStyle(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> contentProvider)
	{
		throw 0;
	}
	
	rptr<GuiVirtualListView> GuiVirtualListView::operator=(rptr<GuiVirtualListView> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewBigIconContentProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewBigIconContentProvider>
	{
	public:
		typedef ListViewBigIconContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewBigIconContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewBigIconContentProvider::ListViewBigIconContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewBigIconContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewBigIconContentProvider::~ListViewBigIconContentProvider()
	{
	}
	
	rptr<ListViewBigIconContentProvider> ListViewBigIconContentProvider::CreateRptr(Size _iconSize)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewBigIconContentProvider::CreatePreferredCoordinateTransformer()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewBigIconContentProvider::CreatePreferredArranger()
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewBigIconContentProvider::CreateItemContent(const FontProperties& font)
	{
		throw 0;
	}
	
	void ListViewBigIconContentProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewBigIconContentProvider::DetachListControl()
	{
		throw 0;
	}
	
	rptr<ListViewBigIconContentProvider> ListViewBigIconContentProvider::operator=(rptr<ListViewBigIconContentProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewInformationContentProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewInformationContentProvider>
	{
	public:
		typedef ListViewInformationContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewInformationContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewInformationContentProvider::ListViewInformationContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewInformationContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewInformationContentProvider::~ListViewInformationContentProvider()
	{
	}
	
	rptr<ListViewInformationContentProvider> ListViewInformationContentProvider::CreateRptr(Size _iconSize)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewInformationContentProvider::CreatePreferredCoordinateTransformer()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewInformationContentProvider::CreatePreferredArranger()
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewInformationContentProvider::CreateItemContent(const FontProperties& font)
	{
		throw 0;
	}
	
	void ListViewInformationContentProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewInformationContentProvider::DetachListControl()
	{
		throw 0;
	}
	
	rptr<ListViewInformationContentProvider> ListViewInformationContentProvider::operator=(rptr<ListViewInformationContentProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewListContentProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewListContentProvider>
	{
	public:
		typedef ListViewListContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewListContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewListContentProvider::ListViewListContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewListContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewListContentProvider::~ListViewListContentProvider()
	{
	}
	
	rptr<ListViewListContentProvider> ListViewListContentProvider::CreateRptr(Size _iconSize)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewListContentProvider::CreatePreferredCoordinateTransformer()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewListContentProvider::CreatePreferredArranger()
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewListContentProvider::CreateItemContent(const FontProperties& font)
	{
		throw 0;
	}
	
	void ListViewListContentProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewListContentProvider::DetachListControl()
	{
		throw 0;
	}
	
	rptr<ListViewListContentProvider> ListViewListContentProvider::operator=(rptr<ListViewListContentProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewSmallIconContentProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewSmallIconContentProvider>
	{
	public:
		typedef ListViewSmallIconContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewSmallIconContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewSmallIconContentProvider::ListViewSmallIconContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewSmallIconContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewSmallIconContentProvider::~ListViewSmallIconContentProvider()
	{
	}
	
	rptr<ListViewSmallIconContentProvider> ListViewSmallIconContentProvider::CreateRptr(Size _iconSize)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewSmallIconContentProvider::CreatePreferredCoordinateTransformer()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewSmallIconContentProvider::CreatePreferredArranger()
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewSmallIconContentProvider::CreateItemContent(const FontProperties& font)
	{
		throw 0;
	}
	
	void ListViewSmallIconContentProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewSmallIconContentProvider::DetachListControl()
	{
		throw 0;
	}
	
	rptr<ListViewSmallIconContentProvider> ListViewSmallIconContentProvider::operator=(rptr<ListViewSmallIconContentProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewTileContentProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewTileContentProvider>
	{
	public:
		typedef ListViewTileContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewTileContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewTileContentProvider::ListViewTileContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewTileContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewTileContentProvider::~ListViewTileContentProvider()
	{
	}
	
	rptr<ListViewTileContentProvider> ListViewTileContentProvider::CreateRptr(Size _iconSize)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewTileContentProvider::CreatePreferredCoordinateTransformer()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewTileContentProvider::CreatePreferredArranger()
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewTileContentProvider::CreateItemContent(const FontProperties& font)
	{
		throw 0;
	}
	
	void ListViewTileContentProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewTileContentProvider::DetachListControl()
	{
		throw 0;
	}
	
	rptr<ListViewTileContentProvider> ListViewTileContentProvider::operator=(rptr<ListViewTileContentProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListWrapperProvider_of_ListViewItem
***********************************************************************/

	template<>
	class __GacUIInternal<ListWrapperProvider_of_ListViewItem>
	{
	public:
		typedef ListWrapperProvider_of_ListViewItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListWrapperProvider<vl::Ptr<vl::presentation::controls::list::ListViewItem>,vl::presentation::controls::list::ListViewItem *> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListWrapperProvider_of_ListViewItem::ListWrapperProvider_of_ListViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemProviderBase(static_cast<__GacUIInternal<ItemProviderBase>::InternalObjectType*>((__GacUIInternal<ListWrapperProvider_of_ListViewItem>::InternalObjectType*)__internal_object_reference_input))
	    ,IList_of_ListViewItem(static_cast<__GacUIInternal<IList_of_ListViewItem>::InternalObjectType*>((__GacUIInternal<ListWrapperProvider_of_ListViewItem>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListWrapperProvider_of_ListViewItem::~ListWrapperProvider_of_ListViewItem()
	{
	}
	
	bool ListWrapperProvider_of_ListViewItem::NotifyUpdate(signed __int32 start, signed __int32 count)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::Contains(rptr<ListViewItem> item)
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::Count()
	{
		throw 0;
	}
	
	sptr<ListViewItem> ListWrapperProvider_of_ListViewItem::Get(signed __int32 index)
	{
		throw 0;
	}
	
	sptr<ListViewItem> ListWrapperProvider_of_ListViewItem::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::IndexOf(rptr<ListViewItem> item)
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::Add(sptr<ListViewItem> item)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::Remove(rptr<ListViewItem> item)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::RemoveAt(signed __int32 index)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::RemoveRange(signed __int32 index, signed __int32 count)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::Clear()
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::Insert(signed __int32 index, sptr<ListViewItem> item)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::Set(signed __int32 index, sptr<ListViewItem> item)
	{
		throw 0;
	}
	
	rptr<ListWrapperProvider_of_ListViewItem> ListWrapperProvider_of_ListViewItem::operator=(rptr<ListWrapperProvider_of_ListViewItem> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListProvider_of_ListViewItem
***********************************************************************/

	template<>
	class __GacUIInternal<ListProvider_of_ListViewItem>
	{
	public:
		typedef ListProvider_of_ListViewItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListProvider<vl::Ptr<vl::presentation::controls::list::ListViewItem> > InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListProvider_of_ListViewItem::ListProvider_of_ListViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListWrapperProvider_of_ListViewItem(static_cast<__GacUIInternal<ListWrapperProvider_of_ListViewItem>::InternalObjectType*>((__GacUIInternal<ListProvider_of_ListViewItem>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListProvider_of_ListViewItem::~ListProvider_of_ListViewItem()
	{
	}
	
	rptr<ListProvider_of_ListViewItem> ListProvider_of_ListViewItem::CreateRptr()
	{
		throw 0;
	}
	
	rptr<ListProvider_of_ListViewItem> ListProvider_of_ListViewItem::operator=(rptr<ListProvider_of_ListViewItem> value)
	{
		throw 0;
	}
	

/***********************************************************************
NodeItemProvider
***********************************************************************/

	template<>
	class __GacUIInternal<NodeItemProvider>
	{
	public:
		typedef NodeItemProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::NodeItemProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	NodeItemProvider::NodeItemProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemProviderBase(static_cast<__GacUIInternal<ItemProviderBase>::InternalObjectType*>((__GacUIInternal<NodeItemProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,INodeProviderCallback(static_cast<__GacUIInternal<INodeProviderCallback>::InternalObjectType*>((__GacUIInternal<NodeItemProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,INodeItemView(static_cast<__GacUIInternal<INodeItemView>::InternalObjectType*>((__GacUIInternal<NodeItemProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	NodeItemProvider::~NodeItemProvider()
	{
	}
	
	rptr<NodeItemProvider> NodeItemProvider::CreateRptr(rptr<INodeRootProvider> _root)
	{
		throw 0;
	}
	
	signed __int32 NodeItemProvider::Count()
	{
		throw 0;
	}
	
	rptr<IDescriptable> NodeItemProvider::RequestView(const GacString& identifier)
	{
		throw 0;
	}
	
	void NodeItemProvider::ReleaseView(rptr<IDescriptable> view)
	{
		throw 0;
	}
	
	rptr<NodeItemProvider> NodeItemProvider::operator=(rptr<NodeItemProvider> value)
	{
		throw 0;
	}
	
	sptr<INodeRootProvider> NodeItemProvider::GetRoot()
	{
		throw 0;
	}
	

/***********************************************************************
NodeItemStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<NodeItemStyleProvider>
	{
	public:
		typedef NodeItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::NodeItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	NodeItemStyleProvider::NodeItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl :: IItemStyleProvider(static_cast<__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::InternalObjectType*>((__GacUIInternal<NodeItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	NodeItemStyleProvider::~NodeItemStyleProvider()
	{
	}
	
	rptr<NodeItemStyleProvider> NodeItemStyleProvider::CreateRptr(sptr<INodeItemStyleProvider> provider)
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::DetachListControl()
	{
		throw 0;
	}
	
	signed __int32 NodeItemStyleProvider::GetItemStyleId(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> NodeItemStyleProvider::CreateItemStyle(signed __int32 styleId)
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style)
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex)
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value)
	{
		throw 0;
	}
	
	rptr<NodeItemStyleProvider> NodeItemStyleProvider::operator=(rptr<NodeItemStyleProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
RangedItemArrangerBase
***********************************************************************/

	template<>
	class __GacUIInternal<RangedItemArrangerBase>
	{
	public:
		typedef RangedItemArrangerBase WrappedObjectType;
		typedef vl::presentation::controls::list::RangedItemArrangerBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	RangedItemArrangerBase::RangedItemArrangerBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemArranger(static_cast<__GacUIInternal<GuiListControl :: IItemArranger>::InternalObjectType*>((__GacUIInternal<RangedItemArrangerBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	RangedItemArrangerBase::~RangedItemArrangerBase()
	{
	}
	
	void RangedItemArrangerBase::OnAttached(rptr<GuiListControl :: IItemProvider> provider)
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::OnItemModified(signed __int32 start, signed __int32 count, signed __int32 newCount)
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::DetachListControl()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArrangerCallback> RangedItemArrangerBase::GetCallback()
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::SetCallback(rptr<GuiListControl :: IItemArrangerCallback> value)
	{
		throw 0;
	}
	
	Size RangedItemArrangerBase::GetTotalSize()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> RangedItemArrangerBase::GetVisibleStyle(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	signed __int32 RangedItemArrangerBase::GetVisibleIndex(rptr<GuiListControl :: IItemStyleController> style)
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::OnViewChanged(Rect bounds)
	{
		throw 0;
	}
	
	rptr<RangedItemArrangerBase> RangedItemArrangerBase::operator=(rptr<RangedItemArrangerBase> value)
	{
		throw 0;
	}
	

/***********************************************************************
FixedHeightItemArranger
***********************************************************************/

	template<>
	class __GacUIInternal<FixedHeightItemArranger>
	{
	public:
		typedef FixedHeightItemArranger WrappedObjectType;
		typedef vl::presentation::controls::list::FixedHeightItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	FixedHeightItemArranger::FixedHeightItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,RangedItemArrangerBase(static_cast<__GacUIInternal<RangedItemArrangerBase>::InternalObjectType*>((__GacUIInternal<FixedHeightItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	FixedHeightItemArranger::~FixedHeightItemArranger()
	{
	}
	
	rptr<FixedHeightItemArranger> FixedHeightItemArranger::CreateRptr()
	{
		throw 0;
	}
	
	rptr<FixedHeightItemArranger> FixedHeightItemArranger::operator=(rptr<FixedHeightItemArranger> value)
	{
		throw 0;
	}
	

/***********************************************************************
FixedHeightMultiColumnItemArranger
***********************************************************************/

	template<>
	class __GacUIInternal<FixedHeightMultiColumnItemArranger>
	{
	public:
		typedef FixedHeightMultiColumnItemArranger WrappedObjectType;
		typedef vl::presentation::controls::list::FixedHeightMultiColumnItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	FixedHeightMultiColumnItemArranger::FixedHeightMultiColumnItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,RangedItemArrangerBase(static_cast<__GacUIInternal<RangedItemArrangerBase>::InternalObjectType*>((__GacUIInternal<FixedHeightMultiColumnItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	FixedHeightMultiColumnItemArranger::~FixedHeightMultiColumnItemArranger()
	{
	}
	
	rptr<FixedHeightMultiColumnItemArranger> FixedHeightMultiColumnItemArranger::CreateRptr()
	{
		throw 0;
	}
	
	rptr<FixedHeightMultiColumnItemArranger> FixedHeightMultiColumnItemArranger::operator=(rptr<FixedHeightMultiColumnItemArranger> value)
	{
		throw 0;
	}
	

/***********************************************************************
FixedSizeMultiColumnItemArranger
***********************************************************************/

	template<>
	class __GacUIInternal<FixedSizeMultiColumnItemArranger>
	{
	public:
		typedef FixedSizeMultiColumnItemArranger WrappedObjectType;
		typedef vl::presentation::controls::list::FixedSizeMultiColumnItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	FixedSizeMultiColumnItemArranger::FixedSizeMultiColumnItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,RangedItemArrangerBase(static_cast<__GacUIInternal<RangedItemArrangerBase>::InternalObjectType*>((__GacUIInternal<FixedSizeMultiColumnItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	FixedSizeMultiColumnItemArranger::~FixedSizeMultiColumnItemArranger()
	{
	}
	
	rptr<FixedSizeMultiColumnItemArranger> FixedSizeMultiColumnItemArranger::CreateRptr()
	{
		throw 0;
	}
	
	rptr<FixedSizeMultiColumnItemArranger> FixedSizeMultiColumnItemArranger::operator=(rptr<FixedSizeMultiColumnItemArranger> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewColumnItemArranger
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewColumnItemArranger>
	{
	public:
		typedef ListViewColumnItemArranger WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewColumnItemArranger InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewColumnItemArranger::ListViewColumnItemArranger(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,FixedHeightItemArranger(static_cast<__GacUIInternal<FixedHeightItemArranger>::InternalObjectType*>((__GacUIInternal<ListViewColumnItemArranger>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewColumnItemArranger::~ListViewColumnItemArranger()
	{
	}
	
	rptr<ListViewColumnItemArranger> ListViewColumnItemArranger::CreateRptr()
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::DetachListControl()
	{
		throw 0;
	}
	
	rptr<ListViewColumnItemArranger> ListViewColumnItemArranger::operator=(rptr<ListViewColumnItemArranger> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewColumnItemArranger :: IColumnItemView
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>
	{
	public:
		typedef ListViewColumnItemArranger :: IColumnItemView WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewColumnItemArranger::IColumnItemView::IColumnItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewColumnItemArranger::IColumnItemView::~IColumnItemView()
	{
	}
	
	bool ListViewColumnItemArranger::IColumnItemView::AttachCallback(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value)
	{
		throw 0;
	}
	
	bool ListViewColumnItemArranger::IColumnItemView::DetachCallback(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value)
	{
		throw 0;
	}
	
	GacString ListViewColumnItemArranger::IColumnItemView::GetColumnText(signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 ListViewColumnItemArranger::IColumnItemView::GetColumnSize(signed __int32 index)
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::IColumnItemView::SetColumnSize(signed __int32 index, signed __int32 value)
	{
		throw 0;
	}
	
	rptr<ListViewColumnItemArranger :: IColumnItemView> ListViewColumnItemArranger::IColumnItemView::operator=(rptr<ListViewColumnItemArranger :: IColumnItemView> value)
	{
		throw 0;
	}
	
	signed __int32 ListViewColumnItemArranger::IColumnItemView::GetColumnCount()
	{
		throw 0;
	}
	
	wchar_t* ListViewColumnItemArranger::IColumnItemView::get_Identifier()
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::IColumnItemView::set_Identifier(wchar_t* value)
	{
		throw 0;
	}

/***********************************************************************
ListViewColumnItemArranger :: IColumnItemViewCallback
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>
	{
	public:
		typedef ListViewColumnItemArranger :: IColumnItemViewCallback WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewColumnItemArranger::IColumnItemViewCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewColumnItemArranger::IColumnItemViewCallback::IColumnItemViewCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewColumnItemArranger::IColumnItemViewCallback::~IColumnItemViewCallback()
	{
	}
	
	void ListViewColumnItemArranger::IColumnItemViewCallback::OnColumnChanged()
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::IColumnItemViewCallback::OnColumnSizeChanged(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> ListViewColumnItemArranger::IColumnItemViewCallback::operator=(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewDetailContentProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewDetailContentProvider>
	{
	public:
		typedef ListViewDetailContentProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewDetailContentProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewDetailContentProvider::ListViewDetailContentProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListViewItemStyleProvider :: IListViewItemContentProvider(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemContentProvider>::InternalObjectType*>((__GacUIInternal<ListViewDetailContentProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,ListViewColumnItemArranger :: IColumnItemViewCallback(static_cast<__GacUIInternal<ListViewColumnItemArranger :: IColumnItemViewCallback>::InternalObjectType*>((__GacUIInternal<ListViewDetailContentProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewDetailContentProvider::~ListViewDetailContentProvider()
	{
	}
	
	rptr<ListViewDetailContentProvider> ListViewDetailContentProvider::CreateRptr(Size _iconSize)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewDetailContentProvider::CreatePreferredCoordinateTransformer()
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewDetailContentProvider::CreatePreferredArranger()
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewDetailContentProvider::CreateItemContent(const FontProperties& font)
	{
		throw 0;
	}
	
	void ListViewDetailContentProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void ListViewDetailContentProvider::DetachListControl()
	{
		throw 0;
	}
	
	rptr<ListViewDetailContentProvider> ListViewDetailContentProvider::operator=(rptr<ListViewDetailContentProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemProvider
***********************************************************************/

	template<>
	class __GacUIInternal<ListViewItemProvider>
	{
	public:
		typedef ListViewItemProvider WrappedObjectType;
		typedef vl::presentation::controls::list::ListViewItemProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListViewItemProvider::ListViewItemProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListProvider_of_ListViewItem(static_cast<__GacUIInternal<ListProvider_of_ListViewItem>::InternalObjectType*>((__GacUIInternal<ListViewItemProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,ListViewItemStyleProvider :: IListViewItemView(static_cast<__GacUIInternal<ListViewItemStyleProvider :: IListViewItemView>::InternalObjectType*>((__GacUIInternal<ListViewItemProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,ListViewColumnItemArranger :: IColumnItemView(static_cast<__GacUIInternal<ListViewColumnItemArranger :: IColumnItemView>::InternalObjectType*>((__GacUIInternal<ListViewItemProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListViewItemProvider::~ListViewItemProvider()
	{
	}
	
	rptr<ListViewItemProvider> ListViewItemProvider::CreateRptr()
	{
		throw 0;
	}
	
	rptr<IDescriptable> ListViewItemProvider::RequestView(const GacString& identifier)
	{
		throw 0;
	}
	
	void ListViewItemProvider::ReleaseView(rptr<IDescriptable> view)
	{
		throw 0;
	}
	
	void ListViewItemProvider::NotifyDataColumnsUpdated()
	{
		throw 0;
	}
	
	void ListViewItemProvider::NotifyColumnsUpdated()
	{
		throw 0;
	}
	
	rptr<ListViewItemProvider> ListViewItemProvider::operator=(rptr<ListViewItemProvider> value)
	{
		throw 0;
	}
	
	rptr<IList_of_int> ListViewItemProvider::GetDataColumns()
	{
		throw 0;
	}
	
	rptr<IList_of_ListViewColumn> ListViewItemProvider::GetColumns()
	{
		throw 0;
	}
	

/***********************************************************************
GuiListView
***********************************************************************/

	template<>
	class __GacUIInternal<GuiListView>
	{
	public:
		typedef GuiListView WrappedObjectType;
		typedef vl::presentation::controls::GuiListView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiListView::GuiListView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiVirtualListView(static_cast<__GacUIInternal<GuiVirtualListView>::InternalObjectType*>((__GacUIInternal<GuiListView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiListView::~GuiListView()
	{
	}
	
	rptr<GuiListView> GuiListView::CreateRptr(rptr<GuiListViewBase :: IStyleProvider> _styleProvider)
	{
		throw 0;
	}
	
	rptr<GuiListView> GuiListView::operator=(rptr<GuiListView> value)
	{
		throw 0;
	}
	
	rptr<ListViewItemProvider> GuiListView::GetItems()
	{
		throw 0;
	}
	

/***********************************************************************
TextItem
***********************************************************************/

	template<>
	class __GacUIInternal<TextItem>
	{
	public:
		typedef TextItem WrappedObjectType;
		typedef vl::presentation::controls::list::TextItem InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextItem::TextItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TextItem::~TextItem()
	{
		delete __GacUIInternal<TextItem>::GetInternalObject(*this);
	}
	
	rptr<TextItem> TextItem::CreateRptr(wchar_t* _text, bool _checked)
	{
		throw 0;
	}
	
	TextItem TextItem::Create(wchar_t* _text, bool _checked)
	{
		throw 0;
	}
	
	rptr<TextItem> TextItem::CreateRptr(const GacString& _text, bool _checked)
	{
		throw 0;
	}
	
	TextItem TextItem::Create(const GacString& _text, bool _checked)
	{
		throw 0;
	}
	
	rptr<TextItem> TextItem::CreateRptr(const TextItem& item)
	{
		throw 0;
	}
	
	TextItem TextItem::Create(const TextItem& item)
	{
		throw 0;
	}
	
	rptr<TextItem> TextItem::CreateRptr()
	{
		throw 0;
	}
	
	TextItem TextItem::Create()
	{
		throw 0;
	}
	
	bool TextItem::operator==(const TextItem& value)
	{
		throw 0;
	}
	
	bool TextItem::operator!=(const TextItem& value)
	{
		throw 0;
	}
	
	TextItem& TextItem::operator=(const TextItem& __that)
	{
		throw 0;
	}
	
	const GacString& TextItem::GetText()
	{
		throw 0;
	}
	
	bool TextItem::GetChecked()
	{
		throw 0;
	}
	

/***********************************************************************
IList_of_TextItem
***********************************************************************/

	template<>
	class __GacUIInternal<IList_of_TextItem>
	{
	public:
		typedef IList_of_TextItem WrappedObjectType;
		typedef vl::collections::IList<vl::presentation::controls::list::TextItem,vl::presentation::controls::list::TextItem> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	IList_of_TextItem::IList_of_TextItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	IList_of_TextItem::~IList_of_TextItem()
	{
	}
	
	signed __int32 IList_of_TextItem::Insert(signed __int32 index, const TextItem& item)
	{
		throw 0;
	}
	
	bool IList_of_TextItem::Set(signed __int32 index, const TextItem& item)
	{
		throw 0;
	}
	
	rptr<IList_of_TextItem> IList_of_TextItem::operator=(rptr<IList_of_TextItem> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListWrapperProvider_of_TextItem
***********************************************************************/

	template<>
	class __GacUIInternal<ListWrapperProvider_of_TextItem>
	{
	public:
		typedef ListWrapperProvider_of_TextItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListWrapperProvider<vl::presentation::controls::list::TextItem,vl::presentation::controls::list::TextItem> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListWrapperProvider_of_TextItem::ListWrapperProvider_of_TextItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemProviderBase(static_cast<__GacUIInternal<ItemProviderBase>::InternalObjectType*>((__GacUIInternal<ListWrapperProvider_of_TextItem>::InternalObjectType*)__internal_object_reference_input))
	    ,IList_of_TextItem(static_cast<__GacUIInternal<IList_of_TextItem>::InternalObjectType*>((__GacUIInternal<ListWrapperProvider_of_TextItem>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListWrapperProvider_of_TextItem::~ListWrapperProvider_of_TextItem()
	{
	}
	
	bool ListWrapperProvider_of_TextItem::NotifyUpdate(signed __int32 start, signed __int32 count)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::Contains(const TextItem& item)
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::Count()
	{
		throw 0;
	}
	
	const TextItem& ListWrapperProvider_of_TextItem::Get(signed __int32 index)
	{
		throw 0;
	}
	
	const TextItem& ListWrapperProvider_of_TextItem::operator[](signed __int32 index)
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::IndexOf(const TextItem& item)
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::Add(const TextItem& item)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::Remove(const TextItem& item)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::RemoveAt(signed __int32 index)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::RemoveRange(signed __int32 index, signed __int32 count)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::Clear()
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::Insert(signed __int32 index, const TextItem& item)
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::Set(signed __int32 index, const TextItem& item)
	{
		throw 0;
	}
	
	rptr<ListWrapperProvider_of_TextItem> ListWrapperProvider_of_TextItem::operator=(rptr<ListWrapperProvider_of_TextItem> value)
	{
		throw 0;
	}
	

/***********************************************************************
ListProvider_of_TextItem
***********************************************************************/

	template<>
	class __GacUIInternal<ListProvider_of_TextItem>
	{
	public:
		typedef ListProvider_of_TextItem WrappedObjectType;
		typedef vl::presentation::controls::list::ListProvider<vl::presentation::controls::list::TextItem> InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	ListProvider_of_TextItem::ListProvider_of_TextItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListWrapperProvider_of_TextItem(static_cast<__GacUIInternal<ListWrapperProvider_of_TextItem>::InternalObjectType*>((__GacUIInternal<ListProvider_of_TextItem>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	ListProvider_of_TextItem::~ListProvider_of_TextItem()
	{
	}
	
	rptr<ListProvider_of_TextItem> ListProvider_of_TextItem::CreateRptr()
	{
		throw 0;
	}
	
	rptr<ListProvider_of_TextItem> ListProvider_of_TextItem::operator=(rptr<ListProvider_of_TextItem> value)
	{
		throw 0;
	}
	

/***********************************************************************
TextItemStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<TextItemStyleProvider>
	{
	public:
		typedef TextItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextItemStyleProvider::TextItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl :: IItemStyleProvider(static_cast<__GacUIInternal<GuiSelectableListControl :: IItemStyleProvider>::InternalObjectType*>((__GacUIInternal<TextItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemStyleProvider::~TextItemStyleProvider()
	{
	}
	
	rptr<TextItemStyleProvider> TextItemStyleProvider::CreateRptr(rptr<TextItemStyleProvider :: ITextItemStyleProvider> _textItemStyleProvider)
	{
		throw 0;
	}
	
	void TextItemStyleProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void TextItemStyleProvider::DetachListControl()
	{
		throw 0;
	}
	
	signed __int32 TextItemStyleProvider::GetItemStyleId(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> TextItemStyleProvider::CreateItemStyle(signed __int32 styleId)
	{
		throw 0;
	}
	
	void TextItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style)
	{
		throw 0;
	}
	
	void TextItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex)
	{
		throw 0;
	}
	
	void TextItemStyleProvider::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value)
	{
		throw 0;
	}
	
	rptr<TextItemStyleProvider> TextItemStyleProvider::operator=(rptr<TextItemStyleProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
TextItemStyleProvider :: ITextItemStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>
	{
	public:
		typedef TextItemStyleProvider :: ITextItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemStyleProvider::ITextItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextItemStyleProvider::ITextItemStyleProvider::ITextItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemStyleProvider::ITextItemStyleProvider::~ITextItemStyleProvider()
	{
	}
	
	rptr<GuiSelectableButton :: IStyleController> TextItemStyleProvider::ITextItemStyleProvider::CreateBackgroundStyleController()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> TextItemStyleProvider::ITextItemStyleProvider::CreateBulletStyleController()
	{
		throw 0;
	}
	
	rptr<TextItemStyleProvider :: ITextItemStyleProvider> TextItemStyleProvider::ITextItemStyleProvider::operator=(rptr<TextItemStyleProvider :: ITextItemStyleProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
TextItemStyleProvider :: ITextItemView
***********************************************************************/

	template<>
	class __GacUIInternal<TextItemStyleProvider :: ITextItemView>
	{
	public:
		typedef TextItemStyleProvider :: ITextItemView WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemStyleProvider::ITextItemView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextItemStyleProvider::ITextItemView::ITextItemView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiListControl :: IItemPrimaryTextView(static_cast<__GacUIInternal<GuiListControl :: IItemPrimaryTextView>::InternalObjectType*>((__GacUIInternal<TextItemStyleProvider :: ITextItemView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemStyleProvider::ITextItemView::~ITextItemView()
	{
	}
	
	GacString TextItemStyleProvider::ITextItemView::GetText(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	bool TextItemStyleProvider::ITextItemView::GetChecked(signed __int32 itemIndex)
	{
		throw 0;
	}
	
	void TextItemStyleProvider::ITextItemView::SetCheckedSilently(signed __int32 itemIndex, bool value)
	{
		throw 0;
	}
	
	rptr<TextItemStyleProvider :: ITextItemView> TextItemStyleProvider::ITextItemView::operator=(rptr<TextItemStyleProvider :: ITextItemView> value)
	{
		throw 0;
	}
	
	wchar_t* TextItemStyleProvider::ITextItemView::get_Identifier()
	{
		throw 0;
	}
	
	void TextItemStyleProvider::ITextItemView::set_Identifier(wchar_t* value)
	{
		throw 0;
	}

/***********************************************************************
TextItemStyleProvider :: TextItemStyleController
***********************************************************************/

	template<>
	class __GacUIInternal<TextItemStyleProvider :: TextItemStyleController>
	{
	public:
		typedef TextItemStyleProvider :: TextItemStyleController WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemStyleProvider::TextItemStyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextItemStyleProvider::TextItemStyleController::TextItemStyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ItemStyleControllerBase(static_cast<__GacUIInternal<ItemStyleControllerBase>::InternalObjectType*>((__GacUIInternal<TextItemStyleProvider :: TextItemStyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemStyleProvider::TextItemStyleController::~TextItemStyleController()
	{
	}
	
	rptr<TextItemStyleProvider :: TextItemStyleController> TextItemStyleProvider::TextItemStyleController::CreateRptr(rptr<TextItemStyleProvider> provider)
	{
		throw 0;
	}
	
	rptr<TextItemStyleProvider :: TextItemStyleController> TextItemStyleProvider::TextItemStyleController::operator=(rptr<TextItemStyleProvider :: TextItemStyleController> value)
	{
		throw 0;
	}
	
	bool TextItemStyleProvider::TextItemStyleController::GetSelected()
	{
		throw 0;
	}
	
	void TextItemStyleProvider::TextItemStyleController::SetSelected(bool value)
	{
		throw 0;
	}
	
	bool TextItemStyleProvider::TextItemStyleController::GetChecked()
	{
		throw 0;
	}
	
	void TextItemStyleProvider::TextItemStyleController::SetChecked(bool value)
	{
		throw 0;
	}
	
	const GacString& TextItemStyleProvider::TextItemStyleController::GetText()
	{
		throw 0;
	}
	
	void TextItemStyleProvider::TextItemStyleController::SetText(const GacString& value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiVirtualTextList
***********************************************************************/

	template<>
	class __GacUIInternal<GuiVirtualTextList>
	{
	public:
		typedef GuiVirtualTextList WrappedObjectType;
		typedef vl::presentation::controls::GuiVirtualTextList InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiVirtualTextList::GuiVirtualTextList(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableListControl(static_cast<__GacUIInternal<GuiSelectableListControl>::InternalObjectType*>((__GacUIInternal<GuiVirtualTextList>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiVirtualTextList::~GuiVirtualTextList()
	{
	}
	
	rptr<GuiVirtualTextList> GuiVirtualTextList::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<TextItemStyleProvider :: ITextItemStyleProvider> _itemStyleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider)
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiVirtualTextList::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value)
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiVirtualTextList::ChangeItemStyle(rptr<TextItemStyleProvider :: ITextItemStyleProvider> itemStyleProvider)
	{
		throw 0;
	}
	
	rptr<GuiVirtualTextList> GuiVirtualTextList::operator=(rptr<GuiVirtualTextList> value)
	{
		throw 0;
	}
	

/***********************************************************************
TextItemProvider
***********************************************************************/

	template<>
	class __GacUIInternal<TextItemProvider>
	{
	public:
		typedef TextItemProvider WrappedObjectType;
		typedef vl::presentation::controls::list::TextItemProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextItemProvider::TextItemProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,ListProvider_of_TextItem(static_cast<__GacUIInternal<ListProvider_of_TextItem>::InternalObjectType*>((__GacUIInternal<TextItemProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,TextItemStyleProvider :: ITextItemView(static_cast<__GacUIInternal<TextItemStyleProvider :: ITextItemView>::InternalObjectType*>((__GacUIInternal<TextItemProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TextItemProvider::~TextItemProvider()
	{
	}
	
	rptr<TextItemProvider> TextItemProvider::CreateRptr()
	{
		throw 0;
	}
	
	void TextItemProvider::SetText(signed __int32 itemIndex, const GacString& value)
	{
		throw 0;
	}
	
	void TextItemProvider::SetChecked(signed __int32 itemIndex, bool value)
	{
		throw 0;
	}
	
	rptr<IDescriptable> TextItemProvider::RequestView(const GacString& identifier)
	{
		throw 0;
	}
	
	void TextItemProvider::ReleaseView(rptr<IDescriptable> view)
	{
		throw 0;
	}
	
	rptr<TextItemProvider> TextItemProvider::operator=(rptr<TextItemProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextList
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTextList>
	{
	public:
		typedef GuiTextList WrappedObjectType;
		typedef vl::presentation::controls::GuiTextList InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTextList::GuiTextList(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiVirtualTextList(static_cast<__GacUIInternal<GuiVirtualTextList>::InternalObjectType*>((__GacUIInternal<GuiTextList>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTextList::~GuiTextList()
	{
	}
	
	rptr<GuiTextList> GuiTextList::CreateRptr(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<TextItemStyleProvider :: ITextItemStyleProvider> _itemStyleProvider)
	{
		throw 0;
	}
	
	rptr<GuiTextList> GuiTextList::operator=(rptr<GuiTextList> value)
	{
		throw 0;
	}
	
	rptr<TextItemProvider> GuiTextList::GetItems()
	{
		throw 0;
	}
	

/***********************************************************************
TextLine
***********************************************************************/

	template<>
	class __GacUIInternal<TextLine>
	{
	public:
		typedef TextLine WrappedObjectType;
		typedef vl::presentation::elements::text::TextLine InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextLine::TextLine(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TextLine::~TextLine()
	{
		delete __GacUIInternal<TextLine>::GetInternalObject(*this);
	}
	
	rptr<TextLine> TextLine::CreateRptr()
	{
		throw 0;
	}
	
	TextLine TextLine::Create()
	{
		throw 0;
	}
	
	bool TextLine::operator==(const TextLine& value)
	{
		throw 0;
	}
	
	bool TextLine::operator!=(const TextLine& value)
	{
		throw 0;
	}
	
	void TextLine::Initialize()
	{
		throw 0;
	}
	
	void TextLine::Finalize()
	{
		throw 0;
	}
	
	bool TextLine::IsReady()
	{
		throw 0;
	}
	
	bool TextLine::Modify(signed __int32 start, signed __int32 count, wchar_t* input, signed __int32 inputCount)
	{
		throw 0;
	}
	
	TextLine TextLine::Split(signed __int32 index)
	{
		throw 0;
	}
	
	void TextLine::AppendAndFinalize(TextLine& line)
	{
		throw 0;
	}
	
	signed __int32 TextLine::CalculateBufferLength(signed __int32 dataLength)
	{
		throw 0;
	}
	
	wchar_t* TextLine::get_text()
	{
		throw 0;
	}
	
	void TextLine::set_text(wchar_t* value)
	{
		throw 0;
	}
	rptr<CharAtt> TextLine::get_att()
	{
		throw 0;
	}
	
	void TextLine::set_att(rptr<CharAtt> value)
	{
		throw 0;
	}
	signed __int32 TextLine::get_availableOffsetCount()
	{
		throw 0;
	}
	
	void TextLine::set_availableOffsetCount(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 TextLine::get_bufferLength()
	{
		throw 0;
	}
	
	void TextLine::set_bufferLength(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 TextLine::get_dataLength()
	{
		throw 0;
	}
	
	void TextLine::set_dataLength(signed __int32 value)
	{
		throw 0;
	}

/***********************************************************************
TextPos
***********************************************************************/

	template<>
	class __GacUIInternal<TextPos>
	{
	public:
		typedef TextPos WrappedObjectType;
		typedef vl::presentation::TextPos InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextPos::TextPos(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TextPos::~TextPos()
	{
		delete __GacUIInternal<TextPos>::GetInternalObject(*this);
	}
	
	rptr<TextPos> TextPos::CreateRptr(signed __int32 _row, signed __int32 _column)
	{
		throw 0;
	}
	
	TextPos TextPos::Create(signed __int32 _row, signed __int32 _column)
	{
		throw 0;
	}
	
	rptr<TextPos> TextPos::CreateRptr()
	{
		throw 0;
	}
	
	TextPos TextPos::Create()
	{
		throw 0;
	}
	
	signed __int32 TextPos::Compare(const TextPos& value)
	{
		throw 0;
	}
	
	bool TextPos::operator==(const TextPos& value)
	{
		throw 0;
	}
	
	bool TextPos::operator!=(const TextPos& value)
	{
		throw 0;
	}
	
	bool TextPos::operator<(const TextPos& value)
	{
		throw 0;
	}
	
	bool TextPos::operator<=(const TextPos& value)
	{
		throw 0;
	}
	
	bool TextPos::operator>(const TextPos& value)
	{
		throw 0;
	}
	
	bool TextPos::operator>=(const TextPos& value)
	{
		throw 0;
	}
	
	signed __int32 TextPos::get_row()
	{
		throw 0;
	}
	
	void TextPos::set_row(signed __int32 value)
	{
		throw 0;
	}
	signed __int32 TextPos::get_column()
	{
		throw 0;
	}
	
	void TextPos::set_column(signed __int32 value)
	{
		throw 0;
	}

/***********************************************************************
GuiTextBoxCommonInterface
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTextBoxCommonInterface>
	{
	public:
		typedef GuiTextBoxCommonInterface WrappedObjectType;
		typedef vl::presentation::controls::GuiTextBoxCommonInterface InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTextBoxCommonInterface::GuiTextBoxCommonInterface(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiTextBoxCommonInterface::~GuiTextBoxCommonInterface()
	{
	}
	
	rptr<GuiTextBoxCommonInterface> GuiTextBoxCommonInterface::CreateRptr()
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::CanCut()
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::CanCopy()
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::CanPaste()
	{
		throw 0;
	}
	
	void GuiTextBoxCommonInterface::SelectAll()
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::Cut()
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::Copy()
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::Paste()
	{
		throw 0;
	}
	
	GacString GuiTextBoxCommonInterface::GetRowText(signed __int32 row)
	{
		throw 0;
	}
	
	GacString GuiTextBoxCommonInterface::GetFragmentText(TextPos start, TextPos end)
	{
		throw 0;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetRowWidth(signed __int32 row)
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetTextPosFromPoint(Point point)
	{
		throw 0;
	}
	
	Point GuiTextBoxCommonInterface::GetPointFromTextPos(TextPos pos)
	{
		throw 0;
	}
	
	Rect GuiTextBoxCommonInterface::GetRectFromTextPos(TextPos pos)
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetNearestTextPos(Point point)
	{
		throw 0;
	}
	
	void GuiTextBoxCommonInterface::Select(TextPos begin, TextPos end)
	{
		throw 0;
	}
	
	rptr<GuiTextBoxCommonInterface> GuiTextBoxCommonInterface::operator=(rptr<GuiTextBoxCommonInterface> value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiTextBoxCommonInterface::GetTextComposition()
	{
		throw 0;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetRowHeight()
	{
		throw 0;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetMaxWidth()
	{
		throw 0;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetMaxHeight()
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretBegin()
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretEnd()
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretSmall()
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretLarge()
	{
		throw 0;
	}
	
	GacString GuiTextBoxCommonInterface::GetSelectionText()
	{
		throw 0;
	}
	
	void GuiTextBoxCommonInterface::SetSelectionText(const GacString& value)
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiTextBoxCommonInterface::on_SelectionChanged()
	{
		throw 0;
	}
	

/***********************************************************************
TextLines
***********************************************************************/

	template<>
	class __GacUIInternal<TextLines>
	{
	public:
		typedef TextLines WrappedObjectType;
		typedef vl::presentation::elements::text::TextLines InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TextLines::TextLines(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TextLines::~TextLines()
	{
		delete __GacUIInternal<TextLines>::GetInternalObject(*this);
	}
	
	rptr<TextLines> TextLines::CreateRptr()
	{
		throw 0;
	}
	
	TextLines TextLines::Create()
	{
		throw 0;
	}
	
	TextLine& TextLines::GetLine(signed __int32 row)
	{
		throw 0;
	}
	
	GacString TextLines::GetText(TextPos start, TextPos end)
	{
		throw 0;
	}
	
	bool TextLines::RemoveLines(signed __int32 start, signed __int32 count)
	{
		throw 0;
	}
	
	bool TextLines::IsAvailable(TextPos pos)
	{
		throw 0;
	}
	
	TextPos TextLines::Normalize(TextPos pos)
	{
		throw 0;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, const GacString& input)
	{
		throw 0;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t* input)
	{
		throw 0;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t* input, signed __int32 inputCount)
	{
		throw 0;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t** inputs, signed __int32* inputCounts, signed __int32 rows)
	{
		throw 0;
	}
	
	void TextLines::Clear()
	{
		throw 0;
	}
	
	void TextLines::ClearMeasurement()
	{
		throw 0;
	}
	
	void TextLines::MeasureRow(signed __int32 row)
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetRowWidth(signed __int32 row)
	{
		throw 0;
	}
	
	TextPos TextLines::GetTextPosFromPoint(Point point)
	{
		throw 0;
	}
	
	Point TextLines::GetPointFromTextPos(TextPos pos)
	{
		throw 0;
	}
	
	Rect TextLines::GetRectFromTextPos(TextPos pos)
	{
		throw 0;
	}
	
	TextLines& TextLines::operator=(const TextLines& value)
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetCount()
	{
		throw 0;
	}
	
	rptr<CharMeasurer> TextLines::GetCharMeasurer()
	{
		throw 0;
	}
	
	void TextLines::SetCharMeasurer(rptr<CharMeasurer> value)
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> TextLines::GetRenderTarget()
	{
		throw 0;
	}
	
	void TextLines::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value)
	{
		throw 0;
	}
	
	GacString TextLines::GetText()
	{
		throw 0;
	}
	
	void TextLines::SetText(const GacString& value)
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetTabSpaceCount()
	{
		throw 0;
	}
	
	void TextLines::SetTabSpaceCount(signed __int32 value)
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetRowHeight()
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetMaxWidth()
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetMaxHeight()
	{
		throw 0;
	}
	

/***********************************************************************
GuiColorizedTextElement
***********************************************************************/

	template<>
	class __GacUIInternal<GuiColorizedTextElement>
	{
	public:
		typedef GuiColorizedTextElement WrappedObjectType;
		typedef vl::presentation::elements::GuiColorizedTextElement InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiColorizedTextElement::GuiColorizedTextElement(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IGuiGraphicsElement(static_cast<__GacUIInternal<IGuiGraphicsElement>::InternalObjectType*>((__GacUIInternal<GuiColorizedTextElement>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiColorizedTextElement::~GuiColorizedTextElement()
	{
	}
	
	rptr<IGuiGraphicsElementFactory> GuiColorizedTextElement::GetFactory()
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiColorizedTextElement::GetRenderer()
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiColorizedTextElement::operator=(rptr<GuiColorizedTextElement> value)
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiColorizedTextElement::Create()
	{
		throw 0;
	}
	
	TextLines& GuiColorizedTextElement::GetLines()
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement :: ICallback> GuiColorizedTextElement::GetCallback()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetCallback(rptr<GuiColorizedTextElement :: ICallback> value)
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_ColorEntry> GuiColorizedTextElement::GetColors()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetColors(rptr<Array_of_ColorEntry> value)
	{
		throw 0;
	}
	
	const FontProperties& GuiColorizedTextElement::GetFont()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	Point GuiColorizedTextElement::GetViewPosition()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetViewPosition(Point value)
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetVisuallyEnabled()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetFocused()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetFocused(bool value)
	{
		throw 0;
	}
	
	TextPos GuiColorizedTextElement::GetCaretBegin()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetCaretBegin(TextPos value)
	{
		throw 0;
	}
	
	TextPos GuiColorizedTextElement::GetCaretEnd()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetCaretEnd(TextPos value)
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetCaretVisible()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetCaretVisible(bool value)
	{
		throw 0;
	}
	
	Color GuiColorizedTextElement::GetCaretColor()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::SetCaretColor(Color value)
	{
		throw 0;
	}
	
	GacString GuiColorizedTextElement::GetElementTypeName()
	{
		throw 0;
	}
	

/***********************************************************************
GuiColorizedTextElement :: ICallback
***********************************************************************/

	template<>
	class __GacUIInternal<GuiColorizedTextElement :: ICallback>
	{
	public:
		typedef GuiColorizedTextElement :: ICallback WrappedObjectType;
		typedef vl::presentation::elements::GuiColorizedTextElement::ICallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiColorizedTextElement::ICallback::ICallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiColorizedTextElement :: ICallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiColorizedTextElement::ICallback::~ICallback()
	{
	}
	
	void GuiColorizedTextElement::ICallback::ColorChanged()
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::ICallback::FontChanged()
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement :: ICallback> GuiColorizedTextElement::ICallback::operator=(rptr<GuiColorizedTextElement :: ICallback> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextElementOperator
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTextElementOperator>
	{
	public:
		typedef GuiTextElementOperator WrappedObjectType;
		typedef vl::presentation::controls::GuiTextElementOperator InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTextElementOperator::GuiTextElementOperator(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	GuiTextElementOperator::~GuiTextElementOperator()
	{
	}
	
	rptr<GuiTextElementOperator> GuiTextElementOperator::CreateRptr()
	{
		throw 0;
	}
	
	void GuiTextElementOperator::Install(rptr<GuiColorizedTextElement> _textElement, rptr<GuiGraphicsComposition> _textComposition, rptr<GuiControl> _textControl)
	{
		throw 0;
	}
	
	TextPos GuiTextElementOperator::GetNearestTextPos(Point point)
	{
		throw 0;
	}
	
	void GuiTextElementOperator::Select(TextPos begin, TextPos end)
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::CanCut()
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::CanCopy()
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::CanPaste()
	{
		throw 0;
	}
	
	void GuiTextElementOperator::SelectAll()
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::Cut()
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::Copy()
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::Paste()
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator> GuiTextElementOperator::operator=(rptr<GuiTextElementOperator> value)
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator :: ICallback> GuiTextElementOperator::GetCallback()
	{
		throw 0;
	}
	
	void GuiTextElementOperator::SetCallback(rptr<GuiTextElementOperator :: ICallback> value)
	{
		throw 0;
	}
	
	rptr<GuiTextBoxCommonInterface> GuiTextElementOperator::GetTextBoxCommonInterface()
	{
		throw 0;
	}
	
	void GuiTextElementOperator::SetTextBoxCommonInterface(rptr<GuiTextBoxCommonInterface> value)
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiTextElementOperator::GetTextElement()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiTextElementOperator::GetTextComposition()
	{
		throw 0;
	}
	
	GacString GuiTextElementOperator::GetSelectionText()
	{
		throw 0;
	}
	
	void GuiTextElementOperator::SetSelectionText(const GacString& value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextElementOperator :: ICallback
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTextElementOperator :: ICallback>
	{
	public:
		typedef GuiTextElementOperator :: ICallback WrappedObjectType;
		typedef vl::presentation::controls::GuiTextElementOperator::ICallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTextElementOperator::ICallback::ICallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,IDescriptable(static_cast<__GacUIInternal<IDescriptable>::InternalObjectType*>((__GacUIInternal<GuiTextElementOperator :: ICallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTextElementOperator::ICallback::~ICallback()
	{
	}
	
	TextPos GuiTextElementOperator::ICallback::GetLeftWord(TextPos pos)
	{
		throw 0;
	}
	
	TextPos GuiTextElementOperator::ICallback::GetRightWord(TextPos pos)
	{
		throw 0;
	}
	
	void GuiTextElementOperator::ICallback::GetWord(TextPos pos, TextPos& begin, TextPos& end)
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::ICallback::BeforeModify(TextPos& start, TextPos& end, const GacString& originalText, GacString& inputText)
	{
		throw 0;
	}
	
	void GuiTextElementOperator::ICallback::AfterModify(TextPos originalStart, TextPos originalEnd, const GacString& originalText, TextPos inputStart, TextPos inputEnd, const GacString& inputText)
	{
		throw 0;
	}
	
	void GuiTextElementOperator::ICallback::ScrollToView(Point point)
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator :: ICallback> GuiTextElementOperator::ICallback::operator=(rptr<GuiTextElementOperator :: ICallback> value)
	{
		throw 0;
	}
	
	signed __int32 GuiTextElementOperator::ICallback::GetPageRows()
	{
		throw 0;
	}
	
	signed __int32 GuiTextElementOperator::ICallback::GetTextMargin()
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextElementOperator :: DefaultCallback
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTextElementOperator :: DefaultCallback>
	{
	public:
		typedef GuiTextElementOperator :: DefaultCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiTextElementOperator::DefaultCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTextElementOperator::DefaultCallback::DefaultCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiTextElementOperator :: ICallback(static_cast<__GacUIInternal<GuiTextElementOperator :: ICallback>::InternalObjectType*>((__GacUIInternal<GuiTextElementOperator :: DefaultCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTextElementOperator::DefaultCallback::~DefaultCallback()
	{
	}
	
	rptr<GuiTextElementOperator :: DefaultCallback> GuiTextElementOperator::DefaultCallback::CreateRptr(rptr<GuiColorizedTextElement> _textElement, rptr<GuiGraphicsComposition> _textComposition)
	{
		throw 0;
	}
	
	TextPos GuiTextElementOperator::DefaultCallback::GetLeftWord(TextPos pos)
	{
		throw 0;
	}
	
	TextPos GuiTextElementOperator::DefaultCallback::GetRightWord(TextPos pos)
	{
		throw 0;
	}
	
	void GuiTextElementOperator::DefaultCallback::GetWord(TextPos pos, TextPos& begin, TextPos& end)
	{
		throw 0;
	}
	
	signed __int32 GuiTextElementOperator::DefaultCallback::GetPageRows()
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::DefaultCallback::BeforeModify(TextPos& start, TextPos& end, const GacString& originalText, GacString& inputText)
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator :: DefaultCallback> GuiTextElementOperator::DefaultCallback::operator=(rptr<GuiTextElementOperator :: DefaultCallback> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiMultilineTextBox
***********************************************************************/

	template<>
	class __GacUIInternal<GuiMultilineTextBox>
	{
	public:
		typedef GuiMultilineTextBox WrappedObjectType;
		typedef vl::presentation::controls::GuiMultilineTextBox InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiMultilineTextBox::GuiMultilineTextBox(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView(static_cast<__GacUIInternal<GuiScrollView>::InternalObjectType*>((__GacUIInternal<GuiMultilineTextBox>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiTextBoxCommonInterface(static_cast<__GacUIInternal<GuiTextBoxCommonInterface>::InternalObjectType*>((__GacUIInternal<GuiMultilineTextBox>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMultilineTextBox::~GuiMultilineTextBox()
	{
	}
	
	rptr<GuiMultilineTextBox> GuiMultilineTextBox::CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider)
	{
		throw 0;
	}
	
	const GacString& GuiMultilineTextBox::GetText()
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	rptr<GuiMultilineTextBox> GuiMultilineTextBox::operator=(rptr<GuiMultilineTextBox> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiMultilineTextBox :: StyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiMultilineTextBox :: StyleController>
	{
	public:
		typedef GuiMultilineTextBox :: StyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiMultilineTextBox::StyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiMultilineTextBox::StyleController::StyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: StyleController(static_cast<__GacUIInternal<GuiScrollView :: StyleController>::InternalObjectType*>((__GacUIInternal<GuiMultilineTextBox :: StyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMultilineTextBox::StyleController::~StyleController()
	{
	}
	
	rptr<GuiMultilineTextBox :: StyleController> GuiMultilineTextBox::StyleController::CreateRptr(rptr<GuiScrollView :: IStyleProvider> styleProvider)
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiMultilineTextBox :: StyleController> GuiMultilineTextBox::StyleController::operator=(rptr<GuiMultilineTextBox :: StyleController> value)
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetViewPosition(Point value)
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiMultilineTextBox::StyleController::GetTextElement()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiMultilineTextBox::StyleController::GetTextComposition()
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator> GuiMultilineTextBox::StyleController::GetTextElementOperator()
	{
		throw 0;
	}
	
	GacString GuiMultilineTextBox::StyleController::GetText()
	{
		throw 0;
	}
	

/***********************************************************************
GuiMultilineTextBox :: TextElementOperatorCallback
***********************************************************************/

	template<>
	class __GacUIInternal<GuiMultilineTextBox :: TextElementOperatorCallback>
	{
	public:
		typedef GuiMultilineTextBox :: TextElementOperatorCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiMultilineTextBox::TextElementOperatorCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiMultilineTextBox::TextElementOperatorCallback::TextElementOperatorCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiTextElementOperator :: DefaultCallback(static_cast<__GacUIInternal<GuiTextElementOperator :: DefaultCallback>::InternalObjectType*>((__GacUIInternal<GuiMultilineTextBox :: TextElementOperatorCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiMultilineTextBox::TextElementOperatorCallback::~TextElementOperatorCallback()
	{
	}
	
	rptr<GuiMultilineTextBox :: TextElementOperatorCallback> GuiMultilineTextBox::TextElementOperatorCallback::CreateRptr(rptr<GuiMultilineTextBox> _textControl)
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::TextElementOperatorCallback::AfterModify(TextPos originalStart, TextPos originalEnd, const GacString& originalText, TextPos inputStart, TextPos inputEnd, const GacString& inputText)
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::TextElementOperatorCallback::ScrollToView(Point point)
	{
		throw 0;
	}
	
	signed __int32 GuiMultilineTextBox::TextElementOperatorCallback::GetTextMargin()
	{
		throw 0;
	}
	
	rptr<GuiMultilineTextBox :: TextElementOperatorCallback> GuiMultilineTextBox::TextElementOperatorCallback::operator=(rptr<GuiMultilineTextBox :: TextElementOperatorCallback> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiSinglelineTextBox
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSinglelineTextBox>
	{
	public:
		typedef GuiSinglelineTextBox WrappedObjectType;
		typedef vl::presentation::controls::GuiSinglelineTextBox InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSinglelineTextBox::GuiSinglelineTextBox(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl(static_cast<__GacUIInternal<GuiControl>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiTextBoxCommonInterface(static_cast<__GacUIInternal<GuiTextBoxCommonInterface>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSinglelineTextBox::~GuiSinglelineTextBox()
	{
	}
	
	rptr<GuiSinglelineTextBox> GuiSinglelineTextBox::CreateRptr(rptr<GuiSinglelineTextBox :: IStyleProvider> styleProvider)
	{
		throw 0;
	}
	
	const GacString& GuiSinglelineTextBox::GetText()
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	rptr<GuiSinglelineTextBox> GuiSinglelineTextBox::operator=(rptr<GuiSinglelineTextBox> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: IStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>
	{
	public:
		typedef GuiSinglelineTextBox :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiSinglelineTextBox::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSinglelineTextBox::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleProvider(static_cast<__GacUIInternal<GuiControl :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSinglelineTextBox::IStyleProvider::~IStyleProvider()
	{
	}
	
	rptr<GuiGraphicsComposition> GuiSinglelineTextBox::IStyleProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		throw 0;
	}
	
	rptr<GuiSinglelineTextBox :: IStyleProvider> GuiSinglelineTextBox::IStyleProvider::operator=(rptr<GuiSinglelineTextBox :: IStyleProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: StyleController
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSinglelineTextBox :: StyleController>
	{
	public:
		typedef GuiSinglelineTextBox :: StyleController WrappedObjectType;
		typedef vl::presentation::controls::GuiSinglelineTextBox::StyleController InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSinglelineTextBox::StyleController::StyleController(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox :: StyleController>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSinglelineTextBox::StyleController::~StyleController()
	{
	}
	
	rptr<GuiSinglelineTextBox :: StyleController> GuiSinglelineTextBox::StyleController::CreateRptr(rptr<GuiSinglelineTextBox :: IStyleProvider> _styleProvider)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::RearrangeTextElement()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiSinglelineTextBox::StyleController::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiSinglelineTextBox::StyleController::GetContainerComposition()
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiSinglelineTextBox :: StyleController> GuiSinglelineTextBox::StyleController::operator=(rptr<GuiSinglelineTextBox :: StyleController> value)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetTextBox(rptr<GuiSinglelineTextBox> value)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetViewPosition(Point value)
	{
		throw 0;
	}
	
	GacString GuiSinglelineTextBox::StyleController::GetText()
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiSinglelineTextBox::StyleController::GetTextElement()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiSinglelineTextBox::StyleController::GetTextComposition()
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator> GuiSinglelineTextBox::StyleController::GetTextElementOperator()
	{
		throw 0;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: TextElementOperatorCallback
***********************************************************************/

	template<>
	class __GacUIInternal<GuiSinglelineTextBox :: TextElementOperatorCallback>
	{
	public:
		typedef GuiSinglelineTextBox :: TextElementOperatorCallback WrappedObjectType;
		typedef vl::presentation::controls::GuiSinglelineTextBox::TextElementOperatorCallback InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiSinglelineTextBox::TextElementOperatorCallback::TextElementOperatorCallback(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiTextElementOperator :: DefaultCallback(static_cast<__GacUIInternal<GuiTextElementOperator :: DefaultCallback>::InternalObjectType*>((__GacUIInternal<GuiSinglelineTextBox :: TextElementOperatorCallback>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiSinglelineTextBox::TextElementOperatorCallback::~TextElementOperatorCallback()
	{
	}
	
	rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> GuiSinglelineTextBox::TextElementOperatorCallback::CreateRptr(rptr<GuiSinglelineTextBox> _textControl)
	{
		throw 0;
	}
	
	bool GuiSinglelineTextBox::TextElementOperatorCallback::BeforeModify(TextPos& start, TextPos& end, const GacString& originalText, GacString& inputText)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::TextElementOperatorCallback::AfterModify(TextPos originalStart, TextPos originalEnd, const GacString& originalText, TextPos inputStart, TextPos inputEnd, const GacString& inputText)
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::TextElementOperatorCallback::ScrollToView(Point point)
	{
		throw 0;
	}
	
	signed __int32 GuiSinglelineTextBox::TextElementOperatorCallback::GetTextMargin()
	{
		throw 0;
	}
	
	rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> GuiSinglelineTextBox::TextElementOperatorCallback::operator=(rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> value)
	{
		throw 0;
	}
	

/***********************************************************************
TreeViewItem
***********************************************************************/

	template<>
	class __GacUIInternal<TreeViewItem>
	{
	public:
		typedef TreeViewItem WrappedObjectType;
		typedef vl::presentation::controls::tree::TreeViewItem InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TreeViewItem::TreeViewItem(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	TreeViewItem::~TreeViewItem()
	{
	}
	
	rptr<TreeViewItem> TreeViewItem::CreateRptr(sptr<GuiImageData> _image, const GacString& _text)
	{
		throw 0;
	}
	
	rptr<TreeViewItem> TreeViewItem::CreateRptr()
	{
		throw 0;
	}
	
	rptr<TreeViewItem> TreeViewItem::operator=(rptr<TreeViewItem> value)
	{
		throw 0;
	}
	
	sptr<GuiImageData> TreeViewItem::get_image()
	{
		throw 0;
	}
	
	void TreeViewItem::set_image(sptr<GuiImageData> value)
	{
		throw 0;
	}
	GacString TreeViewItem::get_text()
	{
		throw 0;
	}
	
	void TreeViewItem::set_text(GacString value)
	{
		throw 0;
	}

/***********************************************************************
TreeViewItemRootProvider
***********************************************************************/

	template<>
	class __GacUIInternal<TreeViewItemRootProvider>
	{
	public:
		typedef TreeViewItemRootProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::TreeViewItemRootProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TreeViewItemRootProvider::TreeViewItemRootProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,MemoryNodeRootProvider(static_cast<__GacUIInternal<MemoryNodeRootProvider>::InternalObjectType*>((__GacUIInternal<TreeViewItemRootProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,ITreeViewItemView(static_cast<__GacUIInternal<ITreeViewItemView>::InternalObjectType*>((__GacUIInternal<TreeViewItemRootProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TreeViewItemRootProvider::~TreeViewItemRootProvider()
	{
	}
	
	rptr<TreeViewItemRootProvider> TreeViewItemRootProvider::CreateRptr()
	{
		throw 0;
	}
	
	rptr<IDescriptable> TreeViewItemRootProvider::RequestView(const GacString& identifier)
	{
		throw 0;
	}
	
	void TreeViewItemRootProvider::ReleaseView(rptr<IDescriptable> view)
	{
		throw 0;
	}
	
	rptr<TreeViewItemRootProvider> TreeViewItemRootProvider::operator=(rptr<TreeViewItemRootProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
GuiTreeView
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTreeView>
	{
	public:
		typedef GuiTreeView WrappedObjectType;
		typedef vl::presentation::controls::GuiTreeView InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTreeView::GuiTreeView(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiVirtualTreeListControl(static_cast<__GacUIInternal<GuiVirtualTreeListControl>::InternalObjectType*>((__GacUIInternal<GuiTreeView>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTreeView::~GuiTreeView()
	{
	}
	
	rptr<GuiTreeView> GuiTreeView::CreateRptr(rptr<GuiTreeView :: IStyleProvider> _styleProvider, rptr<INodeRootProvider> _nodeRootProvider)
	{
		throw 0;
	}
	
	sptr<TreeViewItemRootProvider> GuiTreeView::Nodes()
	{
		throw 0;
	}
	
	rptr<GuiTreeView> GuiTreeView::operator=(rptr<GuiTreeView> value)
	{
		throw 0;
	}
	
	rptr<GuiTreeView :: IStyleProvider> GuiTreeView::GetTreeViewStyleProvider()
	{
		throw 0;
	}
	

/***********************************************************************
GuiTreeView :: IStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<GuiTreeView :: IStyleProvider>
	{
	public:
		typedef GuiTreeView :: IStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::GuiTreeView::IStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	GuiTreeView::IStyleProvider::IStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: IStyleProvider(static_cast<__GacUIInternal<GuiScrollView :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<GuiTreeView :: IStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	GuiTreeView::IStyleProvider::~IStyleProvider()
	{
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiTreeView::IStyleProvider::CreateItemBackground()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiTreeView::IStyleProvider::CreateItemExpandingDecorator()
	{
		throw 0;
	}
	
	rptr<GuiTreeView :: IStyleProvider> GuiTreeView::IStyleProvider::operator=(rptr<GuiTreeView :: IStyleProvider> value)
	{
		throw 0;
	}
	
	Color GuiTreeView::IStyleProvider::GetTextColor()
	{
		throw 0;
	}
	

/***********************************************************************
TreeViewNodeItemStyleProvider
***********************************************************************/

	template<>
	class __GacUIInternal<TreeViewNodeItemStyleProvider>
	{
	public:
		typedef TreeViewNodeItemStyleProvider WrappedObjectType;
		typedef vl::presentation::controls::tree::TreeViewNodeItemStyleProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	TreeViewNodeItemStyleProvider::TreeViewNodeItemStyleProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,INodeItemStyleProvider(static_cast<__GacUIInternal<INodeItemStyleProvider>::InternalObjectType*>((__GacUIInternal<TreeViewNodeItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,INodeProviderCallback(static_cast<__GacUIInternal<INodeProviderCallback>::InternalObjectType*>((__GacUIInternal<TreeViewNodeItemStyleProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	TreeViewNodeItemStyleProvider::~TreeViewNodeItemStyleProvider()
	{
	}
	
	rptr<TreeViewNodeItemStyleProvider> TreeViewNodeItemStyleProvider::CreateRptr()
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::BindItemStyleProvider(rptr<GuiListControl :: IItemStyleProvider> styleProvider)
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> TreeViewNodeItemStyleProvider::GetBindedItemStyleProvider()
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::AttachListControl(rptr<GuiListControl> value)
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::DetachListControl()
	{
		throw 0;
	}
	
	signed __int32 TreeViewNodeItemStyleProvider::GetItemStyleId(rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	rptr<INodeItemStyleController> TreeViewNodeItemStyleProvider::CreateItemStyle(signed __int32 styleId)
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::DestroyItemStyle(rptr<INodeItemStyleController> style)
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::Install(rptr<INodeItemStyleController> style, rptr<INodeProvider> node)
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::SetStyleSelected(rptr<INodeItemStyleController> style, bool value)
	{
		throw 0;
	}
	
	rptr<TreeViewNodeItemStyleProvider> TreeViewNodeItemStyleProvider::operator=(rptr<TreeViewNodeItemStyleProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7ButtonColors
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ButtonColors>
	{
	public:
		typedef Win7ButtonColors WrappedObjectType;
		typedef vl::presentation::win7::Win7ButtonColors InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ButtonColors::Win7ButtonColors(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Win7ButtonColors::~Win7ButtonColors()
	{
		delete __GacUIInternal<Win7ButtonColors>::GetInternalObject(*this);
	}
	
	rptr<Win7ButtonColors> Win7ButtonColors::CreateRptr()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::Create()
	{
		throw 0;
	}
	
	bool Win7ButtonColors::operator==(const Win7ButtonColors& colors)
	{
		throw 0;
	}
	
	bool Win7ButtonColors::operator!=(const Win7ButtonColors& colors)
	{
		throw 0;
	}
	
	void Win7ButtonColors::SetAlphaWithoutText(unsigned __int8 a)
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::Blend(const Win7ButtonColors& c1, const Win7ButtonColors& c2, signed __int32 ratio, signed __int32 total)
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonNormal()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonActive()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonPressed()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonDisabled()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemNormal()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemActive()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemSelected()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemDisabled()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedNormal(bool selected)
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedActive(bool selected)
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedPressed(bool selected)
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedDisabled(bool selected)
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonNormal()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonActive()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonPressed()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonDisabled()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonNormal()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonActive()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonPressed()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonDisabled()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonNormal()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonNormalActive()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonDisabled()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonDisabledActive()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderNormal()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderActive()
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderSelected()
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_borderColor()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_borderColor(Color value)
	{
		throw 0;
	}
	Color Win7ButtonColors::get_backgroundColor()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_backgroundColor(Color value)
	{
		throw 0;
	}
	Color Win7ButtonColors::get_g1()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_g1(Color value)
	{
		throw 0;
	}
	Color Win7ButtonColors::get_g2()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_g2(Color value)
	{
		throw 0;
	}
	Color Win7ButtonColors::get_g3()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_g3(Color value)
	{
		throw 0;
	}
	Color Win7ButtonColors::get_g4()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_g4(Color value)
	{
		throw 0;
	}
	Color Win7ButtonColors::get_textColor()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_textColor(Color value)
	{
		throw 0;
	}
	Color Win7ButtonColors::get_bulletLight()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_bulletLight(Color value)
	{
		throw 0;
	}
	Color Win7ButtonColors::get_bulletDark()
	{
		throw 0;
	}
	
	void Win7ButtonColors::set_bulletDark(Color value)
	{
		throw 0;
	}

/***********************************************************************
Win7ButtonStyleBase
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ButtonStyleBase>
	{
	public:
		typedef Win7ButtonStyleBase WrappedObjectType;
		typedef vl::presentation::win7::Win7ButtonStyleBase InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ButtonStyleBase::Win7ButtonStyleBase(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ButtonStyleBase::~Win7ButtonStyleBase()
	{
	}
	
	rptr<GuiBoundsComposition> Win7ButtonStyleBase::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7ButtonStyleBase::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetSelected(bool value)
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::Transfer(GuiButton :: ControlState value)
	{
		throw 0;
	}
	
	rptr<Win7ButtonStyleBase> Win7ButtonStyleBase::operator=(rptr<Win7ButtonStyleBase> value)
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetTransparentWhenInactive()
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetTransparentWhenInactive(bool value)
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetTransparentWhenDisabled()
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetTransparentWhenDisabled(bool value)
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetAutoSizeForText()
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetAutoSizeForText(bool value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7ButtonStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ButtonStyle>
	{
	public:
		typedef Win7ButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ButtonStyle::Win7ButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyleBase(static_cast<__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*>((__GacUIInternal<Win7ButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ButtonStyle::~Win7ButtonStyle()
	{
	}
	
	rptr<Win7ButtonStyle> Win7ButtonStyle::CreateRptr(bool verticalGradient)
	{
		throw 0;
	}
	
	rptr<Win7ButtonStyle> Win7ButtonStyle::operator=(rptr<Win7ButtonStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7CheckBoxStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7CheckBoxStyle>
	{
	public:
		typedef Win7CheckBoxStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7CheckBoxStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7CheckBoxStyle::Win7CheckBoxStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7CheckBoxStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7CheckBoxStyle::~Win7CheckBoxStyle()
	{
	}
	
	rptr<Win7CheckBoxStyle> Win7CheckBoxStyle::CreateRptr(Win7CheckBoxStyle :: BulletStyle bulletStyle, bool backgroundVisible)
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7CheckBoxStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7CheckBoxStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetSelected(bool value)
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::Transfer(GuiButton :: ControlState value)
	{
		throw 0;
	}
	
	rptr<Win7CheckBoxStyle> Win7CheckBoxStyle::operator=(rptr<Win7CheckBoxStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7DropDownComboBoxStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7DropDownComboBoxStyle>
	{
	public:
		typedef Win7DropDownComboBoxStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7DropDownComboBoxStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7DropDownComboBoxStyle::Win7DropDownComboBoxStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyle(static_cast<__GacUIInternal<Win7ButtonStyle>::InternalObjectType*>((__GacUIInternal<Win7DropDownComboBoxStyle>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiComboBoxBase :: IStyleController(static_cast<__GacUIInternal<GuiComboBoxBase :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7DropDownComboBoxStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7DropDownComboBoxStyle::~Win7DropDownComboBoxStyle()
	{
	}
	
	rptr<Win7DropDownComboBoxStyle> Win7DropDownComboBoxStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7DropDownComboBoxStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::SetCommandExecutor(rptr<GuiComboBoxBase :: ICommandExecutor> value)
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::OnClicked()
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::OnPopupOpened()
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::OnPopupClosed()
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::OnItemSelected()
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> Win7DropDownComboBoxStyle::CreatePopupStyle()
	{
		throw 0;
	}
	
	rptr<Win7DropDownComboBoxStyle> Win7DropDownComboBoxStyle::operator=(rptr<Win7DropDownComboBoxStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7EmptyStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7EmptyStyle>
	{
	public:
		typedef Win7EmptyStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7EmptyStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7EmptyStyle::Win7EmptyStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7EmptyStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7EmptyStyle::~Win7EmptyStyle()
	{
	}
	
	rptr<Win7EmptyStyle> Win7EmptyStyle::CreateRptr(Color color)
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7EmptyStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7EmptyStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7EmptyStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7EmptyStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7EmptyStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7EmptyStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<Win7EmptyStyle> Win7EmptyStyle::operator=(rptr<Win7EmptyStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7GroupBoxStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7GroupBoxStyle>
	{
	public:
		typedef Win7GroupBoxStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7GroupBoxStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7GroupBoxStyle::Win7GroupBoxStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7GroupBoxStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7GroupBoxStyle::~Win7GroupBoxStyle()
	{
	}
	
	rptr<Win7GroupBoxStyle> Win7GroupBoxStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7GroupBoxStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7GroupBoxStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7GroupBoxStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7GroupBoxStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7GroupBoxStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7GroupBoxStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<Win7GroupBoxStyle> Win7GroupBoxStyle::operator=(rptr<Win7GroupBoxStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7ListViewColumnDropDownStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ListViewColumnDropDownStyle>
	{
	public:
		typedef Win7ListViewColumnDropDownStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ListViewColumnDropDownStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ListViewColumnDropDownStyle::Win7ListViewColumnDropDownStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7ListViewColumnDropDownStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ListViewColumnDropDownStyle::~Win7ListViewColumnDropDownStyle()
	{
	}
	
	rptr<Win7ListViewColumnDropDownStyle> Win7ListViewColumnDropDownStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7ListViewColumnDropDownStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7ListViewColumnDropDownStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetSelected(bool value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::Transfer(GuiButton :: ControlState value)
	{
		throw 0;
	}
	
	rptr<Win7ListViewColumnDropDownStyle> Win7ListViewColumnDropDownStyle::operator=(rptr<Win7ListViewColumnDropDownStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7ListViewColumnHeaderStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ListViewColumnHeaderStyle>
	{
	public:
		typedef Win7ListViewColumnHeaderStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ListViewColumnHeaderStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ListViewColumnHeaderStyle::Win7ListViewColumnHeaderStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7ListViewColumnHeaderStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ListViewColumnHeaderStyle::~Win7ListViewColumnHeaderStyle()
	{
	}
	
	rptr<Win7ListViewColumnHeaderStyle> Win7ListViewColumnHeaderStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7ListViewColumnHeaderStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7ListViewColumnHeaderStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetSelected(bool value)
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::Transfer(GuiButton :: ControlState value)
	{
		throw 0;
	}
	
	rptr<Win7ListViewColumnHeaderStyle> Win7ListViewColumnHeaderStyle::operator=(rptr<Win7ListViewColumnHeaderStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuBarButtonStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7MenuBarButtonStyle>
	{
	public:
		typedef Win7MenuBarButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuBarButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7MenuBarButtonStyle::Win7MenuBarButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiMenuButton :: IStyleController(static_cast<__GacUIInternal<GuiMenuButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuBarButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuBarButtonStyle::~Win7MenuBarButtonStyle()
	{
	}
	
	rptr<Win7MenuBarButtonStyle> Win7MenuBarButtonStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuBarButtonStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuBarButtonStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> Win7MenuBarButtonStyle::CreateSubMenuStyleController()
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetSubMenuExisting(bool value)
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetSubMenuOpening(bool value)
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::Transfer(GuiButton :: ControlState value)
	{
		throw 0;
	}
	
	rptr<Win7MenuBarButtonStyle> Win7MenuBarButtonStyle::operator=(rptr<Win7MenuBarButtonStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuBarStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7MenuBarStyle>
	{
	public:
		typedef Win7MenuBarStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuBarStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7MenuBarStyle::Win7MenuBarStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuBarStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuBarStyle::~Win7MenuBarStyle()
	{
	}
	
	rptr<Win7MenuBarStyle> Win7MenuBarStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuBarStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuBarStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7MenuBarStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7MenuBarStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7MenuBarStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7MenuBarStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<Win7MenuBarStyle> Win7MenuBarStyle::operator=(rptr<Win7MenuBarStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuItemButtonStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7MenuItemButtonStyle>
	{
	public:
		typedef Win7MenuItemButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuItemButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7MenuItemButtonStyle::Win7MenuItemButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiMenuButton :: IStyleController(static_cast<__GacUIInternal<GuiMenuButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuItemButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuItemButtonStyle::~Win7MenuItemButtonStyle()
	{
	}
	
	rptr<Win7MenuItemButtonStyle> Win7MenuItemButtonStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuItemButtonStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuItemButtonStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> Win7MenuItemButtonStyle::CreateSubMenuStyleController()
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetSubMenuExisting(bool value)
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetSubMenuOpening(bool value)
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::Transfer(GuiButton :: ControlState value)
	{
		throw 0;
	}
	
	rptr<Win7MenuItemButtonStyle> Win7MenuItemButtonStyle::operator=(rptr<Win7MenuItemButtonStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuSplitterStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7MenuSplitterStyle>
	{
	public:
		typedef Win7MenuSplitterStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuSplitterStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7MenuSplitterStyle::Win7MenuSplitterStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuSplitterStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuSplitterStyle::~Win7MenuSplitterStyle()
	{
	}
	
	rptr<Win7MenuSplitterStyle> Win7MenuSplitterStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuSplitterStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuSplitterStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7MenuSplitterStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7MenuSplitterStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7MenuSplitterStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7MenuSplitterStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<Win7MenuSplitterStyle> Win7MenuSplitterStyle::operator=(rptr<Win7MenuSplitterStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7MenuStyle>
	{
	public:
		typedef Win7MenuStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7MenuStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7MenuStyle::Win7MenuStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiControl :: IStyleController(static_cast<__GacUIInternal<GuiControl :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7MenuStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MenuStyle::~Win7MenuStyle()
	{
	}
	
	rptr<Win7MenuStyle> Win7MenuStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7MenuStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7MenuStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7MenuStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7MenuStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<Win7MenuStyle> Win7MenuStyle::operator=(rptr<Win7MenuStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7ScrollStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ScrollStyle>
	{
	public:
		typedef Win7ScrollStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ScrollStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ScrollStyle::Win7ScrollStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,CommonScrollStyle(static_cast<__GacUIInternal<CommonScrollStyle>::InternalObjectType*>((__GacUIInternal<Win7ScrollStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ScrollStyle::~Win7ScrollStyle()
	{
	}
	
	rptr<Win7ScrollStyle> Win7ScrollStyle::CreateRptr(CommonScrollStyle :: Direction _direction)
	{
		throw 0;
	}
	
	rptr<Win7ScrollStyle> Win7ScrollStyle::operator=(rptr<Win7ScrollStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7ScrollViewProvider
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ScrollViewProvider>
	{
	public:
		typedef Win7ScrollViewProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7ScrollViewProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ScrollViewProvider::Win7ScrollViewProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiScrollView :: IStyleProvider(static_cast<__GacUIInternal<GuiScrollView :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7ScrollViewProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ScrollViewProvider::~Win7ScrollViewProvider()
	{
	}
	
	rptr<Win7ScrollViewProvider> Win7ScrollViewProvider::CreateRptr()
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller)
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiScroll :: IStyleController> Win7ScrollViewProvider::CreateHorizontalScrollStyle()
	{
		throw 0;
	}
	
	rptr<GuiScroll :: IStyleController> Win7ScrollViewProvider::CreateVerticalScrollStyle()
	{
		throw 0;
	}
	
	signed __int32 Win7ScrollViewProvider::GetDefaultScrollSize()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7ScrollViewProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		throw 0;
	}
	
	rptr<Win7ScrollViewProvider> Win7ScrollViewProvider::operator=(rptr<Win7ScrollViewProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7MultilineTextBoxProvider
***********************************************************************/

	template<>
	class __GacUIInternal<Win7MultilineTextBoxProvider>
	{
	public:
		typedef Win7MultilineTextBoxProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7MultilineTextBoxProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7MultilineTextBoxProvider::Win7MultilineTextBoxProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ScrollViewProvider(static_cast<__GacUIInternal<Win7ScrollViewProvider>::InternalObjectType*>((__GacUIInternal<Win7MultilineTextBoxProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7MultilineTextBoxProvider::~Win7MultilineTextBoxProvider()
	{
	}
	
	rptr<Win7MultilineTextBoxProvider> Win7MultilineTextBoxProvider::CreateRptr()
	{
		throw 0;
	}
	
	void Win7MultilineTextBoxProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller)
	{
		throw 0;
	}
	
	void Win7MultilineTextBoxProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7MultilineTextBoxProvider::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MultilineTextBoxProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		throw 0;
	}
	
	rptr<Win7MultilineTextBoxProvider> Win7MultilineTextBoxProvider::operator=(rptr<Win7MultilineTextBoxProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7ListViewProvider
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ListViewProvider>
	{
	public:
		typedef Win7ListViewProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7ListViewProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ListViewProvider::Win7ListViewProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7MultilineTextBoxProvider(static_cast<__GacUIInternal<Win7MultilineTextBoxProvider>::InternalObjectType*>((__GacUIInternal<Win7ListViewProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiListViewBase :: IStyleProvider(static_cast<__GacUIInternal<GuiListViewBase :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7ListViewProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ListViewProvider::~Win7ListViewProvider()
	{
	}
	
	rptr<Win7ListViewProvider> Win7ListViewProvider::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7ListViewProvider::CreateItemBackground()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7ListViewProvider::CreateColumnStyle()
	{
		throw 0;
	}
	
	Color Win7ListViewProvider::GetPrimaryTextColor()
	{
		throw 0;
	}
	
	Color Win7ListViewProvider::GetSecondaryTextColor()
	{
		throw 0;
	}
	
	Color Win7ListViewProvider::GetItemSeparatorColor()
	{
		throw 0;
	}
	
	rptr<Win7ListViewProvider> Win7ListViewProvider::operator=(rptr<Win7ListViewProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7SelectableItemStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7SelectableItemStyle>
	{
	public:
		typedef Win7SelectableItemStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7SelectableItemStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7SelectableItemStyle::Win7SelectableItemStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyleBase(static_cast<__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*>((__GacUIInternal<Win7SelectableItemStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7SelectableItemStyle::~Win7SelectableItemStyle()
	{
	}
	
	rptr<Win7SelectableItemStyle> Win7SelectableItemStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<Win7SelectableItemStyle> Win7SelectableItemStyle::operator=(rptr<Win7SelectableItemStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7SinglelineTextBoxProvider
***********************************************************************/

	template<>
	class __GacUIInternal<Win7SinglelineTextBoxProvider>
	{
	public:
		typedef Win7SinglelineTextBoxProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7SinglelineTextBoxProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7SinglelineTextBoxProvider::Win7SinglelineTextBoxProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSinglelineTextBox :: IStyleProvider(static_cast<__GacUIInternal<GuiSinglelineTextBox :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7SinglelineTextBoxProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7SinglelineTextBoxProvider::~Win7SinglelineTextBoxProvider()
	{
	}
	
	rptr<Win7SinglelineTextBoxProvider> Win7SinglelineTextBoxProvider::CreateRptr()
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller)
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7SinglelineTextBoxProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		throw 0;
	}
	
	rptr<Win7SinglelineTextBoxProvider> Win7SinglelineTextBoxProvider::operator=(rptr<Win7SinglelineTextBoxProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7TabPageHeaderStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7TabPageHeaderStyle>
	{
	public:
		typedef Win7TabPageHeaderStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7TabPageHeaderStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7TabPageHeaderStyle::Win7TabPageHeaderStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyleBase(static_cast<__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*>((__GacUIInternal<Win7TabPageHeaderStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TabPageHeaderStyle::~Win7TabPageHeaderStyle()
	{
	}
	
	rptr<Win7TabPageHeaderStyle> Win7TabPageHeaderStyle::CreateRptr()
	{
		throw 0;
	}
	
	void Win7TabPageHeaderStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	rptr<Win7TabPageHeaderStyle> Win7TabPageHeaderStyle::operator=(rptr<Win7TabPageHeaderStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7TabStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7TabStyle>
	{
	public:
		typedef Win7TabStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7TabStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7TabStyle::Win7TabStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiTab :: IStyleController(static_cast<__GacUIInternal<GuiTab :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7TabStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TabStyle::~Win7TabStyle()
	{
	}
	
	rptr<Win7TabStyle> Win7TabStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7TabStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7TabStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7TabStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7TabStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7TabStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7TabStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	void Win7TabStyle::SetCommandExecutor(rptr<GuiTab :: ICommandExecutor> value)
	{
		throw 0;
	}
	
	void Win7TabStyle::InsertTab(signed __int32 index)
	{
		throw 0;
	}
	
	void Win7TabStyle::SetTabText(signed __int32 index, const GacString& value)
	{
		throw 0;
	}
	
	void Win7TabStyle::RemoveTab(signed __int32 index)
	{
		throw 0;
	}
	
	void Win7TabStyle::MoveTab(signed __int32 oldIndex, signed __int32 newIndex)
	{
		throw 0;
	}
	
	void Win7TabStyle::SetSelectedTab(signed __int32 index)
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> Win7TabStyle::CreateTabPageStyleController()
	{
		throw 0;
	}
	
	rptr<Win7TabStyle> Win7TabStyle::operator=(rptr<Win7TabStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7TextBoxBackground
***********************************************************************/

	template<>
	class __GacUIInternal<Win7TextBoxBackground>
	{
	public:
		typedef Win7TextBoxBackground WrappedObjectType;
		typedef vl::presentation::win7::Win7TextBoxBackground InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7TextBoxBackground::Win7TextBoxBackground(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	{
	}
	
	Win7TextBoxBackground::~Win7TextBoxBackground()
	{
	}
	
	rptr<Win7TextBoxBackground> Win7TextBoxBackground::CreateRptr()
	{
		throw 0;
	}
	
	void Win7TextBoxBackground::AssociateStyleController(rptr<GuiControl :: IStyleController> controller)
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7TextBoxBackground::InstallBackground(rptr<GuiBoundsComposition> boundsComposition)
	{
		throw 0;
	}
	
	void Win7TextBoxBackground::InitializeTextElement(rptr<GuiColorizedTextElement> _textElement)
	{
		throw 0;
	}
	
	rptr<Win7TextBoxBackground> Win7TextBoxBackground::operator=(rptr<Win7TextBoxBackground> value)
	{
		throw 0;
	}
	
	void Win7TextBoxBackground::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7TextBoxBackground::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7TextListProvider
***********************************************************************/

	template<>
	class __GacUIInternal<Win7TextListProvider>
	{
	public:
		typedef Win7TextListProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7TextListProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7TextListProvider::Win7TextListProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,TextItemStyleProvider :: ITextItemStyleProvider(static_cast<__GacUIInternal<TextItemStyleProvider :: ITextItemStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7TextListProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TextListProvider::~Win7TextListProvider()
	{
	}
	
	rptr<Win7TextListProvider> Win7TextListProvider::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7TextListProvider::CreateBackgroundStyleController()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7TextListProvider::CreateBulletStyleController()
	{
		throw 0;
	}
	
	rptr<Win7TextListProvider> Win7TextListProvider::operator=(rptr<Win7TextListProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7CheckTextListProvider
***********************************************************************/

	template<>
	class __GacUIInternal<Win7CheckTextListProvider>
	{
	public:
		typedef Win7CheckTextListProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7CheckTextListProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7CheckTextListProvider::Win7CheckTextListProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7TextListProvider(static_cast<__GacUIInternal<Win7TextListProvider>::InternalObjectType*>((__GacUIInternal<Win7CheckTextListProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7CheckTextListProvider::~Win7CheckTextListProvider()
	{
	}
	
	rptr<Win7CheckTextListProvider> Win7CheckTextListProvider::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7CheckTextListProvider::CreateBulletStyleController()
	{
		throw 0;
	}
	
	rptr<Win7CheckTextListProvider> Win7CheckTextListProvider::operator=(rptr<Win7CheckTextListProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7RadioTextListProvider
***********************************************************************/

	template<>
	class __GacUIInternal<Win7RadioTextListProvider>
	{
	public:
		typedef Win7RadioTextListProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7RadioTextListProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7RadioTextListProvider::Win7RadioTextListProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7TextListProvider(static_cast<__GacUIInternal<Win7TextListProvider>::InternalObjectType*>((__GacUIInternal<Win7RadioTextListProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7RadioTextListProvider::~Win7RadioTextListProvider()
	{
	}
	
	rptr<Win7RadioTextListProvider> Win7RadioTextListProvider::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7RadioTextListProvider::CreateBulletStyleController()
	{
		throw 0;
	}
	
	rptr<Win7RadioTextListProvider> Win7RadioTextListProvider::operator=(rptr<Win7RadioTextListProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7ToolstripButtonStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7ToolstripButtonStyle>
	{
	public:
		typedef Win7ToolstripButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7ToolstripButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7ToolstripButtonStyle::Win7ToolstripButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7ButtonStyleBase(static_cast<__GacUIInternal<Win7ButtonStyleBase>::InternalObjectType*>((__GacUIInternal<Win7ToolstripButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7ToolstripButtonStyle::~Win7ToolstripButtonStyle()
	{
	}
	
	rptr<Win7ToolstripButtonStyle> Win7ToolstripButtonStyle::CreateRptr(bool transparent)
	{
		throw 0;
	}
	
	rptr<Win7ToolstripButtonStyle> Win7ToolstripButtonStyle::operator=(rptr<Win7ToolstripButtonStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7TrackStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7TrackStyle>
	{
	public:
		typedef Win7TrackStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7TrackStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7TrackStyle::Win7TrackStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,CommonTrackStyle(static_cast<__GacUIInternal<CommonTrackStyle>::InternalObjectType*>((__GacUIInternal<Win7TrackStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TrackStyle::~Win7TrackStyle()
	{
	}
	
	rptr<Win7TrackStyle> Win7TrackStyle::CreateRptr(CommonTrackStyle :: Direction _direction)
	{
		throw 0;
	}
	
	rptr<Win7TrackStyle> Win7TrackStyle::operator=(rptr<Win7TrackStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7TreeViewExpandingButtonStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7TreeViewExpandingButtonStyle>
	{
	public:
		typedef Win7TreeViewExpandingButtonStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7TreeViewExpandingButtonStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7TreeViewExpandingButtonStyle::Win7TreeViewExpandingButtonStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,GuiSelectableButton :: IStyleController(static_cast<__GacUIInternal<GuiSelectableButton :: IStyleController>::InternalObjectType*>((__GacUIInternal<Win7TreeViewExpandingButtonStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TreeViewExpandingButtonStyle::~Win7TreeViewExpandingButtonStyle()
	{
	}
	
	rptr<Win7TreeViewExpandingButtonStyle> Win7TreeViewExpandingButtonStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7TreeViewExpandingButtonStyle::GetBoundsComposition()
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7TreeViewExpandingButtonStyle::GetContainerComposition()
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value)
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetText(const GacString& value)
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetFont(const FontProperties& value)
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetVisuallyEnabled(bool value)
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetSelected(bool value)
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::Transfer(GuiButton :: ControlState value)
	{
		throw 0;
	}
	
	rptr<Win7TreeViewExpandingButtonStyle> Win7TreeViewExpandingButtonStyle::operator=(rptr<Win7TreeViewExpandingButtonStyle> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7TreeViewProvider
***********************************************************************/

	template<>
	class __GacUIInternal<Win7TreeViewProvider>
	{
	public:
		typedef Win7TreeViewProvider WrappedObjectType;
		typedef vl::presentation::win7::Win7TreeViewProvider InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7TreeViewProvider::Win7TreeViewProvider(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7MultilineTextBoxProvider(static_cast<__GacUIInternal<Win7MultilineTextBoxProvider>::InternalObjectType*>((__GacUIInternal<Win7TreeViewProvider>::InternalObjectType*)__internal_object_reference_input))
	    ,GuiTreeView :: IStyleProvider(static_cast<__GacUIInternal<GuiTreeView :: IStyleProvider>::InternalObjectType*>((__GacUIInternal<Win7TreeViewProvider>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7TreeViewProvider::~Win7TreeViewProvider()
	{
	}
	
	rptr<Win7TreeViewProvider> Win7TreeViewProvider::CreateRptr()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7TreeViewProvider::CreateItemBackground()
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7TreeViewProvider::CreateItemExpandingDecorator()
	{
		throw 0;
	}
	
	Color Win7TreeViewProvider::GetTextColor()
	{
		throw 0;
	}
	
	rptr<Win7TreeViewProvider> Win7TreeViewProvider::operator=(rptr<Win7TreeViewProvider> value)
	{
		throw 0;
	}
	

/***********************************************************************
Win7WindowStyle
***********************************************************************/

	template<>
	class __GacUIInternal<Win7WindowStyle>
	{
	public:
		typedef Win7WindowStyle WrappedObjectType;
		typedef vl::presentation::win7::Win7WindowStyle InternalObjectType;
		
		static InternalObjectType* GetInternalObject(const WrappedObjectType& wrappedObject)
		{
			return (InternalObjectType*)wrappedObject.__internal_object_reference;
		}
	};
	
	Win7WindowStyle::Win7WindowStyle(void* __internal_object_reference_input)
	    :__internal_object_reference(__internal_object_reference_input)
	    ,Win7EmptyStyle(static_cast<__GacUIInternal<Win7EmptyStyle>::InternalObjectType*>((__GacUIInternal<Win7WindowStyle>::InternalObjectType*)__internal_object_reference_input))
	{
	}
	
	Win7WindowStyle::~Win7WindowStyle()
	{
	}
	
	rptr<Win7WindowStyle> Win7WindowStyle::CreateRptr()
	{
		throw 0;
	}
	
	rptr<Win7WindowStyle> Win7WindowStyle::operator=(rptr<Win7WindowStyle> value)
	{
		throw 0;
	}
	
}
