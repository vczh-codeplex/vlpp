/***********************************************************************
DO NOT MODIFY!!!
THIS FILE IS GENERATED BY _TranslateXMLtoCode.exe

Developer: 陈梓瀚(vczh)
***********************************************************************/

#include "GacUI.h"
#include "..\..\..\..\..\Candidate\GUI\GUI\GacUI.h"

namespace gacui_cpp
{

/***********************************************************************
Array_of_ColorEntry
***********************************************************************/

	rptr<Array_of_ColorEntry> Array_of_ColorEntry::Create(signed __int32 size);
	{
		throw 0;
	}
	
	bool Array_of_ColorEntry::Contains(constColorEntry& item);
	{
		throw 0;
	}
	
	signed __int32 Array_of_ColorEntry::Count();
	{
		throw 0;
	}
	
	constColorEntry& Array_of_ColorEntry::Get(signed __int32 index);
	{
		throw 0;
	}
	
	ColorEntry& Array_of_ColorEntry::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	constColorEntry& Array_of_ColorEntry::operator[](signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Array_of_ColorEntry::IndexOf(constColorEntry& item);
	{
		throw 0;
	}
	
	void Array_of_ColorEntry::Set(signed __int32 index, constColorEntry& item);
	{
		throw 0;
	}
	
	void Array_of_ColorEntry::Resize(signed __int32 size);
	{
		throw 0;
	}
	
	rptr<Array_of_ColorEntry> Array_of_ColorEntry::operator=(rptr<Array_of_ColorEntry> value);
	{
		throw 0;
	}
	

/***********************************************************************
AxisAlignedItemCoordinateTransformer
***********************************************************************/

	rptr<AxisAlignedItemCoordinateTransformer> AxisAlignedItemCoordinateTransformer::Create(AxisAlignedItemCoordinateTransformer :: Alignment _alignment);
	{
		throw 0;
	}
	
	Size AxisAlignedItemCoordinateTransformer::RealSizeToVirtualSize(Size size);
	{
		throw 0;
	}
	
	Size AxisAlignedItemCoordinateTransformer::VirtualSizeToRealSize(Size size);
	{
		throw 0;
	}
	
	Point AxisAlignedItemCoordinateTransformer::RealPointToVirtualPoint(Size realFullSize, Point point);
	{
		throw 0;
	}
	
	Point AxisAlignedItemCoordinateTransformer::VirtualPointToRealPoint(Size realFullSize, Point point);
	{
		throw 0;
	}
	
	Rect AxisAlignedItemCoordinateTransformer::RealRectToVirtualRect(Size realFullSize, Rect rect);
	{
		throw 0;
	}
	
	Rect AxisAlignedItemCoordinateTransformer::VirtualRectToRealRect(Size realFullSize, Rect rect);
	{
		throw 0;
	}
	
	Margin AxisAlignedItemCoordinateTransformer::RealMarginToVirtualMargin(Margin margin);
	{
		throw 0;
	}
	
	Margin AxisAlignedItemCoordinateTransformer::VirtualMarginToRealMargin(Margin margin);
	{
		throw 0;
	}
	
	rptr<AxisAlignedItemCoordinateTransformer> AxisAlignedItemCoordinateTransformer::operator=(rptr<AxisAlignedItemCoordinateTransformer> value);
	{
		throw 0;
	}
	
	AxisAlignedItemCoordinateTransformer :: Alignment AxisAlignedItemCoordinateTransformer::GetAlignment();
	{
		throw 0;
	}
	

/***********************************************************************
CharAtt
***********************************************************************/

	unsigned __int32 CharAtt::get_rightOffset();
	{
		throw 0;
	}
	void CharAtt::set_rightOffset(unsigned __int32 value);
	{
		throw 0;
	}
	
	unsigned __int32 CharAtt::get_colorIndex();
	{
		throw 0;
	}
	void CharAtt::set_colorIndex(unsigned __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
CharMeasurer
***********************************************************************/

	signed __int32 CharMeasurer::MeasureWidth(wchar_t character);
	{
		throw 0;
	}
	
	rptr<CharMeasurer> CharMeasurer::operator=(rptr<CharMeasurer> value);
	{
		throw 0;
	}
	
	void CharMeasurer::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value);
	{
		throw 0;
	}
	
	signed __int32 CharMeasurer::GetRowHeight();
	{
		throw 0;
	}
	

/***********************************************************************
Color
***********************************************************************/

	rptr<Color> Color::Create(unsigned __int8 _r, unsigned __int8 _g, unsigned __int8 _b, unsigned __int8 _a);
	{
		throw 0;
	}
	C::o::l::o::r::Color(unsigned __int8 _r, unsigned __int8 _g, unsigned __int8 _b, unsigned __int8 _a);
	{
		throw 0;
	}
	
	rptr<Color> Color::Create();
	{
		throw 0;
	}
	C::o::l::o::r::Color();
	{
		throw 0;
	}
	
	signed __int32 Color::Compare(Color color);
	{
		throw 0;
	}
	
	bool Color::operator==(Color color);
	{
		throw 0;
	}
	
	bool Color::operator!=(Color color);
	{
		throw 0;
	}
	
	bool Color::operator<(Color color);
	{
		throw 0;
	}
	
	bool Color::operator<=(Color value);
	{
		throw 0;
	}
	
	bool Color::operator>(Color color);
	{
		throw 0;
	}
	
	bool Color::operator>=(Color value);
	{
		throw 0;
	}
	
	unsigned __int8 Color::get_r();
	{
		throw 0;
	}
	void Color::set_r(unsigned __int8 value);
	{
		throw 0;
	}
	
	unsigned __int8 Color::get_g();
	{
		throw 0;
	}
	void Color::set_g(unsigned __int8 value);
	{
		throw 0;
	}
	
	unsigned __int8 Color::get_b();
	{
		throw 0;
	}
	void Color::set_b(unsigned __int8 value);
	{
		throw 0;
	}
	
	unsigned __int8 Color::get_a();
	{
		throw 0;
	}
	void Color::set_a(unsigned __int8 value);
	{
		throw 0;
	}
	
	unsigned __int32 Color::get_value();
	{
		throw 0;
	}
	void Color::set_value(unsigned __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
ColorEntry
***********************************************************************/

	rptr<ColorEntry> ColorEntry::Create();
	{
		throw 0;
	}
	C::o::l::o::r::E::n::t::r::y::ColorEntry();
	{
		throw 0;
	}
	
	bool ColorEntry::operator==(constColorEntry& value);
	{
		throw 0;
	}
	
	bool ColorEntry::operator!=(constColorEntry& value);
	{
		throw 0;
	}
	
	ColorItem ColorEntry::get_normal();
	{
		throw 0;
	}
	void ColorEntry::set_normal(ColorItem value);
	{
		throw 0;
	}
	
	ColorItem ColorEntry::get_selectedFocused();
	{
		throw 0;
	}
	void ColorEntry::set_selectedFocused(ColorItem value);
	{
		throw 0;
	}
	
	ColorItem ColorEntry::get_selectedUnfocused();
	{
		throw 0;
	}
	void ColorEntry::set_selectedUnfocused(ColorItem value);
	{
		throw 0;
	}
	

/***********************************************************************
ColorItem
***********************************************************************/

	rptr<ColorItem> ColorItem::Create();
	{
		throw 0;
	}
	C::o::l::o::r::I::t::e::m::ColorItem();
	{
		throw 0;
	}
	
	Color ColorItem::get_text();
	{
		throw 0;
	}
	void ColorItem::set_text(Color value);
	{
		throw 0;
	}
	
	Color ColorItem::get_background();
	{
		throw 0;
	}
	void ColorItem::set_background(Color value);
	{
		throw 0;
	}
	

/***********************************************************************
CommonScrollStyle
***********************************************************************/

	rptr<GuiBoundsComposition> CommonScrollStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> CommonScrollStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetCommandExecutor(rptr<GuiScroll :: ICommandExecutor> value);
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetTotalSize(signed __int32 value);
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetPageSize(signed __int32 value);
	{
		throw 0;
	}
	
	void CommonScrollStyle::SetPosition(signed __int32 value);
	{
		throw 0;
	}
	
	rptr<CommonScrollStyle> CommonScrollStyle::operator=(rptr<CommonScrollStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
CommonTrackStyle
***********************************************************************/

	rptr<GuiBoundsComposition> CommonTrackStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> CommonTrackStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetCommandExecutor(rptr<GuiScroll :: ICommandExecutor> value);
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetTotalSize(signed __int32 value);
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetPageSize(signed __int32 value);
	{
		throw 0;
	}
	
	void CommonTrackStyle::SetPosition(signed __int32 value);
	{
		throw 0;
	}
	
	rptr<CommonTrackStyle> CommonTrackStyle::operator=(rptr<CommonTrackStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
DefaultItemCoordinateTransformer
***********************************************************************/

	rptr<DefaultItemCoordinateTransformer> DefaultItemCoordinateTransformer::Create();
	{
		throw 0;
	}
	
	Size DefaultItemCoordinateTransformer::RealSizeToVirtualSize(Size size);
	{
		throw 0;
	}
	
	Size DefaultItemCoordinateTransformer::VirtualSizeToRealSize(Size size);
	{
		throw 0;
	}
	
	Point DefaultItemCoordinateTransformer::RealPointToVirtualPoint(Size realFullSize, Point point);
	{
		throw 0;
	}
	
	Point DefaultItemCoordinateTransformer::VirtualPointToRealPoint(Size realFullSize, Point point);
	{
		throw 0;
	}
	
	Rect DefaultItemCoordinateTransformer::RealRectToVirtualRect(Size realFullSize, Rect rect);
	{
		throw 0;
	}
	
	Rect DefaultItemCoordinateTransformer::VirtualRectToRealRect(Size realFullSize, Rect rect);
	{
		throw 0;
	}
	
	Margin DefaultItemCoordinateTransformer::RealMarginToVirtualMargin(Margin margin);
	{
		throw 0;
	}
	
	Margin DefaultItemCoordinateTransformer::VirtualMarginToRealMargin(Margin margin);
	{
		throw 0;
	}
	
	rptr<DefaultItemCoordinateTransformer> DefaultItemCoordinateTransformer::operator=(rptr<DefaultItemCoordinateTransformer> value);
	{
		throw 0;
	}
	

/***********************************************************************
DescriptableObject
***********************************************************************/

	rptr<DescriptableObject> DescriptableObject::Create();
	{
		throw 0;
	}
	D::e::s::c::r::i::p::t::a::b::l::e::O::b::j::e::c::t::DescriptableObject();
	{
		throw 0;
	}
	
	DescriptableObject& DescriptableObject::operator=(constDescriptableObject& value);
	{
		throw 0;
	}
	

/***********************************************************************
FixedHeightItemArranger
***********************************************************************/

	rptr<FixedHeightItemArranger> FixedHeightItemArranger::Create();
	{
		throw 0;
	}
	
	rptr<FixedHeightItemArranger> FixedHeightItemArranger::operator=(rptr<FixedHeightItemArranger> value);
	{
		throw 0;
	}
	

/***********************************************************************
FixedHeightMultiColumnItemArranger
***********************************************************************/

	rptr<FixedHeightMultiColumnItemArranger> FixedHeightMultiColumnItemArranger::Create();
	{
		throw 0;
	}
	
	rptr<FixedHeightMultiColumnItemArranger> FixedHeightMultiColumnItemArranger::operator=(rptr<FixedHeightMultiColumnItemArranger> value);
	{
		throw 0;
	}
	

/***********************************************************************
FixedSizeMultiColumnItemArranger
***********************************************************************/

	rptr<FixedSizeMultiColumnItemArranger> FixedSizeMultiColumnItemArranger::Create();
	{
		throw 0;
	}
	
	rptr<FixedSizeMultiColumnItemArranger> FixedSizeMultiColumnItemArranger::operator=(rptr<FixedSizeMultiColumnItemArranger> value);
	{
		throw 0;
	}
	

/***********************************************************************
FontProperties
***********************************************************************/

	rptr<FontProperties> FontProperties::Create(constFontProperties& __that);
	{
		throw 0;
	}
	F::o::n::t::P::r::o::p::e::r::t::i::e::s::FontProperties(constFontProperties& __that);
	{
		throw 0;
	}
	
	rptr<FontProperties> FontProperties::Create();
	{
		throw 0;
	}
	F::o::n::t::P::r::o::p::e::r::t::i::e::s::FontProperties();
	{
		throw 0;
	}
	
	signed __int32 FontProperties::Compare(constFontProperties& value);
	{
		throw 0;
	}
	
	bool FontProperties::operator==(constFontProperties& value);
	{
		throw 0;
	}
	
	bool FontProperties::operator!=(constFontProperties& value);
	{
		throw 0;
	}
	
	bool FontProperties::operator<(constFontProperties& value);
	{
		throw 0;
	}
	
	bool FontProperties::operator<=(constFontProperties& value);
	{
		throw 0;
	}
	
	bool FontProperties::operator>(constFontProperties& value);
	{
		throw 0;
	}
	
	bool FontProperties::operator>=(constFontProperties& value);
	{
		throw 0;
	}
	
	FontProperties& FontProperties::operator=(constFontProperties& __that);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> FontProperties::get_fontFamily();
	{
		throw 0;
	}
	void FontProperties::set_fontFamily(vl::ObjectString<wchar_t> value);
	{
		throw 0;
	}
	
	signed __int32 FontProperties::get_size();
	{
		throw 0;
	}
	void FontProperties::set_size(signed __int32 value);
	{
		throw 0;
	}
	
	bool FontProperties::get_bold();
	{
		throw 0;
	}
	void FontProperties::set_bold(bool value);
	{
		throw 0;
	}
	
	bool FontProperties::get_italic();
	{
		throw 0;
	}
	void FontProperties::set_italic(bool value);
	{
		throw 0;
	}
	
	bool FontProperties::get_underline();
	{
		throw 0;
	}
	void FontProperties::set_underline(bool value);
	{
		throw 0;
	}
	
	bool FontProperties::get_strikeline();
	{
		throw 0;
	}
	void FontProperties::set_strikeline(bool value);
	{
		throw 0;
	}
	
	bool FontProperties::get_antialias();
	{
		throw 0;
	}
	void FontProperties::set_antialias(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
Gui3DBorderElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> Gui3DBorderElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> Gui3DBorderElement::GetRenderer();
	{
		throw 0;
	}
	
	void Gui3DBorderElement::SetColors(Color value1, Color value2);
	{
		throw 0;
	}
	
	rptr<Gui3DBorderElement> Gui3DBorderElement::operator=(rptr<Gui3DBorderElement> value);
	{
		throw 0;
	}
	
	rptr<Gui3DBorderElement> Gui3DBorderElement::Create();
	{
		throw 0;
	}
	
	Color Gui3DBorderElement::GetColor1();
	{
		throw 0;
	}
	
	Color Gui3DBorderElement::GetColor2();
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> Gui3DBorderElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
Gui3DSplitterElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> Gui3DSplitterElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> Gui3DSplitterElement::GetRenderer();
	{
		throw 0;
	}
	
	void Gui3DSplitterElement::SetColors(Color value1, Color value2);
	{
		throw 0;
	}
	
	rptr<Gui3DSplitterElement> Gui3DSplitterElement::operator=(rptr<Gui3DSplitterElement> value);
	{
		throw 0;
	}
	
	rptr<Gui3DSplitterElement> Gui3DSplitterElement::Create();
	{
		throw 0;
	}
	
	Color Gui3DSplitterElement::GetColor1();
	{
		throw 0;
	}
	
	Color Gui3DSplitterElement::GetColor2();
	{
		throw 0;
	}
	
	Gui3DSplitterElement :: Direction Gui3DSplitterElement::GetDirection();
	{
		throw 0;
	}
	void Gui3DSplitterElement::SetDirection(Gui3DSplitterElement :: Direction value);
	{
		throw 0;
	}
	
	Gui3DSplitterElement :: Direction Gui3DSplitterElement::GetDirection();
	{
		throw 0;
	}
	void Gui3DSplitterElement::SetDirection(Gui3DSplitterElement :: Direction value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> Gui3DSplitterElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiApplication
***********************************************************************/

	void GuiApplication::Run(rptr<GuiWindow> _mainWindow);
	{
		throw 0;
	}
	
	rptr<GuiWindow> GuiApplication::GetWindow(Point location);
	{
		throw 0;
	}
	
	bool GuiApplication::IsInMainThread();
	{
		throw 0;
	}
	
	rptr<GuiApplication> GuiApplication::operator=(rptr<GuiApplication> value);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiWindow_raw_pointer> GuiApplication::GetWindows();
	{
		throw 0;
	}
	

/***********************************************************************
GuiBoundsComposition
***********************************************************************/

	rptr<GuiBoundsComposition> GuiBoundsComposition::Create();
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiBoundsComposition::GetAffectionFromParent();
	{
		throw 0;
	}
	
	Rect GuiBoundsComposition::GetPreferredBounds();
	{
		throw 0;
	}
	
	Rect GuiBoundsComposition::GetBounds();
	{
		throw 0;
	}
	
	void GuiBoundsComposition::ClearAlignmentToParent();
	{
		throw 0;
	}
	
	bool GuiBoundsComposition::IsAlignedToParent();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiBoundsComposition::operator=(rptr<GuiBoundsComposition> value);
	{
		throw 0;
	}
	
	void GuiBoundsComposition::SetBounds(Rect value);
	{
		throw 0;
	}
	
	Margin GuiBoundsComposition::GetAlignmentToParent();
	{
		throw 0;
	}
	void GuiBoundsComposition::SetAlignmentToParent(Margin value);
	{
		throw 0;
	}
	
	Margin GuiBoundsComposition::GetAlignmentToParent();
	{
		throw 0;
	}
	void GuiBoundsComposition::SetAlignmentToParent(Margin value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiBoundsComposition::get_BoundsChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiButton
***********************************************************************/

	rptr<GuiButton> GuiButton::Create(rptr<GuiButton :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	rptr<GuiButton> GuiButton::operator=(rptr<GuiButton> value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiButton::get_Clicked();
	{
		throw 0;
	}
	

/***********************************************************************
GuiButton :: IStyleController
***********************************************************************/

	void GuiButton::IStyleController::Transfer(GuiButton :: ControlState value);
	{
		throw 0;
	}
	
	rptr<GuiButton :: IStyleController> GuiButton::IStyleController::operator=(rptr<GuiButton :: IStyleController> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiCellComposition
***********************************************************************/

	rptr<GuiCellComposition> GuiCellComposition::Create();
	{
		throw 0;
	}
	
	bool GuiCellComposition::SetSite(signed __int32 _row, signed __int32 _column, signed __int32 _rowSpan, signed __int32 _columnSpan);
	{
		throw 0;
	}
	
	Rect GuiCellComposition::GetBounds();
	{
		throw 0;
	}
	
	rptr<GuiCellComposition> GuiCellComposition::operator=(rptr<GuiCellComposition> value);
	{
		throw 0;
	}
	
	rptr<GuiTableComposition> GuiCellComposition::GetTableParent();
	{
		throw 0;
	}
	
	signed __int32 GuiCellComposition::GetRow();
	{
		throw 0;
	}
	
	signed __int32 GuiCellComposition::GetRowSpan();
	{
		throw 0;
	}
	
	signed __int32 GuiCellComposition::GetColumn();
	{
		throw 0;
	}
	
	signed __int32 GuiCellComposition::GetColumnSpan();
	{
		throw 0;
	}
	

/***********************************************************************
GuiCellOption
***********************************************************************/

	rptr<GuiCellOption> GuiCellOption::Create();
	{
		throw 0;
	}
	G::u::i::C::e::l::l::O::p::t::i::o::n::GuiCellOption();
	{
		throw 0;
	}
	
	bool GuiCellOption::operator==(constGuiCellOption& value);
	{
		throw 0;
	}
	
	bool GuiCellOption::operator!=(constGuiCellOption& value);
	{
		throw 0;
	}
	
	GuiCellOption GuiCellOption::AbsoluteOption(signed __int32 value);
	{
		throw 0;
	}
	
	GuiCellOption GuiCellOption::PercentageOption(double value);
	{
		throw 0;
	}
	
	GuiCellOption GuiCellOption::MinSizeOption();
	{
		throw 0;
	}
	
	GuiCellOption :: ComposeType GuiCellOption::get_composeType();
	{
		throw 0;
	}
	void GuiCellOption::set_composeType(GuiCellOption :: ComposeType value);
	{
		throw 0;
	}
	
	signed __int32 GuiCellOption::get_absolute();
	{
		throw 0;
	}
	void GuiCellOption::set_absolute(signed __int32 value);
	{
		throw 0;
	}
	
	double GuiCellOption::get_percentage();
	{
		throw 0;
	}
	void GuiCellOption::set_percentage(double value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiCharEventArgs
***********************************************************************/

	rptr<GuiCharEventArgs> GuiCharEventArgs::Create();
	{
		throw 0;
	}
	G::u::i::C::h::a::r::E::v::e::n::t::A::r::g::s::GuiCharEventArgs();
	{
		throw 0;
	}
	

/***********************************************************************
GuiColorizedTextElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> GuiColorizedTextElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiColorizedTextElement::GetRenderer();
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiColorizedTextElement::operator=(rptr<GuiColorizedTextElement> value);
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiColorizedTextElement::Create();
	{
		throw 0;
	}
	
	TextLines& GuiColorizedTextElement::GetLines();
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement :: ICallback> GuiColorizedTextElement::GetCallback();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCallback(rptr<GuiColorizedTextElement :: ICallback> value);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_ColorEntry> GuiColorizedTextElement::GetColors();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetColors(rptr<Array_of_ColorEntry> value);
	{
		throw 0;
	}
	
	constFontProperties& GuiColorizedTextElement::GetFont();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	Point GuiColorizedTextElement::GetViewPosition();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetViewPosition(Point value);
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetVisuallyEnabled();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetFocused();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetFocused(bool value);
	{
		throw 0;
	}
	
	TextPos GuiColorizedTextElement::GetCaretBegin();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCaretBegin(TextPos value);
	{
		throw 0;
	}
	
	TextPos GuiColorizedTextElement::GetCaretEnd();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCaretEnd(TextPos value);
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetCaretVisible();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCaretVisible(bool value);
	{
		throw 0;
	}
	
	Color GuiColorizedTextElement::GetCaretColor();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCaretColor(Color value);
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement :: ICallback> GuiColorizedTextElement::GetCallback();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCallback(rptr<GuiColorizedTextElement :: ICallback> value);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_ColorEntry> GuiColorizedTextElement::GetColors();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetColors(rptr<Array_of_ColorEntry> value);
	{
		throw 0;
	}
	
	constFontProperties& GuiColorizedTextElement::GetFont();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	Point GuiColorizedTextElement::GetViewPosition();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetViewPosition(Point value);
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetVisuallyEnabled();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetFocused();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetFocused(bool value);
	{
		throw 0;
	}
	
	TextPos GuiColorizedTextElement::GetCaretBegin();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCaretBegin(TextPos value);
	{
		throw 0;
	}
	
	TextPos GuiColorizedTextElement::GetCaretEnd();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCaretEnd(TextPos value);
	{
		throw 0;
	}
	
	bool GuiColorizedTextElement::GetCaretVisible();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCaretVisible(bool value);
	{
		throw 0;
	}
	
	Color GuiColorizedTextElement::GetCaretColor();
	{
		throw 0;
	}
	void GuiColorizedTextElement::SetCaretColor(Color value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiColorizedTextElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiColorizedTextElement :: ICallback
***********************************************************************/

	void GuiColorizedTextElement::ICallback::ColorChanged();
	{
		throw 0;
	}
	
	void GuiColorizedTextElement::ICallback::FontChanged();
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement :: ICallback> GuiColorizedTextElement::ICallback::operator=(rptr<GuiColorizedTextElement :: ICallback> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiComboBoxBase
***********************************************************************/

	rptr<GuiComboBoxBase> GuiComboBoxBase::Create(rptr<GuiComboBoxBase :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	void GuiComboBoxBase::ShowPopup();
	{
		throw 0;
	}
	
	rptr<GuiComboBoxBase> GuiComboBoxBase::operator=(rptr<GuiComboBoxBase> value);
	{
		throw 0;
	}
	
	rptr<GuiPopup> GuiComboBoxBase::GetPopup();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxBase::get_PopupOpened();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxBase::get_PopupClosed();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxBase::get_ItemSelecting();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxBase::get_ItemSelected();
	{
		throw 0;
	}
	

/***********************************************************************
GuiComboBoxBase :: ICommandExecutor
***********************************************************************/

	void GuiComboBoxBase::ICommandExecutor::ShowPopup();
	{
		throw 0;
	}
	
	void GuiComboBoxBase::ICommandExecutor::SelectItem();
	{
		throw 0;
	}
	
	rptr<GuiComboBoxBase :: ICommandExecutor> GuiComboBoxBase::ICommandExecutor::operator=(rptr<GuiComboBoxBase :: ICommandExecutor> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiComboBoxBase :: IStyleController
***********************************************************************/

	void GuiComboBoxBase::IStyleController::OnClicked();
	{
		throw 0;
	}
	
	void GuiComboBoxBase::IStyleController::OnPopupOpened();
	{
		throw 0;
	}
	
	void GuiComboBoxBase::IStyleController::OnPopupClosed();
	{
		throw 0;
	}
	
	void GuiComboBoxBase::IStyleController::OnItemSelected();
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> GuiComboBoxBase::IStyleController::CreatePopupStyle();
	{
		throw 0;
	}
	
	rptr<GuiComboBoxBase :: IStyleController> GuiComboBoxBase::IStyleController::operator=(rptr<GuiComboBoxBase :: IStyleController> value);
	{
		throw 0;
	}
	
	void GuiComboBoxBase::IStyleController::SetCommandExecutor(rptr<GuiComboBoxBase :: ICommandExecutor> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiComboBoxListControl
***********************************************************************/

	rptr<GuiComboBoxListControl> GuiComboBoxListControl::Create(rptr<GuiComboBoxBase :: IStyleController> _styleController, rptr<GuiSelectableListControl> _containedListControl);
	{
		throw 0;
	}
	
	void GuiComboBoxListControl::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	rptr<GuiComboBoxListControl> GuiComboBoxListControl::operator=(rptr<GuiComboBoxListControl> value);
	{
		throw 0;
	}
	
	rptr<GuiSelectableListControl> GuiComboBoxListControl::GetContainedListControl();
	{
		throw 0;
	}
	
	signed __int32 GuiComboBoxListControl::GetSelectedIndex();
	{
		throw 0;
	}
	void GuiComboBoxListControl::SetSelectedIndex(signed __int32 value);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemProvider> GuiComboBoxListControl::GetItemProvider();
	{
		throw 0;
	}
	
	signed __int32 GuiComboBoxListControl::GetSelectedIndex();
	{
		throw 0;
	}
	void GuiComboBoxListControl::SetSelectedIndex(signed __int32 value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiComboBoxListControl::get_SelectedIndexChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiComponent
***********************************************************************/

	rptr<GuiComponent> GuiComponent::Create();
	{
		throw 0;
	}
	
	rptr<GuiComponent> GuiComponent::operator=(rptr<GuiComponent> value);
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiComponent::GetControlHost();
	{
		throw 0;
	}
	

/***********************************************************************
GuiControl
***********************************************************************/

	rptr<GuiControl> GuiControl::Create(rptr<GuiControl :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiControl::GetChild(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<IDescriptable> GuiControl::QueryService(const GacString& identifier);
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiControl::operator=(rptr<GuiControl> value);
	{
		throw 0;
	}
	
	GuiEventArgs GuiControl::GetNotifyEventArguments();
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> GuiControl::GetStyleController();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiControl::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::GetContainerComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::GetFocusableComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEventReceiver> GuiControl::GetEventReceiver();
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiControl::GetParent();
	{
		throw 0;
	}
	
	signed __int32 GuiControl::GetChildrenCount();
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiControl::GetRelatedControlHost();
	{
		throw 0;
	}
	
	bool GuiControl::GetVisuallyEnabled();
	{
		throw 0;
	}
	
	bool GuiControl::GetEnabled();
	{
		throw 0;
	}
	void GuiControl::SetEnabled(bool value);
	{
		throw 0;
	}
	
	bool GuiControl::GetVisible();
	{
		throw 0;
	}
	void GuiControl::SetVisible(bool value);
	{
		throw 0;
	}
	
	const GacString& GuiControl::GetText();
	{
		throw 0;
	}
	void GuiControl::SetText(const GacString& value);
	{
		throw 0;
	}
	
	constFontProperties& GuiControl::GetFont();
	{
		throw 0;
	}
	void GuiControl::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	bool GuiControl::GetEnabled();
	{
		throw 0;
	}
	void GuiControl::SetEnabled(bool value);
	{
		throw 0;
	}
	
	bool GuiControl::GetVisible();
	{
		throw 0;
	}
	void GuiControl::SetVisible(bool value);
	{
		throw 0;
	}
	
	const GacString& GuiControl::GetText();
	{
		throw 0;
	}
	void GuiControl::SetText(const GacString& value);
	{
		throw 0;
	}
	
	constFontProperties& GuiControl::GetFont();
	{
		throw 0;
	}
	void GuiControl::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::get_VisibleChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::get_EnabledChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::get_VisuallyEnabledChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::get_TextChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControl::get_FontChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiControl :: IStyleController
***********************************************************************/

	rptr<GuiControl :: IStyleController> GuiControl::IStyleController::operator=(rptr<GuiControl :: IStyleController> value);
	{
		throw 0;
	}
	
	void GuiControl::IStyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void GuiControl::IStyleController::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void GuiControl::IStyleController::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void GuiControl::IStyleController::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiControl::IStyleController::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiControl::IStyleController::GetContainerComposition();
	{
		throw 0;
	}
	

/***********************************************************************
GuiControl :: IStyleProvider
***********************************************************************/

	void GuiControl::IStyleProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller);
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleProvider> GuiControl::IStyleProvider::operator=(rptr<GuiControl :: IStyleProvider> value);
	{
		throw 0;
	}
	
	void GuiControl::IStyleProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void GuiControl::IStyleProvider::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void GuiControl::IStyleProvider::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void GuiControl::IStyleProvider::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiControlHost
***********************************************************************/

	rptr<GuiControlHost> GuiControlHost::Create(rptr<GuiControl :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	void GuiControlHost::Render();
	{
		throw 0;
	}
	
	bool GuiControlHost::GetEnabled();
	{
		throw 0;
	}
	
	void GuiControlHost::SetEnabled(bool value);
	{
		throw 0;
	}
	
	void GuiControlHost::SetFocused();
	{
		throw 0;
	}
	
	void GuiControlHost::SetActivated();
	{
		throw 0;
	}
	
	bool GuiControlHost::AddComponent(rptr<GuiComponent> component);
	{
		throw 0;
	}
	
	bool GuiControlHost::RemoveComponent(rptr<GuiComponent> component);
	{
		throw 0;
	}
	
	bool GuiControlHost::ContainsComponent(rptr<GuiComponent> component);
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiControlHost::GetRelatedControlHost();
	{
		throw 0;
	}
	
	const GacString& GuiControlHost::GetText();
	{
		throw 0;
	}
	
	void GuiControlHost::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void GuiControlHost::Show();
	{
		throw 0;
	}
	
	void GuiControlHost::ShowDeactivated();
	{
		throw 0;
	}
	
	void GuiControlHost::ShowRestored();
	{
		throw 0;
	}
	
	void GuiControlHost::ShowMaximized();
	{
		throw 0;
	}
	
	void GuiControlHost::ShowMinimized();
	{
		throw 0;
	}
	
	void GuiControlHost::Hide();
	{
		throw 0;
	}
	
	void GuiControlHost::Close();
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiControlHost::operator=(rptr<GuiControlHost> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsHost> GuiControlHost::GetGraphicsHost();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiControlHost::GetMainComposition();
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiControlHost::GetNativeWindow();
	{
		throw 0;
	}
	void GuiControlHost::SetNativeWindow(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetFocused();
	{
		throw 0;
	}
	
	bool GuiControlHost::GetActivated();
	{
		throw 0;
	}
	
	bool GuiControlHost::GetShowInTaskBar();
	{
		throw 0;
	}
	void GuiControlHost::SetShowInTaskBar(bool value);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetEnabledActivate();
	{
		throw 0;
	}
	void GuiControlHost::SetEnabledActivate(bool value);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetMaximizedBox();
	{
		throw 0;
	}
	void GuiControlHost::SetMaximizedBox(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetMinimizedBox();
	{
		throw 0;
	}
	void GuiControlHost::SetMinimizedBox(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetBorder();
	{
		throw 0;
	}
	void GuiControlHost::SetBorder(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetSizeBox();
	{
		throw 0;
	}
	void GuiControlHost::SetSizeBox(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetIconVisible();
	{
		throw 0;
	}
	void GuiControlHost::SetIconVisible(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetTitleBar();
	{
		throw 0;
	}
	void GuiControlHost::SetTitleBar(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetTopMost();
	{
		throw 0;
	}
	void GuiControlHost::SetTopMost(bool topmost);
	{
		throw 0;
	}
	
	Size GuiControlHost::GetClientSize();
	{
		throw 0;
	}
	void GuiControlHost::SetClientSize(Size value);
	{
		throw 0;
	}
	
	Rect GuiControlHost::GetBounds();
	{
		throw 0;
	}
	void GuiControlHost::SetBounds(Rect value);
	{
		throw 0;
	}
	
	rptr<INativeScreen> GuiControlHost::GetRelatedScreen();
	{
		throw 0;
	}
	
	bool GuiControlHost::GetOpening();
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiControlHost::GetNativeWindow();
	{
		throw 0;
	}
	void GuiControlHost::SetNativeWindow(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetShowInTaskBar();
	{
		throw 0;
	}
	void GuiControlHost::SetShowInTaskBar(bool value);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetEnabledActivate();
	{
		throw 0;
	}
	void GuiControlHost::SetEnabledActivate(bool value);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetMaximizedBox();
	{
		throw 0;
	}
	void GuiControlHost::SetMaximizedBox(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetMinimizedBox();
	{
		throw 0;
	}
	void GuiControlHost::SetMinimizedBox(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetBorder();
	{
		throw 0;
	}
	void GuiControlHost::SetBorder(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetSizeBox();
	{
		throw 0;
	}
	void GuiControlHost::SetSizeBox(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetIconVisible();
	{
		throw 0;
	}
	void GuiControlHost::SetIconVisible(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetTitleBar();
	{
		throw 0;
	}
	void GuiControlHost::SetTitleBar(bool visible);
	{
		throw 0;
	}
	
	bool GuiControlHost::GetTopMost();
	{
		throw 0;
	}
	void GuiControlHost::SetTopMost(bool topmost);
	{
		throw 0;
	}
	
	Size GuiControlHost::GetClientSize();
	{
		throw 0;
	}
	void GuiControlHost::SetClientSize(Size value);
	{
		throw 0;
	}
	
	Rect GuiControlHost::GetBounds();
	{
		throw 0;
	}
	void GuiControlHost::SetBounds(Rect value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::get_WindowGotFocus();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::get_WindowLostFocus();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::get_WindowActivated();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::get_WindowDeactivated();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::get_WindowOpened();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiRequestEventArgs GuiControlHost::get_WindowClosing();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::get_WindowClosed();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiControlHost::get_WindowDestroying();
	{
		throw 0;
	}
	

/***********************************************************************
GuiEventArgs
***********************************************************************/

	rptr<GuiEventArgs> GuiEventArgs::Create(rptr<GuiGraphicsComposition> composition);
	{
		throw 0;
	}
	G::u::i::E::v::e::n::t::A::r::g::s::GuiEventArgs(rptr<GuiGraphicsComposition> composition);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiEventArgs::get_compositionSource();
	{
		throw 0;
	}
	void GuiEventArgs::set_compositionSource(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiEventArgs::get_eventSource();
	{
		throw 0;
	}
	void GuiEventArgs::set_eventSource(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	bool GuiEventArgs::get_handled();
	{
		throw 0;
	}
	void GuiEventArgs::set_handled(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGradientBackgroundElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> GuiGradientBackgroundElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiGradientBackgroundElement::GetRenderer();
	{
		throw 0;
	}
	
	void GuiGradientBackgroundElement::SetColors(Color value1, Color value2);
	{
		throw 0;
	}
	
	rptr<GuiGradientBackgroundElement> GuiGradientBackgroundElement::operator=(rptr<GuiGradientBackgroundElement> value);
	{
		throw 0;
	}
	
	rptr<GuiGradientBackgroundElement> GuiGradientBackgroundElement::Create();
	{
		throw 0;
	}
	
	Color GuiGradientBackgroundElement::GetColor1();
	{
		throw 0;
	}
	
	Color GuiGradientBackgroundElement::GetColor2();
	{
		throw 0;
	}
	
	GuiGradientBackgroundElement :: Direction GuiGradientBackgroundElement::GetDirection();
	{
		throw 0;
	}
	void GuiGradientBackgroundElement::SetDirection(GuiGradientBackgroundElement :: Direction value);
	{
		throw 0;
	}
	
	ElementShape :: Type GuiGradientBackgroundElement::GetShape();
	{
		throw 0;
	}
	void GuiGradientBackgroundElement::SetShape(ElementShape :: Type value);
	{
		throw 0;
	}
	
	GuiGradientBackgroundElement :: Direction GuiGradientBackgroundElement::GetDirection();
	{
		throw 0;
	}
	void GuiGradientBackgroundElement::SetDirection(GuiGradientBackgroundElement :: Direction value);
	{
		throw 0;
	}
	
	ElementShape :: Type GuiGradientBackgroundElement::GetShape();
	{
		throw 0;
	}
	void GuiGradientBackgroundElement::SetShape(ElementShape :: Type value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiGradientBackgroundElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsAnimationManager
***********************************************************************/

	rptr<GuiGraphicsAnimationManager> GuiGraphicsAnimationManager::Create();
	{
		throw 0;
	}
	
	void GuiGraphicsAnimationManager::AddAnimation(sptr<IGuiGraphicsAnimation> animation);
	{
		throw 0;
	}
	
	bool GuiGraphicsAnimationManager::HasAnimation();
	{
		throw 0;
	}
	
	void GuiGraphicsAnimationManager::Play();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsAnimationManager> GuiGraphicsAnimationManager::operator=(rptr<GuiGraphicsAnimationManager> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsComposition
***********************************************************************/

	rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> GuiGraphicsComposition::Children();
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::AddChild(rptr<GuiGraphicsComposition> child);
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::InsertChild(signed __int32 index, rptr<GuiGraphicsComposition> child);
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::RemoveChild(rptr<GuiGraphicsComposition> child);
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::MoveChild(rptr<GuiGraphicsComposition> child, signed __int32 newIndex);
	{
		throw 0;
	}
	
	void GuiGraphicsComposition::Render(Size offset);
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::HasEventReceiver();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsComposition::FindComposition(Point location);
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::IsSizeAffectParent();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsComposition::operator=(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsComposition::GetParent();
	{
		throw 0;
	}
	
	sptr<IGuiGraphicsElement> GuiGraphicsComposition::GetOwnedElement();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetOwnedElement(sptr<IGuiGraphicsElement> element);
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::GetVisible();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetVisible(bool value);
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: MinSizeLimitation GuiGraphicsComposition::GetMinSizeLimitation();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetMinSizeLimitation(GuiGraphicsComposition :: MinSizeLimitation value);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> GuiGraphicsComposition::GetRenderTarget();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEventReceiver> GuiGraphicsComposition::GetEventReceiver();
	{
		throw 0;
	}
	
	Rect GuiGraphicsComposition::GetGlobalBounds();
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiGraphicsComposition::GetAssociatedControl();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsComposition::GetAssociatedHost();
	{
		throw 0;
	}
	
	rptr<INativeCursor> GuiGraphicsComposition::GetAssociatedCursor();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetAssociatedCursor(rptr<INativeCursor> cursor);
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiGraphicsComposition::GetRelatedControl();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsComposition::GetRelatedGraphicsHost();
	{
		throw 0;
	}
	
	rptr<GuiControlHost> GuiGraphicsComposition::GetRelatedControlHost();
	{
		throw 0;
	}
	
	rptr<INativeCursor> GuiGraphicsComposition::GetRelatedCursor();
	{
		throw 0;
	}
	
	Margin GuiGraphicsComposition::GetMargin();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetMargin(Margin value);
	{
		throw 0;
	}
	
	Margin GuiGraphicsComposition::GetInternalMargin();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetInternalMargin(Margin value);
	{
		throw 0;
	}
	
	Size GuiGraphicsComposition::GetPreferredMinSize();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetPreferredMinSize(Size value);
	{
		throw 0;
	}
	
	Rect GuiGraphicsComposition::GetClientArea();
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiGraphicsComposition::GetAffectionFromParent();
	{
		throw 0;
	}
	
	Size GuiGraphicsComposition::GetMinPreferredClientSize();
	{
		throw 0;
	}
	
	Rect GuiGraphicsComposition::GetPreferredBounds();
	{
		throw 0;
	}
	
	Rect GuiGraphicsComposition::GetBounds();
	{
		throw 0;
	}
	
	sptr<IGuiGraphicsElement> GuiGraphicsComposition::GetOwnedElement();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetOwnedElement(sptr<IGuiGraphicsElement> element);
	{
		throw 0;
	}
	
	bool GuiGraphicsComposition::GetVisible();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetVisible(bool value);
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: MinSizeLimitation GuiGraphicsComposition::GetMinSizeLimitation();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetMinSizeLimitation(GuiGraphicsComposition :: MinSizeLimitation value);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> GuiGraphicsComposition::GetRenderTarget();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value);
	{
		throw 0;
	}
	
	rptr<INativeCursor> GuiGraphicsComposition::GetAssociatedCursor();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetAssociatedCursor(rptr<INativeCursor> cursor);
	{
		throw 0;
	}
	
	Margin GuiGraphicsComposition::GetMargin();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetMargin(Margin value);
	{
		throw 0;
	}
	
	Margin GuiGraphicsComposition::GetInternalMargin();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetInternalMargin(Margin value);
	{
		throw 0;
	}
	
	Size GuiGraphicsComposition::GetPreferredMinSize();
	{
		throw 0;
	}
	void GuiGraphicsComposition::SetPreferredMinSize(Size value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiCharEventArgs
***********************************************************************/

	rptr<GuiGraphicsEvent_of_GuiCharEventArgs> GuiGraphicsEvent_of_GuiCharEventArgs::Create(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiCharEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiCharEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiCharEventArgs::Execute(GuiCharEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiCharEventArgs> GuiGraphicsEvent_of_GuiCharEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiCharEventArgs> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiCharEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiCharEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiCharEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiCharEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler
***********************************************************************/

	void GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiCharEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> GuiGraphicsEvent_of_GuiCharEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiCharEventArgs :: IHandler> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiEventArgs
***********************************************************************/

	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEvent_of_GuiEventArgs::Create(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiEventArgs::Execute(GuiEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs> GuiGraphicsEvent_of_GuiEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiEventArgs> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiEventArgs :: IHandler
***********************************************************************/

	void GuiGraphicsEvent_of_GuiEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> GuiGraphicsEvent_of_GuiEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiEventArgs :: IHandler> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiKeyEventArgs
***********************************************************************/

	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEvent_of_GuiKeyEventArgs::Create(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiKeyEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiKeyEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiKeyEventArgs::Execute(GuiKeyEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> GuiGraphicsEvent_of_GuiKeyEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiKeyEventArgs> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiKeyEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiKeyEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiKeyEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiKeyEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler
***********************************************************************/

	void GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiKeyEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> GuiGraphicsEvent_of_GuiKeyEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiKeyEventArgs :: IHandler> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiMouseEventArgs
***********************************************************************/

	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEvent_of_GuiMouseEventArgs::Create(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiMouseEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiMouseEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiMouseEventArgs::Execute(GuiMouseEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> GuiGraphicsEvent_of_GuiMouseEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiMouseEventArgs> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiMouseEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiMouseEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiMouseEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiMouseEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler
***********************************************************************/

	void GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiMouseEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> GuiGraphicsEvent_of_GuiMouseEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiMouseEventArgs :: IHandler> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiRequestEventArgs
***********************************************************************/

	rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> GuiGraphicsEvent_of_GuiRequestEventArgs::Create(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiRequestEventArgs::Attach(sptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	bool GuiGraphicsEvent_of_GuiRequestEventArgs::Detach(sptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> handler);
	{
		throw 0;
	}
	
	void GuiGraphicsEvent_of_GuiRequestEventArgs::Execute(GuiRequestEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> GuiGraphicsEvent_of_GuiRequestEventArgs::operator=(rptr<GuiGraphicsEvent_of_GuiRequestEventArgs> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiRequestEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiRequestEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEvent_of_GuiRequestEventArgs::GetAssociatedComposition();
	{
		throw 0;
	}
	void GuiGraphicsEvent_of_GuiRequestEventArgs::SetAssociatedComposition(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler
***********************************************************************/

	void GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::Execute(rptr<GuiGraphicsComposition> sender, GuiRequestEventArgs& argument);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> GuiGraphicsEvent_of_GuiRequestEventArgs::IHandler::operator=(rptr<GuiGraphicsEvent_of_GuiRequestEventArgs :: IHandler> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsEventReceiver
***********************************************************************/

	rptr<GuiGraphicsEventReceiver> GuiGraphicsEventReceiver::Create(rptr<GuiGraphicsComposition> _sender);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsEventReceiver> GuiGraphicsEventReceiver::operator=(rptr<GuiGraphicsEventReceiver> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsEventReceiver::GetAssociatedComposition();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_leftButtonDown();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_leftButtonUp();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_leftButtonDoubleClick();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_middleButtonDown();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_middleButtonUp();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_middleButtonDoubleClick();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_rightButtonDown();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_rightButtonUp();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_rightButtonDoubleClick();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_horizontalWheel();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_verticalWheel();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiMouseEventArgs GuiGraphicsEventReceiver::get_mouseMove();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::get_mouseEnter();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::get_mouseLeave();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::get_previewKey();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::get_keyDown();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::get_keyUp();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::get_systemKeyDown();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiKeyEventArgs GuiGraphicsEventReceiver::get_systemKeyUp();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiCharEventArgs GuiGraphicsEventReceiver::get_previewCharInput();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiCharEventArgs GuiGraphicsEventReceiver::get_charInput();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::get_gotFocus();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::get_lostFocus();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiGraphicsEventReceiver::get_caretNotify();
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsHost
***********************************************************************/

	rptr<GuiGraphicsHost> GuiGraphicsHost::Create();
	{
		throw 0;
	}
	
	void GuiGraphicsHost::Render();
	{
		throw 0;
	}
	
	bool GuiGraphicsHost::SetFocus(rptr<GuiGraphicsComposition> composition);
	{
		throw 0;
	}
	
	void GuiGraphicsHost::SetCaretPoint(Point value, rptr<GuiGraphicsComposition> referenceComposition);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsHost> GuiGraphicsHost::operator=(rptr<GuiGraphicsHost> value);
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiGraphicsHost::GetNativeWindow();
	{
		throw 0;
	}
	void GuiGraphicsHost::SetNativeWindow(rptr<INativeWindow> _nativeWindow);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsHost::GetMainComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiGraphicsHost::GetFocusedComposition();
	{
		throw 0;
	}
	
	Point GuiGraphicsHost::GetCaretPoint();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsAnimationManager> GuiGraphicsHost::GetAnimationManager();
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiGraphicsHost::GetNativeWindow();
	{
		throw 0;
	}
	void GuiGraphicsHost::SetNativeWindow(rptr<INativeWindow> _nativeWindow);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsResourceManager
***********************************************************************/

	bool GuiGraphicsResourceManager::RegisterElementFactory(rptr<IGuiGraphicsElementFactory> factory);
	{
		throw 0;
	}
	
	bool GuiGraphicsResourceManager::RegisterRendererFactory(const GacString& elementTypeName, rptr<IGuiGraphicsRendererFactory> factory);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsElementFactory> GuiGraphicsResourceManager::GetElementFactory(const GacString& elementTypeName);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRendererFactory> GuiGraphicsResourceManager::GetRendererFactory(const GacString& elementTypeName);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> GuiGraphicsResourceManager::GetRenderTarget(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsResourceManager> GuiGraphicsResourceManager::operator=(rptr<GuiGraphicsResourceManager> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiGraphicsSite
***********************************************************************/

	rptr<GuiGraphicsSite> GuiGraphicsSite::Create();
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiGraphicsSite::GetAffectionFromParent();
	{
		throw 0;
	}
	
	bool GuiGraphicsSite::IsSizeAffectParent();
	{
		throw 0;
	}
	
	Size GuiGraphicsSite::GetMinPreferredClientSize();
	{
		throw 0;
	}
	
	Rect GuiGraphicsSite::GetPreferredBounds();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsSite> GuiGraphicsSite::operator=(rptr<GuiGraphicsSite> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiImageData
***********************************************************************/

	rptr<GuiImageData> GuiImageData::Create(sptr<INativeImage> _image, signed __int32 _frameIndex);
	{
		throw 0;
	}
	G::u::i::I::m::a::g::e::D::a::t::a::GuiImageData(sptr<INativeImage> _image, signed __int32 _frameIndex);
	{
		throw 0;
	}
	
	rptr<GuiImageData> GuiImageData::Create();
	{
		throw 0;
	}
	G::u::i::I::m::a::g::e::D::a::t::a::GuiImageData();
	{
		throw 0;
	}
	
	GuiImageData& GuiImageData::operator=(constGuiImageData& value);
	{
		throw 0;
	}
	
	sptr<INativeImage> GuiImageData::GetImage();
	{
		throw 0;
	}
	
	signed __int32 GuiImageData::GetFrameIndex();
	{
		throw 0;
	}
	

/***********************************************************************
GuiImageFrameElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> GuiImageFrameElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiImageFrameElement::GetRenderer();
	{
		throw 0;
	}
	
	void GuiImageFrameElement::SetImage(sptr<INativeImage> _image, signed __int32 _frameIndex);
	{
		throw 0;
	}
	
	void GuiImageFrameElement::SetAlignments(Alignment :: Type horizontal, Alignment :: Type vertical);
	{
		throw 0;
	}
	
	rptr<GuiImageFrameElement> GuiImageFrameElement::operator=(rptr<GuiImageFrameElement> value);
	{
		throw 0;
	}
	
	rptr<GuiImageFrameElement> GuiImageFrameElement::Create();
	{
		throw 0;
	}
	
	sptr<INativeImage> GuiImageFrameElement::GetImage();
	{
		throw 0;
	}
	
	signed __int32 GuiImageFrameElement::GetFrameIndex();
	{
		throw 0;
	}
	
	Alignment :: Type GuiImageFrameElement::GetHorizontalAlignment();
	{
		throw 0;
	}
	
	Alignment :: Type GuiImageFrameElement::GetVerticalAlignment();
	{
		throw 0;
	}
	
	bool GuiImageFrameElement::GetStretch();
	{
		throw 0;
	}
	void GuiImageFrameElement::SetStretch(bool value);
	{
		throw 0;
	}
	
	bool GuiImageFrameElement::GetStretch();
	{
		throw 0;
	}
	void GuiImageFrameElement::SetStretch(bool value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiImageFrameElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiKeyEventArgs
***********************************************************************/

	rptr<GuiKeyEventArgs> GuiKeyEventArgs::Create();
	{
		throw 0;
	}
	G::u::i::K::e::y::E::v::e::n::t::A::r::g::s::GuiKeyEventArgs();
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl
***********************************************************************/

	rptr<GuiListControl> GuiListControl::Create(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider, bool acceptFocus);
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiListControl::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value);
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemArranger> GuiListControl::SetArranger(sptr<GuiListControl :: IItemArranger> value);
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemCoordinateTransformer> GuiListControl::SetCoordinateTransformer(sptr<GuiListControl :: IItemCoordinateTransformer> value);
	{
		throw 0;
	}
	
	rptr<GuiListControl> GuiListControl::operator=(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemProvider> GuiListControl::GetItemProvider();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> GuiListControl::GetStyleProvider();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> GuiListControl::GetArranger();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> GuiListControl::GetCoordinateTransformer();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiListControl::get_StyleProviderChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiListControl::get_ArrangerChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiListControl::get_CoordinateTransformerChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemArranger
***********************************************************************/

	void GuiListControl::IItemArranger::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void GuiListControl::IItemArranger::DetachListControl();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemArranger::GetVisibleStyle(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	signed __int32 GuiListControl::IItemArranger::GetVisibleIndex(rptr<GuiListControl :: IItemStyleController> style);
	{
		throw 0;
	}
	
	void GuiListControl::IItemArranger::OnViewChanged(Rect bounds);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> GuiListControl::IItemArranger::operator=(rptr<GuiListControl :: IItemArranger> value);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArrangerCallback> GuiListControl::IItemArranger::GetCallback();
	{
		throw 0;
	}
	void GuiListControl::IItemArranger::SetCallback(rptr<GuiListControl :: IItemArrangerCallback> value);
	{
		throw 0;
	}
	
	Size GuiListControl::IItemArranger::GetTotalSize();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArrangerCallback> GuiListControl::IItemArranger::GetCallback();
	{
		throw 0;
	}
	void GuiListControl::IItemArranger::SetCallback(rptr<GuiListControl :: IItemArrangerCallback> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemArrangerCallback
***********************************************************************/

	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemArrangerCallback::RequestItem(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::ReleaseItem(rptr<GuiListControl :: IItemStyleController> style);
	{
		throw 0;
	}
	
	Size GuiListControl::IItemArrangerCallback::GetStylePreferredSize(rptr<GuiListControl :: IItemStyleController> style);
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::SetStyleAlignmentToParent(rptr<GuiListControl :: IItemStyleController> style, Margin margin);
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::SetStyleBounds(rptr<GuiListControl :: IItemStyleController> style, Rect bounds);
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::OnTotalSizeChanged();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArrangerCallback> GuiListControl::IItemArrangerCallback::operator=(rptr<GuiListControl :: IItemArrangerCallback> value);
	{
		throw 0;
	}
	
	void GuiListControl::IItemArrangerCallback::SetViewLocation(Point value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiListControl::IItemArrangerCallback::GetContainerComposition();
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemCoordinateTransformer
***********************************************************************/

	Size GuiListControl::IItemCoordinateTransformer::RealSizeToVirtualSize(Size size);
	{
		throw 0;
	}
	
	Size GuiListControl::IItemCoordinateTransformer::VirtualSizeToRealSize(Size size);
	{
		throw 0;
	}
	
	Point GuiListControl::IItemCoordinateTransformer::RealPointToVirtualPoint(Size realFullSize, Point point);
	{
		throw 0;
	}
	
	Point GuiListControl::IItemCoordinateTransformer::VirtualPointToRealPoint(Size realFullSize, Point point);
	{
		throw 0;
	}
	
	Rect GuiListControl::IItemCoordinateTransformer::RealRectToVirtualRect(Size realFullSize, Rect rect);
	{
		throw 0;
	}
	
	Rect GuiListControl::IItemCoordinateTransformer::VirtualRectToRealRect(Size realFullSize, Rect rect);
	{
		throw 0;
	}
	
	Margin GuiListControl::IItemCoordinateTransformer::RealMarginToVirtualMargin(Margin margin);
	{
		throw 0;
	}
	
	Margin GuiListControl::IItemCoordinateTransformer::VirtualMarginToRealMargin(Margin margin);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> GuiListControl::IItemCoordinateTransformer::operator=(rptr<GuiListControl :: IItemCoordinateTransformer> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemPrimaryTextView
***********************************************************************/

	vl::ObjectString<wchar_t> GuiListControl::IItemPrimaryTextView::GetPrimaryTextViewText(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	bool GuiListControl::IItemPrimaryTextView::ContainsPrimaryText(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemPrimaryTextView> GuiListControl::IItemPrimaryTextView::operator=(rptr<GuiListControl :: IItemPrimaryTextView> value);
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() GuiListControl::IItemPrimaryTextView::get_Identifier();
	{
		throw 0;
	}
	void GuiListControl::IItemPrimaryTextView::set_Identifier(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemProvider
***********************************************************************/

	bool GuiListControl::IItemProvider::AttachCallback(rptr<GuiListControl :: IItemProviderCallback> value);
	{
		throw 0;
	}
	
	bool GuiListControl::IItemProvider::DetachCallback(rptr<GuiListControl :: IItemProviderCallback> value);
	{
		throw 0;
	}
	
	signed __int32 GuiListControl::IItemProvider::Count();
	{
		throw 0;
	}
	
	rptr<IDescriptable> GuiListControl::IItemProvider::RequestView(const GacString& identifier);
	{
		throw 0;
	}
	
	void GuiListControl::IItemProvider::ReleaseView(rptr<IDescriptable> view);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemProvider> GuiListControl::IItemProvider::operator=(rptr<GuiListControl :: IItemProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemProviderCallback
***********************************************************************/

	void GuiListControl::IItemProviderCallback::OnAttached(rptr<GuiListControl :: IItemProvider> provider);
	{
		throw 0;
	}
	
	void GuiListControl::IItemProviderCallback::OnItemModified(signed __int32 start, signed __int32 count, signed __int32 newCount);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemProviderCallback> GuiListControl::IItemProviderCallback::operator=(rptr<GuiListControl :: IItemProviderCallback> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemStyleController
***********************************************************************/

	bool GuiListControl::IItemStyleController::IsCacheable();
	{
		throw 0;
	}
	
	bool GuiListControl::IItemStyleController::IsInstalled();
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleController::OnInstalled();
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleController::OnUninstalled();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemStyleController::operator=(rptr<GuiListControl :: IItemStyleController> value);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> GuiListControl::IItemStyleController::GetStyleProvider();
	{
		throw 0;
	}
	
	signed __int32 GuiListControl::IItemStyleController::GetItemStyleId();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiListControl::IItemStyleController::GetBoundsComposition();
	{
		throw 0;
	}
	

/***********************************************************************
GuiListControl :: IItemStyleProvider
***********************************************************************/

	void GuiListControl::IItemStyleProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleProvider::DetachListControl();
	{
		throw 0;
	}
	
	signed __int32 GuiListControl::IItemStyleProvider::GetItemStyleId(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> GuiListControl::IItemStyleProvider::CreateItemStyle(signed __int32 styleId);
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style);
	{
		throw 0;
	}
	
	void GuiListControl::IItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> GuiListControl::IItemStyleProvider::operator=(rptr<GuiListControl :: IItemStyleProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiListView
***********************************************************************/

	rptr<GuiListView> GuiListView::Create(rptr<GuiListViewBase :: IStyleProvider> _styleProvider);
	{
		throw 0;
	}
	
	rptr<GuiListView> GuiListView::operator=(rptr<GuiListView> value);
	{
		throw 0;
	}
	
	rptr<ListViewItemProvider> GuiListView::GetItems();
	{
		throw 0;
	}
	

/***********************************************************************
GuiListViewBase
***********************************************************************/

	rptr<GuiListViewBase> GuiListViewBase::Create(rptr<GuiListViewBase :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider);
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiListViewBase::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value);
	{
		throw 0;
	}
	
	rptr<GuiListViewBase> GuiListViewBase::operator=(rptr<GuiListViewBase> value);
	{
		throw 0;
	}
	
	rptr<GuiListViewBase :: IStyleProvider> GuiListViewBase::GetListViewStyleProvider();
	{
		throw 0;
	}
	

/***********************************************************************
GuiListViewBase :: IStyleProvider
***********************************************************************/

	rptr<GuiSelectableButton :: IStyleController> GuiListViewBase::IStyleProvider::CreateItemBackground();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiListViewBase::IStyleProvider::CreateColumnStyle();
	{
		throw 0;
	}
	
	rptr<GuiListViewBase :: IStyleProvider> GuiListViewBase::IStyleProvider::operator=(rptr<GuiListViewBase :: IStyleProvider> value);
	{
		throw 0;
	}
	
	Color GuiListViewBase::IStyleProvider::GetPrimaryTextColor();
	{
		throw 0;
	}
	
	Color GuiListViewBase::IStyleProvider::GetSecondaryTextColor();
	{
		throw 0;
	}
	
	Color GuiListViewBase::IStyleProvider::GetItemSeparatorColor();
	{
		throw 0;
	}
	

/***********************************************************************
GuiMenu
***********************************************************************/

	rptr<GuiMenu> GuiMenu::Create(rptr<GuiControl :: IStyleController> _styleController, rptr<GuiControl> _owner);
	{
		throw 0;
	}
	
	void GuiMenu::UpdateMenuService();
	{
		throw 0;
	}
	
	rptr<IDescriptable> GuiMenu::QueryService(const GacString& identifier);
	{
		throw 0;
	}
	
	rptr<GuiMenu> GuiMenu::operator=(rptr<GuiMenu> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiMenuBar
***********************************************************************/

	rptr<GuiMenuBar> GuiMenuBar::Create(rptr<GuiControl :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	rptr<IDescriptable> GuiMenuBar::QueryService(const GacString& identifier);
	{
		throw 0;
	}
	
	rptr<GuiMenuBar> GuiMenuBar::operator=(rptr<GuiMenuBar> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiMenuButton
***********************************************************************/

	rptr<GuiMenuButton> GuiMenuButton::Create(rptr<GuiMenuButton :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	bool GuiMenuButton::IsSubMenuExists();
	{
		throw 0;
	}
	
	void GuiMenuButton::CreateSubMenu(rptr<GuiControl :: IStyleController> subMenuStyleController);
	{
		throw 0;
	}
	
	void GuiMenuButton::DestroySubMenu();
	{
		throw 0;
	}
	
	rptr<GuiMenuButton> GuiMenuButton::operator=(rptr<GuiMenuButton> value);
	{
		throw 0;
	}
	
	rptr<GuiMenu> GuiMenuButton::GetSubMenu();
	{
		throw 0;
	}
	
	bool GuiMenuButton::GetSubMenuOpening();
	{
		throw 0;
	}
	void GuiMenuButton::SetSubMenuOpening(bool value);
	{
		throw 0;
	}
	
	Size GuiMenuButton::GetPreferredMenuClientSize();
	{
		throw 0;
	}
	void GuiMenuButton::SetPreferredMenuClientSize(Size value);
	{
		throw 0;
	}
	
	bool GuiMenuButton::GetSubMenuOpening();
	{
		throw 0;
	}
	void GuiMenuButton::SetSubMenuOpening(bool value);
	{
		throw 0;
	}
	
	Size GuiMenuButton::GetPreferredMenuClientSize();
	{
		throw 0;
	}
	void GuiMenuButton::SetPreferredMenuClientSize(Size value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiMenuButton::get_SubMenuOpeningChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiMenuButton :: IStyleController
***********************************************************************/

	rptr<GuiControl :: IStyleController> GuiMenuButton::IStyleController::CreateSubMenuStyleController();
	{
		throw 0;
	}
	
	rptr<GuiMenuButton :: IStyleController> GuiMenuButton::IStyleController::operator=(rptr<GuiMenuButton :: IStyleController> value);
	{
		throw 0;
	}
	
	void GuiMenuButton::IStyleController::SetSubMenuExisting(bool value);
	{
		throw 0;
	}
	
	void GuiMenuButton::IStyleController::SetSubMenuOpening(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiMouseEventArgs
***********************************************************************/

	rptr<GuiMouseEventArgs> GuiMouseEventArgs::Create();
	{
		throw 0;
	}
	G::u::i::M::o::u::s::e::E::v::e::n::t::A::r::g::s::GuiMouseEventArgs();
	{
		throw 0;
	}
	

/***********************************************************************
GuiMultilineTextBox
***********************************************************************/

	rptr<GuiMultilineTextBox> GuiMultilineTextBox::Create(rptr<GuiScrollView :: IStyleProvider> styleProvider);
	{
		throw 0;
	}
	
	const GacString& GuiMultilineTextBox::GetText();
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	rptr<GuiMultilineTextBox> GuiMultilineTextBox::operator=(rptr<GuiMultilineTextBox> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiMultilineTextBox :: StyleController
***********************************************************************/

	rptr<GuiMultilineTextBox :: StyleController> GuiMultilineTextBox::StyleController::Create(rptr<GuiScrollView :: IStyleProvider> styleProvider);
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiMultilineTextBox :: StyleController> GuiMultilineTextBox::StyleController::operator=(rptr<GuiMultilineTextBox :: StyleController> value);
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::StyleController::SetViewPosition(Point value);
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiMultilineTextBox::StyleController::GetTextElement();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiMultilineTextBox::StyleController::GetTextComposition();
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator> GuiMultilineTextBox::StyleController::GetTextElementOperator();
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiMultilineTextBox::StyleController::GetText();
	{
		throw 0;
	}
	

/***********************************************************************
GuiMultilineTextBox :: TextElementOperatorCallback
***********************************************************************/

	rptr<GuiMultilineTextBox :: TextElementOperatorCallback> GuiMultilineTextBox::TextElementOperatorCallback::Create(rptr<GuiMultilineTextBox> _textControl);
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::TextElementOperatorCallback::AfterModify(TextPos originalStart, TextPos originalEnd, const GacString& originalText, TextPos inputStart, TextPos inputEnd, const GacString& inputText);
	{
		throw 0;
	}
	
	void GuiMultilineTextBox::TextElementOperatorCallback::ScrollToView(Point point);
	{
		throw 0;
	}
	
	signed __int32 GuiMultilineTextBox::TextElementOperatorCallback::GetTextMargin();
	{
		throw 0;
	}
	
	rptr<GuiMultilineTextBox :: TextElementOperatorCallback> GuiMultilineTextBox::TextElementOperatorCallback::operator=(rptr<GuiMultilineTextBox :: TextElementOperatorCallback> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiPartialViewComposition
***********************************************************************/

	rptr<GuiPartialViewComposition> GuiPartialViewComposition::Create();
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiPartialViewComposition::GetAffectionFromParent();
	{
		throw 0;
	}
	
	bool GuiPartialViewComposition::IsSizeAffectParent();
	{
		throw 0;
	}
	
	Rect GuiPartialViewComposition::GetBounds();
	{
		throw 0;
	}
	
	rptr<GuiPartialViewComposition> GuiPartialViewComposition::operator=(rptr<GuiPartialViewComposition> value);
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetWidthRatio();
	{
		throw 0;
	}
	void GuiPartialViewComposition::SetWidthRatio(double value);
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetWidthPageSize();
	{
		throw 0;
	}
	void GuiPartialViewComposition::SetWidthPageSize(double value);
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetHeightRatio();
	{
		throw 0;
	}
	void GuiPartialViewComposition::SetHeightRatio(double value);
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetHeightPageSize();
	{
		throw 0;
	}
	void GuiPartialViewComposition::SetHeightPageSize(double value);
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetWidthRatio();
	{
		throw 0;
	}
	void GuiPartialViewComposition::SetWidthRatio(double value);
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetWidthPageSize();
	{
		throw 0;
	}
	void GuiPartialViewComposition::SetWidthPageSize(double value);
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetHeightRatio();
	{
		throw 0;
	}
	void GuiPartialViewComposition::SetHeightRatio(double value);
	{
		throw 0;
	}
	
	double GuiPartialViewComposition::GetHeightPageSize();
	{
		throw 0;
	}
	void GuiPartialViewComposition::SetHeightPageSize(double value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiPolygonElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> GuiPolygonElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiPolygonElement::GetRenderer();
	{
		throw 0;
	}
	
	void GuiPolygonElement::SetPoints(Point->GetPointerType() p, signed __int32 count);
	{
		throw 0;
	}
	
	rptr<GuiPolygonElement> GuiPolygonElement::operator=(rptr<GuiPolygonElement> value);
	{
		throw 0;
	}
	
	rptr<GuiPolygonElement> GuiPolygonElement::Create();
	{
		throw 0;
	}
	
	Size GuiPolygonElement::GetSize();
	{
		throw 0;
	}
	void GuiPolygonElement::SetSize(Size value);
	{
		throw 0;
	}
	
	Point->GetPointerType() GuiPolygonElement::GetPoints();
	{
		throw 0;
	}
	
	signed __int32 GuiPolygonElement::GetPointCount();
	{
		throw 0;
	}
	
	Color GuiPolygonElement::GetBorderColor();
	{
		throw 0;
	}
	void GuiPolygonElement::SetBorderColor(Color value);
	{
		throw 0;
	}
	
	Color GuiPolygonElement::GetBackgroundColor();
	{
		throw 0;
	}
	void GuiPolygonElement::SetBackgroundColor(Color value);
	{
		throw 0;
	}
	
	Size GuiPolygonElement::GetSize();
	{
		throw 0;
	}
	void GuiPolygonElement::SetSize(Size value);
	{
		throw 0;
	}
	
	Color GuiPolygonElement::GetBorderColor();
	{
		throw 0;
	}
	void GuiPolygonElement::SetBorderColor(Color value);
	{
		throw 0;
	}
	
	Color GuiPolygonElement::GetBackgroundColor();
	{
		throw 0;
	}
	void GuiPolygonElement::SetBackgroundColor(Color value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiPolygonElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiPopup
***********************************************************************/

	rptr<GuiPopup> GuiPopup::Create(rptr<GuiControl :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	bool GuiPopup::IsClippedByScreen(Point location);
	{
		throw 0;
	}
	
	void GuiPopup::ShowPopup(rptr<GuiControl> control, bool preferredTopBottomSide);
	{
		throw 0;
	}
	
	void GuiPopup::ShowPopup(Point location);
	{
		throw 0;
	}
	
	rptr<GuiPopup> GuiPopup::operator=(rptr<GuiPopup> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiRequestEventArgs
***********************************************************************/

	rptr<GuiRequestEventArgs> GuiRequestEventArgs::Create();
	{
		throw 0;
	}
	G::u::i::R::e::q::u::e::s::t::E::v::e::n::t::A::r::g::s::GuiRequestEventArgs();
	{
		throw 0;
	}
	
	bool GuiRequestEventArgs::get_cancel();
	{
		throw 0;
	}
	void GuiRequestEventArgs::set_cancel(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiRoundBorderElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> GuiRoundBorderElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiRoundBorderElement::GetRenderer();
	{
		throw 0;
	}
	
	rptr<GuiRoundBorderElement> GuiRoundBorderElement::operator=(rptr<GuiRoundBorderElement> value);
	{
		throw 0;
	}
	
	rptr<GuiRoundBorderElement> GuiRoundBorderElement::Create();
	{
		throw 0;
	}
	
	Color GuiRoundBorderElement::GetColor();
	{
		throw 0;
	}
	void GuiRoundBorderElement::SetColor(Color value);
	{
		throw 0;
	}
	
	signed __int32 GuiRoundBorderElement::GetRadius();
	{
		throw 0;
	}
	void GuiRoundBorderElement::SetRadius(signed __int32 value);
	{
		throw 0;
	}
	
	Color GuiRoundBorderElement::GetColor();
	{
		throw 0;
	}
	void GuiRoundBorderElement::SetColor(Color value);
	{
		throw 0;
	}
	
	signed __int32 GuiRoundBorderElement::GetRadius();
	{
		throw 0;
	}
	void GuiRoundBorderElement::SetRadius(signed __int32 value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiRoundBorderElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiScroll
***********************************************************************/

	rptr<GuiScroll> GuiScroll::Create(rptr<GuiScroll :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScroll::operator=(rptr<GuiScroll> value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetTotalSize();
	{
		throw 0;
	}
	void GuiScroll::SetTotalSize(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetPageSize();
	{
		throw 0;
	}
	void GuiScroll::SetPageSize(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetPosition();
	{
		throw 0;
	}
	void GuiScroll::SetPosition(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetSmallMove();
	{
		throw 0;
	}
	void GuiScroll::SetSmallMove(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetBigMove();
	{
		throw 0;
	}
	void GuiScroll::SetBigMove(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetMinPosition();
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetMaxPosition();
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetTotalSize();
	{
		throw 0;
	}
	void GuiScroll::SetTotalSize(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetPageSize();
	{
		throw 0;
	}
	void GuiScroll::SetPageSize(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetPosition();
	{
		throw 0;
	}
	void GuiScroll::SetPosition(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetSmallMove();
	{
		throw 0;
	}
	void GuiScroll::SetSmallMove(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 GuiScroll::GetBigMove();
	{
		throw 0;
	}
	void GuiScroll::SetBigMove(signed __int32 value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::get_TotalSizeChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::get_PageSizeChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::get_PositionChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::get_SmallMoveChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiScroll::get_BigMoveChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiScroll :: ICommandExecutor
***********************************************************************/

	void GuiScroll::ICommandExecutor::SmallDecrease();
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::SmallIncrease();
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::BigDecrease();
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::BigIncrease();
	{
		throw 0;
	}
	
	rptr<GuiScroll :: ICommandExecutor> GuiScroll::ICommandExecutor::operator=(rptr<GuiScroll :: ICommandExecutor> value);
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::SetTotalSize(signed __int32 value);
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::SetPageSize(signed __int32 value);
	{
		throw 0;
	}
	
	void GuiScroll::ICommandExecutor::SetPosition(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiScroll :: IStyleController
***********************************************************************/

	rptr<GuiScroll :: IStyleController> GuiScroll::IStyleController::operator=(rptr<GuiScroll :: IStyleController> value);
	{
		throw 0;
	}
	
	void GuiScroll::IStyleController::SetCommandExecutor(rptr<GuiScroll :: ICommandExecutor> value);
	{
		throw 0;
	}
	
	void GuiScroll::IStyleController::SetTotalSize(signed __int32 value);
	{
		throw 0;
	}
	
	void GuiScroll::IStyleController::SetPageSize(signed __int32 value);
	{
		throw 0;
	}
	
	void GuiScroll::IStyleController::SetPosition(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollContainer
***********************************************************************/

	rptr<GuiScrollContainer> GuiScrollContainer::Create(rptr<GuiScrollView :: IStyleProvider> styleProvider);
	{
		throw 0;
	}
	
	rptr<GuiScrollContainer> GuiScrollContainer::operator=(rptr<GuiScrollContainer> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollContainer :: StyleController
***********************************************************************/

	rptr<GuiScrollContainer :: StyleController> GuiScrollContainer::StyleController::Create(rptr<GuiScrollView :: IStyleProvider> styleProvider);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiScrollContainer::StyleController::GetContainerComposition();
	{
		throw 0;
	}
	
	void GuiScrollContainer::StyleController::MoveContainer(Point leftTop);
	{
		throw 0;
	}
	
	rptr<GuiScrollContainer :: StyleController> GuiScrollContainer::StyleController::operator=(rptr<GuiScrollContainer :: StyleController> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollView
***********************************************************************/

	void GuiScrollView::CalculateView();
	{
		throw 0;
	}
	
	rptr<GuiScrollView> GuiScrollView::operator=(rptr<GuiScrollView> value);
	{
		throw 0;
	}
	
	Size GuiScrollView::GetViewSize();
	{
		throw 0;
	}
	
	Rect GuiScrollView::GetViewBounds();
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScrollView::GetHorizontalScroll();
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScrollView::GetVerticalScroll();
	{
		throw 0;
	}
	
	bool GuiScrollView::GetHorizontalAlwaysVisible();
	{
		throw 0;
	}
	void GuiScrollView::SetHorizontalAlwaysVisible(bool value);
	{
		throw 0;
	}
	
	bool GuiScrollView::GetVerticalAlwaysVisible();
	{
		throw 0;
	}
	void GuiScrollView::SetVerticalAlwaysVisible(bool value);
	{
		throw 0;
	}
	
	bool GuiScrollView::GetHorizontalAlwaysVisible();
	{
		throw 0;
	}
	void GuiScrollView::SetHorizontalAlwaysVisible(bool value);
	{
		throw 0;
	}
	
	bool GuiScrollView::GetVerticalAlwaysVisible();
	{
		throw 0;
	}
	void GuiScrollView::SetVerticalAlwaysVisible(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollView :: IStyleProvider
***********************************************************************/

	rptr<GuiScroll :: IStyleController> GuiScrollView::IStyleProvider::CreateHorizontalScrollStyle();
	{
		throw 0;
	}
	
	rptr<GuiScroll :: IStyleController> GuiScrollView::IStyleProvider::CreateVerticalScrollStyle();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiScrollView::IStyleProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
	{
		throw 0;
	}
	
	rptr<GuiScrollView :: IStyleProvider> GuiScrollView::IStyleProvider::operator=(rptr<GuiScrollView :: IStyleProvider> value);
	{
		throw 0;
	}
	
	signed __int32 GuiScrollView::IStyleProvider::GetDefaultScrollSize();
	{
		throw 0;
	}
	

/***********************************************************************
GuiScrollView :: StyleController
***********************************************************************/

	rptr<GuiScrollView :: StyleController> GuiScrollView::StyleController::Create(rptr<GuiScrollView :: IStyleProvider> _styleProvider);
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::AdjustView(Size fullSize);
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiScrollView::StyleController::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiScrollView::StyleController::GetContainerComposition();
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiScrollView :: StyleController> GuiScrollView::StyleController::operator=(rptr<GuiScrollView :: StyleController> value);
	{
		throw 0;
	}
	
	void GuiScrollView::StyleController::SetScrollView(rptr<GuiScrollView> _scrollView);
	{
		throw 0;
	}
	
	rptr<GuiScrollView :: IStyleProvider> GuiScrollView::StyleController::GetStyleProvider();
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScrollView::StyleController::GetHorizontalScroll();
	{
		throw 0;
	}
	
	rptr<GuiScroll> GuiScrollView::StyleController::GetVerticalScroll();
	{
		throw 0;
	}
	
	rptr<GuiTableComposition> GuiScrollView::StyleController::GetInternalTableComposition();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiScrollView::StyleController::GetInternalContainerComposition();
	{
		throw 0;
	}
	
	bool GuiScrollView::StyleController::GetHorizontalAlwaysVisible();
	{
		throw 0;
	}
	void GuiScrollView::StyleController::SetHorizontalAlwaysVisible(bool value);
	{
		throw 0;
	}
	
	bool GuiScrollView::StyleController::GetVerticalAlwaysVisible();
	{
		throw 0;
	}
	void GuiScrollView::StyleController::SetVerticalAlwaysVisible(bool value);
	{
		throw 0;
	}
	
	bool GuiScrollView::StyleController::GetHorizontalAlwaysVisible();
	{
		throw 0;
	}
	void GuiScrollView::StyleController::SetHorizontalAlwaysVisible(bool value);
	{
		throw 0;
	}
	
	bool GuiScrollView::StyleController::GetVerticalAlwaysVisible();
	{
		throw 0;
	}
	void GuiScrollView::StyleController::SetVerticalAlwaysVisible(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableButton
***********************************************************************/

	rptr<GuiSelectableButton> GuiSelectableButton::Create(rptr<GuiSelectableButton :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton> GuiSelectableButton::operator=(rptr<GuiSelectableButton> value);
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: GroupController> GuiSelectableButton::GetGroupController();
	{
		throw 0;
	}
	void GuiSelectableButton::SetGroupController(rptr<GuiSelectableButton :: GroupController> value);
	{
		throw 0;
	}
	
	bool GuiSelectableButton::GetAutoSelection();
	{
		throw 0;
	}
	void GuiSelectableButton::SetAutoSelection(bool value);
	{
		throw 0;
	}
	
	bool GuiSelectableButton::GetSelected();
	{
		throw 0;
	}
	void GuiSelectableButton::SetSelected(bool value);
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: GroupController> GuiSelectableButton::GetGroupController();
	{
		throw 0;
	}
	void GuiSelectableButton::SetGroupController(rptr<GuiSelectableButton :: GroupController> value);
	{
		throw 0;
	}
	
	bool GuiSelectableButton::GetAutoSelection();
	{
		throw 0;
	}
	void GuiSelectableButton::SetAutoSelection(bool value);
	{
		throw 0;
	}
	
	bool GuiSelectableButton::GetSelected();
	{
		throw 0;
	}
	void GuiSelectableButton::SetSelected(bool value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiSelectableButton::get_GroupControllerChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiSelectableButton::get_AutoSelectionChanged();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiSelectableButton::get_SelectedChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableButton :: GroupController
***********************************************************************/

	void GuiSelectableButton::GroupController::Attach(rptr<GuiSelectableButton> button);
	{
		throw 0;
	}
	
	void GuiSelectableButton::GroupController::Detach(rptr<GuiSelectableButton> button);
	{
		throw 0;
	}
	
	void GuiSelectableButton::GroupController::OnSelectedChanged(rptr<GuiSelectableButton> button);
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: GroupController> GuiSelectableButton::GroupController::operator=(rptr<GuiSelectableButton :: GroupController> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableButton :: IStyleController
***********************************************************************/

	rptr<GuiSelectableButton :: IStyleController> GuiSelectableButton::IStyleController::operator=(rptr<GuiSelectableButton :: IStyleController> value);
	{
		throw 0;
	}
	
	void GuiSelectableButton::IStyleController::SetSelected(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableButton :: MutexGroupController
***********************************************************************/

	rptr<GuiSelectableButton :: MutexGroupController> GuiSelectableButton::MutexGroupController::Create();
	{
		throw 0;
	}
	
	void GuiSelectableButton::MutexGroupController::OnSelectedChanged(rptr<GuiSelectableButton> button);
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: MutexGroupController> GuiSelectableButton::MutexGroupController::operator=(rptr<GuiSelectableButton :: MutexGroupController> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableListControl
***********************************************************************/

	rptr<GuiSelectableListControl> GuiSelectableListControl::Create(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider);
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiSelectableListControl::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value);
	{
		throw 0;
	}
	
	bool GuiSelectableListControl::GetSelected(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	void GuiSelectableListControl::SetSelected(signed __int32 itemIndex, bool value);
	{
		throw 0;
	}
	
	void GuiSelectableListControl::ClearSelection();
	{
		throw 0;
	}
	
	rptr<GuiSelectableListControl> GuiSelectableListControl::operator=(rptr<GuiSelectableListControl> value);
	{
		throw 0;
	}
	
	bool GuiSelectableListControl::GetMultiSelect();
	{
		throw 0;
	}
	void GuiSelectableListControl::SetMultiSelect(bool value);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_int> GuiSelectableListControl::GetSelectedItems();
	{
		throw 0;
	}
	
	bool GuiSelectableListControl::GetMultiSelect();
	{
		throw 0;
	}
	void GuiSelectableListControl::SetMultiSelect(bool value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiSelectableListControl::get_SelectionChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiSelectableListControl :: IItemStyleProvider
***********************************************************************/

	void GuiSelectableListControl::IItemStyleProvider::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value);
	{
		throw 0;
	}
	
	rptr<GuiSelectableListControl :: IItemStyleProvider> GuiSelectableListControl::IItemStyleProvider::operator=(rptr<GuiSelectableListControl :: IItemStyleProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSideAlignedComposition
***********************************************************************/

	rptr<GuiSideAlignedComposition> GuiSideAlignedComposition::Create();
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiSideAlignedComposition::GetAffectionFromParent();
	{
		throw 0;
	}
	
	bool GuiSideAlignedComposition::IsSizeAffectParent();
	{
		throw 0;
	}
	
	Rect GuiSideAlignedComposition::GetBounds();
	{
		throw 0;
	}
	
	rptr<GuiSideAlignedComposition> GuiSideAlignedComposition::operator=(rptr<GuiSideAlignedComposition> value);
	{
		throw 0;
	}
	
	GuiSideAlignedComposition :: Direction GuiSideAlignedComposition::GetDirection();
	{
		throw 0;
	}
	void GuiSideAlignedComposition::SetDirection(GuiSideAlignedComposition :: Direction value);
	{
		throw 0;
	}
	
	signed __int32 GuiSideAlignedComposition::GetMaxLength();
	{
		throw 0;
	}
	void GuiSideAlignedComposition::SetMaxLength(signed __int32 value);
	{
		throw 0;
	}
	
	double GuiSideAlignedComposition::GetMaxRatio();
	{
		throw 0;
	}
	void GuiSideAlignedComposition::SetMaxRatio(double value);
	{
		throw 0;
	}
	
	GuiSideAlignedComposition :: Direction GuiSideAlignedComposition::GetDirection();
	{
		throw 0;
	}
	void GuiSideAlignedComposition::SetDirection(GuiSideAlignedComposition :: Direction value);
	{
		throw 0;
	}
	
	signed __int32 GuiSideAlignedComposition::GetMaxLength();
	{
		throw 0;
	}
	void GuiSideAlignedComposition::SetMaxLength(signed __int32 value);
	{
		throw 0;
	}
	
	double GuiSideAlignedComposition::GetMaxRatio();
	{
		throw 0;
	}
	void GuiSideAlignedComposition::SetMaxRatio(double value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSinglelineTextBox
***********************************************************************/

	rptr<GuiSinglelineTextBox> GuiSinglelineTextBox::Create(rptr<GuiSinglelineTextBox :: IStyleProvider> styleProvider);
	{
		throw 0;
	}
	
	const GacString& GuiSinglelineTextBox::GetText();
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	rptr<GuiSinglelineTextBox> GuiSinglelineTextBox::operator=(rptr<GuiSinglelineTextBox> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: IStyleProvider
***********************************************************************/

	rptr<GuiGraphicsComposition> GuiSinglelineTextBox::IStyleProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
	{
		throw 0;
	}
	
	rptr<GuiSinglelineTextBox :: IStyleProvider> GuiSinglelineTextBox::IStyleProvider::operator=(rptr<GuiSinglelineTextBox :: IStyleProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: StyleController
***********************************************************************/

	rptr<GuiSinglelineTextBox :: StyleController> GuiSinglelineTextBox::StyleController::Create(rptr<GuiSinglelineTextBox :: IStyleProvider> _styleProvider);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::RearrangeTextElement();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> GuiSinglelineTextBox::StyleController::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiSinglelineTextBox::StyleController::GetContainerComposition();
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiSinglelineTextBox :: StyleController> GuiSinglelineTextBox::StyleController::operator=(rptr<GuiSinglelineTextBox :: StyleController> value);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetTextBox(rptr<GuiSinglelineTextBox> value);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::StyleController::SetViewPosition(Point value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiSinglelineTextBox::StyleController::GetText();
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiSinglelineTextBox::StyleController::GetTextElement();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiSinglelineTextBox::StyleController::GetTextComposition();
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator> GuiSinglelineTextBox::StyleController::GetTextElementOperator();
	{
		throw 0;
	}
	

/***********************************************************************
GuiSinglelineTextBox :: TextElementOperatorCallback
***********************************************************************/

	rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> GuiSinglelineTextBox::TextElementOperatorCallback::Create(rptr<GuiSinglelineTextBox> _textControl);
	{
		throw 0;
	}
	
	bool GuiSinglelineTextBox::TextElementOperatorCallback::BeforeModify(TextPos& start, TextPos& end, const GacString& originalText, GacString& inputText);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::TextElementOperatorCallback::AfterModify(TextPos originalStart, TextPos originalEnd, const GacString& originalText, TextPos inputStart, TextPos inputEnd, const GacString& inputText);
	{
		throw 0;
	}
	
	void GuiSinglelineTextBox::TextElementOperatorCallback::ScrollToView(Point point);
	{
		throw 0;
	}
	
	signed __int32 GuiSinglelineTextBox::TextElementOperatorCallback::GetTextMargin();
	{
		throw 0;
	}
	
	rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> GuiSinglelineTextBox::TextElementOperatorCallback::operator=(rptr<GuiSinglelineTextBox :: TextElementOperatorCallback> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiSolidBackgroundElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> GuiSolidBackgroundElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiSolidBackgroundElement::GetRenderer();
	{
		throw 0;
	}
	
	rptr<GuiSolidBackgroundElement> GuiSolidBackgroundElement::operator=(rptr<GuiSolidBackgroundElement> value);
	{
		throw 0;
	}
	
	rptr<GuiSolidBackgroundElement> GuiSolidBackgroundElement::Create();
	{
		throw 0;
	}
	
	Color GuiSolidBackgroundElement::GetColor();
	{
		throw 0;
	}
	void GuiSolidBackgroundElement::SetColor(Color value);
	{
		throw 0;
	}
	
	ElementShape :: Type GuiSolidBackgroundElement::GetShape();
	{
		throw 0;
	}
	void GuiSolidBackgroundElement::SetShape(ElementShape :: Type value);
	{
		throw 0;
	}
	
	Color GuiSolidBackgroundElement::GetColor();
	{
		throw 0;
	}
	void GuiSolidBackgroundElement::SetColor(Color value);
	{
		throw 0;
	}
	
	ElementShape :: Type GuiSolidBackgroundElement::GetShape();
	{
		throw 0;
	}
	void GuiSolidBackgroundElement::SetShape(ElementShape :: Type value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiSolidBackgroundElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiSolidBorderElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> GuiSolidBorderElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiSolidBorderElement::GetRenderer();
	{
		throw 0;
	}
	
	rptr<GuiSolidBorderElement> GuiSolidBorderElement::operator=(rptr<GuiSolidBorderElement> value);
	{
		throw 0;
	}
	
	rptr<GuiSolidBorderElement> GuiSolidBorderElement::Create();
	{
		throw 0;
	}
	
	Color GuiSolidBorderElement::GetColor();
	{
		throw 0;
	}
	void GuiSolidBorderElement::SetColor(Color value);
	{
		throw 0;
	}
	
	ElementShape :: Type GuiSolidBorderElement::GetShape();
	{
		throw 0;
	}
	void GuiSolidBorderElement::SetShape(ElementShape :: Type value);
	{
		throw 0;
	}
	
	Color GuiSolidBorderElement::GetColor();
	{
		throw 0;
	}
	void GuiSolidBorderElement::SetColor(Color value);
	{
		throw 0;
	}
	
	ElementShape :: Type GuiSolidBorderElement::GetShape();
	{
		throw 0;
	}
	void GuiSolidBorderElement::SetShape(ElementShape :: Type value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiSolidBorderElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiSolidLabelElement
***********************************************************************/

	rptr<IGuiGraphicsElementFactory> GuiSolidLabelElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> GuiSolidLabelElement::GetRenderer();
	{
		throw 0;
	}
	
	void GuiSolidLabelElement::SetAlignments(Alignment :: Type horizontal, Alignment :: Type vertical);
	{
		throw 0;
	}
	
	rptr<GuiSolidLabelElement> GuiSolidLabelElement::operator=(rptr<GuiSolidLabelElement> value);
	{
		throw 0;
	}
	
	rptr<GuiSolidLabelElement> GuiSolidLabelElement::Create();
	{
		throw 0;
	}
	
	Color GuiSolidLabelElement::GetColor();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetColor(Color value);
	{
		throw 0;
	}
	
	constFontProperties& GuiSolidLabelElement::GetFont();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	const GacString& GuiSolidLabelElement::GetText();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetText(const GacString& value);
	{
		throw 0;
	}
	
	Alignment :: Type GuiSolidLabelElement::GetHorizontalAlignment();
	{
		throw 0;
	}
	
	Alignment :: Type GuiSolidLabelElement::GetVerticalAlignment();
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetWrapLine();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetWrapLine(bool value);
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetEllipse();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetEllipse(bool value);
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetMultiline();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetMultiline(bool value);
	{
		throw 0;
	}
	
	Color GuiSolidLabelElement::GetColor();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetColor(Color value);
	{
		throw 0;
	}
	
	constFontProperties& GuiSolidLabelElement::GetFont();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	const GacString& GuiSolidLabelElement::GetText();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetText(const GacString& value);
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetWrapLine();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetWrapLine(bool value);
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetEllipse();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetEllipse(bool value);
	{
		throw 0;
	}
	
	bool GuiSolidLabelElement::GetMultiline();
	{
		throw 0;
	}
	void GuiSolidLabelElement::SetMultiline(bool value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiSolidLabelElement::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
GuiStackComposition
***********************************************************************/

	rptr<GuiStackComposition> GuiStackComposition::Create();
	{
		throw 0;
	}
	
	bool GuiStackComposition::InsertStackItem(signed __int32 index, rptr<GuiStackItemComposition> item);
	{
		throw 0;
	}
	
	Size GuiStackComposition::GetMinPreferredClientSize();
	{
		throw 0;
	}
	
	Rect GuiStackComposition::GetBounds();
	{
		throw 0;
	}
	
	rptr<GuiStackComposition> GuiStackComposition::operator=(rptr<GuiStackComposition> value);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> GuiStackComposition::GetStackItems();
	{
		throw 0;
	}
	
	GuiStackComposition :: Direction GuiStackComposition::GetDirection();
	{
		throw 0;
	}
	void GuiStackComposition::SetDirection(GuiStackComposition :: Direction value);
	{
		throw 0;
	}
	
	signed __int32 GuiStackComposition::GetPadding();
	{
		throw 0;
	}
	void GuiStackComposition::SetPadding(signed __int32 value);
	{
		throw 0;
	}
	
	Margin GuiStackComposition::GetExtraMargin();
	{
		throw 0;
	}
	void GuiStackComposition::SetExtraMargin(Margin value);
	{
		throw 0;
	}
	
	GuiStackComposition :: Direction GuiStackComposition::GetDirection();
	{
		throw 0;
	}
	void GuiStackComposition::SetDirection(GuiStackComposition :: Direction value);
	{
		throw 0;
	}
	
	signed __int32 GuiStackComposition::GetPadding();
	{
		throw 0;
	}
	void GuiStackComposition::SetPadding(signed __int32 value);
	{
		throw 0;
	}
	
	Margin GuiStackComposition::GetExtraMargin();
	{
		throw 0;
	}
	void GuiStackComposition::SetExtraMargin(Margin value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiStackItemComposition
***********************************************************************/

	rptr<GuiStackItemComposition> GuiStackItemComposition::Create();
	{
		throw 0;
	}
	
	GuiGraphicsComposition :: ParentSizeAffection GuiStackItemComposition::GetAffectionFromParent();
	{
		throw 0;
	}
	
	bool GuiStackItemComposition::IsSizeAffectParent();
	{
		throw 0;
	}
	
	Rect GuiStackItemComposition::GetBounds();
	{
		throw 0;
	}
	
	rptr<GuiStackItemComposition> GuiStackItemComposition::operator=(rptr<GuiStackItemComposition> value);
	{
		throw 0;
	}
	
	void GuiStackItemComposition::SetBounds(Rect value);
	{
		throw 0;
	}
	
	Margin GuiStackItemComposition::GetExtraMargin();
	{
		throw 0;
	}
	void GuiStackItemComposition::SetExtraMargin(Margin value);
	{
		throw 0;
	}
	
	Margin GuiStackItemComposition::GetExtraMargin();
	{
		throw 0;
	}
	void GuiStackItemComposition::SetExtraMargin(Margin value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiTab
***********************************************************************/

	rptr<GuiTab> GuiTab::Create(rptr<GuiTab :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	bool GuiTab::CreatePage(rptr<GuiTabPage> page, signed __int32 index);
	{
		throw 0;
	}
	
	rptr<GuiTabPage> GuiTab::CreatePage(signed __int32 index);
	{
		throw 0;
	}
	
	bool GuiTab::RemovePage(rptr<GuiTabPage> value);
	{
		throw 0;
	}
	
	bool GuiTab::MovePage(rptr<GuiTabPage> page, signed __int32 newIndex);
	{
		throw 0;
	}
	
	bool GuiTab::SetSelectedPage(rptr<GuiTabPage> value);
	{
		throw 0;
	}
	
	rptr<GuiTab> GuiTab::operator=(rptr<GuiTab> value);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiTabPage_raw_pointer> GuiTab::GetPages();
	{
		throw 0;
	}
	
	rptr<GuiTabPage> GuiTab::GetSelectedPage();
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiTab::get_SelectedPageChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiTab :: ICommandExecutor
***********************************************************************/

	void GuiTab::ICommandExecutor::ShowTab(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<GuiTab :: ICommandExecutor> GuiTab::ICommandExecutor::operator=(rptr<GuiTab :: ICommandExecutor> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiTab :: IStyleController
***********************************************************************/

	void GuiTab::IStyleController::InsertTab(signed __int32 index);
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::SetTabText(signed __int32 index, const GacString& value);
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::RemoveTab(signed __int32 index);
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::MoveTab(signed __int32 oldIndex, signed __int32 newIndex);
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> GuiTab::IStyleController::CreateTabPageStyleController();
	{
		throw 0;
	}
	
	rptr<GuiTab :: IStyleController> GuiTab::IStyleController::operator=(rptr<GuiTab :: IStyleController> value);
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::SetCommandExecutor(rptr<GuiTab :: ICommandExecutor> value);
	{
		throw 0;
	}
	
	void GuiTab::IStyleController::SetSelectedTab(signed __int32 index);
	{
		throw 0;
	}
	

/***********************************************************************
GuiTableComposition
***********************************************************************/

	rptr<GuiTableComposition> GuiTableComposition::Create();
	{
		throw 0;
	}
	
	bool GuiTableComposition::SetRowsAndColumns(signed __int32 _rows, signed __int32 _columns);
	{
		throw 0;
	}
	
	rptr<GuiCellComposition> GuiTableComposition::GetSitedCell(signed __int32 _row, signed __int32 _column);
	{
		throw 0;
	}
	
	GuiCellOption GuiTableComposition::GetRowOption(signed __int32 _row);
	{
		throw 0;
	}
	
	void GuiTableComposition::SetRowOption(signed __int32 _row, GuiCellOption option);
	{
		throw 0;
	}
	
	GuiCellOption GuiTableComposition::GetColumnOption(signed __int32 _column);
	{
		throw 0;
	}
	
	void GuiTableComposition::SetColumnOption(signed __int32 _column, GuiCellOption option);
	{
		throw 0;
	}
	
	void GuiTableComposition::UpdateCellBounds();
	{
		throw 0;
	}
	
	Size GuiTableComposition::GetMinPreferredClientSize();
	{
		throw 0;
	}
	
	Rect GuiTableComposition::GetBounds();
	{
		throw 0;
	}
	
	rptr<GuiTableComposition> GuiTableComposition::operator=(rptr<GuiTableComposition> value);
	{
		throw 0;
	}
	
	signed __int32 GuiTableComposition::GetRows();
	{
		throw 0;
	}
	
	signed __int32 GuiTableComposition::GetColumns();
	{
		throw 0;
	}
	
	signed __int32 GuiTableComposition::GetCellPadding();
	{
		throw 0;
	}
	void GuiTableComposition::SetCellPadding(signed __int32 value);
	{
		throw 0;
	}
	
	Rect GuiTableComposition::GetCellArea();
	{
		throw 0;
	}
	
	signed __int32 GuiTableComposition::GetCellPadding();
	{
		throw 0;
	}
	void GuiTableComposition::SetCellPadding(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiTabPage
***********************************************************************/

	rptr<GuiTabPage> GuiTabPage::operator=(rptr<GuiTabPage> value);
	{
		throw 0;
	}
	
	rptr<GuiControl> GuiTabPage::GetContainer();
	{
		throw 0;
	}
	
	rptr<GuiTab> GuiTabPage::GetOwnerTab();
	{
		throw 0;
	}
	
	const GacString& GuiTabPage::GetText();
	{
		throw 0;
	}
	void GuiTabPage::SetText(const GacString& value);
	{
		throw 0;
	}
	
	bool GuiTabPage::GetSelected();
	{
		throw 0;
	}
	
	const GacString& GuiTabPage::GetText();
	{
		throw 0;
	}
	void GuiTabPage::SetText(const GacString& value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiTabPage::get_TextChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextBoxCommonInterface
***********************************************************************/

	rptr<GuiTextBoxCommonInterface> GuiTextBoxCommonInterface::Create();
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::CanCut();
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::CanCopy();
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::CanPaste();
	{
		throw 0;
	}
	
	void GuiTextBoxCommonInterface::SelectAll();
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::Cut();
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::Copy();
	{
		throw 0;
	}
	
	bool GuiTextBoxCommonInterface::Paste();
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiTextBoxCommonInterface::GetRowText(signed __int32 row);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiTextBoxCommonInterface::GetFragmentText(TextPos start, TextPos end);
	{
		throw 0;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetRowWidth(signed __int32 row);
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetTextPosFromPoint(Point point);
	{
		throw 0;
	}
	
	Point GuiTextBoxCommonInterface::GetPointFromTextPos(TextPos pos);
	{
		throw 0;
	}
	
	Rect GuiTextBoxCommonInterface::GetRectFromTextPos(TextPos pos);
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetNearestTextPos(Point point);
	{
		throw 0;
	}
	
	void GuiTextBoxCommonInterface::Select(TextPos begin, TextPos end);
	{
		throw 0;
	}
	
	rptr<GuiTextBoxCommonInterface> GuiTextBoxCommonInterface::operator=(rptr<GuiTextBoxCommonInterface> value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiTextBoxCommonInterface::GetTextComposition();
	{
		throw 0;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetRowHeight();
	{
		throw 0;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetMaxWidth();
	{
		throw 0;
	}
	
	signed __int32 GuiTextBoxCommonInterface::GetMaxHeight();
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretBegin();
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretEnd();
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretSmall();
	{
		throw 0;
	}
	
	TextPos GuiTextBoxCommonInterface::GetCaretLarge();
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiTextBoxCommonInterface::GetSelectionText();
	{
		throw 0;
	}
	void GuiTextBoxCommonInterface::SetSelectionText(const GacString& value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiTextBoxCommonInterface::GetSelectionText();
	{
		throw 0;
	}
	void GuiTextBoxCommonInterface::SetSelectionText(const GacString& value);
	{
		throw 0;
	}
	
	GuiGraphicsEvent_of_GuiEventArgs GuiTextBoxCommonInterface::get_SelectionChanged();
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextElementOperator
***********************************************************************/

	rptr<GuiTextElementOperator> GuiTextElementOperator::Create();
	{
		throw 0;
	}
	
	void GuiTextElementOperator::Install(rptr<GuiColorizedTextElement> _textElement, rptr<GuiGraphicsComposition> _textComposition, rptr<GuiControl> _textControl);
	{
		throw 0;
	}
	
	TextPos GuiTextElementOperator::GetNearestTextPos(Point point);
	{
		throw 0;
	}
	
	void GuiTextElementOperator::Select(TextPos begin, TextPos end);
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::CanCut();
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::CanCopy();
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::CanPaste();
	{
		throw 0;
	}
	
	void GuiTextElementOperator::SelectAll();
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::Cut();
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::Copy();
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::Paste();
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator> GuiTextElementOperator::operator=(rptr<GuiTextElementOperator> value);
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator :: ICallback> GuiTextElementOperator::GetCallback();
	{
		throw 0;
	}
	void GuiTextElementOperator::SetCallback(rptr<GuiTextElementOperator :: ICallback> value);
	{
		throw 0;
	}
	
	rptr<GuiTextBoxCommonInterface> GuiTextElementOperator::GetTextBoxCommonInterface();
	{
		throw 0;
	}
	void GuiTextElementOperator::SetTextBoxCommonInterface(rptr<GuiTextBoxCommonInterface> value);
	{
		throw 0;
	}
	
	rptr<GuiColorizedTextElement> GuiTextElementOperator::GetTextElement();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> GuiTextElementOperator::GetTextComposition();
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiTextElementOperator::GetSelectionText();
	{
		throw 0;
	}
	void GuiTextElementOperator::SetSelectionText(const GacString& value);
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator :: ICallback> GuiTextElementOperator::GetCallback();
	{
		throw 0;
	}
	void GuiTextElementOperator::SetCallback(rptr<GuiTextElementOperator :: ICallback> value);
	{
		throw 0;
	}
	
	rptr<GuiTextBoxCommonInterface> GuiTextElementOperator::GetTextBoxCommonInterface();
	{
		throw 0;
	}
	void GuiTextElementOperator::SetTextBoxCommonInterface(rptr<GuiTextBoxCommonInterface> value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> GuiTextElementOperator::GetSelectionText();
	{
		throw 0;
	}
	void GuiTextElementOperator::SetSelectionText(const GacString& value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextElementOperator :: DefaultCallback
***********************************************************************/

	rptr<GuiTextElementOperator :: DefaultCallback> GuiTextElementOperator::DefaultCallback::Create(rptr<GuiColorizedTextElement> _textElement, rptr<GuiGraphicsComposition> _textComposition);
	{
		throw 0;
	}
	
	TextPos GuiTextElementOperator::DefaultCallback::GetLeftWord(TextPos pos);
	{
		throw 0;
	}
	
	TextPos GuiTextElementOperator::DefaultCallback::GetRightWord(TextPos pos);
	{
		throw 0;
	}
	
	void GuiTextElementOperator::DefaultCallback::GetWord(TextPos pos, TextPos& begin, TextPos& end);
	{
		throw 0;
	}
	
	signed __int32 GuiTextElementOperator::DefaultCallback::GetPageRows();
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::DefaultCallback::BeforeModify(TextPos& start, TextPos& end, const GacString& originalText, GacString& inputText);
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator :: DefaultCallback> GuiTextElementOperator::DefaultCallback::operator=(rptr<GuiTextElementOperator :: DefaultCallback> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextElementOperator :: ICallback
***********************************************************************/

	TextPos GuiTextElementOperator::ICallback::GetLeftWord(TextPos pos);
	{
		throw 0;
	}
	
	TextPos GuiTextElementOperator::ICallback::GetRightWord(TextPos pos);
	{
		throw 0;
	}
	
	void GuiTextElementOperator::ICallback::GetWord(TextPos pos, TextPos& begin, TextPos& end);
	{
		throw 0;
	}
	
	bool GuiTextElementOperator::ICallback::BeforeModify(TextPos& start, TextPos& end, const GacString& originalText, GacString& inputText);
	{
		throw 0;
	}
	
	void GuiTextElementOperator::ICallback::AfterModify(TextPos originalStart, TextPos originalEnd, const GacString& originalText, TextPos inputStart, TextPos inputEnd, const GacString& inputText);
	{
		throw 0;
	}
	
	void GuiTextElementOperator::ICallback::ScrollToView(Point point);
	{
		throw 0;
	}
	
	rptr<GuiTextElementOperator :: ICallback> GuiTextElementOperator::ICallback::operator=(rptr<GuiTextElementOperator :: ICallback> value);
	{
		throw 0;
	}
	
	signed __int32 GuiTextElementOperator::ICallback::GetPageRows();
	{
		throw 0;
	}
	
	signed __int32 GuiTextElementOperator::ICallback::GetTextMargin();
	{
		throw 0;
	}
	

/***********************************************************************
GuiTextList
***********************************************************************/

	rptr<GuiTextList> GuiTextList::Create(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<TextItemStyleProvider :: ITextItemStyleProvider> _itemStyleProvider);
	{
		throw 0;
	}
	
	rptr<GuiTextList> GuiTextList::operator=(rptr<GuiTextList> value);
	{
		throw 0;
	}
	
	rptr<TextItemProvider> GuiTextList::GetItems();
	{
		throw 0;
	}
	

/***********************************************************************
GuiTimeBasedAnimation
***********************************************************************/

	rptr<GuiTimeBasedAnimation> GuiTimeBasedAnimation::Create(signed __int32 totalMilliseconds);
	{
		throw 0;
	}
	
	void GuiTimeBasedAnimation::Restart(signed __int32 totalMilliseconds);
	{
		throw 0;
	}
	
	signed __int32 GuiTimeBasedAnimation::GetTotalLength();
	{
		throw 0;
	}
	
	signed __int32 GuiTimeBasedAnimation::GetCurrentPosition();
	{
		throw 0;
	}
	
	rptr<GuiTimeBasedAnimation> GuiTimeBasedAnimation::operator=(rptr<GuiTimeBasedAnimation> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiTreeView
***********************************************************************/

	rptr<GuiTreeView> GuiTreeView::Create(rptr<GuiTreeView :: IStyleProvider> _styleProvider, rptr<INodeRootProvider> _nodeRootProvider);
	{
		throw 0;
	}
	
	sptr<TreeViewItemRootProvider> GuiTreeView::Nodes();
	{
		throw 0;
	}
	
	rptr<GuiTreeView> GuiTreeView::operator=(rptr<GuiTreeView> value);
	{
		throw 0;
	}
	
	rptr<GuiTreeView :: IStyleProvider> GuiTreeView::GetTreeViewStyleProvider();
	{
		throw 0;
	}
	

/***********************************************************************
GuiTreeView :: IStyleProvider
***********************************************************************/

	rptr<GuiSelectableButton :: IStyleController> GuiTreeView::IStyleProvider::CreateItemBackground();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> GuiTreeView::IStyleProvider::CreateItemExpandingDecorator();
	{
		throw 0;
	}
	
	rptr<GuiTreeView :: IStyleProvider> GuiTreeView::IStyleProvider::operator=(rptr<GuiTreeView :: IStyleProvider> value);
	{
		throw 0;
	}
	
	Color GuiTreeView::IStyleProvider::GetTextColor();
	{
		throw 0;
	}
	

/***********************************************************************
GuiVirtualListView
***********************************************************************/

	rptr<GuiVirtualListView> GuiVirtualListView::Create(rptr<GuiListViewBase :: IStyleProvider> _styleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider);
	{
		throw 0;
	}
	
	void GuiVirtualListView::ChangeItemStyle(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> contentProvider);
	{
		throw 0;
	}
	
	rptr<GuiVirtualListView> GuiVirtualListView::operator=(rptr<GuiVirtualListView> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiVirtualTextList
***********************************************************************/

	rptr<GuiVirtualTextList> GuiVirtualTextList::Create(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<TextItemStyleProvider :: ITextItemStyleProvider> _itemStyleProvider, rptr<GuiListControl :: IItemProvider> _itemProvider);
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiVirtualTextList::SetStyleProvider(sptr<GuiListControl :: IItemStyleProvider> value);
	{
		throw 0;
	}
	
	sptr<GuiListControl :: IItemStyleProvider> GuiVirtualTextList::ChangeItemStyle(rptr<TextItemStyleProvider :: ITextItemStyleProvider> itemStyleProvider);
	{
		throw 0;
	}
	
	rptr<GuiVirtualTextList> GuiVirtualTextList::operator=(rptr<GuiVirtualTextList> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiVirtualTreeListControl
***********************************************************************/

	rptr<GuiVirtualTreeListControl> GuiVirtualTreeListControl::Create(rptr<GuiScrollView :: IStyleProvider> _styleProvider, rptr<INodeRootProvider> _nodeRootProvider);
	{
		throw 0;
	}
	
	sptr<INodeItemStyleProvider> GuiVirtualTreeListControl::SetNodeStyleProvider(sptr<INodeItemStyleProvider> styleProvider);
	{
		throw 0;
	}
	
	rptr<GuiVirtualTreeListControl> GuiVirtualTreeListControl::operator=(rptr<GuiVirtualTreeListControl> value);
	{
		throw 0;
	}
	
	rptr<INodeItemView> GuiVirtualTreeListControl::GetNodeItemView();
	{
		throw 0;
	}
	
	rptr<INodeRootProvider> GuiVirtualTreeListControl::GetNodeRootProvider();
	{
		throw 0;
	}
	
	rptr<INodeItemStyleProvider> GuiVirtualTreeListControl::GetNodeStyleProvider();
	{
		throw 0;
	}
	

/***********************************************************************
GuiWindow
***********************************************************************/

	rptr<GuiWindow> GuiWindow::Create(rptr<GuiControl :: IStyleController> _styleController);
	{
		throw 0;
	}
	
	rptr<GuiWindow> GuiWindow::operator=(rptr<GuiWindow> value);
	{
		throw 0;
	}
	

/***********************************************************************
GuiWindowComposition
***********************************************************************/

	rptr<GuiWindowComposition> GuiWindowComposition::Create();
	{
		throw 0;
	}
	
	Rect GuiWindowComposition::GetBounds();
	{
		throw 0;
	}
	
	void GuiWindowComposition::SetMargin(Margin value);
	{
		throw 0;
	}
	
	rptr<GuiWindowComposition> GuiWindowComposition::operator=(rptr<GuiWindowComposition> value);
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiWindowComposition::GetAttachedWindow();
	{
		throw 0;
	}
	void GuiWindowComposition::SetAttachedWindow(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	rptr<INativeWindow> GuiWindowComposition::GetAttachedWindow();
	{
		throw 0;
	}
	void GuiWindowComposition::SetAttachedWindow(rptr<INativeWindow> window);
	{
		throw 0;
	}
	

/***********************************************************************
ICollection_of_ListViewItem
***********************************************************************/

	signed __int32 ICollection_of_ListViewItem::Add(sptr<ListViewItem> item);
	{
		throw 0;
	}
	
	bool ICollection_of_ListViewItem::Remove(rptr<ListViewItem> item);
	{
		throw 0;
	}
	
	bool ICollection_of_ListViewItem::RemoveAt(signed __int32 index);
	{
		throw 0;
	}
	
	bool ICollection_of_ListViewItem::RemoveRange(signed __int32 index, signed __int32 count);
	{
		throw 0;
	}
	
	bool ICollection_of_ListViewItem::Clear();
	{
		throw 0;
	}
	
	rptr<ICollection_of_ListViewItem> ICollection_of_ListViewItem::operator=(rptr<ICollection_of_ListViewItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
ICollection_of_MemoryNodeProvider
***********************************************************************/

	signed __int32 ICollection_of_MemoryNodeProvider::Add(sptr<MemoryNodeProvider> item);
	{
		throw 0;
	}
	
	bool ICollection_of_MemoryNodeProvider::Remove(rptr<MemoryNodeProvider> item);
	{
		throw 0;
	}
	
	bool ICollection_of_MemoryNodeProvider::RemoveAt(signed __int32 index);
	{
		throw 0;
	}
	
	bool ICollection_of_MemoryNodeProvider::RemoveRange(signed __int32 index, signed __int32 count);
	{
		throw 0;
	}
	
	bool ICollection_of_MemoryNodeProvider::Clear();
	{
		throw 0;
	}
	
	rptr<ICollection_of_MemoryNodeProvider> ICollection_of_MemoryNodeProvider::operator=(rptr<ICollection_of_MemoryNodeProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
ICollection_of_TextItem
***********************************************************************/

	signed __int32 ICollection_of_TextItem::Add(constTextItem& item);
	{
		throw 0;
	}
	
	bool ICollection_of_TextItem::Remove(constTextItem& item);
	{
		throw 0;
	}
	
	bool ICollection_of_TextItem::RemoveAt(signed __int32 index);
	{
		throw 0;
	}
	
	bool ICollection_of_TextItem::RemoveRange(signed __int32 index, signed __int32 count);
	{
		throw 0;
	}
	
	bool ICollection_of_TextItem::Clear();
	{
		throw 0;
	}
	
	rptr<ICollection_of_TextItem> ICollection_of_TextItem::operator=(rptr<ICollection_of_TextItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
IDescriptable
***********************************************************************/

	rptr<IDescriptable> IDescriptable::Create();
	{
		throw 0;
	}
	
	rptr<IDescriptable> IDescriptable::operator=(rptr<IDescriptable> value);
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsAnimation
***********************************************************************/

	void IGuiGraphicsAnimation::Play(signed __int32 currentPosition, signed __int32 totalLength);
	{
		throw 0;
	}
	
	void IGuiGraphicsAnimation::Stop();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsAnimation> IGuiGraphicsAnimation::operator=(rptr<IGuiGraphicsAnimation> value);
	{
		throw 0;
	}
	
	signed __int32 IGuiGraphicsAnimation::GetTotalLength();
	{
		throw 0;
	}
	
	signed __int32 IGuiGraphicsAnimation::GetCurrentPosition();
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsElement
***********************************************************************/

	rptr<IGuiGraphicsElement> IGuiGraphicsElement::operator=(rptr<IGuiGraphicsElement> value);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsElementFactory> IGuiGraphicsElement::GetFactory();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> IGuiGraphicsElement::GetRenderer();
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsElementFactory
***********************************************************************/

	rptr<IGuiGraphicsElement> IGuiGraphicsElementFactory::Create();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsElementFactory> IGuiGraphicsElementFactory::operator=(rptr<IGuiGraphicsElementFactory> value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> IGuiGraphicsElementFactory::GetElementTypeName();
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsRenderer
***********************************************************************/

	void IGuiGraphicsRenderer::Initialize(rptr<IGuiGraphicsElement> _element);
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderer::Finalize();
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderer::Render(Rect bounds);
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderer::OnElementStateChanged();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderer> IGuiGraphicsRenderer::operator=(rptr<IGuiGraphicsRenderer> value);
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderer::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> _renderTarget);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRendererFactory> IGuiGraphicsRenderer::GetFactory();
	{
		throw 0;
	}
	
	Size IGuiGraphicsRenderer::GetMinSize();
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsRendererFactory
***********************************************************************/

	rptr<IGuiGraphicsRenderer> IGuiGraphicsRendererFactory::Create();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRendererFactory> IGuiGraphicsRendererFactory::operator=(rptr<IGuiGraphicsRendererFactory> value);
	{
		throw 0;
	}
	

/***********************************************************************
IGuiGraphicsRenderTarget
***********************************************************************/

	void IGuiGraphicsRenderTarget::StartRendering();
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderTarget::StopRendering();
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderTarget::PushClipper(Rect clipper);
	{
		throw 0;
	}
	
	void IGuiGraphicsRenderTarget::PopClipper();
	{
		throw 0;
	}
	
	bool IGuiGraphicsRenderTarget::IsClipperCoverWholeTarget();
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> IGuiGraphicsRenderTarget::operator=(rptr<IGuiGraphicsRenderTarget> value);
	{
		throw 0;
	}
	
	Rect IGuiGraphicsRenderTarget::GetClipper();
	{
		throw 0;
	}
	

/***********************************************************************
IGuiMenuService
***********************************************************************/

	bool IGuiMenuService::IsActiveState();
	{
		throw 0;
	}
	
	void IGuiMenuService::MenuItemExecuted();
	{
		throw 0;
	}
	
	void IGuiMenuService::MenuOpened(rptr<GuiMenu> menu);
	{
		throw 0;
	}
	
	void IGuiMenuService::MenuClosed(rptr<GuiMenu> menu);
	{
		throw 0;
	}
	
	rptr<IGuiMenuService> IGuiMenuService::operator=(rptr<IGuiMenuService> value);
	{
		throw 0;
	}
	
	rptr<IGuiMenuService> IGuiMenuService::GetParent();
	{
		throw 0;
	}
	
	IGuiMenuService :: Direction IGuiMenuService::GetPreferredDirection();
	{
		throw 0;
	}
	
	rptr<GuiMenu> IGuiMenuService::GetOpeningMenu();
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() IGuiMenuService::get_Identifier();
	{
		throw 0;
	}
	void IGuiMenuService::set_Identifier(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	

/***********************************************************************
IList_of_int
***********************************************************************/

	signed __int32 IList_of_int::Insert(signed __int32 index, signed __int32 item);
	{
		throw 0;
	}
	
	bool IList_of_int::Set(signed __int32 index, signed __int32 item);
	{
		throw 0;
	}
	
	rptr<IList_of_int> IList_of_int::operator=(rptr<IList_of_int> value);
	{
		throw 0;
	}
	

/***********************************************************************
IList_of_ListViewColumn
***********************************************************************/

	signed __int32 IList_of_ListViewColumn::Insert(signed __int32 index, sptr<ListViewColumn> item);
	{
		throw 0;
	}
	
	bool IList_of_ListViewColumn::Set(signed __int32 index, sptr<ListViewColumn> item);
	{
		throw 0;
	}
	
	rptr<IList_of_ListViewColumn> IList_of_ListViewColumn::operator=(rptr<IList_of_ListViewColumn> value);
	{
		throw 0;
	}
	

/***********************************************************************
IList_of_ListViewItem
***********************************************************************/

	signed __int32 IList_of_ListViewItem::Insert(signed __int32 index, sptr<ListViewItem> item);
	{
		throw 0;
	}
	
	bool IList_of_ListViewItem::Set(signed __int32 index, sptr<ListViewItem> item);
	{
		throw 0;
	}
	
	rptr<IList_of_ListViewItem> IList_of_ListViewItem::operator=(rptr<IList_of_ListViewItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
IList_of_MemoryNodeProvider
***********************************************************************/

	signed __int32 IList_of_MemoryNodeProvider::Insert(signed __int32 index, sptr<MemoryNodeProvider> item);
	{
		throw 0;
	}
	
	bool IList_of_MemoryNodeProvider::Set(signed __int32 index, sptr<MemoryNodeProvider> item);
	{
		throw 0;
	}
	
	rptr<IList_of_MemoryNodeProvider> IList_of_MemoryNodeProvider::operator=(rptr<IList_of_MemoryNodeProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
IList_of_TextItem
***********************************************************************/

	signed __int32 IList_of_TextItem::Insert(signed __int32 index, constTextItem& item);
	{
		throw 0;
	}
	
	bool IList_of_TextItem::Set(signed __int32 index, constTextItem& item);
	{
		throw 0;
	}
	
	rptr<IList_of_TextItem> IList_of_TextItem::operator=(rptr<IList_of_TextItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeAsyncService
***********************************************************************/

	bool INativeAsyncService::IsInMainThread();
	{
		throw 0;
	}
	
	rptr<INativeAsyncService> INativeAsyncService::operator=(rptr<INativeAsyncService> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeCallbackService
***********************************************************************/

	bool INativeCallbackService::InstallListener(rptr<INativeControllerListener> listener);
	{
		throw 0;
	}
	
	bool INativeCallbackService::UninstallListener(rptr<INativeControllerListener> listener);
	{
		throw 0;
	}
	
	rptr<INativeCallbackService> INativeCallbackService::operator=(rptr<INativeCallbackService> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeClipboardService
***********************************************************************/

	bool INativeClipboardService::ContainsText();
	{
		throw 0;
	}
	
	bool INativeClipboardService::SetText(const GacString& value);
	{
		throw 0;
	}
	
	rptr<INativeClipboardService> INativeClipboardService::operator=(rptr<INativeClipboardService> value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> INativeClipboardService::GetText();
	{
		throw 0;
	}
	

/***********************************************************************
INativeController
***********************************************************************/

	rptr<INativeCallbackService> INativeController::CallbackService();
	{
		throw 0;
	}
	
	rptr<INativeResourceService> INativeController::ResourceService();
	{
		throw 0;
	}
	
	rptr<INativeAsyncService> INativeController::AsyncService();
	{
		throw 0;
	}
	
	rptr<INativeClipboardService> INativeController::ClipboardService();
	{
		throw 0;
	}
	
	rptr<INativeImageService> INativeController::ImageService();
	{
		throw 0;
	}
	
	rptr<INativeScreenService> INativeController::ScreenService();
	{
		throw 0;
	}
	
	rptr<INativeWindowService> INativeController::WindowService();
	{
		throw 0;
	}
	
	rptr<INativeInputService> INativeController::InputService();
	{
		throw 0;
	}
	
	rptr<INativeController> INativeController::operator=(rptr<INativeController> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeControllerListener
***********************************************************************/

	rptr<INativeControllerListener> INativeControllerListener::Create();
	{
		throw 0;
	}
	
	void INativeControllerListener::LeftButtonDown(Point position);
	{
		throw 0;
	}
	
	void INativeControllerListener::LeftButtonUp(Point position);
	{
		throw 0;
	}
	
	void INativeControllerListener::RightButtonDown(Point position);
	{
		throw 0;
	}
	
	void INativeControllerListener::RightButtonUp(Point position);
	{
		throw 0;
	}
	
	void INativeControllerListener::MouseMoving(Point position);
	{
		throw 0;
	}
	
	void INativeControllerListener::GlobalTimer();
	{
		throw 0;
	}
	
	void INativeControllerListener::ClipboardUpdated();
	{
		throw 0;
	}
	
	void INativeControllerListener::NativeWindowCreated(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	void INativeControllerListener::NativeWindowDestroying(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	rptr<INativeControllerListener> INativeControllerListener::operator=(rptr<INativeControllerListener> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeCursor
***********************************************************************/

	bool INativeCursor::IsSystemCursor();
	{
		throw 0;
	}
	
	rptr<INativeCursor> INativeCursor::operator=(rptr<INativeCursor> value);
	{
		throw 0;
	}
	
	INativeCursor :: SystemCursorType INativeCursor::GetSystemCursorType();
	{
		throw 0;
	}
	

/***********************************************************************
INativeImage
***********************************************************************/

	rptr<INativeImageFrame> INativeImage::GetFrame(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<INativeImage> INativeImage::operator=(rptr<INativeImage> value);
	{
		throw 0;
	}
	
	rptr<INativeImageService> INativeImage::GetImageService();
	{
		throw 0;
	}
	
	INativeImage :: FormatType INativeImage::GetFormat();
	{
		throw 0;
	}
	
	signed __int32 INativeImage::GetFrameCount();
	{
		throw 0;
	}
	

/***********************************************************************
INativeImageFrame
***********************************************************************/

	bool INativeImageFrame::SetCache(void->GetPointerType() key, sptr<INativeImageFrameCache> cache);
	{
		throw 0;
	}
	
	sptr<INativeImageFrameCache> INativeImageFrame::GetCache(void->GetPointerType() key);
	{
		throw 0;
	}
	
	sptr<INativeImageFrameCache> INativeImageFrame::RemoveCache(void->GetPointerType() key);
	{
		throw 0;
	}
	
	rptr<INativeImageFrame> INativeImageFrame::operator=(rptr<INativeImageFrame> value);
	{
		throw 0;
	}
	
	rptr<INativeImage> INativeImageFrame::GetImage();
	{
		throw 0;
	}
	
	Size INativeImageFrame::GetSize();
	{
		throw 0;
	}
	

/***********************************************************************
INativeImageFrameCache
***********************************************************************/

	void INativeImageFrameCache::OnAttach(rptr<INativeImageFrame> frame);
	{
		throw 0;
	}
	
	void INativeImageFrameCache::OnDetach(rptr<INativeImageFrame> frame);
	{
		throw 0;
	}
	
	rptr<INativeImageFrameCache> INativeImageFrameCache::operator=(rptr<INativeImageFrameCache> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeImageService
***********************************************************************/

	sptr<INativeImage> INativeImageService::CreateImageFromFile(const GacString& path);
	{
		throw 0;
	}
	
	rptr<INativeImageService> INativeImageService::operator=(rptr<INativeImageService> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeInputService
***********************************************************************/

	void INativeInputService::StartHookMouse();
	{
		throw 0;
	}
	
	void INativeInputService::StopHookMouse();
	{
		throw 0;
	}
	
	bool INativeInputService::IsHookingMouse();
	{
		throw 0;
	}
	
	void INativeInputService::StartTimer();
	{
		throw 0;
	}
	
	void INativeInputService::StopTimer();
	{
		throw 0;
	}
	
	bool INativeInputService::IsTimerEnabled();
	{
		throw 0;
	}
	
	bool INativeInputService::IsKeyPressing(signed __int32 code);
	{
		throw 0;
	}
	
	bool INativeInputService::IsKeyToggled(signed __int32 code);
	{
		throw 0;
	}
	
	rptr<INativeInputService> INativeInputService::operator=(rptr<INativeInputService> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeResourceService
***********************************************************************/

	rptr<INativeCursor> INativeResourceService::GetSystemCursor(INativeCursor :: SystemCursorType type);
	{
		throw 0;
	}
	
	rptr<INativeResourceService> INativeResourceService::operator=(rptr<INativeResourceService> value);
	{
		throw 0;
	}
	
	rptr<INativeCursor> INativeResourceService::GetDefaultSystemCursor();
	{
		throw 0;
	}
	
	FontProperties INativeResourceService::GetDefaultFont();
	{
		throw 0;
	}
	void INativeResourceService::SetDefaultFont(constFontProperties& value);
	{
		throw 0;
	}
	
	FontProperties INativeResourceService::GetDefaultFont();
	{
		throw 0;
	}
	void INativeResourceService::SetDefaultFont(constFontProperties& value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeScreen
***********************************************************************/

	bool INativeScreen::IsPrimary();
	{
		throw 0;
	}
	
	rptr<INativeScreen> INativeScreen::operator=(rptr<INativeScreen> value);
	{
		throw 0;
	}
	
	Rect INativeScreen::GetBounds();
	{
		throw 0;
	}
	
	Rect INativeScreen::GetClientBounds();
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> INativeScreen::GetName();
	{
		throw 0;
	}
	

/***********************************************************************
INativeScreenService
***********************************************************************/

	rptr<INativeScreen> INativeScreenService::GetScreen(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	rptr<INativeScreen> INativeScreenService::GetScreen(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<INativeScreenService> INativeScreenService::operator=(rptr<INativeScreenService> value);
	{
		throw 0;
	}
	
	signed __int32 INativeScreenService::GetScreenCount();
	{
		throw 0;
	}
	

/***********************************************************************
INativeWindow
***********************************************************************/

	void INativeWindow::Show();
	{
		throw 0;
	}
	
	void INativeWindow::ShowDeactivated();
	{
		throw 0;
	}
	
	void INativeWindow::ShowRestored();
	{
		throw 0;
	}
	
	void INativeWindow::ShowMaximized();
	{
		throw 0;
	}
	
	void INativeWindow::ShowMinimized();
	{
		throw 0;
	}
	
	void INativeWindow::Hide();
	{
		throw 0;
	}
	
	bool INativeWindow::IsVisible();
	{
		throw 0;
	}
	
	void INativeWindow::Enable();
	{
		throw 0;
	}
	
	void INativeWindow::Disable();
	{
		throw 0;
	}
	
	bool INativeWindow::IsEnabled();
	{
		throw 0;
	}
	
	void INativeWindow::SetFocus();
	{
		throw 0;
	}
	
	bool INativeWindow::IsFocused();
	{
		throw 0;
	}
	
	void INativeWindow::SetActivate();
	{
		throw 0;
	}
	
	bool INativeWindow::IsActivated();
	{
		throw 0;
	}
	
	void INativeWindow::ShowInTaskBar();
	{
		throw 0;
	}
	
	void INativeWindow::HideInTaskBar();
	{
		throw 0;
	}
	
	bool INativeWindow::IsAppearedInTaskBar();
	{
		throw 0;
	}
	
	void INativeWindow::EnableActivate();
	{
		throw 0;
	}
	
	void INativeWindow::DisableActivate();
	{
		throw 0;
	}
	
	bool INativeWindow::IsEnabledActivate();
	{
		throw 0;
	}
	
	bool INativeWindow::RequireCapture();
	{
		throw 0;
	}
	
	bool INativeWindow::ReleaseCapture();
	{
		throw 0;
	}
	
	bool INativeWindow::InstallListener(rptr<INativeWindowListener> listener);
	{
		throw 0;
	}
	
	bool INativeWindow::UninstallListener(rptr<INativeWindowListener> listener);
	{
		throw 0;
	}
	
	void INativeWindow::RedrawContent();
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindow::operator=(rptr<INativeWindow> value);
	{
		throw 0;
	}
	
	Rect INativeWindow::GetBounds();
	{
		throw 0;
	}
	void INativeWindow::SetBounds(constRect& bounds);
	{
		throw 0;
	}
	
	Size INativeWindow::GetClientSize();
	{
		throw 0;
	}
	void INativeWindow::SetClientSize(Size size);
	{
		throw 0;
	}
	
	Rect INativeWindow::GetClientBoundsInScreen();
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> INativeWindow::GetTitle();
	{
		throw 0;
	}
	void INativeWindow::SetTitle(vl::ObjectString<wchar_t> _title);
	{
		throw 0;
	}
	
	rptr<INativeCursor> INativeWindow::GetWindowCursor();
	{
		throw 0;
	}
	void INativeWindow::SetWindowCursor(rptr<INativeCursor> _cursor);
	{
		throw 0;
	}
	
	Point INativeWindow::GetCaretPoint();
	{
		throw 0;
	}
	void INativeWindow::SetCaretPoint(Point point);
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindow::GetParent();
	{
		throw 0;
	}
	void INativeWindow::SetParent(rptr<INativeWindow> parent);
	{
		throw 0;
	}
	
	bool INativeWindow::GetAlwaysPassFocusToParent();
	{
		throw 0;
	}
	void INativeWindow::SetAlwaysPassFocusToParent(bool value);
	{
		throw 0;
	}
	
	bool INativeWindow::GetMaximizedBox();
	{
		throw 0;
	}
	void INativeWindow::SetMaximizedBox(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetMinimizedBox();
	{
		throw 0;
	}
	void INativeWindow::SetMinimizedBox(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetBorder();
	{
		throw 0;
	}
	void INativeWindow::SetBorder(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetSizeBox();
	{
		throw 0;
	}
	void INativeWindow::SetSizeBox(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetIconVisible();
	{
		throw 0;
	}
	void INativeWindow::SetIconVisible(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetTitleBar();
	{
		throw 0;
	}
	void INativeWindow::SetTitleBar(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetTopMost();
	{
		throw 0;
	}
	void INativeWindow::SetTopMost(bool topmost);
	{
		throw 0;
	}
	
	Rect INativeWindow::GetBounds();
	{
		throw 0;
	}
	void INativeWindow::SetBounds(constRect& bounds);
	{
		throw 0;
	}
	
	Size INativeWindow::GetClientSize();
	{
		throw 0;
	}
	void INativeWindow::SetClientSize(Size size);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> INativeWindow::GetTitle();
	{
		throw 0;
	}
	void INativeWindow::SetTitle(vl::ObjectString<wchar_t> _title);
	{
		throw 0;
	}
	
	rptr<INativeCursor> INativeWindow::GetWindowCursor();
	{
		throw 0;
	}
	void INativeWindow::SetWindowCursor(rptr<INativeCursor> _cursor);
	{
		throw 0;
	}
	
	Point INativeWindow::GetCaretPoint();
	{
		throw 0;
	}
	void INativeWindow::SetCaretPoint(Point point);
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindow::GetParent();
	{
		throw 0;
	}
	void INativeWindow::SetParent(rptr<INativeWindow> parent);
	{
		throw 0;
	}
	
	bool INativeWindow::GetAlwaysPassFocusToParent();
	{
		throw 0;
	}
	void INativeWindow::SetAlwaysPassFocusToParent(bool value);
	{
		throw 0;
	}
	
	bool INativeWindow::GetMaximizedBox();
	{
		throw 0;
	}
	void INativeWindow::SetMaximizedBox(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetMinimizedBox();
	{
		throw 0;
	}
	void INativeWindow::SetMinimizedBox(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetBorder();
	{
		throw 0;
	}
	void INativeWindow::SetBorder(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetSizeBox();
	{
		throw 0;
	}
	void INativeWindow::SetSizeBox(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetIconVisible();
	{
		throw 0;
	}
	void INativeWindow::SetIconVisible(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetTitleBar();
	{
		throw 0;
	}
	void INativeWindow::SetTitleBar(bool visible);
	{
		throw 0;
	}
	
	bool INativeWindow::GetTopMost();
	{
		throw 0;
	}
	void INativeWindow::SetTopMost(bool topmost);
	{
		throw 0;
	}
	

/***********************************************************************
INativeWindowListener
***********************************************************************/

	rptr<INativeWindowListener> INativeWindowListener::Create();
	{
		throw 0;
	}
	
	void INativeWindowListener::Moving(Rect& bounds, bool fixSizeOnly);
	{
		throw 0;
	}
	
	void INativeWindowListener::Moved();
	{
		throw 0;
	}
	
	void INativeWindowListener::Enabled();
	{
		throw 0;
	}
	
	void INativeWindowListener::Disabled();
	{
		throw 0;
	}
	
	void INativeWindowListener::GotFocus();
	{
		throw 0;
	}
	
	void INativeWindowListener::LostFocus();
	{
		throw 0;
	}
	
	void INativeWindowListener::Activated();
	{
		throw 0;
	}
	
	void INativeWindowListener::Deactivated();
	{
		throw 0;
	}
	
	void INativeWindowListener::Opened();
	{
		throw 0;
	}
	
	void INativeWindowListener::Closing(bool->GetReferenceType() cancel);
	{
		throw 0;
	}
	
	void INativeWindowListener::Closed();
	{
		throw 0;
	}
	
	void INativeWindowListener::Paint();
	{
		throw 0;
	}
	
	void INativeWindowListener::Destroying();
	{
		throw 0;
	}
	
	void INativeWindowListener::Destroyed();
	{
		throw 0;
	}
	
	void INativeWindowListener::LeftButtonDown(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::LeftButtonUp(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::LeftButtonDoubleClick(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::RightButtonDown(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::RightButtonUp(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::RightButtonDoubleClick(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::MiddleButtonDown(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::MiddleButtonUp(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::MiddleButtonDoubleClick(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::HorizontalWheel(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::VerticalWheel(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::MouseMoving(constNativeWindowMouseInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::MouseEntered();
	{
		throw 0;
	}
	
	void INativeWindowListener::MouseLeaved();
	{
		throw 0;
	}
	
	void INativeWindowListener::KeyDown(constNativeWindowKeyInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::KeyUp(constNativeWindowKeyInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::SysKeyDown(constNativeWindowKeyInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::SysKeyUp(constNativeWindowKeyInfo& info);
	{
		throw 0;
	}
	
	void INativeWindowListener::Char(constNativeWindowCharInfo& info);
	{
		throw 0;
	}
	
	rptr<INativeWindowListener> INativeWindowListener::operator=(rptr<INativeWindowListener> value);
	{
		throw 0;
	}
	

/***********************************************************************
INativeWindowService
***********************************************************************/

	rptr<INativeWindow> INativeWindowService::CreateNativeWindow();
	{
		throw 0;
	}
	
	void INativeWindowService::DestroyNativeWindow(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindowService::GetWindow(Point location);
	{
		throw 0;
	}
	
	void INativeWindowService::Run(rptr<INativeWindow> window);
	{
		throw 0;
	}
	
	rptr<INativeWindowService> INativeWindowService::operator=(rptr<INativeWindowService> value);
	{
		throw 0;
	}
	
	rptr<INativeWindow> INativeWindowService::GetMainWindow();
	{
		throw 0;
	}
	

/***********************************************************************
INodeItemPrimaryTextView
***********************************************************************/

	vl::ObjectString<wchar_t> INodeItemPrimaryTextView::GetPrimaryTextViewText(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	rptr<INodeItemPrimaryTextView> INodeItemPrimaryTextView::operator=(rptr<INodeItemPrimaryTextView> value);
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() INodeItemPrimaryTextView::get_Identifier();
	{
		throw 0;
	}
	void INodeItemPrimaryTextView::set_Identifier(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	

/***********************************************************************
INodeItemStyleController
***********************************************************************/

	rptr<INodeItemStyleController> INodeItemStyleController::operator=(rptr<INodeItemStyleController> value);
	{
		throw 0;
	}
	
	rptr<INodeItemStyleProvider> INodeItemStyleController::GetNodeStyleProvider();
	{
		throw 0;
	}
	

/***********************************************************************
INodeItemStyleProvider
***********************************************************************/

	void INodeItemStyleProvider::BindItemStyleProvider(rptr<GuiListControl :: IItemStyleProvider> styleProvider);
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::DetachListControl();
	{
		throw 0;
	}
	
	signed __int32 INodeItemStyleProvider::GetItemStyleId(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	rptr<INodeItemStyleController> INodeItemStyleProvider::CreateItemStyle(signed __int32 styleId);
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::DestroyItemStyle(rptr<INodeItemStyleController> style);
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::Install(rptr<INodeItemStyleController> style, rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	void INodeItemStyleProvider::SetStyleSelected(rptr<INodeItemStyleController> style, bool value);
	{
		throw 0;
	}
	
	rptr<INodeItemStyleProvider> INodeItemStyleProvider::operator=(rptr<INodeItemStyleProvider> value);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> INodeItemStyleProvider::GetBindedItemStyleProvider();
	{
		throw 0;
	}
	

/***********************************************************************
INodeItemView
***********************************************************************/

	rptr<INodeProvider> INodeItemView::RequestNode(signed __int32 index);
	{
		throw 0;
	}
	
	void INodeItemView::ReleaseNode(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	signed __int32 INodeItemView::CalculateNodeVisibilityIndex(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	rptr<INodeItemView> INodeItemView::operator=(rptr<INodeItemView> value);
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() INodeItemView::get_Identifier();
	{
		throw 0;
	}
	void INodeItemView::set_Identifier(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	

/***********************************************************************
INodeProvider
***********************************************************************/

	signed __int32 INodeProvider::CalculateTotalVisibleNodes();
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeProvider::RequestChild(signed __int32 index);
	{
		throw 0;
	}
	
	void INodeProvider::ReleaseChild(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeProvider::operator=(rptr<INodeProvider> value);
	{
		throw 0;
	}
	
	bool INodeProvider::GetExpanding();
	{
		throw 0;
	}
	void INodeProvider::SetExpanding(bool value);
	{
		throw 0;
	}
	
	signed __int32 INodeProvider::GetChildCount();
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeProvider::GetParent();
	{
		throw 0;
	}
	
	bool INodeProvider::GetExpanding();
	{
		throw 0;
	}
	void INodeProvider::SetExpanding(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
INodeProviderCallback
***********************************************************************/

	void INodeProviderCallback::OnAttached(rptr<INodeRootProvider> provider);
	{
		throw 0;
	}
	
	void INodeProviderCallback::OnBeforeItemModified(rptr<INodeProvider> parentNode, signed __int32 start, signed __int32 count, signed __int32 newCount);
	{
		throw 0;
	}
	
	void INodeProviderCallback::OnAfterItemModified(rptr<INodeProvider> parentNode, signed __int32 start, signed __int32 count, signed __int32 newCount);
	{
		throw 0;
	}
	
	void INodeProviderCallback::OnItemExpanded(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	void INodeProviderCallback::OnItemCollapsed(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	rptr<INodeProviderCallback> INodeProviderCallback::operator=(rptr<INodeProviderCallback> value);
	{
		throw 0;
	}
	

/***********************************************************************
INodeRootProvider
***********************************************************************/

	bool INodeRootProvider::CanGetNodeByVisibleIndex();
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeRootProvider::GetNodeByVisibleIndex(signed __int32 index);
	{
		throw 0;
	}
	
	bool INodeRootProvider::AttachCallback(rptr<INodeProviderCallback> value);
	{
		throw 0;
	}
	
	bool INodeRootProvider::DetachCallback(rptr<INodeProviderCallback> value);
	{
		throw 0;
	}
	
	rptr<IDescriptable> INodeRootProvider::RequestView(const GacString& identifier);
	{
		throw 0;
	}
	
	void INodeRootProvider::ReleaseView(rptr<IDescriptable> view);
	{
		throw 0;
	}
	
	rptr<INodeRootProvider> INodeRootProvider::operator=(rptr<INodeRootProvider> value);
	{
		throw 0;
	}
	
	rptr<INodeProvider> INodeRootProvider::GetRootNode();
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_ColorEntry
***********************************************************************/

	bool IReadonlyList_of_ColorEntry::Contains(constColorEntry& item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_ColorEntry::Count();
	{
		throw 0;
	}
	
	constColorEntry& IReadonlyList_of_ColorEntry::Get(signed __int32 index);
	{
		throw 0;
	}
	
	constColorEntry& IReadonlyList_of_ColorEntry::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_ColorEntry::IndexOf(constColorEntry& item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_ColorEntry> IReadonlyList_of_ColorEntry::operator=(rptr<IReadonlyList_of_ColorEntry> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiGraphicsComposition_raw_pointer
***********************************************************************/

	bool IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Contains(rptr<GuiGraphicsComposition> item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Count();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> IReadonlyList_of_GuiGraphicsComposition_raw_pointer::Get(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> IReadonlyList_of_GuiGraphicsComposition_raw_pointer::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiGraphicsComposition_raw_pointer::IndexOf(rptr<GuiGraphicsComposition> item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> IReadonlyList_of_GuiGraphicsComposition_raw_pointer::operator=(rptr<IReadonlyList_of_GuiGraphicsComposition_raw_pointer> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer
***********************************************************************/

	bool IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Contains(rptr<GuiListControl :: IItemStyleController> item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Count();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::Get(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::IndexOf(rptr<GuiListControl :: IItemStyleController> item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer::operator=(rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiStackItemComposition_raw_pointer
***********************************************************************/

	bool IReadonlyList_of_GuiStackItemComposition_raw_pointer::Contains(rptr<GuiStackItemComposition> item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiStackItemComposition_raw_pointer::Count();
	{
		throw 0;
	}
	
	rptr<GuiStackItemComposition> IReadonlyList_of_GuiStackItemComposition_raw_pointer::Get(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<GuiStackItemComposition> IReadonlyList_of_GuiStackItemComposition_raw_pointer::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiStackItemComposition_raw_pointer::IndexOf(rptr<GuiStackItemComposition> item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> IReadonlyList_of_GuiStackItemComposition_raw_pointer::operator=(rptr<IReadonlyList_of_GuiStackItemComposition_raw_pointer> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiTabPage_raw_pointer
***********************************************************************/

	bool IReadonlyList_of_GuiTabPage_raw_pointer::Contains(rptr<GuiTabPage> item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiTabPage_raw_pointer::Count();
	{
		throw 0;
	}
	
	rptr<GuiTabPage> IReadonlyList_of_GuiTabPage_raw_pointer::Get(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<GuiTabPage> IReadonlyList_of_GuiTabPage_raw_pointer::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiTabPage_raw_pointer::IndexOf(rptr<GuiTabPage> item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiTabPage_raw_pointer> IReadonlyList_of_GuiTabPage_raw_pointer::operator=(rptr<IReadonlyList_of_GuiTabPage_raw_pointer> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_GuiWindow_raw_pointer
***********************************************************************/

	bool IReadonlyList_of_GuiWindow_raw_pointer::Contains(rptr<GuiWindow> item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiWindow_raw_pointer::Count();
	{
		throw 0;
	}
	
	rptr<GuiWindow> IReadonlyList_of_GuiWindow_raw_pointer::Get(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<GuiWindow> IReadonlyList_of_GuiWindow_raw_pointer::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_GuiWindow_raw_pointer::IndexOf(rptr<GuiWindow> item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiWindow_raw_pointer> IReadonlyList_of_GuiWindow_raw_pointer::operator=(rptr<IReadonlyList_of_GuiWindow_raw_pointer> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_int
***********************************************************************/

	bool IReadonlyList_of_int::Contains(signed __int32 item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_int::Count();
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_int::Get(signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_int::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_int::IndexOf(signed __int32 item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_int> IReadonlyList_of_int::operator=(rptr<IReadonlyList_of_int> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_ListViewItem
***********************************************************************/

	bool IReadonlyList_of_ListViewItem::Contains(rptr<ListViewItem> item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_ListViewItem::Count();
	{
		throw 0;
	}
	
	sptr<ListViewItem> IReadonlyList_of_ListViewItem::Get(signed __int32 index);
	{
		throw 0;
	}
	
	sptr<ListViewItem> IReadonlyList_of_ListViewItem::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_ListViewItem::IndexOf(rptr<ListViewItem> item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_ListViewItem> IReadonlyList_of_ListViewItem::operator=(rptr<IReadonlyList_of_ListViewItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_MemoryNodeProvider
***********************************************************************/

	bool IReadonlyList_of_MemoryNodeProvider::Contains(rptr<MemoryNodeProvider> item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_MemoryNodeProvider::Count();
	{
		throw 0;
	}
	
	sptr<MemoryNodeProvider> IReadonlyList_of_MemoryNodeProvider::Get(signed __int32 index);
	{
		throw 0;
	}
	
	sptr<MemoryNodeProvider> IReadonlyList_of_MemoryNodeProvider::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_MemoryNodeProvider::IndexOf(rptr<MemoryNodeProvider> item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_MemoryNodeProvider> IReadonlyList_of_MemoryNodeProvider::operator=(rptr<IReadonlyList_of_MemoryNodeProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
IReadonlyList_of_TextItem
***********************************************************************/

	bool IReadonlyList_of_TextItem::Contains(constTextItem& item);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_TextItem::Count();
	{
		throw 0;
	}
	
	constTextItem& IReadonlyList_of_TextItem::Get(signed __int32 index);
	{
		throw 0;
	}
	
	constTextItem& IReadonlyList_of_TextItem::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 IReadonlyList_of_TextItem::IndexOf(constTextItem& item);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_TextItem> IReadonlyList_of_TextItem::operator=(rptr<IReadonlyList_of_TextItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
ItemProviderBase
***********************************************************************/

	rptr<ItemProviderBase> ItemProviderBase::Create();
	{
		throw 0;
	}
	
	bool ItemProviderBase::AttachCallback(rptr<GuiListControl :: IItemProviderCallback> value);
	{
		throw 0;
	}
	
	bool ItemProviderBase::DetachCallback(rptr<GuiListControl :: IItemProviderCallback> value);
	{
		throw 0;
	}
	
	rptr<ItemProviderBase> ItemProviderBase::operator=(rptr<ItemProviderBase> value);
	{
		throw 0;
	}
	

/***********************************************************************
ItemStyleControllerBase
***********************************************************************/

	rptr<GuiListControl :: IItemStyleProvider> ItemStyleControllerBase::GetStyleProvider();
	{
		throw 0;
	}
	
	signed __int32 ItemStyleControllerBase::GetItemStyleId();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> ItemStyleControllerBase::GetBoundsComposition();
	{
		throw 0;
	}
	
	bool ItemStyleControllerBase::IsCacheable();
	{
		throw 0;
	}
	
	bool ItemStyleControllerBase::IsInstalled();
	{
		throw 0;
	}
	
	void ItemStyleControllerBase::OnInstalled();
	{
		throw 0;
	}
	
	void ItemStyleControllerBase::OnUninstalled();
	{
		throw 0;
	}
	
	rptr<ItemStyleControllerBase> ItemStyleControllerBase::operator=(rptr<ItemStyleControllerBase> value);
	{
		throw 0;
	}
	

/***********************************************************************
ITreeViewItemView
***********************************************************************/

	sptr<GuiImageData> ITreeViewItemView::GetNodeImage(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> ITreeViewItemView::GetNodeText(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	rptr<ITreeViewItemView> ITreeViewItemView::operator=(rptr<ITreeViewItemView> value);
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() ITreeViewItemView::get_Identifier();
	{
		throw 0;
	}
	void ITreeViewItemView::set_Identifier(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	

/***********************************************************************
List_of_ObjectString_of_wchar_t
***********************************************************************/

	rptr<List_of_ObjectString_of_wchar_t> List_of_ObjectString_of_wchar_t::Create();
	{
		throw 0;
	}
	
	bool List_of_ObjectString_of_wchar_t::Contains(const GacString& item);
	{
		throw 0;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::IndexOf(const GacString& item);
	{
		throw 0;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::Add(const GacString& item);
	{
		throw 0;
	}
	
	signed __int32 List_of_ObjectString_of_wchar_t::Insert(signed __int32 index, const GacString& item);
	{
		throw 0;
	}
	
	bool List_of_ObjectString_of_wchar_t::Remove(const GacString& item);
	{
		throw 0;
	}
	
	bool List_of_ObjectString_of_wchar_t::Set(signed __int32 index, const GacString& item);
	{
		throw 0;
	}
	
	GacString& List_of_ObjectString_of_wchar_t::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	rptr<List_of_ObjectString_of_wchar_t> List_of_ObjectString_of_wchar_t::operator=(rptr<List_of_ObjectString_of_wchar_t> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListProvider_of_ListViewItem
***********************************************************************/

	rptr<ListProvider_of_ListViewItem> ListProvider_of_ListViewItem::Create();
	{
		throw 0;
	}
	
	rptr<ListProvider_of_ListViewItem> ListProvider_of_ListViewItem::operator=(rptr<ListProvider_of_ListViewItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListProvider_of_TextItem
***********************************************************************/

	rptr<ListProvider_of_TextItem> ListProvider_of_TextItem::Create();
	{
		throw 0;
	}
	
	rptr<ListProvider_of_TextItem> ListProvider_of_TextItem::operator=(rptr<ListProvider_of_TextItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewBigIconContentProvider
***********************************************************************/

	rptr<ListViewBigIconContentProvider> ListViewBigIconContentProvider::Create(Size _iconSize);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewBigIconContentProvider::CreatePreferredCoordinateTransformer();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewBigIconContentProvider::CreatePreferredArranger();
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewBigIconContentProvider::CreateItemContent(constFontProperties& font);
	{
		throw 0;
	}
	
	void ListViewBigIconContentProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewBigIconContentProvider::DetachListControl();
	{
		throw 0;
	}
	
	rptr<ListViewBigIconContentProvider> ListViewBigIconContentProvider::operator=(rptr<ListViewBigIconContentProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewColumn
***********************************************************************/

	rptr<ListViewColumn> ListViewColumn::Create(const GacString& _text, signed __int32 _size);
	{
		throw 0;
	}
	L::i::s::t::V::i::e::w::C::o::l::u::m::n::ListViewColumn(const GacString& _text, signed __int32 _size);
	{
		throw 0;
	}
	
	ListViewColumn& ListViewColumn::operator=(constListViewColumn& value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> ListViewColumn::get_text();
	{
		throw 0;
	}
	void ListViewColumn::set_text(vl::ObjectString<wchar_t> value);
	{
		throw 0;
	}
	
	signed __int32 ListViewColumn::get_size();
	{
		throw 0;
	}
	void ListViewColumn::set_size(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewColumnItemArranger
***********************************************************************/

	rptr<ListViewColumnItemArranger> ListViewColumnItemArranger::Create();
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::DetachListControl();
	{
		throw 0;
	}
	
	rptr<ListViewColumnItemArranger> ListViewColumnItemArranger::operator=(rptr<ListViewColumnItemArranger> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewColumnItemArranger :: IColumnItemView
***********************************************************************/

	bool ListViewColumnItemArranger::IColumnItemView::AttachCallback(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value);
	{
		throw 0;
	}
	
	bool ListViewColumnItemArranger::IColumnItemView::DetachCallback(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> ListViewColumnItemArranger::IColumnItemView::GetColumnText(signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 ListViewColumnItemArranger::IColumnItemView::GetColumnSize(signed __int32 index);
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::IColumnItemView::SetColumnSize(signed __int32 index, signed __int32 value);
	{
		throw 0;
	}
	
	rptr<ListViewColumnItemArranger :: IColumnItemView> ListViewColumnItemArranger::IColumnItemView::operator=(rptr<ListViewColumnItemArranger :: IColumnItemView> value);
	{
		throw 0;
	}
	
	signed __int32 ListViewColumnItemArranger::IColumnItemView::GetColumnCount();
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() ListViewColumnItemArranger::IColumnItemView::get_Identifier();
	{
		throw 0;
	}
	void ListViewColumnItemArranger::IColumnItemView::set_Identifier(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewColumnItemArranger :: IColumnItemViewCallback
***********************************************************************/

	void ListViewColumnItemArranger::IColumnItemViewCallback::OnColumnChanged();
	{
		throw 0;
	}
	
	void ListViewColumnItemArranger::IColumnItemViewCallback::OnColumnSizeChanged(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> ListViewColumnItemArranger::IColumnItemViewCallback::operator=(rptr<ListViewColumnItemArranger :: IColumnItemViewCallback> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewDetailContentProvider
***********************************************************************/

	rptr<ListViewDetailContentProvider> ListViewDetailContentProvider::Create(Size _iconSize);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewDetailContentProvider::CreatePreferredCoordinateTransformer();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewDetailContentProvider::CreatePreferredArranger();
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewDetailContentProvider::CreateItemContent(constFontProperties& font);
	{
		throw 0;
	}
	
	void ListViewDetailContentProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewDetailContentProvider::DetachListControl();
	{
		throw 0;
	}
	
	rptr<ListViewDetailContentProvider> ListViewDetailContentProvider::operator=(rptr<ListViewDetailContentProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewInformationContentProvider
***********************************************************************/

	rptr<ListViewInformationContentProvider> ListViewInformationContentProvider::Create(Size _iconSize);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewInformationContentProvider::CreatePreferredCoordinateTransformer();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewInformationContentProvider::CreatePreferredArranger();
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewInformationContentProvider::CreateItemContent(constFontProperties& font);
	{
		throw 0;
	}
	
	void ListViewInformationContentProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewInformationContentProvider::DetachListControl();
	{
		throw 0;
	}
	
	rptr<ListViewInformationContentProvider> ListViewInformationContentProvider::operator=(rptr<ListViewInformationContentProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItem
***********************************************************************/

	ListViewItem& ListViewItem::operator=(constListViewItem& value);
	{
		throw 0;
	}
	
	sptr<GuiImageData> ListViewItem::get_smallImage();
	{
		throw 0;
	}
	void ListViewItem::set_smallImage(sptr<GuiImageData> value);
	{
		throw 0;
	}
	
	sptr<GuiImageData> ListViewItem::get_largeImage();
	{
		throw 0;
	}
	void ListViewItem::set_largeImage(sptr<GuiImageData> value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> ListViewItem::get_text();
	{
		throw 0;
	}
	void ListViewItem::set_text(vl::ObjectString<wchar_t> value);
	{
		throw 0;
	}
	
	List_of_ObjectString_of_wchar_t ListViewItem::get_subItems();
	{
		throw 0;
	}
	void ListViewItem::set_subItems(List_of_ObjectString_of_wchar_t value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemProvider
***********************************************************************/

	rptr<ListViewItemProvider> ListViewItemProvider::Create();
	{
		throw 0;
	}
	
	rptr<IDescriptable> ListViewItemProvider::RequestView(const GacString& identifier);
	{
		throw 0;
	}
	
	void ListViewItemProvider::ReleaseView(rptr<IDescriptable> view);
	{
		throw 0;
	}
	
	void ListViewItemProvider::NotifyDataColumnsUpdated();
	{
		throw 0;
	}
	
	void ListViewItemProvider::NotifyColumnsUpdated();
	{
		throw 0;
	}
	
	rptr<ListViewItemProvider> ListViewItemProvider::operator=(rptr<ListViewItemProvider> value);
	{
		throw 0;
	}
	
	rptr<IList_of_int> ListViewItemProvider::GetDataColumns();
	{
		throw 0;
	}
	
	rptr<IList_of_ListViewColumn> ListViewItemProvider::GetColumns();
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider
***********************************************************************/

	rptr<ListViewItemStyleProvider> ListViewItemStyleProvider::Create(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> itemContentProvider);
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::DetachListControl();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> ListViewItemStyleProvider::CreateItemStyle(signed __int32 styleId);
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style);
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex);
	{
		throw 0;
	}
	
	bool ListViewItemStyleProvider::IsItemStyleAttachedToListView(rptr<GuiListControl :: IItemStyleController> itemStyle);
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider> ListViewItemStyleProvider::operator=(rptr<ListViewItemStyleProvider> value);
	{
		throw 0;
	}
	
	rptr<IReadonlyList_of_GuiListControl_IItemStyleController_raw_pointer> ListViewItemStyleProvider::GetCreatedItemStyles();
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemContent
***********************************************************************/

	void ListViewItemStyleProvider::IListViewItemContent::Install(rptr<GuiListViewBase :: IStyleProvider> styleProvider, rptr<ListViewItemStyleProvider :: IListViewItemView> view, signed __int32 itemIndex);
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewItemStyleProvider::IListViewItemContent::operator=(rptr<ListViewItemStyleProvider :: IListViewItemContent> value);
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> ListViewItemStyleProvider::IListViewItemContent::GetContentComposition();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> ListViewItemStyleProvider::IListViewItemContent::GetBackgroundDecorator();
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemContentProvider
***********************************************************************/

	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewItemStyleProvider::IListViewItemContentProvider::CreatePreferredCoordinateTransformer();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewItemStyleProvider::IListViewItemContentProvider::CreatePreferredArranger();
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewItemStyleProvider::IListViewItemContentProvider::CreateItemContent(constFontProperties& font);
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::IListViewItemContentProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::IListViewItemContentProvider::DetachListControl();
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> ListViewItemStyleProvider::IListViewItemContentProvider::operator=(rptr<ListViewItemStyleProvider :: IListViewItemContentProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: IListViewItemView
***********************************************************************/

	sptr<GuiImageData> ListViewItemStyleProvider::IListViewItemView::GetSmallImage(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	sptr<GuiImageData> ListViewItemStyleProvider::IListViewItemView::GetLargeImage(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> ListViewItemStyleProvider::IListViewItemView::GetText(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> ListViewItemStyleProvider::IListViewItemView::GetSubItem(signed __int32 itemIndex, signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetDataColumn(signed __int32 index);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> ListViewItemStyleProvider::IListViewItemView::GetColumnText(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemView> ListViewItemStyleProvider::IListViewItemView::operator=(rptr<ListViewItemStyleProvider :: IListViewItemView> value);
	{
		throw 0;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetDataColumnCount();
	{
		throw 0;
	}
	
	signed __int32 ListViewItemStyleProvider::IListViewItemView::GetColumnCount();
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() ListViewItemStyleProvider::IListViewItemView::get_Identifier();
	{
		throw 0;
	}
	void ListViewItemStyleProvider::IListViewItemView::set_Identifier(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProvider :: ListViewContentItemStyleController
***********************************************************************/

	rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> ListViewItemStyleProvider::ListViewContentItemStyleController::Create(rptr<ListViewItemStyleProvider> provider);
	{
		throw 0;
	}
	
	void ListViewItemStyleProvider::ListViewContentItemStyleController::Install(rptr<ListViewItemStyleProvider :: IListViewItemView> view, signed __int32 itemIndex);
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> ListViewItemStyleProvider::ListViewContentItemStyleController::operator=(rptr<ListViewItemStyleProvider :: ListViewContentItemStyleController> value);
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewItemStyleProvider::ListViewContentItemStyleController::GetItemContent();
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProviderBase
***********************************************************************/

	rptr<ListViewItemStyleProviderBase> ListViewItemStyleProviderBase::Create();
	{
		throw 0;
	}
	
	void ListViewItemStyleProviderBase::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewItemStyleProviderBase::DetachListControl();
	{
		throw 0;
	}
	
	signed __int32 ListViewItemStyleProviderBase::GetItemStyleId(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	void ListViewItemStyleProviderBase::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value);
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProviderBase> ListViewItemStyleProviderBase::operator=(rptr<ListViewItemStyleProviderBase> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewItemStyleProviderBase :: ListViewItemStyleController
***********************************************************************/

	rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> ListViewItemStyleProviderBase::ListViewItemStyleController::Create(rptr<ListViewItemStyleProviderBase> provider);
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> ListViewItemStyleProviderBase::ListViewItemStyleController::operator=(rptr<ListViewItemStyleProviderBase :: ListViewItemStyleController> value);
	{
		throw 0;
	}
	
	bool ListViewItemStyleProviderBase::ListViewItemStyleController::GetSelected();
	{
		throw 0;
	}
	void ListViewItemStyleProviderBase::ListViewItemStyleController::SetSelected(bool value);
	{
		throw 0;
	}
	
	bool ListViewItemStyleProviderBase::ListViewItemStyleController::GetSelected();
	{
		throw 0;
	}
	void ListViewItemStyleProviderBase::ListViewItemStyleController::SetSelected(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewListContentProvider
***********************************************************************/

	rptr<ListViewListContentProvider> ListViewListContentProvider::Create(Size _iconSize);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewListContentProvider::CreatePreferredCoordinateTransformer();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewListContentProvider::CreatePreferredArranger();
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewListContentProvider::CreateItemContent(constFontProperties& font);
	{
		throw 0;
	}
	
	void ListViewListContentProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewListContentProvider::DetachListControl();
	{
		throw 0;
	}
	
	rptr<ListViewListContentProvider> ListViewListContentProvider::operator=(rptr<ListViewListContentProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewSmallIconContentProvider
***********************************************************************/

	rptr<ListViewSmallIconContentProvider> ListViewSmallIconContentProvider::Create(Size _iconSize);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewSmallIconContentProvider::CreatePreferredCoordinateTransformer();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewSmallIconContentProvider::CreatePreferredArranger();
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewSmallIconContentProvider::CreateItemContent(constFontProperties& font);
	{
		throw 0;
	}
	
	void ListViewSmallIconContentProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewSmallIconContentProvider::DetachListControl();
	{
		throw 0;
	}
	
	rptr<ListViewSmallIconContentProvider> ListViewSmallIconContentProvider::operator=(rptr<ListViewSmallIconContentProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListViewTileContentProvider
***********************************************************************/

	rptr<ListViewTileContentProvider> ListViewTileContentProvider::Create(Size _iconSize);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemCoordinateTransformer> ListViewTileContentProvider::CreatePreferredCoordinateTransformer();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArranger> ListViewTileContentProvider::CreatePreferredArranger();
	{
		throw 0;
	}
	
	rptr<ListViewItemStyleProvider :: IListViewItemContent> ListViewTileContentProvider::CreateItemContent(constFontProperties& font);
	{
		throw 0;
	}
	
	void ListViewTileContentProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void ListViewTileContentProvider::DetachListControl();
	{
		throw 0;
	}
	
	rptr<ListViewTileContentProvider> ListViewTileContentProvider::operator=(rptr<ListViewTileContentProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListWrapperProvider_of_ListViewItem
***********************************************************************/

	bool ListWrapperProvider_of_ListViewItem::NotifyUpdate(signed __int32 start, signed __int32 count);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::Contains(rptr<ListViewItem> item);
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::Count();
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::Count();
	{
		throw 0;
	}
	
	sptr<ListViewItem> ListWrapperProvider_of_ListViewItem::Get(signed __int32 index);
	{
		throw 0;
	}
	
	sptr<ListViewItem> ListWrapperProvider_of_ListViewItem::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::IndexOf(rptr<ListViewItem> item);
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::Add(sptr<ListViewItem> item);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::Remove(rptr<ListViewItem> item);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::RemoveAt(signed __int32 index);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::RemoveRange(signed __int32 index, signed __int32 count);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::Clear();
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_ListViewItem::Insert(signed __int32 index, sptr<ListViewItem> item);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_ListViewItem::Set(signed __int32 index, sptr<ListViewItem> item);
	{
		throw 0;
	}
	
	rptr<ListWrapperProvider_of_ListViewItem> ListWrapperProvider_of_ListViewItem::operator=(rptr<ListWrapperProvider_of_ListViewItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
ListWrapperProvider_of_TextItem
***********************************************************************/

	bool ListWrapperProvider_of_TextItem::NotifyUpdate(signed __int32 start, signed __int32 count);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::Contains(constTextItem& item);
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::Count();
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::Count();
	{
		throw 0;
	}
	
	constTextItem& ListWrapperProvider_of_TextItem::Get(signed __int32 index);
	{
		throw 0;
	}
	
	constTextItem& ListWrapperProvider_of_TextItem::operator[](signed __int32 index);
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::IndexOf(constTextItem& item);
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::Add(constTextItem& item);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::Remove(constTextItem& item);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::RemoveAt(signed __int32 index);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::RemoveRange(signed __int32 index, signed __int32 count);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::Clear();
	{
		throw 0;
	}
	
	signed __int32 ListWrapperProvider_of_TextItem::Insert(signed __int32 index, constTextItem& item);
	{
		throw 0;
	}
	
	bool ListWrapperProvider_of_TextItem::Set(signed __int32 index, constTextItem& item);
	{
		throw 0;
	}
	
	rptr<ListWrapperProvider_of_TextItem> ListWrapperProvider_of_TextItem::operator=(rptr<ListWrapperProvider_of_TextItem> value);
	{
		throw 0;
	}
	

/***********************************************************************
Margin
***********************************************************************/

	rptr<Margin> Margin::Create(signed __int32 _left, signed __int32 _top, signed __int32 _right, signed __int32 _bottom);
	{
		throw 0;
	}
	M::a::r::g::i::n::Margin(signed __int32 _left, signed __int32 _top, signed __int32 _right, signed __int32 _bottom);
	{
		throw 0;
	}
	
	rptr<Margin> Margin::Create();
	{
		throw 0;
	}
	M::a::r::g::i::n::Margin();
	{
		throw 0;
	}
	
	bool Margin::operator==(Margin margin);
	{
		throw 0;
	}
	
	bool Margin::operator!=(Margin margin);
	{
		throw 0;
	}
	
	signed __int32 Margin::get_left();
	{
		throw 0;
	}
	void Margin::set_left(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Margin::get_top();
	{
		throw 0;
	}
	void Margin::set_top(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Margin::get_right();
	{
		throw 0;
	}
	void Margin::set_right(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Margin::get_bottom();
	{
		throw 0;
	}
	void Margin::set_bottom(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
MemoryNodeProvider
***********************************************************************/

	rptr<MemoryNodeProvider> MemoryNodeProvider::Create(sptr<DescriptableObject> _data);
	{
		throw 0;
	}
	
	rptr<MemoryNodeProvider> MemoryNodeProvider::Create();
	{
		throw 0;
	}
	
	void MemoryNodeProvider::NotifyDataModified();
	{
		throw 0;
	}
	
	rptr<IList_of_MemoryNodeProvider> MemoryNodeProvider::Children();
	{
		throw 0;
	}
	
	bool MemoryNodeProvider::GetExpanding();
	{
		throw 0;
	}
	
	void MemoryNodeProvider::SetExpanding(bool value);
	{
		throw 0;
	}
	
	signed __int32 MemoryNodeProvider::CalculateTotalVisibleNodes();
	{
		throw 0;
	}
	
	signed __int32 MemoryNodeProvider::GetChildCount();
	{
		throw 0;
	}
	
	rptr<INodeProvider> MemoryNodeProvider::GetParent();
	{
		throw 0;
	}
	
	rptr<INodeProvider> MemoryNodeProvider::RequestChild(signed __int32 index);
	{
		throw 0;
	}
	
	void MemoryNodeProvider::ReleaseChild(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	rptr<MemoryNodeProvider> MemoryNodeProvider::operator=(rptr<MemoryNodeProvider> value);
	{
		throw 0;
	}
	
	sptr<DescriptableObject> MemoryNodeProvider::GetData();
	{
		throw 0;
	}
	void MemoryNodeProvider::SetData(sptr<DescriptableObject> value);
	{
		throw 0;
	}
	
	sptr<DescriptableObject> MemoryNodeProvider::GetData();
	{
		throw 0;
	}
	void MemoryNodeProvider::SetData(sptr<DescriptableObject> value);
	{
		throw 0;
	}
	

/***********************************************************************
MemoryNodeRootProvider
***********************************************************************/

	rptr<MemoryNodeRootProvider> MemoryNodeRootProvider::Create();
	{
		throw 0;
	}
	
	rptr<INodeProvider> MemoryNodeRootProvider::GetRootNode();
	{
		throw 0;
	}
	
	rptr<MemoryNodeRootProvider> MemoryNodeRootProvider::operator=(rptr<MemoryNodeRootProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
NativeWindowCharInfo
***********************************************************************/

	wchar_t NativeWindowCharInfo::get_code();
	{
		throw 0;
	}
	void NativeWindowCharInfo::set_code(wchar_t value);
	{
		throw 0;
	}
	
	bool NativeWindowCharInfo::get_ctrl();
	{
		throw 0;
	}
	void NativeWindowCharInfo::set_ctrl(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowCharInfo::get_shift();
	{
		throw 0;
	}
	void NativeWindowCharInfo::set_shift(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowCharInfo::get_alt();
	{
		throw 0;
	}
	void NativeWindowCharInfo::set_alt(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowCharInfo::get_capslock();
	{
		throw 0;
	}
	void NativeWindowCharInfo::set_capslock(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
NativeWindowKeyInfo
***********************************************************************/

	signed __int32 NativeWindowKeyInfo::get_code();
	{
		throw 0;
	}
	void NativeWindowKeyInfo::set_code(signed __int32 value);
	{
		throw 0;
	}
	
	bool NativeWindowKeyInfo::get_ctrl();
	{
		throw 0;
	}
	void NativeWindowKeyInfo::set_ctrl(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowKeyInfo::get_shift();
	{
		throw 0;
	}
	void NativeWindowKeyInfo::set_shift(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowKeyInfo::get_alt();
	{
		throw 0;
	}
	void NativeWindowKeyInfo::set_alt(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowKeyInfo::get_capslock();
	{
		throw 0;
	}
	void NativeWindowKeyInfo::set_capslock(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
NativeWindowMouseInfo
***********************************************************************/

	bool NativeWindowMouseInfo::get_ctrl();
	{
		throw 0;
	}
	void NativeWindowMouseInfo::set_ctrl(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowMouseInfo::get_shift();
	{
		throw 0;
	}
	void NativeWindowMouseInfo::set_shift(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowMouseInfo::get_left();
	{
		throw 0;
	}
	void NativeWindowMouseInfo::set_left(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowMouseInfo::get_middle();
	{
		throw 0;
	}
	void NativeWindowMouseInfo::set_middle(bool value);
	{
		throw 0;
	}
	
	bool NativeWindowMouseInfo::get_right();
	{
		throw 0;
	}
	void NativeWindowMouseInfo::set_right(bool value);
	{
		throw 0;
	}
	
	signed __int32 NativeWindowMouseInfo::get_x();
	{
		throw 0;
	}
	void NativeWindowMouseInfo::set_x(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 NativeWindowMouseInfo::get_y();
	{
		throw 0;
	}
	void NativeWindowMouseInfo::set_y(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 NativeWindowMouseInfo::get_wheel();
	{
		throw 0;
	}
	void NativeWindowMouseInfo::set_wheel(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
NodeItemProvider
***********************************************************************/

	rptr<NodeItemProvider> NodeItemProvider::Create(rptr<INodeRootProvider> _root);
	{
		throw 0;
	}
	
	signed __int32 NodeItemProvider::Count();
	{
		throw 0;
	}
	
	rptr<IDescriptable> NodeItemProvider::RequestView(const GacString& identifier);
	{
		throw 0;
	}
	
	void NodeItemProvider::ReleaseView(rptr<IDescriptable> view);
	{
		throw 0;
	}
	
	rptr<NodeItemProvider> NodeItemProvider::operator=(rptr<NodeItemProvider> value);
	{
		throw 0;
	}
	
	sptr<INodeRootProvider> NodeItemProvider::GetRoot();
	{
		throw 0;
	}
	

/***********************************************************************
NodeItemStyleProvider
***********************************************************************/

	rptr<NodeItemStyleProvider> NodeItemStyleProvider::Create(sptr<INodeItemStyleProvider> provider);
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::DetachListControl();
	{
		throw 0;
	}
	
	signed __int32 NodeItemStyleProvider::GetItemStyleId(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> NodeItemStyleProvider::CreateItemStyle(signed __int32 styleId);
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style);
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex);
	{
		throw 0;
	}
	
	void NodeItemStyleProvider::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value);
	{
		throw 0;
	}
	
	rptr<NodeItemStyleProvider> NodeItemStyleProvider::operator=(rptr<NodeItemStyleProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
NodeRootProviderBase
***********************************************************************/

	rptr<NodeRootProviderBase> NodeRootProviderBase::Create();
	{
		throw 0;
	}
	
	bool NodeRootProviderBase::CanGetNodeByVisibleIndex();
	{
		throw 0;
	}
	
	rptr<INodeProvider> NodeRootProviderBase::GetNodeByVisibleIndex(signed __int32 index);
	{
		throw 0;
	}
	
	bool NodeRootProviderBase::AttachCallback(rptr<INodeProviderCallback> value);
	{
		throw 0;
	}
	
	bool NodeRootProviderBase::DetachCallback(rptr<INodeProviderCallback> value);
	{
		throw 0;
	}
	
	rptr<IDescriptable> NodeRootProviderBase::RequestView(const GacString& identifier);
	{
		throw 0;
	}
	
	void NodeRootProviderBase::ReleaseView(rptr<IDescriptable> view);
	{
		throw 0;
	}
	
	rptr<NodeRootProviderBase> NodeRootProviderBase::operator=(rptr<NodeRootProviderBase> value);
	{
		throw 0;
	}
	

/***********************************************************************
Point
***********************************************************************/

	rptr<Point> Point::Create(signed __int32 _x, signed __int32 _y);
	{
		throw 0;
	}
	P::o::i::n::t::Point(signed __int32 _x, signed __int32 _y);
	{
		throw 0;
	}
	
	rptr<Point> Point::Create();
	{
		throw 0;
	}
	P::o::i::n::t::Point();
	{
		throw 0;
	}
	
	bool Point::operator==(Point point);
	{
		throw 0;
	}
	
	bool Point::operator!=(Point point);
	{
		throw 0;
	}
	
	signed __int32 Point::get_x();
	{
		throw 0;
	}
	void Point::set_x(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Point::get_y();
	{
		throw 0;
	}
	void Point::set_y(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
RangedItemArrangerBase
***********************************************************************/

	void RangedItemArrangerBase::OnAttached(rptr<GuiListControl :: IItemProvider> provider);
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::OnItemModified(signed __int32 start, signed __int32 count, signed __int32 newCount);
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::DetachListControl();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemArrangerCallback> RangedItemArrangerBase::GetCallback();
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::SetCallback(rptr<GuiListControl :: IItemArrangerCallback> value);
	{
		throw 0;
	}
	
	Size RangedItemArrangerBase::GetTotalSize();
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> RangedItemArrangerBase::GetVisibleStyle(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	signed __int32 RangedItemArrangerBase::GetVisibleIndex(rptr<GuiListControl :: IItemStyleController> style);
	{
		throw 0;
	}
	
	void RangedItemArrangerBase::OnViewChanged(Rect bounds);
	{
		throw 0;
	}
	
	rptr<RangedItemArrangerBase> RangedItemArrangerBase::operator=(rptr<RangedItemArrangerBase> value);
	{
		throw 0;
	}
	

/***********************************************************************
Rect
***********************************************************************/

	rptr<Rect> Rect::Create(Point p, Size s);
	{
		throw 0;
	}
	R::e::c::t::Rect(Point p, Size s);
	{
		throw 0;
	}
	
	rptr<Rect> Rect::Create(signed __int32 _x1, signed __int32 _y1, signed __int32 _x2, signed __int32 _y2);
	{
		throw 0;
	}
	R::e::c::t::Rect(signed __int32 _x1, signed __int32 _y1, signed __int32 _x2, signed __int32 _y2);
	{
		throw 0;
	}
	
	rptr<Rect> Rect::Create();
	{
		throw 0;
	}
	R::e::c::t::Rect();
	{
		throw 0;
	}
	
	bool Rect::operator==(Rect rect);
	{
		throw 0;
	}
	
	bool Rect::operator!=(Rect rect);
	{
		throw 0;
	}
	
	Point Rect::LeftTop();
	{
		throw 0;
	}
	
	Point Rect::RightBottom();
	{
		throw 0;
	}
	
	signed __int32 Rect::Left();
	{
		throw 0;
	}
	
	signed __int32 Rect::Right();
	{
		throw 0;
	}
	
	signed __int32 Rect::Width();
	{
		throw 0;
	}
	
	signed __int32 Rect::Top();
	{
		throw 0;
	}
	
	signed __int32 Rect::Bottom();
	{
		throw 0;
	}
	
	signed __int32 Rect::Height();
	{
		throw 0;
	}
	
	void Rect::Expand(Size s);
	{
		throw 0;
	}
	
	void Rect::Expand(signed __int32 x, signed __int32 y);
	{
		throw 0;
	}
	
	void Rect::Move(Size s);
	{
		throw 0;
	}
	
	void Rect::Move(signed __int32 x, signed __int32 y);
	{
		throw 0;
	}
	
	bool Rect::Contains(Point p);
	{
		throw 0;
	}
	
	Size Rect::GetSize();
	{
		throw 0;
	}
	
	signed __int32 Rect::get_x1();
	{
		throw 0;
	}
	void Rect::set_x1(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Rect::get_y1();
	{
		throw 0;
	}
	void Rect::set_y1(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Rect::get_x2();
	{
		throw 0;
	}
	void Rect::set_x2(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Rect::get_y2();
	{
		throw 0;
	}
	void Rect::set_y2(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
Size
***********************************************************************/

	rptr<Size> Size::Create(signed __int32 _x, signed __int32 _y);
	{
		throw 0;
	}
	S::i::z::e::Size(signed __int32 _x, signed __int32 _y);
	{
		throw 0;
	}
	
	rptr<Size> Size::Create();
	{
		throw 0;
	}
	S::i::z::e::Size();
	{
		throw 0;
	}
	
	bool Size::operator==(Size size);
	{
		throw 0;
	}
	
	bool Size::operator!=(Size size);
	{
		throw 0;
	}
	
	signed __int32 Size::get_x();
	{
		throw 0;
	}
	void Size::set_x(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 Size::get_y();
	{
		throw 0;
	}
	void Size::set_y(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
TextItem
***********************************************************************/

	rptr<TextItem> TextItem::Create(wchar_t->GetPointerType() _text, bool _checked);
	{
		throw 0;
	}
	T::e::x::t::I::t::e::m::TextItem(wchar_t->GetPointerType() _text, bool _checked);
	{
		throw 0;
	}
	
	rptr<TextItem> TextItem::Create(const GacString& _text, bool _checked);
	{
		throw 0;
	}
	T::e::x::t::I::t::e::m::TextItem(const GacString& _text, bool _checked);
	{
		throw 0;
	}
	
	rptr<TextItem> TextItem::Create(constTextItem& item);
	{
		throw 0;
	}
	T::e::x::t::I::t::e::m::TextItem(constTextItem& item);
	{
		throw 0;
	}
	
	rptr<TextItem> TextItem::Create();
	{
		throw 0;
	}
	T::e::x::t::I::t::e::m::TextItem();
	{
		throw 0;
	}
	
	bool TextItem::operator==(constTextItem& value);
	{
		throw 0;
	}
	
	bool TextItem::operator!=(constTextItem& value);
	{
		throw 0;
	}
	
	TextItem& TextItem::operator=(constTextItem& __that);
	{
		throw 0;
	}
	
	const GacString& TextItem::GetText();
	{
		throw 0;
	}
	
	bool TextItem::GetChecked();
	{
		throw 0;
	}
	

/***********************************************************************
TextItemProvider
***********************************************************************/

	rptr<TextItemProvider> TextItemProvider::Create();
	{
		throw 0;
	}
	
	void TextItemProvider::SetText(signed __int32 itemIndex, const GacString& value);
	{
		throw 0;
	}
	
	void TextItemProvider::SetChecked(signed __int32 itemIndex, bool value);
	{
		throw 0;
	}
	
	rptr<IDescriptable> TextItemProvider::RequestView(const GacString& identifier);
	{
		throw 0;
	}
	
	void TextItemProvider::ReleaseView(rptr<IDescriptable> view);
	{
		throw 0;
	}
	
	rptr<TextItemProvider> TextItemProvider::operator=(rptr<TextItemProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
TextItemStyleProvider
***********************************************************************/

	rptr<TextItemStyleProvider> TextItemStyleProvider::Create(rptr<TextItemStyleProvider :: ITextItemStyleProvider> _textItemStyleProvider);
	{
		throw 0;
	}
	
	void TextItemStyleProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void TextItemStyleProvider::DetachListControl();
	{
		throw 0;
	}
	
	signed __int32 TextItemStyleProvider::GetItemStyleId(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleController> TextItemStyleProvider::CreateItemStyle(signed __int32 styleId);
	{
		throw 0;
	}
	
	void TextItemStyleProvider::DestroyItemStyle(rptr<GuiListControl :: IItemStyleController> style);
	{
		throw 0;
	}
	
	void TextItemStyleProvider::Install(rptr<GuiListControl :: IItemStyleController> style, signed __int32 itemIndex);
	{
		throw 0;
	}
	
	void TextItemStyleProvider::SetStyleSelected(rptr<GuiListControl :: IItemStyleController> style, bool value);
	{
		throw 0;
	}
	
	rptr<TextItemStyleProvider> TextItemStyleProvider::operator=(rptr<TextItemStyleProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
TextItemStyleProvider :: ITextItemStyleProvider
***********************************************************************/

	rptr<GuiSelectableButton :: IStyleController> TextItemStyleProvider::ITextItemStyleProvider::CreateBackgroundStyleController();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> TextItemStyleProvider::ITextItemStyleProvider::CreateBulletStyleController();
	{
		throw 0;
	}
	
	rptr<TextItemStyleProvider :: ITextItemStyleProvider> TextItemStyleProvider::ITextItemStyleProvider::operator=(rptr<TextItemStyleProvider :: ITextItemStyleProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
TextItemStyleProvider :: ITextItemView
***********************************************************************/

	vl::ObjectString<wchar_t> TextItemStyleProvider::ITextItemView::GetText(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	bool TextItemStyleProvider::ITextItemView::GetChecked(signed __int32 itemIndex);
	{
		throw 0;
	}
	
	void TextItemStyleProvider::ITextItemView::SetCheckedSilently(signed __int32 itemIndex, bool value);
	{
		throw 0;
	}
	
	rptr<TextItemStyleProvider :: ITextItemView> TextItemStyleProvider::ITextItemView::operator=(rptr<TextItemStyleProvider :: ITextItemView> value);
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() TextItemStyleProvider::ITextItemView::get_Identifier();
	{
		throw 0;
	}
	void TextItemStyleProvider::ITextItemView::set_Identifier(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	

/***********************************************************************
TextItemStyleProvider :: TextItemStyleController
***********************************************************************/

	rptr<TextItemStyleProvider :: TextItemStyleController> TextItemStyleProvider::TextItemStyleController::Create(rptr<TextItemStyleProvider> provider);
	{
		throw 0;
	}
	
	rptr<TextItemStyleProvider :: TextItemStyleController> TextItemStyleProvider::TextItemStyleController::operator=(rptr<TextItemStyleProvider :: TextItemStyleController> value);
	{
		throw 0;
	}
	
	bool TextItemStyleProvider::TextItemStyleController::GetSelected();
	{
		throw 0;
	}
	void TextItemStyleProvider::TextItemStyleController::SetSelected(bool value);
	{
		throw 0;
	}
	
	bool TextItemStyleProvider::TextItemStyleController::GetChecked();
	{
		throw 0;
	}
	void TextItemStyleProvider::TextItemStyleController::SetChecked(bool value);
	{
		throw 0;
	}
	
	const GacString& TextItemStyleProvider::TextItemStyleController::GetText();
	{
		throw 0;
	}
	void TextItemStyleProvider::TextItemStyleController::SetText(const GacString& value);
	{
		throw 0;
	}
	
	bool TextItemStyleProvider::TextItemStyleController::GetSelected();
	{
		throw 0;
	}
	void TextItemStyleProvider::TextItemStyleController::SetSelected(bool value);
	{
		throw 0;
	}
	
	bool TextItemStyleProvider::TextItemStyleController::GetChecked();
	{
		throw 0;
	}
	void TextItemStyleProvider::TextItemStyleController::SetChecked(bool value);
	{
		throw 0;
	}
	
	const GacString& TextItemStyleProvider::TextItemStyleController::GetText();
	{
		throw 0;
	}
	void TextItemStyleProvider::TextItemStyleController::SetText(const GacString& value);
	{
		throw 0;
	}
	

/***********************************************************************
TextLine
***********************************************************************/

	rptr<TextLine> TextLine::Create();
	{
		throw 0;
	}
	T::e::x::t::L::i::n::e::TextLine();
	{
		throw 0;
	}
	
	bool TextLine::operator==(constTextLine& value);
	{
		throw 0;
	}
	
	bool TextLine::operator!=(constTextLine& value);
	{
		throw 0;
	}
	
	void TextLine::Initialize();
	{
		throw 0;
	}
	
	void TextLine::Finalize();
	{
		throw 0;
	}
	
	bool TextLine::IsReady();
	{
		throw 0;
	}
	
	bool TextLine::Modify(signed __int32 start, signed __int32 count, wchar_t->GetPointerType() input, signed __int32 inputCount);
	{
		throw 0;
	}
	
	TextLine TextLine::Split(signed __int32 index);
	{
		throw 0;
	}
	
	void TextLine::AppendAndFinalize(TextLine& line);
	{
		throw 0;
	}
	
	signed __int32 TextLine::CalculateBufferLength(signed __int32 dataLength);
	{
		throw 0;
	}
	
	wchar_t->GetPointerType() TextLine::get_text();
	{
		throw 0;
	}
	void TextLine::set_text(wchar_t->GetPointerType() value);
	{
		throw 0;
	}
	
	rptr<CharAtt> TextLine::get_att();
	{
		throw 0;
	}
	void TextLine::set_att(rptr<CharAtt> value);
	{
		throw 0;
	}
	
	signed __int32 TextLine::get_availableOffsetCount();
	{
		throw 0;
	}
	void TextLine::set_availableOffsetCount(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 TextLine::get_bufferLength();
	{
		throw 0;
	}
	void TextLine::set_bufferLength(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 TextLine::get_dataLength();
	{
		throw 0;
	}
	void TextLine::set_dataLength(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
TextLines
***********************************************************************/

	rptr<TextLines> TextLines::Create();
	{
		throw 0;
	}
	T::e::x::t::L::i::n::e::s::TextLines();
	{
		throw 0;
	}
	
	TextLine& TextLines::GetLine(signed __int32 row);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> TextLines::GetText(TextPos start, TextPos end);
	{
		throw 0;
	}
	
	bool TextLines::RemoveLines(signed __int32 start, signed __int32 count);
	{
		throw 0;
	}
	
	bool TextLines::IsAvailable(TextPos pos);
	{
		throw 0;
	}
	
	TextPos TextLines::Normalize(TextPos pos);
	{
		throw 0;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, const GacString& input);
	{
		throw 0;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t->GetPointerType() input);
	{
		throw 0;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t->GetPointerType() input, signed __int32 inputCount);
	{
		throw 0;
	}
	
	TextPos TextLines::Modify(TextPos start, TextPos end, wchar_t->GetPointerType()->GetPointerType() inputs, signed __int32->GetPointerType() inputCounts, signed __int32 rows);
	{
		throw 0;
	}
	
	void TextLines::Clear();
	{
		throw 0;
	}
	
	void TextLines::ClearMeasurement();
	{
		throw 0;
	}
	
	void TextLines::MeasureRow(signed __int32 row);
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetRowWidth(signed __int32 row);
	{
		throw 0;
	}
	
	TextPos TextLines::GetTextPosFromPoint(Point point);
	{
		throw 0;
	}
	
	Point TextLines::GetPointFromTextPos(TextPos pos);
	{
		throw 0;
	}
	
	Rect TextLines::GetRectFromTextPos(TextPos pos);
	{
		throw 0;
	}
	
	TextLines& TextLines::operator=(constTextLines& value);
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetCount();
	{
		throw 0;
	}
	
	rptr<CharMeasurer> TextLines::GetCharMeasurer();
	{
		throw 0;
	}
	void TextLines::SetCharMeasurer(rptr<CharMeasurer> value);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> TextLines::GetRenderTarget();
	{
		throw 0;
	}
	void TextLines::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> TextLines::GetText();
	{
		throw 0;
	}
	void TextLines::SetText(const GacString& value);
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetTabSpaceCount();
	{
		throw 0;
	}
	void TextLines::SetTabSpaceCount(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetRowHeight();
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetMaxWidth();
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetMaxHeight();
	{
		throw 0;
	}
	
	rptr<CharMeasurer> TextLines::GetCharMeasurer();
	{
		throw 0;
	}
	void TextLines::SetCharMeasurer(rptr<CharMeasurer> value);
	{
		throw 0;
	}
	
	rptr<IGuiGraphicsRenderTarget> TextLines::GetRenderTarget();
	{
		throw 0;
	}
	void TextLines::SetRenderTarget(rptr<IGuiGraphicsRenderTarget> value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> TextLines::GetText();
	{
		throw 0;
	}
	void TextLines::SetText(const GacString& value);
	{
		throw 0;
	}
	
	signed __int32 TextLines::GetTabSpaceCount();
	{
		throw 0;
	}
	void TextLines::SetTabSpaceCount(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
TextPos
***********************************************************************/

	rptr<TextPos> TextPos::Create(signed __int32 _row, signed __int32 _column);
	{
		throw 0;
	}
	T::e::x::t::P::o::s::TextPos(signed __int32 _row, signed __int32 _column);
	{
		throw 0;
	}
	
	rptr<TextPos> TextPos::Create();
	{
		throw 0;
	}
	T::e::x::t::P::o::s::TextPos();
	{
		throw 0;
	}
	
	signed __int32 TextPos::Compare(constTextPos& value);
	{
		throw 0;
	}
	
	bool TextPos::operator==(constTextPos& value);
	{
		throw 0;
	}
	
	bool TextPos::operator!=(constTextPos& value);
	{
		throw 0;
	}
	
	bool TextPos::operator<(constTextPos& value);
	{
		throw 0;
	}
	
	bool TextPos::operator<=(constTextPos& value);
	{
		throw 0;
	}
	
	bool TextPos::operator>(constTextPos& value);
	{
		throw 0;
	}
	
	bool TextPos::operator>=(constTextPos& value);
	{
		throw 0;
	}
	
	signed __int32 TextPos::get_row();
	{
		throw 0;
	}
	void TextPos::set_row(signed __int32 value);
	{
		throw 0;
	}
	
	signed __int32 TextPos::get_column();
	{
		throw 0;
	}
	void TextPos::set_column(signed __int32 value);
	{
		throw 0;
	}
	

/***********************************************************************
TreeViewItem
***********************************************************************/

	rptr<TreeViewItem> TreeViewItem::Create(sptr<GuiImageData> _image, const GacString& _text);
	{
		throw 0;
	}
	
	rptr<TreeViewItem> TreeViewItem::Create();
	{
		throw 0;
	}
	
	rptr<TreeViewItem> TreeViewItem::operator=(rptr<TreeViewItem> value);
	{
		throw 0;
	}
	
	sptr<GuiImageData> TreeViewItem::get_image();
	{
		throw 0;
	}
	void TreeViewItem::set_image(sptr<GuiImageData> value);
	{
		throw 0;
	}
	
	vl::ObjectString<wchar_t> TreeViewItem::get_text();
	{
		throw 0;
	}
	void TreeViewItem::set_text(vl::ObjectString<wchar_t> value);
	{
		throw 0;
	}
	

/***********************************************************************
TreeViewItemRootProvider
***********************************************************************/

	rptr<TreeViewItemRootProvider> TreeViewItemRootProvider::Create();
	{
		throw 0;
	}
	
	rptr<IDescriptable> TreeViewItemRootProvider::RequestView(const GacString& identifier);
	{
		throw 0;
	}
	
	void TreeViewItemRootProvider::ReleaseView(rptr<IDescriptable> view);
	{
		throw 0;
	}
	
	rptr<TreeViewItemRootProvider> TreeViewItemRootProvider::operator=(rptr<TreeViewItemRootProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
TreeViewNodeItemStyleProvider
***********************************************************************/

	rptr<TreeViewNodeItemStyleProvider> TreeViewNodeItemStyleProvider::Create();
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::BindItemStyleProvider(rptr<GuiListControl :: IItemStyleProvider> styleProvider);
	{
		throw 0;
	}
	
	rptr<GuiListControl :: IItemStyleProvider> TreeViewNodeItemStyleProvider::GetBindedItemStyleProvider();
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::AttachListControl(rptr<GuiListControl> value);
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::DetachListControl();
	{
		throw 0;
	}
	
	signed __int32 TreeViewNodeItemStyleProvider::GetItemStyleId(rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	rptr<INodeItemStyleController> TreeViewNodeItemStyleProvider::CreateItemStyle(signed __int32 styleId);
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::DestroyItemStyle(rptr<INodeItemStyleController> style);
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::Install(rptr<INodeItemStyleController> style, rptr<INodeProvider> node);
	{
		throw 0;
	}
	
	void TreeViewNodeItemStyleProvider::SetStyleSelected(rptr<INodeItemStyleController> style, bool value);
	{
		throw 0;
	}
	
	rptr<TreeViewNodeItemStyleProvider> TreeViewNodeItemStyleProvider::operator=(rptr<TreeViewNodeItemStyleProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ButtonColors
***********************************************************************/

	rptr<Win7ButtonColors> Win7ButtonColors::Create();
	{
		throw 0;
	}
	W::i::n::7::B::u::t::t::o::n::C::o::l::o::r::s::Win7ButtonColors();
	{
		throw 0;
	}
	
	bool Win7ButtonColors::operator==(constWin7ButtonColors& colors);
	{
		throw 0;
	}
	
	bool Win7ButtonColors::operator!=(constWin7ButtonColors& colors);
	{
		throw 0;
	}
	
	void Win7ButtonColors::SetAlphaWithoutText(unsigned __int8 a);
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::Blend(constWin7ButtonColors& c1, constWin7ButtonColors& c2, signed __int32 ratio, signed __int32 total);
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonNormal();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonActive();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonPressed();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ButtonDisabled();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemNormal();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemActive();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemSelected();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ItemDisabled();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedNormal(bool selected);
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedActive(bool selected);
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedPressed(bool selected);
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::CheckedDisabled(bool selected);
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonNormal();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonActive();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonPressed();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::ToolstripButtonDisabled();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonNormal();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonActive();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonPressed();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuBarButtonDisabled();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonNormal();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonNormalActive();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonDisabled();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::MenuItemButtonDisabledActive();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderNormal();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderActive();
	{
		throw 0;
	}
	
	Win7ButtonColors Win7ButtonColors::TabPageHeaderSelected();
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_borderColor();
	{
		throw 0;
	}
	void Win7ButtonColors::set_borderColor(Color value);
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_backgroundColor();
	{
		throw 0;
	}
	void Win7ButtonColors::set_backgroundColor(Color value);
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_g1();
	{
		throw 0;
	}
	void Win7ButtonColors::set_g1(Color value);
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_g2();
	{
		throw 0;
	}
	void Win7ButtonColors::set_g2(Color value);
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_g3();
	{
		throw 0;
	}
	void Win7ButtonColors::set_g3(Color value);
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_g4();
	{
		throw 0;
	}
	void Win7ButtonColors::set_g4(Color value);
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_textColor();
	{
		throw 0;
	}
	void Win7ButtonColors::set_textColor(Color value);
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_bulletLight();
	{
		throw 0;
	}
	void Win7ButtonColors::set_bulletLight(Color value);
	{
		throw 0;
	}
	
	Color Win7ButtonColors::get_bulletDark();
	{
		throw 0;
	}
	void Win7ButtonColors::set_bulletDark(Color value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ButtonStyle
***********************************************************************/

	rptr<Win7ButtonStyle> Win7ButtonStyle::Create(bool verticalGradient);
	{
		throw 0;
	}
	
	rptr<Win7ButtonStyle> Win7ButtonStyle::operator=(rptr<Win7ButtonStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ButtonStyleBase
***********************************************************************/

	rptr<GuiBoundsComposition> Win7ButtonStyleBase::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7ButtonStyleBase::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::SetSelected(bool value);
	{
		throw 0;
	}
	
	void Win7ButtonStyleBase::Transfer(GuiButton :: ControlState value);
	{
		throw 0;
	}
	
	rptr<Win7ButtonStyleBase> Win7ButtonStyleBase::operator=(rptr<Win7ButtonStyleBase> value);
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetTransparentWhenInactive();
	{
		throw 0;
	}
	void Win7ButtonStyleBase::SetTransparentWhenInactive(bool value);
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetTransparentWhenDisabled();
	{
		throw 0;
	}
	void Win7ButtonStyleBase::SetTransparentWhenDisabled(bool value);
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetAutoSizeForText();
	{
		throw 0;
	}
	void Win7ButtonStyleBase::SetAutoSizeForText(bool value);
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetTransparentWhenInactive();
	{
		throw 0;
	}
	void Win7ButtonStyleBase::SetTransparentWhenInactive(bool value);
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetTransparentWhenDisabled();
	{
		throw 0;
	}
	void Win7ButtonStyleBase::SetTransparentWhenDisabled(bool value);
	{
		throw 0;
	}
	
	bool Win7ButtonStyleBase::GetAutoSizeForText();
	{
		throw 0;
	}
	void Win7ButtonStyleBase::SetAutoSizeForText(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7CheckBoxStyle
***********************************************************************/

	rptr<Win7CheckBoxStyle> Win7CheckBoxStyle::Create(Win7CheckBoxStyle :: BulletStyle bulletStyle, bool backgroundVisible);
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7CheckBoxStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7CheckBoxStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::SetSelected(bool value);
	{
		throw 0;
	}
	
	void Win7CheckBoxStyle::Transfer(GuiButton :: ControlState value);
	{
		throw 0;
	}
	
	rptr<Win7CheckBoxStyle> Win7CheckBoxStyle::operator=(rptr<Win7CheckBoxStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7CheckTextListProvider
***********************************************************************/

	rptr<Win7CheckTextListProvider> Win7CheckTextListProvider::Create();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7CheckTextListProvider::CreateBulletStyleController();
	{
		throw 0;
	}
	
	rptr<Win7CheckTextListProvider> Win7CheckTextListProvider::operator=(rptr<Win7CheckTextListProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7DropDownComboBoxStyle
***********************************************************************/

	rptr<Win7DropDownComboBoxStyle> Win7DropDownComboBoxStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7DropDownComboBoxStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::SetCommandExecutor(rptr<GuiComboBoxBase :: ICommandExecutor> value);
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::OnClicked();
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::OnPopupOpened();
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::OnPopupClosed();
	{
		throw 0;
	}
	
	void Win7DropDownComboBoxStyle::OnItemSelected();
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> Win7DropDownComboBoxStyle::CreatePopupStyle();
	{
		throw 0;
	}
	
	rptr<Win7DropDownComboBoxStyle> Win7DropDownComboBoxStyle::operator=(rptr<Win7DropDownComboBoxStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7EmptyStyle
***********************************************************************/

	rptr<Win7EmptyStyle> Win7EmptyStyle::Create(Color color);
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7EmptyStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7EmptyStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7EmptyStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7EmptyStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7EmptyStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7EmptyStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<Win7EmptyStyle> Win7EmptyStyle::operator=(rptr<Win7EmptyStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7GroupBoxStyle
***********************************************************************/

	rptr<Win7GroupBoxStyle> Win7GroupBoxStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7GroupBoxStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7GroupBoxStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7GroupBoxStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7GroupBoxStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7GroupBoxStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7GroupBoxStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<Win7GroupBoxStyle> Win7GroupBoxStyle::operator=(rptr<Win7GroupBoxStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ListViewColumnDropDownStyle
***********************************************************************/

	rptr<Win7ListViewColumnDropDownStyle> Win7ListViewColumnDropDownStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7ListViewColumnDropDownStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7ListViewColumnDropDownStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::SetSelected(bool value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnDropDownStyle::Transfer(GuiButton :: ControlState value);
	{
		throw 0;
	}
	
	rptr<Win7ListViewColumnDropDownStyle> Win7ListViewColumnDropDownStyle::operator=(rptr<Win7ListViewColumnDropDownStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ListViewColumnHeaderStyle
***********************************************************************/

	rptr<Win7ListViewColumnHeaderStyle> Win7ListViewColumnHeaderStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7ListViewColumnHeaderStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7ListViewColumnHeaderStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::SetSelected(bool value);
	{
		throw 0;
	}
	
	void Win7ListViewColumnHeaderStyle::Transfer(GuiButton :: ControlState value);
	{
		throw 0;
	}
	
	rptr<Win7ListViewColumnHeaderStyle> Win7ListViewColumnHeaderStyle::operator=(rptr<Win7ListViewColumnHeaderStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ListViewProvider
***********************************************************************/

	rptr<Win7ListViewProvider> Win7ListViewProvider::Create();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7ListViewProvider::CreateItemBackground();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7ListViewProvider::CreateColumnStyle();
	{
		throw 0;
	}
	
	Color Win7ListViewProvider::GetPrimaryTextColor();
	{
		throw 0;
	}
	
	Color Win7ListViewProvider::GetSecondaryTextColor();
	{
		throw 0;
	}
	
	Color Win7ListViewProvider::GetItemSeparatorColor();
	{
		throw 0;
	}
	
	rptr<Win7ListViewProvider> Win7ListViewProvider::operator=(rptr<Win7ListViewProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuBarButtonStyle
***********************************************************************/

	rptr<Win7MenuBarButtonStyle> Win7MenuBarButtonStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuBarButtonStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuBarButtonStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> Win7MenuBarButtonStyle::CreateSubMenuStyleController();
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetSubMenuExisting(bool value);
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::SetSubMenuOpening(bool value);
	{
		throw 0;
	}
	
	void Win7MenuBarButtonStyle::Transfer(GuiButton :: ControlState value);
	{
		throw 0;
	}
	
	rptr<Win7MenuBarButtonStyle> Win7MenuBarButtonStyle::operator=(rptr<Win7MenuBarButtonStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuBarStyle
***********************************************************************/

	rptr<Win7MenuBarStyle> Win7MenuBarStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuBarStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuBarStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7MenuBarStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7MenuBarStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7MenuBarStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7MenuBarStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<Win7MenuBarStyle> Win7MenuBarStyle::operator=(rptr<Win7MenuBarStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuItemButtonStyle
***********************************************************************/

	rptr<Win7MenuItemButtonStyle> Win7MenuItemButtonStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuItemButtonStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuItemButtonStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> Win7MenuItemButtonStyle::CreateSubMenuStyleController();
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetSubMenuExisting(bool value);
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::SetSubMenuOpening(bool value);
	{
		throw 0;
	}
	
	void Win7MenuItemButtonStyle::Transfer(GuiButton :: ControlState value);
	{
		throw 0;
	}
	
	rptr<Win7MenuItemButtonStyle> Win7MenuItemButtonStyle::operator=(rptr<Win7MenuItemButtonStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuSplitterStyle
***********************************************************************/

	rptr<Win7MenuSplitterStyle> Win7MenuSplitterStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuSplitterStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuSplitterStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7MenuSplitterStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7MenuSplitterStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7MenuSplitterStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7MenuSplitterStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<Win7MenuSplitterStyle> Win7MenuSplitterStyle::operator=(rptr<Win7MenuSplitterStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7MenuStyle
***********************************************************************/

	rptr<Win7MenuStyle> Win7MenuStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7MenuStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MenuStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7MenuStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7MenuStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7MenuStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7MenuStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<Win7MenuStyle> Win7MenuStyle::operator=(rptr<Win7MenuStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7MultilineTextBoxProvider
***********************************************************************/

	rptr<Win7MultilineTextBoxProvider> Win7MultilineTextBoxProvider::Create();
	{
		throw 0;
	}
	
	void Win7MultilineTextBoxProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller);
	{
		throw 0;
	}
	
	void Win7MultilineTextBoxProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7MultilineTextBoxProvider::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7MultilineTextBoxProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
	{
		throw 0;
	}
	
	rptr<Win7MultilineTextBoxProvider> Win7MultilineTextBoxProvider::operator=(rptr<Win7MultilineTextBoxProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7RadioTextListProvider
***********************************************************************/

	rptr<Win7RadioTextListProvider> Win7RadioTextListProvider::Create();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7RadioTextListProvider::CreateBulletStyleController();
	{
		throw 0;
	}
	
	rptr<Win7RadioTextListProvider> Win7RadioTextListProvider::operator=(rptr<Win7RadioTextListProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ScrollStyle
***********************************************************************/

	rptr<Win7ScrollStyle> Win7ScrollStyle::Create(CommonScrollStyle :: Direction _direction);
	{
		throw 0;
	}
	
	rptr<Win7ScrollStyle> Win7ScrollStyle::operator=(rptr<Win7ScrollStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ScrollViewProvider
***********************************************************************/

	rptr<Win7ScrollViewProvider> Win7ScrollViewProvider::Create();
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller);
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7ScrollViewProvider::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiScroll :: IStyleController> Win7ScrollViewProvider::CreateHorizontalScrollStyle();
	{
		throw 0;
	}
	
	rptr<GuiScroll :: IStyleController> Win7ScrollViewProvider::CreateVerticalScrollStyle();
	{
		throw 0;
	}
	
	signed __int32 Win7ScrollViewProvider::GetDefaultScrollSize();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7ScrollViewProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
	{
		throw 0;
	}
	
	rptr<Win7ScrollViewProvider> Win7ScrollViewProvider::operator=(rptr<Win7ScrollViewProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7SelectableItemStyle
***********************************************************************/

	rptr<Win7SelectableItemStyle> Win7SelectableItemStyle::Create();
	{
		throw 0;
	}
	
	rptr<Win7SelectableItemStyle> Win7SelectableItemStyle::operator=(rptr<Win7SelectableItemStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7SinglelineTextBoxProvider
***********************************************************************/

	rptr<Win7SinglelineTextBoxProvider> Win7SinglelineTextBoxProvider::Create();
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::AssociateStyleController(rptr<GuiControl :: IStyleController> controller);
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7SinglelineTextBoxProvider::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7SinglelineTextBoxProvider::InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
	{
		throw 0;
	}
	
	rptr<Win7SinglelineTextBoxProvider> Win7SinglelineTextBoxProvider::operator=(rptr<Win7SinglelineTextBoxProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7TabPageHeaderStyle
***********************************************************************/

	rptr<Win7TabPageHeaderStyle> Win7TabPageHeaderStyle::Create();
	{
		throw 0;
	}
	
	void Win7TabPageHeaderStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	rptr<Win7TabPageHeaderStyle> Win7TabPageHeaderStyle::operator=(rptr<Win7TabPageHeaderStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7TabStyle
***********************************************************************/

	rptr<Win7TabStyle> Win7TabStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7TabStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7TabStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7TabStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7TabStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7TabStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7TabStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	void Win7TabStyle::SetCommandExecutor(rptr<GuiTab :: ICommandExecutor> value);
	{
		throw 0;
	}
	
	void Win7TabStyle::InsertTab(signed __int32 index);
	{
		throw 0;
	}
	
	void Win7TabStyle::SetTabText(signed __int32 index, const GacString& value);
	{
		throw 0;
	}
	
	void Win7TabStyle::RemoveTab(signed __int32 index);
	{
		throw 0;
	}
	
	void Win7TabStyle::MoveTab(signed __int32 oldIndex, signed __int32 newIndex);
	{
		throw 0;
	}
	
	void Win7TabStyle::SetSelectedTab(signed __int32 index);
	{
		throw 0;
	}
	
	rptr<GuiControl :: IStyleController> Win7TabStyle::CreateTabPageStyleController();
	{
		throw 0;
	}
	
	rptr<Win7TabStyle> Win7TabStyle::operator=(rptr<Win7TabStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7TextBoxBackground
***********************************************************************/

	rptr<Win7TextBoxBackground> Win7TextBoxBackground::Create();
	{
		throw 0;
	}
	
	void Win7TextBoxBackground::AssociateStyleController(rptr<GuiControl :: IStyleController> controller);
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7TextBoxBackground::InstallBackground(rptr<GuiBoundsComposition> boundsComposition);
	{
		throw 0;
	}
	
	void Win7TextBoxBackground::InitializeTextElement(rptr<GuiColorizedTextElement> _textElement);
	{
		throw 0;
	}
	
	rptr<Win7TextBoxBackground> Win7TextBoxBackground::operator=(rptr<Win7TextBoxBackground> value);
	{
		throw 0;
	}
	
	void Win7TextBoxBackground::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7TextBoxBackground::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7TextListProvider
***********************************************************************/

	rptr<Win7TextListProvider> Win7TextListProvider::Create();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7TextListProvider::CreateBackgroundStyleController();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7TextListProvider::CreateBulletStyleController();
	{
		throw 0;
	}
	
	rptr<Win7TextListProvider> Win7TextListProvider::operator=(rptr<Win7TextListProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7ToolstripButtonStyle
***********************************************************************/

	rptr<Win7ToolstripButtonStyle> Win7ToolstripButtonStyle::Create(bool transparent);
	{
		throw 0;
	}
	
	rptr<Win7ToolstripButtonStyle> Win7ToolstripButtonStyle::operator=(rptr<Win7ToolstripButtonStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7TrackStyle
***********************************************************************/

	rptr<Win7TrackStyle> Win7TrackStyle::Create(CommonTrackStyle :: Direction _direction);
	{
		throw 0;
	}
	
	rptr<Win7TrackStyle> Win7TrackStyle::operator=(rptr<Win7TrackStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7TreeViewExpandingButtonStyle
***********************************************************************/

	rptr<Win7TreeViewExpandingButtonStyle> Win7TreeViewExpandingButtonStyle::Create();
	{
		throw 0;
	}
	
	rptr<GuiBoundsComposition> Win7TreeViewExpandingButtonStyle::GetBoundsComposition();
	{
		throw 0;
	}
	
	rptr<GuiGraphicsComposition> Win7TreeViewExpandingButtonStyle::GetContainerComposition();
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetFocusableComposition(rptr<GuiGraphicsComposition> value);
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetText(const GacString& value);
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetFont(constFontProperties& value);
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetVisuallyEnabled(bool value);
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::SetSelected(bool value);
	{
		throw 0;
	}
	
	void Win7TreeViewExpandingButtonStyle::Transfer(GuiButton :: ControlState value);
	{
		throw 0;
	}
	
	rptr<Win7TreeViewExpandingButtonStyle> Win7TreeViewExpandingButtonStyle::operator=(rptr<Win7TreeViewExpandingButtonStyle> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7TreeViewProvider
***********************************************************************/

	rptr<Win7TreeViewProvider> Win7TreeViewProvider::Create();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7TreeViewProvider::CreateItemBackground();
	{
		throw 0;
	}
	
	rptr<GuiSelectableButton :: IStyleController> Win7TreeViewProvider::CreateItemExpandingDecorator();
	{
		throw 0;
	}
	
	Color Win7TreeViewProvider::GetTextColor();
	{
		throw 0;
	}
	
	rptr<Win7TreeViewProvider> Win7TreeViewProvider::operator=(rptr<Win7TreeViewProvider> value);
	{
		throw 0;
	}
	

/***********************************************************************
Win7WindowStyle
***********************************************************************/

	rptr<Win7WindowStyle> Win7WindowStyle::Create();
	{
		throw 0;
	}
	
	rptr<Win7WindowStyle> Win7WindowStyle::operator=(rptr<Win7WindowStyle> value);
	{
		throw 0;
	}
	
}
