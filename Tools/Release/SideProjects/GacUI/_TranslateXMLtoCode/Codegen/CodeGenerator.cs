using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace _TranslateXMLtoCode.Codegen
{
    abstract class CodeGenerator : IDisposable
    {
        public StreamWriter Writer { get; private set; }
        public string FileName { get; private set; }
        public Exception Error { get; private set; }

        protected abstract void GenerateCodeInternal();

        #region API

        private int indentation = 0;

        private void WriteIndentation()
        {
            for (int i = 0; i < indentation; i++)
            {
                this.Writer.Write("\t");
            }
        }

        protected void WriteLine(string text, params object[] args)
        {
            WriteIndentation();
            if (args.Length == 0)
            {
                this.Writer.WriteLine(text);
            }
            else
            {
                this.Writer.WriteLine(text, args);
            }
        }

        protected void Begin(string text)
        {
            WriteLine(text);
            indentation++;
        }

        protected void End(string text)
        {
            indentation--;
            WriteLine(text);
        }

        protected void WriteSectionComment(string line)
        {
            this.Writer.WriteLine("");
            this.Writer.WriteLine("/***********************************************************************");
            this.Writer.WriteLine(line);
            this.Writer.WriteLine("***********************************************************************/");
            this.Writer.WriteLine("");
        }

        #endregion

        public CodeGenerator(string fileName)
        {
            this.FileName = fileName;
            try
            {
                this.Writer = new StreamWriter(fileName, false, Encoding.UTF8);
            }
            catch (Exception ex)
            {
                this.Error = ex;
            }
        }

        public bool CanWrite
        {
            get
            {
                return this.Writer != null;
            }
        }

        public void Dispose()
        {
            if (this.Writer != null)
            {
                this.Writer.Flush();
                this.Writer.Dispose();
            }
        }

        public void GenerateCode()
        {
            this.Writer.WriteLine("/***********************************************************************");
            this.Writer.WriteLine("DO NOT MODIFY!!!");
            this.Writer.WriteLine("THIS FILE IS AUTO GENERATED BY _TranslateXMLtoCode.exe");
            this.Writer.WriteLine("");
            this.Writer.WriteLine("Developer: 陈梓瀚(vczh)");
            this.Writer.WriteLine("***********************************************************************/");
            this.Writer.WriteLine("");
            GenerateCodeInternal();
        }
    }

    class CodeGeneratorOptions : ReflectedTypeAnalyzerResult
    {
        public string ReflectionPath { get; set; }
        public string GacuiPath { get; set; }
    }
}
