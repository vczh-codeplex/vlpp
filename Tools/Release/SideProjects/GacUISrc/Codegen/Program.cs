using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml.Linq;
using System.Text.RegularExpressions;

namespace Codegen
{
    class Program
    {
        static string[] GetCppFiles(string projectFile)
        {
            string np = @"http://schemas.microsoft.com/developer/msbuild/2003";
            XDocument document = XDocument.Load(projectFile);
            return document
                .Root
                .Elements(XName.Get("ItemGroup", np))
                .SelectMany(e => e.Elements(XName.Get("ClCompile", np)))
                .Select(e => e.Attribute("Include").Value)
                .ToArray();
        }

        static Dictionary<string, string[]> ScannedFiles = new Dictionary<string, string[]>();
        static Regex IncludeRegex = new Regex(@"^\s*\#include\s*""(?<path>[^""]+)""\s*$");
        static Regex IncludeSystemRegex = new Regex(@"^\s*\#include\s*\<(?<path>[^""]+)\>\s*$");

        static string[] GetIncludedFiles(string codeFile)
        {
            codeFile = Path.GetFullPath(codeFile).ToUpper();
            string[] result = null;
            if (!ScannedFiles.TryGetValue(codeFile, out result))
            {
                List<string> directIncludeFiles = new List<string>();
                foreach (var line in File.ReadAllLines(codeFile))
                {
                    Match match = IncludeRegex.Match(line);
                    if (match.Success)
                    {
                        string path = match.Groups["path"].Value;
                        path = Path.GetFullPath(Path.GetDirectoryName(codeFile) + @"\" + path).ToUpper();
                        if (!directIncludeFiles.Contains(path))
                        {
                            directIncludeFiles.Add(path);
                        }
                    }
                }

                for (int i = directIncludeFiles.Count - 1; i >= 0; i--)
                {
                    directIncludeFiles.InsertRange(i, GetIncludedFiles(directIncludeFiles[i]));
                }
                result = directIncludeFiles.Distinct().ToArray();
                ScannedFiles.Add(codeFile, result);
            }
            return result;
        }

        static void Combine(string[] files, string outputFilename, HashSet<string> systemIncludes, params string[] externalIncludes)
        {
            try
            {
                using (StreamWriter writer = new StreamWriter(new FileStream(outputFilename, FileMode.Create), Encoding.Default))
                {
                    writer.WriteLine("/***********************************************************************");
                    writer.WriteLine("THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY");
                    writer.WriteLine("DEVELOPER: 陈梓瀚(vczh)");
                    writer.WriteLine("***********************************************************************/");
                    foreach (var inc in externalIncludes)
                    {
                        writer.WriteLine("#include \"{0}\"", inc);
                    }

                    foreach (var file in files)
                    {
                        writer.WriteLine("");
                        writer.WriteLine("/***********************************************************************");
                        writer.WriteLine(file);
                        writer.WriteLine("***********************************************************************/");
                        foreach (var line in File.ReadAllLines(file, Encoding.Default))
                        {
                            Match match = null;

                            match = IncludeSystemRegex.Match(line);
                            if (match.Success)
                            {
                                if (systemIncludes.Add(match.Groups["path"].Value.ToUpper()))
                                {
                                    writer.WriteLine(line);
                                }
                            }
                            else
                            {
                                match = IncludeRegex.Match(line);
                                if (!match.Success)
                                {
                                    writer.WriteLine(line);
                                }
                            }
                        }
                    }
                }
                Console.WriteLine("Succeeded to write: {0}", outputFilename);
            }
            catch (Exception)
            {
                Console.WriteLine("Failed to write: {0}", outputFilename);
            }
        }

        static void GenerateCode(string outputFolder, string[] cppFiles, string[] cppHeaders, string[] userHeaders)
        {
            HashSet<string> systemIncludes = new HashSet<string>();
            Combine(userHeaders, outputFolder + "GacUI.h", systemIncludes);
            systemIncludes.Clear();
            Combine(cppHeaders, outputFolder + "GacUIFullFeatures.h", systemIncludes);
            Combine(cppFiles, outputFolder + "GacUI.cpp", systemIncludes, "GacUIFullFeatures.h");
        }

        static void Main(string[] args)
        {
            string solutionFolder = Path.GetDirectoryName(typeof(Program).Assembly.Location) + @"\..\..\..\";
            string projectFile = solutionFolder + @"GacUISrc\GacUISrc.vcxproj";
            string[] cppFiles = GetCppFiles(projectFile)
                .Select(s => Path.GetDirectoryName(projectFile) + @"\" + s)
                .Select(Path.GetFullPath)
                .Where(s =>
                    {
                        string filename = Path.GetFileName(s).ToUpper();
                        return filename != "MAIN.CPP"
                            && filename != "GACUI_WINMAIN.CPP"
                            && filename != "GUITYPEDESCRIPTORIMPHELPER.CPP"
                            && filename != "GUITYPEDESCRIPTORIMPPROVIDER_CODEGEN.CPP"
                            ;
                    })
                .ToArray();

            foreach (var cpp in cppFiles)
            {
                Console.WriteLine(cpp);
                GetIncludedFiles(cpp);
            }

            string gacuiHeader = Path.GetFullPath(solutionFolder + @"GacUILibrary\GacUI.h").ToUpper();
            string[] cppHeaders = cppFiles.SelectMany(f => GetIncludedFiles(f)).Distinct().ToArray();
            string[] userHeaders = GetIncludedFiles(gacuiHeader).Concat(new string[] { gacuiHeader }).Distinct().ToArray();
            GenerateCode(solutionFolder + @"GacUILibraryExternal\", cppFiles, cppHeaders, userHeaders);
        }
    }
}
